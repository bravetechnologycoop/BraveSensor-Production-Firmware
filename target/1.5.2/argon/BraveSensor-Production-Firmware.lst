
d:/Work/Github-Work/BraveSensor-Production-Firmware/target/1.5.2/argon/BraveSensor-Production-Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004034  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d8050  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000078  2003e408  000d8054  0001e408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000370  2003e480  2003e480  0002e480  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d80cc  000d80cc  000280cc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d80f4  000d80f4  000280f4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000ef82b  00000000  00000000  000280f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001129d  00000000  00000000  00117923  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001fa6a  00000000  00000000  00128bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000024d8  00000000  00000000  0014862a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004820  00000000  00000000  0014ab02  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00033e1b  00000000  00000000  0014f322  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002733c  00000000  00000000  0018313d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001064b9  00000000  00000000  001aa479  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000d124  00000000  00000000  002b0934  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f003 fa33 	bl	d7498 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f003 fa53 	bl	d74e4 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e408 	.word	0x2003e408
   d4048:	000d8054 	.word	0x000d8054
   d404c:	2003e480 	.word	0x2003e480
   d4050:	2003e480 	.word	0x2003e480
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f002 f899 	bl	d6190 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d8044 	.word	0x000d8044
   d4080:	000d8008 	.word	0x000d8008

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b86a 	b.w	d415c <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f875 	bl	d4178 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f002 b83f 	b.w	d6114 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 be3b 	b.w	d4d10 <malloc>

000d409a <_ZdlPv>:
   d409a:	f000 be41 	b.w	d4d20 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 be3f 	b.w	d4d20 <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f000 fd6c 	bl	d4b88 <panic_>
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d49d9 	.word	0x000d49d9

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_ZN5spark10LogHandler5writeEPKcj>:
    if (level >= filter_.level(category)) {
        write(data, size);
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
   d40c8:	4770      	bx	lr

000d40ca <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   d40ca:	6a00      	ldr	r0, [r0, #32]
   d40cc:	6803      	ldr	r3, [r0, #0]
   d40ce:	68db      	ldr	r3, [r3, #12]
   d40d0:	4718      	bx	r3

000d40d2 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40d2:	b510      	push	{r4, lr}
   d40d4:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d40d6:	6800      	ldr	r0, [r0, #0]
   d40d8:	b108      	cbz	r0, d40de <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d40da:	f000 fe21 	bl	d4d20 <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40de:	4620      	mov	r0, r4
   d40e0:	bd10      	pop	{r4, pc}
	...

000d40e4 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d40e4:	4b0a      	ldr	r3, [pc, #40]	; (d4110 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   d40e6:	b510      	push	{r4, lr}
   d40e8:	4604      	mov	r4, r0
   d40ea:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d40ec:	f001 f93a 	bl	d5364 <_ZN5spark10LogManager8instanceEv>
   d40f0:	4621      	mov	r1, r4
   d40f2:	f001 fb27 	bl	d5744 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   d40f6:	f002 fc17 	bl	d6928 <_Z16_fetch_usbserialv>
   d40fa:	f002 fc09 	bl	d6910 <_ZN9USBSerial3endEv>
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d40fe:	4620      	mov	r0, r4
   d4100:	4b04      	ldr	r3, [pc, #16]	; (d4114 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   d4102:	f840 3b04 	str.w	r3, [r0], #4
   d4106:	f001 fa23 	bl	d5550 <_ZN5spark6detail9LogFilterD1Ev>
    }
   d410a:	4620      	mov	r0, r4
   d410c:	bd10      	pop	{r4, pc}
   d410e:	bf00      	nop
   d4110:	000d7774 	.word	0x000d7774
   d4114:	000d775c 	.word	0x000d775c

000d4118 <_ZN5spark16SerialLogHandlerD0Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d4118:	b510      	push	{r4, lr}
   d411a:	4604      	mov	r4, r0
        LogManager::instance()->removeHandler(this);
        Serial.end();
    }
   d411c:	f7ff ffe2 	bl	d40e4 <_ZN5spark16SerialLogHandlerD1Ev>
   d4120:	4620      	mov	r0, r4
   d4122:	2124      	movs	r1, #36	; 0x24
   d4124:	f003 f84e 	bl	d71c4 <_ZdlPvj>
   d4128:	4620      	mov	r0, r4
   d412a:	bd10      	pop	{r4, pc}

000d412c <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d412c:	b40e      	push	{r1, r2, r3}
   d412e:	b500      	push	{lr}
   d4130:	b08c      	sub	sp, #48	; 0x30
   d4132:	aa0d      	add	r2, sp, #52	; 0x34
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d4134:	2320      	movs	r3, #32
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d4136:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list args;
    va_start(args, fmt);
   d413a:	9203      	str	r2, [sp, #12]

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d413c:	e88d 0006 	stmia.w	sp, {r1, r2}
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d4140:	9304      	str	r3, [sp, #16]
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4142:	6801      	ldr	r1, [r0, #0]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d4144:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4146:	aa04      	add	r2, sp, #16
   d4148:	201e      	movs	r0, #30
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d414a:	9305      	str	r3, [sp, #20]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d414c:	f000 fd24 	bl	d4b98 <log_message_v>
inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
    va_end(args);
}
   d4150:	b00c      	add	sp, #48	; 0x30
   d4152:	f85d eb04 	ldr.w	lr, [sp], #4
   d4156:	b003      	add	sp, #12
   d4158:	4770      	bx	lr
	...

000d415c <setup>:
SYSTEM_MODE(AUTOMATIC);

SerialLogHandler LogHandler(LOG_LEVEL_INFO);

// setup() runs once, when the device is first turned on.
void setup() {
   d415c:	b508      	push	{r3, lr}

  //wait three seconds for the log handler to initialize 
  delay(3000);
   d415e:	f640 30b8 	movw	r0, #3000	; 0xbb8
   d4162:	f001 ff89 	bl	d6078 <delay>

  //publish vitals every X seconds
  Particle.publishVitals(60);
   d4166:	213c      	movs	r1, #60	; 0x3c
   d4168:	4802      	ldr	r0, [pc, #8]	; (d4174 <setup+0x18>)

}  //end setup()
   d416a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  //wait three seconds for the log handler to initialize 
  delay(3000);

  //publish vitals every X seconds
  Particle.publishVitals(60);
   d416e:	f002 b883 	b.w	d6278 <_ZN10CloudClass13publishVitalsEm>
   d4172:	bf00      	nop
   d4174:	2003e748 	.word	0x2003e748

000d4178 <loop>:
}  //end setup()


// loop() runs over and over again, as quickly as it can execute.
// it is the arduino substitute for while(1) in main()
void loop() {
   d4178:	b510      	push	{r4, lr}

  static int j = 1;  
  if (j <= 1){
   d417a:	4c08      	ldr	r4, [pc, #32]	; (d419c <loop+0x24>)
   d417c:	6823      	ldr	r3, [r4, #0]
   d417e:	2b01      	cmp	r3, #1
   d4180:	dc05      	bgt.n	d418e <loop+0x16>
    xm132Setup(); 
   d4182:	f000 fa71 	bl	d4668 <_Z10xm132Setupv>
    Log.info("you're looping");
   d4186:	4906      	ldr	r1, [pc, #24]	; (d41a0 <loop+0x28>)
   d4188:	4806      	ldr	r0, [pc, #24]	; (d41a4 <loop+0x2c>)
   d418a:	f7ff ffcf 	bl	d412c <_ZNK5spark6Logger4infoEPKcz>
  } 
  j++;
   d418e:	6823      	ldr	r3, [r4, #0]
   d4190:	3301      	adds	r3, #1
   d4192:	6023      	str	r3, [r4, #0]
  checkXM132();




}
   d4194:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    xm132Setup(); 
    Log.info("you're looping");
  } 
  j++;

  checkXM132();
   d4198:	f000 bb58 	b.w	d484c <_Z10checkXM132v>
   d419c:	2003e408 	.word	0x2003e408
   d41a0:	000d7784 	.word	0x000d7784
   d41a4:	2003e508 	.word	0x2003e508

000d41a8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d41a8:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d41aa:	6804      	ldr	r4, [r0, #0]
   d41ac:	6843      	ldr	r3, [r0, #4]
   d41ae:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d41b0:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d41b2:	fb06 4603 	mla	r6, r6, r3, r4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d41b6:	42a6      	cmp	r6, r4
   d41b8:	d004      	beq.n	d41c4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
    static int nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found);
};

} // namespace spark::detail

class LogCategoryFilter {
   d41ba:	4620      	mov	r0, r4
   d41bc:	f000 fe48 	bl	d4e50 <_ZN6StringD1Ev>
   d41c0:	3414      	adds	r4, #20
   d41c2:	e7f8      	b.n	d41b6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d41c4:	6828      	ldr	r0, [r5, #0]
   d41c6:	f000 fdab 	bl	d4d20 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d41ca:	4628      	mov	r0, r5
   d41cc:	bd70      	pop	{r4, r5, r6, pc}

000d41ce <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d41ce:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d41d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d41d2:	4606      	mov	r6, r0
   d41d4:	460c      	mov	r4, r1
   d41d6:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d41d8:	d916      	bls.n	d4208 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   d41da:	4290      	cmp	r0, r2
   d41dc:	d215      	bcs.n	d420a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            // Move elements in reverse order
            --p;
            --end;
   d41de:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
   d41e2:	1a6c      	subs	r4, r5, r1
   d41e4:	f1a1 0714 	sub.w	r7, r1, #20
   d41e8:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d41ea:	42af      	cmp	r7, r5
   d41ec:	d01c      	beq.n	d4228 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   d41ee:	b12c      	cbz	r4, d41fc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   d41f0:	4629      	mov	r1, r5
   d41f2:	4620      	mov	r0, r4
   d41f4:	f000 fe1c 	bl	d4e30 <_ZN6StringC1EOS_>
   d41f8:	7c2b      	ldrb	r3, [r5, #16]
   d41fa:	7423      	strb	r3, [r4, #16]
   d41fc:	4628      	mov	r0, r5
   d41fe:	f000 fe27 	bl	d4e50 <_ZN6StringD1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d4202:	3d14      	subs	r5, #20
   d4204:	3c14      	subs	r4, #20
   d4206:	e7f0      	b.n	d41ea <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d4208:	d00e      	beq.n	d4228 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   d420a:	42ac      	cmp	r4, r5
   d420c:	d00c      	beq.n	d4228 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   d420e:	b12e      	cbz	r6, d421c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   d4210:	4621      	mov	r1, r4
   d4212:	4630      	mov	r0, r6
   d4214:	f000 fe0c 	bl	d4e30 <_ZN6StringC1EOS_>
   d4218:	7c23      	ldrb	r3, [r4, #16]
   d421a:	7433      	strb	r3, [r6, #16]
   d421c:	4620      	mov	r0, r4
   d421e:	f000 fe17 	bl	d4e50 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d4222:	3414      	adds	r4, #20
   d4224:	3614      	adds	r6, #20
   d4226:	e7f0      	b.n	d420a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
   d4228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d422a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d422a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d422e:	2300      	movs	r3, #0
   d4230:	6003      	str	r3, [r0, #0]
   d4232:	6043      	str	r3, [r0, #4]
   d4234:	6083      	str	r3, [r0, #8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d4236:	684e      	ldr	r6, [r1, #4]
   d4238:	429e      	cmp	r6, r3
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d423a:	4604      	mov	r4, r0
   d423c:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d423e:	dd24      	ble.n	d428a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d4240:	f04f 0814 	mov.w	r8, #20
   d4244:	fb08 f006 	mul.w	r0, r8, r6
   d4248:	f000 fd62 	bl	d4d10 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d424c:	4605      	mov	r5, r0
   d424e:	b1e0      	cbz	r0, d428a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
                return false;
            }
            move(d, data_, data_ + size_);
   d4250:	e894 0006 	ldmia.w	r4, {r1, r2}
   d4254:	fb08 1202 	mla	r2, r8, r2, r1
   d4258:	f7ff ffb9 	bl	d41ce <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d425c:	6820      	ldr	r0, [r4, #0]
   d425e:	f000 fd5f 	bl	d4d20 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d4262:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d4264:	60a6      	str	r6, [r4, #8]
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d4266:	683e      	ldr	r6, [r7, #0]
   d4268:	687b      	ldr	r3, [r7, #4]
   d426a:	fb08 6803 	mla	r8, r8, r3, r6
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d426e:	4546      	cmp	r6, r8
   d4270:	d009      	beq.n	d4286 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
            new(dest) T(*it);
   d4272:	b12d      	cbz	r5, d4280 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x56>
   d4274:	4631      	mov	r1, r6
   d4276:	4628      	mov	r0, r5
   d4278:	f000 fe40 	bl	d4efc <_ZN6StringC1ERKS_>
   d427c:	7c33      	ldrb	r3, [r6, #16]
   d427e:	742b      	strb	r3, [r5, #16]
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d4280:	3614      	adds	r6, #20
   d4282:	3514      	adds	r5, #20
   d4284:	e7f3      	b.n	d426e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
        size_ = vector.size_;
   d4286:	687b      	ldr	r3, [r7, #4]
   d4288:	6063      	str	r3, [r4, #4]
    }
}
   d428a:	4620      	mov	r0, r4
   d428c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4290 <_GLOBAL__sub_I_SystemMode>:




}
   d4290:	b5f0      	push	{r4, r5, r6, r7, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4292:	4d2a      	ldr	r5, [pc, #168]	; (d433c <_GLOBAL__sub_I_SystemMode+0xac>)

#include "xm132.h"

//*************************System/Startup messages for Particle API***********

SYSTEM_MODE(AUTOMATIC);
   d4294:	4e2a      	ldr	r6, [pc, #168]	; (d4340 <_GLOBAL__sub_I_SystemMode+0xb0>)
  checkXM132();




}
   d4296:	b08d      	sub	sp, #52	; 0x34

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4298:	f000 fb8e 	bl	d49b8 <HAL_Pin_Map>
   d429c:	2400      	movs	r4, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d429e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d42a2:	816b      	strh	r3, [r5, #10]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d42a4:	602c      	str	r4, [r5, #0]
   d42a6:	80ac      	strh	r4, [r5, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d42a8:	71ac      	strb	r4, [r5, #6]
   d42aa:	812c      	strh	r4, [r5, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d42ac:	2001      	movs	r0, #1
   d42ae:	f000 fc8b 	bl	d4bc8 <set_system_mode>

#include "xm132.h"

//*************************System/Startup messages for Particle API***********

SYSTEM_MODE(AUTOMATIC);
   d42b2:	4632      	mov	r2, r6
   d42b4:	4923      	ldr	r1, [pc, #140]	; (d4344 <_GLOBAL__sub_I_SystemMode+0xb4>)
   d42b6:	4628      	mov	r0, r5
   d42b8:	f002 ff77 	bl	d71aa <__aeabi_atexit>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d42bc:	9400      	str	r4, [sp, #0]
   d42be:	9401      	str	r4, [sp, #4]
   d42c0:	9402      	str	r4, [sp, #8]
namespace spark {

class SerialLogHandler: public StreamLogHandler {
public:
    explicit SerialLogHandler(LogLevel level = LOG_LEVEL_INFO, LogCategoryFilters filters = {}) :
            StreamLogHandler(Serial, level, filters) {
   d42c2:	f002 fb31 	bl	d6928 <_Z16_fetch_usbserialv>
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
        filter_(level, filters) {
   d42c6:	4c20      	ldr	r4, [pc, #128]	; (d4348 <_GLOBAL__sub_I_SystemMode+0xb8>)
   d42c8:	4607      	mov	r7, r0
   d42ca:	4669      	mov	r1, sp
   d42cc:	a803      	add	r0, sp, #12
   d42ce:	f7ff ffac 	bl	d422a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d42d2:	4625      	mov	r5, r4
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d42d4:	a903      	add	r1, sp, #12
   d42d6:	a806      	add	r0, sp, #24
   d42d8:	f7ff ffa7 	bl	d422a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
        filter_(level, filters) {
   d42dc:	4b1b      	ldr	r3, [pc, #108]	; (d434c <_GLOBAL__sub_I_SystemMode+0xbc>)
   d42de:	f845 3b04 	str.w	r3, [r5], #4
   d42e2:	a906      	add	r1, sp, #24
   d42e4:	a809      	add	r0, sp, #36	; 0x24
   d42e6:	f7ff ffa0 	bl	d422a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d42ea:	aa09      	add	r2, sp, #36	; 0x24
   d42ec:	211e      	movs	r1, #30
   d42ee:	4628      	mov	r0, r5
   d42f0:	f001 fb8f 	bl	d5a12 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d42f4:	a809      	add	r0, sp, #36	; 0x24
   d42f6:	f7ff ff57 	bl	d41a8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d42fa:	a806      	add	r0, sp, #24
   d42fc:	f7ff ff54 	bl	d41a8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d4300:	4b13      	ldr	r3, [pc, #76]	; (d4350 <_GLOBAL__sub_I_SystemMode+0xc0>)
   d4302:	6023      	str	r3, [r4, #0]
   d4304:	6227      	str	r7, [r4, #32]
   d4306:	a803      	add	r0, sp, #12
   d4308:	f7ff ff4e 	bl	d41a8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d430c:	4b11      	ldr	r3, [pc, #68]	; (d4354 <_GLOBAL__sub_I_SystemMode+0xc4>)
   d430e:	6023      	str	r3, [r4, #0]
        Serial.begin();
   d4310:	f002 fb0a 	bl	d6928 <_Z16_fetch_usbserialv>
   d4314:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4318:	f002 faf6 	bl	d6908 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   d431c:	f001 f822 	bl	d5364 <_ZN5spark10LogManager8instanceEv>
   d4320:	4621      	mov	r1, r4
   d4322:	f001 fb09 	bl	d5938 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>

SerialLogHandler LogHandler(LOG_LEVEL_INFO);
   d4326:	4668      	mov	r0, sp
   d4328:	f7ff ff3e 	bl	d41a8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d432c:	4632      	mov	r2, r6
   d432e:	490a      	ldr	r1, [pc, #40]	; (d4358 <_GLOBAL__sub_I_SystemMode+0xc8>)
   d4330:	4620      	mov	r0, r4
   d4332:	f002 ff3a 	bl	d71aa <__aeabi_atexit>
  checkXM132();




}
   d4336:	b00d      	add	sp, #52	; 0x34
   d4338:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d433a:	bf00      	nop
   d433c:	2003e4a8 	.word	0x2003e4a8
   d4340:	2003e480 	.word	0x2003e480
   d4344:	000d40d3 	.word	0x000d40d3
   d4348:	2003e484 	.word	0x2003e484
   d434c:	000d775c 	.word	0x000d775c
   d4350:	000d7ce4 	.word	0x000d7ce4
   d4354:	000d7774 	.word	0x000d7774
   d4358:	000d40e5 	.word	0x000d40e5

000d435c <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>:
    va_start(args, fmt);
    log(level, fmt, args);
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
   d435c:	b510      	push	{r4, lr}
   d435e:	b08a      	sub	sp, #40	; 0x28
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4360:	e88d 000c 	stmia.w	sp, {r2, r3}
    va_start(args, fmt);
    log(level, fmt, args);
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
   d4364:	460c      	mov	r4, r1
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d4366:	2120      	movs	r1, #32
   d4368:	9102      	str	r1, [sp, #8]
    attr.flags = 0;
   d436a:	2100      	movs	r1, #0
   d436c:	9103      	str	r1, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d436e:	460b      	mov	r3, r1
   d4370:	aa02      	add	r2, sp, #8
   d4372:	6801      	ldr	r1, [r0, #0]
   d4374:	4620      	mov	r0, r4
   d4376:	f000 fc0f 	bl	d4b98 <log_message_v>
}
   d437a:	b00a      	add	sp, #40	; 0x28
   d437c:	bd10      	pop	{r4, pc}

000d437e <_ZNK5spark6Logger5errorEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_WARN, fmt, args);
    va_end(args);
}

inline void spark::Logger::error(const char *fmt, ...) const {
   d437e:	b40e      	push	{r1, r2, r3}
   d4380:	b503      	push	{r0, r1, lr}
   d4382:	ab03      	add	r3, sp, #12
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_ERROR, fmt, args);
   d4384:	2132      	movs	r1, #50	; 0x32
    va_start(args, fmt);
    log(LOG_LEVEL_WARN, fmt, args);
    va_end(args);
}

inline void spark::Logger::error(const char *fmt, ...) const {
   d4386:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list args;
    va_start(args, fmt);
   d438a:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_ERROR, fmt, args);
   d438c:	f7ff ffe6 	bl	d435c <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
    va_end(args);
}
   d4390:	b002      	add	sp, #8
   d4392:	f85d eb04 	ldr.w	lr, [sp], #4
   d4396:	b003      	add	sp, #12
   d4398:	4770      	bx	lr

000d439a <_ZNK5spark6Logger4warnEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
    va_end(args);
}

inline void spark::Logger::warn(const char *fmt, ...) const {
   d439a:	b40e      	push	{r1, r2, r3}
   d439c:	b503      	push	{r0, r1, lr}
   d439e:	ab03      	add	r3, sp, #12
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_WARN, fmt, args);
   d43a0:	2128      	movs	r1, #40	; 0x28
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
    va_end(args);
}

inline void spark::Logger::warn(const char *fmt, ...) const {
   d43a2:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list args;
    va_start(args, fmt);
   d43a6:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_WARN, fmt, args);
   d43a8:	f7ff ffd8 	bl	d435c <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
    va_end(args);
}
   d43ac:	b002      	add	sp, #8
   d43ae:	f85d eb04 	ldr.w	lr, [sp], #4
   d43b2:	b003      	add	sp, #12
   d43b4:	4770      	bx	lr

000d43b6 <_Z10bytesToIntPh>:
  unsigned int myInt;
  myInt = (myBytes[0] << 24) + (myBytes[1] << 16) + (myBytes[2] << 8) + myBytes[3];
  //Log.info("myInt = 0x%08X", myInt);
  //Log.info("myInt = %u", myInt);

  return myInt;
   d43b6:	7843      	ldrb	r3, [r0, #1]
   d43b8:	7802      	ldrb	r2, [r0, #0]
   d43ba:	041b      	lsls	r3, r3, #16
   d43bc:	eb03 6302 	add.w	r3, r3, r2, lsl #24
   d43c0:	7882      	ldrb	r2, [r0, #2]
   d43c2:	78c0      	ldrb	r0, [r0, #3]
   d43c4:	eb03 2302 	add.w	r3, r3, r2, lsl #8

}
   d43c8:	4418      	add	r0, r3
   d43ca:	4770      	bx	lr

000d43cc <_Z13readFromXM132h>:
}


//input - address of register
//returns - data
unsigned int readFromXM132(unsigned char address){
   d43cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  unsigned int data = 0;
   d43d0:	f04f 0800 	mov.w	r8, #0
}


//input - address of register
//returns - data
unsigned int readFromXM132(unsigned char address){
   d43d4:	b087      	sub	sp, #28
   d43d6:	4605      	mov	r5, r0
  //whole function gets dumped in a while because for some reason you need to call every
  //command on the acconeer twice?  add a timeout option later for more robust code 
  while(loopFlag == -1){

    unsigned char register_read_response[10]; //max size of serial buffer = 128 bytes
    unsigned char register_read_request[6] = {0xCC, 0x01, 0x00, 0xF8};
   d43d8:	ae01      	add	r6, sp, #4
   d43da:	4647      	mov	r7, r8
   d43dc:	23cc      	movs	r3, #204	; 0xcc
   d43de:	6037      	str	r7, [r6, #0]
   d43e0:	f88d 3004 	strb.w	r3, [sp, #4]
   d43e4:	2301      	movs	r3, #1
   d43e6:	f88d 3005 	strb.w	r3, [sp, #5]
   d43ea:	23f8      	movs	r3, #248	; 0xf8
   d43ec:	f88d 3007 	strb.w	r3, [sp, #7]
    register_read_request[4] = address;
    register_read_request[5] = 0xCD;
   d43f0:	23cd      	movs	r3, #205	; 0xcd
   d43f2:	f88d 3009 	strb.w	r3, [sp, #9]
  //command on the acconeer twice?  add a timeout option later for more robust code 
  while(loopFlag == -1){

    unsigned char register_read_response[10]; //max size of serial buffer = 128 bytes
    unsigned char register_read_request[6] = {0xCC, 0x01, 0x00, 0xF8};
    register_read_request[4] = address;
   d43f6:	f88d 5008 	strb.w	r5, [sp, #8]
    register_read_request[5] = 0xCD;

    SerialRadar.write(register_read_request, 6);
   d43fa:	f002 fb1d 	bl	d6a38 <_Z22__fetch_global_Serial1v>
   d43fe:	6803      	ldr	r3, [r0, #0]
   d4400:	2206      	movs	r2, #6
   d4402:	68db      	ldr	r3, [r3, #12]
   d4404:	4631      	mov	r1, r6
   d4406:	4798      	blx	r3
    //Serial1.write(0xAA);

    for(int l = 0; l < 6; l++){
   d4408:	2400      	movs	r4, #0
      Log.info("register_read_request[%d] = 0x%02X", l, register_read_request[l]);
   d440a:	5d33      	ldrb	r3, [r6, r4]
   d440c:	4931      	ldr	r1, [pc, #196]	; (d44d4 <_Z13readFromXM132h+0x108>)
   d440e:	4832      	ldr	r0, [pc, #200]	; (d44d8 <_Z13readFromXM132h+0x10c>)
   d4410:	4622      	mov	r2, r4
    register_read_request[5] = 0xCD;

    SerialRadar.write(register_read_request, 6);
    //Serial1.write(0xAA);

    for(int l = 0; l < 6; l++){
   d4412:	3401      	adds	r4, #1
      Log.info("register_read_request[%d] = 0x%02X", l, register_read_request[l]);
   d4414:	f7ff fe8a 	bl	d412c <_ZNK5spark6Logger4infoEPKcz>
    register_read_request[5] = 0xCD;

    SerialRadar.write(register_read_request, 6);
    //Serial1.write(0xAA);

    for(int l = 0; l < 6; l++){
   d4418:	2c06      	cmp	r4, #6
   d441a:	d1f6      	bne.n	d440a <_Z13readFromXM132h+0x3e>
      Log.info("register_read_request[%d] = 0x%02X", l, register_read_request[l]);
    }

    while(SerialRadar.available()) {
   d441c:	f002 fb0c 	bl	d6a38 <_Z22__fetch_global_Serial1v>
   d4420:	6803      	ldr	r3, [r0, #0]
   d4422:	691b      	ldr	r3, [r3, #16]
   d4424:	4798      	blx	r3
   d4426:	b158      	cbz	r0, d4440 <_Z13readFromXM132h+0x74>
   d4428:	2400      	movs	r4, #0
      //read response contains 0xF6, register address, and 5 bytes of data as per Acconeer docs
      for(int i = 0; i < 10; i++){
        register_read_response[i] = SerialRadar.read();
   d442a:	f002 fb05 	bl	d6a38 <_Z22__fetch_global_Serial1v>
   d442e:	6803      	ldr	r3, [r0, #0]
   d4430:	695b      	ldr	r3, [r3, #20]
   d4432:	4798      	blx	r3
   d4434:	ab03      	add	r3, sp, #12
   d4436:	5518      	strb	r0, [r3, r4]
      Log.info("register_read_request[%d] = 0x%02X", l, register_read_request[l]);
    }

    while(SerialRadar.available()) {
      //read response contains 0xF6, register address, and 5 bytes of data as per Acconeer docs
      for(int i = 0; i < 10; i++){
   d4438:	3401      	adds	r4, #1
   d443a:	2c0a      	cmp	r4, #10
   d443c:	d1f5      	bne.n	d442a <_Z13readFromXM132h+0x5e>
   d443e:	e7ed      	b.n	d441c <_Z13readFromXM132h+0x50>
        register_read_response[i] = SerialRadar.read();
      }
    } 

    //Empty anything else the 128 byte serial read buffer might have been sent
    while (SerialRadar.available())  SerialRadar.read();
   d4440:	f002 fafa 	bl	d6a38 <_Z22__fetch_global_Serial1v>
   d4444:	6803      	ldr	r3, [r0, #0]
   d4446:	691b      	ldr	r3, [r3, #16]
   d4448:	4798      	blx	r3
   d444a:	4604      	mov	r4, r0
   d444c:	b128      	cbz	r0, d445a <_Z13readFromXM132h+0x8e>
   d444e:	f002 faf3 	bl	d6a38 <_Z22__fetch_global_Serial1v>
   d4452:	6803      	ldr	r3, [r0, #0]
   d4454:	695b      	ldr	r3, [r3, #20]
   d4456:	4798      	blx	r3
   d4458:	e7f2      	b.n	d4440 <_Z13readFromXM132h+0x74>

    //mysterious janky delay that is required or else we get garbage values printed to SerialUSB...
    delay(10);
   d445a:	200a      	movs	r0, #10
   d445c:	f001 fe0c 	bl	d6078 <delay>

    //if response is correct, parse data, else print error and set loopFlag = -1
    if((register_read_response[3]==0xF6) && (register_read_response[4]==address)){
   d4460:	f89d 300f 	ldrb.w	r3, [sp, #15]
   d4464:	2bf6      	cmp	r3, #246	; 0xf6
      Log.info("Successfully read from register address = 0x%02X:",address);
   d4466:	462a      	mov	r2, r5

    //mysterious janky delay that is required or else we get garbage values printed to SerialUSB...
    delay(10);

    //if response is correct, parse data, else print error and set loopFlag = -1
    if((register_read_response[3]==0xF6) && (register_read_response[4]==address)){
   d4468:	d11c      	bne.n	d44a4 <_Z13readFromXM132h+0xd8>
   d446a:	f89d 3010 	ldrb.w	r3, [sp, #16]
   d446e:	42ab      	cmp	r3, r5
   d4470:	d118      	bne.n	d44a4 <_Z13readFromXM132h+0xd8>
      Log.info("Successfully read from register address = 0x%02X:",address);
   d4472:	491a      	ldr	r1, [pc, #104]	; (d44dc <_Z13readFromXM132h+0x110>)
   d4474:	4818      	ldr	r0, [pc, #96]	; (d44d8 <_Z13readFromXM132h+0x10c>)
   d4476:	f7ff fe59 	bl	d412c <_ZNK5spark6Logger4infoEPKcz>
   d447a:	f10d 0815 	add.w	r8, sp, #21
      //data contained in bytes 5 through 8 of read response array
      //place them in their own register_data array, while reversing order 
      //of the bytes from little endian to big endian
      unsigned char register_data[4];
      for (int j = 0; j < 4; j++){
        register_data[j] = register_read_response[8-j];
   d447e:	f818 3d01 	ldrb.w	r3, [r8, #-1]!
   d4482:	f80d 3004 	strb.w	r3, [sp, r4]
        Log.info("register_data[%d] = 0x%02X", j, register_data[j]);
   d4486:	4622      	mov	r2, r4
   d4488:	4915      	ldr	r1, [pc, #84]	; (d44e0 <_Z13readFromXM132h+0x114>)
   d448a:	4813      	ldr	r0, [pc, #76]	; (d44d8 <_Z13readFromXM132h+0x10c>)

      //data contained in bytes 5 through 8 of read response array
      //place them in their own register_data array, while reversing order 
      //of the bytes from little endian to big endian
      unsigned char register_data[4];
      for (int j = 0; j < 4; j++){
   d448c:	3401      	adds	r4, #1
        register_data[j] = register_read_response[8-j];
        Log.info("register_data[%d] = 0x%02X", j, register_data[j]);
   d448e:	f7ff fe4d 	bl	d412c <_ZNK5spark6Logger4infoEPKcz>

      //data contained in bytes 5 through 8 of read response array
      //place them in their own register_data array, while reversing order 
      //of the bytes from little endian to big endian
      unsigned char register_data[4];
      for (int j = 0; j < 4; j++){
   d4492:	2c04      	cmp	r4, #4
   d4494:	d1f3      	bne.n	d447e <_Z13readFromXM132h+0xb2>
        register_data[j] = register_read_response[8-j];
        Log.info("register_data[%d] = 0x%02X", j, register_data[j]);
      }

      //convert 4 bytes to an int
      data = bytesToInt(register_data);
   d4496:	4668      	mov	r0, sp
   d4498:	f7ff ff8d 	bl	d43b6 <_Z10bytesToIntPh>

    //if response is correct, parse data, else print error and set loopFlag = -1
    if((register_read_response[3]==0xF6) && (register_read_response[4]==address)){
      Log.info("Successfully read from register address = 0x%02X:",address);
      //got the correct data, so stop looping
      loopFlag = 1;
   d449c:	f04f 0901 	mov.w	r9, #1
        register_data[j] = register_read_response[8-j];
        Log.info("register_data[%d] = 0x%02X", j, register_data[j]);
      }

      //convert 4 bytes to an int
      data = bytesToInt(register_data);
   d44a0:	4680      	mov	r8, r0
   d44a2:	e005      	b.n	d44b0 <_Z13readFromXM132h+0xe4>

    } else {
      Log.info("Failed to read from register address = 0x%02X",address);
   d44a4:	490f      	ldr	r1, [pc, #60]	; (d44e4 <_Z13readFromXM132h+0x118>)
   d44a6:	480c      	ldr	r0, [pc, #48]	; (d44d8 <_Z13readFromXM132h+0x10c>)
   d44a8:	f7ff fe40 	bl	d412c <_ZNK5spark6Logger4infoEPKcz>
      loopFlag = -1;
   d44ac:	f04f 39ff 	mov.w	r9, #4294967295
    }

    //leaving this down here so I can see what response whether it was good or caused an error
    for(int k = 0; k < 10; k++){
   d44b0:	2400      	movs	r4, #0
      Log.info("register_read_response[%d] = 0x%02X", k, register_read_response[k]);
   d44b2:	ab03      	add	r3, sp, #12
   d44b4:	4622      	mov	r2, r4
   d44b6:	5d1b      	ldrb	r3, [r3, r4]
   d44b8:	490b      	ldr	r1, [pc, #44]	; (d44e8 <_Z13readFromXM132h+0x11c>)
   d44ba:	4807      	ldr	r0, [pc, #28]	; (d44d8 <_Z13readFromXM132h+0x10c>)
      Log.info("Failed to read from register address = 0x%02X",address);
      loopFlag = -1;
    }

    //leaving this down here so I can see what response whether it was good or caused an error
    for(int k = 0; k < 10; k++){
   d44bc:	3401      	adds	r4, #1
      Log.info("register_read_response[%d] = 0x%02X", k, register_read_response[k]);
   d44be:	f7ff fe35 	bl	d412c <_ZNK5spark6Logger4infoEPKcz>
      Log.info("Failed to read from register address = 0x%02X",address);
      loopFlag = -1;
    }

    //leaving this down here so I can see what response whether it was good or caused an error
    for(int k = 0; k < 10; k++){
   d44c2:	2c0a      	cmp	r4, #10
   d44c4:	d1f5      	bne.n	d44b2 <_Z13readFromXM132h+0xe6>

  unsigned int data = 0;
  int loopFlag = -1;
  //whole function gets dumped in a while because for some reason you need to call every
  //command on the acconeer twice?  add a timeout option later for more robust code 
  while(loopFlag == -1){
   d44c6:	f1b9 3fff 	cmp.w	r9, #4294967295
   d44ca:	d087      	beq.n	d43dc <_Z13readFromXM132h+0x10>

  } //endwhile

  return data;

}
   d44cc:	4640      	mov	r0, r8
   d44ce:	b007      	add	sp, #28
   d44d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d44d4:	000d779b 	.word	0x000d779b
   d44d8:	2003e508 	.word	0x2003e508
   d44dc:	000d77be 	.word	0x000d77be
   d44e0:	000d77f0 	.word	0x000d77f0
   d44e4:	000d780b 	.word	0x000d780b
   d44e8:	000d7839 	.word	0x000d7839

000d44ec <_Z18waitForStatusReadyjj>:
  Log.warn("XM132 setup complete");

}


unsigned int waitForStatusReady(unsigned int desiredStatus, unsigned int timeout){
   d44ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d44ee:	4605      	mov	r5, r0
   d44f0:	460f      	mov	r7, r1

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d44f2:	f000 fa79 	bl	d49e8 <HAL_Timer_Get_Milli_Seconds>
   d44f6:	4606      	mov	r6, r0
   d44f8:	f000 fa76 	bl	d49e8 <HAL_Timer_Get_Milli_Seconds>
  unsigned long startTime = millis();

  unsigned int status;

  //read status register until service created/activated, or timeout
  while((millis() - startTime) < timeout){
   d44fc:	1b80      	subs	r0, r0, r6
   d44fe:	42b8      	cmp	r0, r7
   d4500:	d217      	bcs.n	d4532 <_Z18waitForStatusReadyjj+0x46>

    //check register until you get a proper read response
    status = readFromXM132(STATUS_REGISTER);
   d4502:	2006      	movs	r0, #6
   d4504:	f7ff ff62 	bl	d43cc <_Z13readFromXM132h>
    Log.info("Actual status read = 0x%08X", status);
   d4508:	4910      	ldr	r1, [pc, #64]	; (d454c <_Z18waitForStatusReadyjj+0x60>)
   d450a:	4602      	mov	r2, r0

  //read status register until service created/activated, or timeout
  while((millis() - startTime) < timeout){

    //check register until you get a proper read response
    status = readFromXM132(STATUS_REGISTER);
   d450c:	4604      	mov	r4, r0
    Log.info("Actual status read = 0x%08X", status);
   d450e:	4810      	ldr	r0, [pc, #64]	; (d4550 <_Z18waitForStatusReadyjj+0x64>)
   d4510:	f7ff fe0c 	bl	d412c <_ZNK5spark6Logger4infoEPKcz>

    //check the response, is it what we want?
    if((status & desiredStatus) == desiredStatus){
   d4514:	ea35 0304 	bics.w	r3, r5, r4
      Log.warn("Desired status 0x%08X received",desiredStatus);
   d4518:	462a      	mov	r2, r5
    //check register until you get a proper read response
    status = readFromXM132(STATUS_REGISTER);
    Log.info("Actual status read = 0x%08X", status);

    //check the response, is it what we want?
    if((status & desiredStatus) == desiredStatus){
   d451a:	d105      	bne.n	d4528 <_Z18waitForStatusReadyjj+0x3c>
      Log.warn("Desired status 0x%08X received",desiredStatus);
   d451c:	490d      	ldr	r1, [pc, #52]	; (d4554 <_Z18waitForStatusReadyjj+0x68>)
   d451e:	480c      	ldr	r0, [pc, #48]	; (d4550 <_Z18waitForStatusReadyjj+0x64>)
   d4520:	f7ff ff3b 	bl	d439a <_ZNK5spark6Logger4warnEPKcz>

  //read status register until service created/activated, or timeout
  while((millis() - startTime) < timeout){

    //check register until you get a proper read response
    status = readFromXM132(STATUS_REGISTER);
   d4524:	4620      	mov	r0, r4
    Log.info("Actual status read = 0x%08X", status);

    //check the response, is it what we want?
    if((status & desiredStatus) == desiredStatus){
      Log.warn("Desired status 0x%08X received",desiredStatus);
      return status;
   d4526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else {
      Log.warn("Waiting for desired status flag: 0x%08X",desiredStatus);
   d4528:	490b      	ldr	r1, [pc, #44]	; (d4558 <_Z18waitForStatusReadyjj+0x6c>)
   d452a:	4809      	ldr	r0, [pc, #36]	; (d4550 <_Z18waitForStatusReadyjj+0x64>)
   d452c:	f7ff ff35 	bl	d439a <_ZNK5spark6Logger4warnEPKcz>
  unsigned long startTime = millis();

  unsigned int status;

  //read status register until service created/activated, or timeout
  while((millis() - startTime) < timeout){
   d4530:	e7e2      	b.n	d44f8 <_Z18waitForStatusReadyjj+0xc>
   d4532:	f000 fa59 	bl	d49e8 <HAL_Timer_Get_Milli_Seconds>
      Log.warn("Waiting for desired status flag: 0x%08X",desiredStatus);
    }
    
  }//end timeout while

  if((millis() - startTime) > timeout){ 
   d4536:	1b80      	subs	r0, r0, r6
   d4538:	4287      	cmp	r7, r0
   d453a:	d205      	bcs.n	d4548 <_Z18waitForStatusReadyjj+0x5c>
    Log.error("Timeout of %d milliseconds, desired status 0x%08X not found", timeout, desiredStatus);
   d453c:	462b      	mov	r3, r5
   d453e:	463a      	mov	r2, r7
   d4540:	4906      	ldr	r1, [pc, #24]	; (d455c <_Z18waitForStatusReadyjj+0x70>)
   d4542:	4803      	ldr	r0, [pc, #12]	; (d4550 <_Z18waitForStatusReadyjj+0x64>)
   d4544:	f7ff ff1b 	bl	d437e <_ZNK5spark6Logger5errorEPKcz>
  }

  return 0;
   d4548:	2000      	movs	r0, #0

}
   d454a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d454c:	000d785d 	.word	0x000d785d
   d4550:	2003e508 	.word	0x2003e508
   d4554:	000d7879 	.word	0x000d7879
   d4558:	000d7898 	.word	0x000d7898
   d455c:	000d78c0 	.word	0x000d78c0

000d4560 <_Z12writeToXM132hPh>:

  return myInt;

}

int writeToXM132(unsigned char address, unsigned char register_command[4]){
   d4560:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4564:	b087      	sub	sp, #28
   d4566:	4606      	mov	r6, r0
   d4568:	460f      	mov	r7, r1

  //loop until writing from the register is successful
  while(returnFlag == 1) {

    unsigned char register_write_response[10]; //max size of serial buffer = 128 bytes
    unsigned char register_write_request[10] = {0xCC, 0x05, 0x00, 0xF9};
   d456a:	f10d 080c 	add.w	r8, sp, #12
   d456e:	f04f 0900 	mov.w	r9, #0
   d4572:	23cc      	movs	r3, #204	; 0xcc
   d4574:	f8c8 9000 	str.w	r9, [r8]
   d4578:	f88d 300c 	strb.w	r3, [sp, #12]
   d457c:	2305      	movs	r3, #5
   d457e:	f88d 300d 	strb.w	r3, [sp, #13]
   d4582:	23f9      	movs	r3, #249	; 0xf9
   d4584:	f88d 300f 	strb.w	r3, [sp, #15]

    register_write_request[4] = address;
    register_write_request[5] = register_command[3];
   d4588:	78fb      	ldrb	r3, [r7, #3]
   d458a:	f88d 3011 	strb.w	r3, [sp, #17]
    register_write_request[6] = register_command[2];
   d458e:	78bb      	ldrb	r3, [r7, #2]
   d4590:	f88d 3012 	strb.w	r3, [sp, #18]
    register_write_request[7] = register_command[1];
   d4594:	787b      	ldrb	r3, [r7, #1]
   d4596:	f88d 3013 	strb.w	r3, [sp, #19]
    register_write_request[8] = register_command[0];
   d459a:	783b      	ldrb	r3, [r7, #0]
   d459c:	f88d 3014 	strb.w	r3, [sp, #20]
    register_write_request[9] = 0xCD;
   d45a0:	23cd      	movs	r3, #205	; 0xcd
   d45a2:	f88d 3015 	strb.w	r3, [sp, #21]
  while(returnFlag == 1) {

    unsigned char register_write_response[10]; //max size of serial buffer = 128 bytes
    unsigned char register_write_request[10] = {0xCC, 0x05, 0x00, 0xF9};

    register_write_request[4] = address;
   d45a6:	f88d 6010 	strb.w	r6, [sp, #16]
    register_write_request[6] = register_command[2];
    register_write_request[7] = register_command[1];
    register_write_request[8] = register_command[0];
    register_write_request[9] = 0xCD;

    SerialRadar.write(register_write_request, 10);
   d45aa:	f002 fa45 	bl	d6a38 <_Z22__fetch_global_Serial1v>
   d45ae:	6803      	ldr	r3, [r0, #0]
   d45b0:	220a      	movs	r2, #10
   d45b2:	68db      	ldr	r3, [r3, #12]
   d45b4:	4641      	mov	r1, r8
   d45b6:	4798      	blx	r3
    //Serial1.write(0xAA);

    for(int j = 0; j < 10; j++){
   d45b8:	2400      	movs	r4, #0
      Log.info("register_write_request[%d] = 0x%02X", j, register_write_request[j]);
   d45ba:	f818 3004 	ldrb.w	r3, [r8, r4]
   d45be:	4925      	ldr	r1, [pc, #148]	; (d4654 <_Z12writeToXM132hPh+0xf4>)
   d45c0:	4825      	ldr	r0, [pc, #148]	; (d4658 <_Z12writeToXM132hPh+0xf8>)
   d45c2:	4622      	mov	r2, r4
    register_write_request[9] = 0xCD;

    SerialRadar.write(register_write_request, 10);
    //Serial1.write(0xAA);

    for(int j = 0; j < 10; j++){
   d45c4:	3401      	adds	r4, #1
      Log.info("register_write_request[%d] = 0x%02X", j, register_write_request[j]);
   d45c6:	f7ff fdb1 	bl	d412c <_ZNK5spark6Logger4infoEPKcz>
    register_write_request[9] = 0xCD;

    SerialRadar.write(register_write_request, 10);
    //Serial1.write(0xAA);

    for(int j = 0; j < 10; j++){
   d45ca:	2c0a      	cmp	r4, #10
   d45cc:	d1f5      	bne.n	d45ba <_Z12writeToXM132hPh+0x5a>
      Log.info("register_write_request[%d] = 0x%02X", j, register_write_request[j]);
    } 

    //load the response
    while(SerialRadar.available()) {
   d45ce:	f002 fa33 	bl	d6a38 <_Z22__fetch_global_Serial1v>
   d45d2:	6803      	ldr	r3, [r0, #0]
   d45d4:	691b      	ldr	r3, [r3, #16]
   d45d6:	4798      	blx	r3
   d45d8:	b158      	cbz	r0, d45f2 <_Z12writeToXM132hPh+0x92>
   d45da:	2400      	movs	r4, #0
      for(int k = 0; k < 10; k++){
        register_write_response[k] = SerialRadar.read();     
   d45dc:	f002 fa2c 	bl	d6a38 <_Z22__fetch_global_Serial1v>
   d45e0:	6803      	ldr	r3, [r0, #0]
   d45e2:	695b      	ldr	r3, [r3, #20]
   d45e4:	4798      	blx	r3
   d45e6:	f80d 0004 	strb.w	r0, [sp, r4]
      Log.info("register_write_request[%d] = 0x%02X", j, register_write_request[j]);
    } 

    //load the response
    while(SerialRadar.available()) {
      for(int k = 0; k < 10; k++){
   d45ea:	3401      	adds	r4, #1
   d45ec:	2c0a      	cmp	r4, #10
   d45ee:	d1f5      	bne.n	d45dc <_Z12writeToXM132hPh+0x7c>
   d45f0:	e7ed      	b.n	d45ce <_Z12writeToXM132hPh+0x6e>
        register_write_response[k] = SerialRadar.read();     
      }
    }

    //Empty anything else the 128 byte serial read buffer might have been sent
    while (SerialRadar.available())  SerialRadar.read();
   d45f2:	f002 fa21 	bl	d6a38 <_Z22__fetch_global_Serial1v>
   d45f6:	6803      	ldr	r3, [r0, #0]
   d45f8:	691b      	ldr	r3, [r3, #16]
   d45fa:	4798      	blx	r3
   d45fc:	4604      	mov	r4, r0
   d45fe:	b128      	cbz	r0, d460c <_Z12writeToXM132hPh+0xac>
   d4600:	f002 fa1a 	bl	d6a38 <_Z22__fetch_global_Serial1v>
   d4604:	6803      	ldr	r3, [r0, #0]
   d4606:	695b      	ldr	r3, [r3, #20]
   d4608:	4798      	blx	r3
   d460a:	e7f2      	b.n	d45f2 <_Z12writeToXM132hPh+0x92>
    //also somehow not required here, but is required after the identical code in the readFromXM132 function?
    //delay(10);

    //check the response we want to keep for the correct bits: write response[3] should 
    //contain 0xF5 followed by address of register read, as per Acconeer docs and example:
    if((register_write_response[3]==0xF5) && (register_write_response[4]==address)){
   d460c:	f89d 3003 	ldrb.w	r3, [sp, #3]
   d4610:	2bf5      	cmp	r3, #245	; 0xf5
      Log.info("Successfully wrote to register address = 0x%02X",address);
   d4612:	4632      	mov	r2, r6
    //also somehow not required here, but is required after the identical code in the readFromXM132 function?
    //delay(10);

    //check the response we want to keep for the correct bits: write response[3] should 
    //contain 0xF5 followed by address of register read, as per Acconeer docs and example:
    if((register_write_response[3]==0xF5) && (register_write_response[4]==address)){
   d4614:	d108      	bne.n	d4628 <_Z12writeToXM132hPh+0xc8>
   d4616:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d461a:	42b3      	cmp	r3, r6
   d461c:	d104      	bne.n	d4628 <_Z12writeToXM132hPh+0xc8>
      Log.info("Successfully wrote to register address = 0x%02X",address);
   d461e:	490f      	ldr	r1, [pc, #60]	; (d465c <_Z12writeToXM132hPh+0xfc>)
   d4620:	480d      	ldr	r0, [pc, #52]	; (d4658 <_Z12writeToXM132hPh+0xf8>)
   d4622:	f7ff fd83 	bl	d412c <_ZNK5spark6Logger4infoEPKcz>
      returnFlag = 0;
   d4626:	e004      	b.n	d4632 <_Z12writeToXM132hPh+0xd2>
    } else {
      Log.info("Failed to write to register address = 0x%02X",address);
   d4628:	490d      	ldr	r1, [pc, #52]	; (d4660 <_Z12writeToXM132hPh+0x100>)
   d462a:	480b      	ldr	r0, [pc, #44]	; (d4658 <_Z12writeToXM132hPh+0xf8>)
   d462c:	f7ff fd7e 	bl	d412c <_ZNK5spark6Logger4infoEPKcz>
      returnFlag = 1;
   d4630:	2401      	movs	r4, #1
    }

    for(int l = 0; l < 10; l++){
   d4632:	2500      	movs	r5, #0
      Log.info("register_write_response[%d] = 0x%02X", l, register_write_response[l]);
   d4634:	f81d 3005 	ldrb.w	r3, [sp, r5]
   d4638:	490a      	ldr	r1, [pc, #40]	; (d4664 <_Z12writeToXM132hPh+0x104>)
   d463a:	4807      	ldr	r0, [pc, #28]	; (d4658 <_Z12writeToXM132hPh+0xf8>)
   d463c:	462a      	mov	r2, r5
    } else {
      Log.info("Failed to write to register address = 0x%02X",address);
      returnFlag = 1;
    }

    for(int l = 0; l < 10; l++){
   d463e:	3501      	adds	r5, #1
      Log.info("register_write_response[%d] = 0x%02X", l, register_write_response[l]);
   d4640:	f7ff fd74 	bl	d412c <_ZNK5spark6Logger4infoEPKcz>
    } else {
      Log.info("Failed to write to register address = 0x%02X",address);
      returnFlag = 1;
    }

    for(int l = 0; l < 10; l++){
   d4644:	2d0a      	cmp	r5, #10
   d4646:	d1f5      	bne.n	d4634 <_Z12writeToXM132hPh+0xd4>
int writeToXM132(unsigned char address, unsigned char register_command[4]){

  int returnFlag = 1;

  //loop until writing from the register is successful
  while(returnFlag == 1) {
   d4648:	2c01      	cmp	r4, #1
   d464a:	d092      	beq.n	d4572 <_Z12writeToXM132hPh+0x12>

  }//end while

  return returnFlag;

}
   d464c:	2000      	movs	r0, #0
   d464e:	b007      	add	sp, #28
   d4650:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4654:	000d78fc 	.word	0x000d78fc
   d4658:	2003e508 	.word	0x2003e508
   d465c:	000d7920 	.word	0x000d7920
   d4660:	000d7950 	.word	0x000d7950
   d4664:	000d797d 	.word	0x000d797d

000d4668 <_Z10xm132Setupv>:

}

/*****************called from setup() or setup() sub-functions*******************/

void xm132Setup(){
   d4668:	b530      	push	{r4, r5, lr}
   d466a:	b089      	sub	sp, #36	; 0x24

  //Start serial communication
  SerialRadar.begin(115200);
   d466c:	f002 f9e4 	bl	d6a38 <_Z22__fetch_global_Serial1v>
   d4670:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d4674:	f002 f9da 	bl	d6a2c <_ZN11USARTSerial5beginEm>
  SerialUSB.begin(115200);
   d4678:	f002 f956 	bl	d6928 <_Z16_fetch_usbserialv>
   d467c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d4680:	f002 f942 	bl	d6908 <_ZN9USBSerial5beginEl>

  Log.info("Entered XM132 Setup ");
   d4684:	4960      	ldr	r1, [pc, #384]	; (d4808 <_Z10xm132Setupv+0x1a0>)
   d4686:	4861      	ldr	r0, [pc, #388]	; (d480c <_Z10xm132Setupv+0x1a4>)
   d4688:	f7ff fd50 	bl	d412c <_ZNK5spark6Logger4infoEPKcz>

  //Stop service 
  Log.warn("Stop Service");
  unsigned char stop_service[4] = STOP_SERVICE;
   d468c:	ad08      	add	r5, sp, #32
  SerialUSB.begin(115200);

  Log.info("Entered XM132 Setup ");

  //Stop service 
  Log.warn("Stop Service");
   d468e:	4960      	ldr	r1, [pc, #384]	; (d4810 <_Z10xm132Setupv+0x1a8>)
   d4690:	485e      	ldr	r0, [pc, #376]	; (d480c <_Z10xm132Setupv+0x1a4>)
   d4692:	f7ff fe82 	bl	d439a <_ZNK5spark6Logger4warnEPKcz>
  unsigned char stop_service[4] = STOP_SERVICE;
   d4696:	2300      	movs	r3, #0
   d4698:	f845 3d20 	str.w	r3, [r5, #-32]!
  while(writeToXM132(MAIN_CONTROL_REGISTER,stop_service));
   d469c:	4629      	mov	r1, r5
   d469e:	2003      	movs	r0, #3
   d46a0:	f7ff ff5e 	bl	d4560 <_Z12writeToXM132hPh>
   d46a4:	4604      	mov	r4, r0
   d46a6:	2800      	cmp	r0, #0
   d46a8:	d1f8      	bne.n	d469c <_Z10xm132Setupv+0x34>

  //wait half a second to give service time to halt
  delay(500);
   d46aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d46ae:	f001 fce3 	bl	d6078 <delay>

  //clear errors and status bits
  Log.warn("Clear errors and status bits");
   d46b2:	4958      	ldr	r1, [pc, #352]	; (d4814 <_Z10xm132Setupv+0x1ac>)
   d46b4:	4855      	ldr	r0, [pc, #340]	; (d480c <_Z10xm132Setupv+0x1a4>)
   d46b6:	f7ff fe70 	bl	d439a <_ZNK5spark6Logger4warnEPKcz>
  unsigned char clear_bits[4] = CLEAR_STATUS_BITS;
   d46ba:	2304      	movs	r3, #4
   d46bc:	f88d 4004 	strb.w	r4, [sp, #4]
   d46c0:	f88d 4005 	strb.w	r4, [sp, #5]
   d46c4:	f88d 4006 	strb.w	r4, [sp, #6]
   d46c8:	f88d 3007 	strb.w	r3, [sp, #7]
  while(writeToXM132(MAIN_CONTROL_REGISTER,clear_bits));
   d46cc:	a901      	add	r1, sp, #4
   d46ce:	2003      	movs	r0, #3
   d46d0:	f7ff ff46 	bl	d4560 <_Z12writeToXM132hPh>
   d46d4:	4604      	mov	r4, r0
   d46d6:	2800      	cmp	r0, #0
   d46d8:	d1f8      	bne.n	d46cc <_Z10xm132Setupv+0x64>

  //set mode to presence
  Log.warn("Set presence mode");
   d46da:	494f      	ldr	r1, [pc, #316]	; (d4818 <_Z10xm132Setupv+0x1b0>)
   d46dc:	484b      	ldr	r0, [pc, #300]	; (d480c <_Z10xm132Setupv+0x1a4>)
   d46de:	f7ff fe5c 	bl	d439a <_ZNK5spark6Logger4warnEPKcz>
  unsigned char presence[4] = PRESENCE_SERVICE;
   d46e2:	2304      	movs	r3, #4
   d46e4:	f88d 4008 	strb.w	r4, [sp, #8]
   d46e8:	f88d 4009 	strb.w	r4, [sp, #9]
   d46ec:	f88d 300a 	strb.w	r3, [sp, #10]
   d46f0:	f88d 400b 	strb.w	r4, [sp, #11]
  while(writeToXM132(MODE_SELECTION_REGISTER,presence));
   d46f4:	a902      	add	r1, sp, #8
   d46f6:	2002      	movs	r0, #2
   d46f8:	f7ff ff32 	bl	d4560 <_Z12writeToXM132hPh>
   d46fc:	4604      	mov	r4, r0
   d46fe:	2800      	cmp	r0, #0
   d4700:	d1f8      	bne.n	d46f4 <_Z10xm132Setupv+0x8c>

  //set range_start register
  Log.warn("Set range start register mode");
   d4702:	4946      	ldr	r1, [pc, #280]	; (d481c <_Z10xm132Setupv+0x1b4>)
   d4704:	4841      	ldr	r0, [pc, #260]	; (d480c <_Z10xm132Setupv+0x1a4>)
   d4706:	f7ff fe48 	bl	d439a <_ZNK5spark6Logger4warnEPKcz>
  unsigned char startRegisterAddr = 0x20;
  // 0xB4 = 180 mm = 18 cm = lowest valid range according to GUI
  unsigned char range_start[4] = {0x00, 0x00, 0x00, 0xB4};
   d470a:	23b4      	movs	r3, #180	; 0xb4
   d470c:	f88d 400c 	strb.w	r4, [sp, #12]
   d4710:	f88d 400d 	strb.w	r4, [sp, #13]
   d4714:	f88d 400e 	strb.w	r4, [sp, #14]
   d4718:	f88d 300f 	strb.w	r3, [sp, #15]
  while(writeToXM132(startRegisterAddr,range_start));
   d471c:	a903      	add	r1, sp, #12
   d471e:	2020      	movs	r0, #32
   d4720:	f7ff ff1e 	bl	d4560 <_Z12writeToXM132hPh>
   d4724:	2800      	cmp	r0, #0
   d4726:	d1f9      	bne.n	d471c <_Z10xm132Setupv+0xb4>

  //set range_length register
  Log.warn("Set range start register mode");
   d4728:	4838      	ldr	r0, [pc, #224]	; (d480c <_Z10xm132Setupv+0x1a4>)
   d472a:	493c      	ldr	r1, [pc, #240]	; (d481c <_Z10xm132Setupv+0x1b4>)
   d472c:	f7ff fe35 	bl	d439a <_ZNK5spark6Logger4warnEPKcz>
  unsigned char rangeRegisterAddr = 0x21;
  // 0xBB8 = 3000mm = 3m max valid range according to Anton @ Acconeer support
  unsigned char range_length[4] = {0x00, 0x00, 0x0B, 0xB8};
   d4730:	4b3b      	ldr	r3, [pc, #236]	; (d4820 <_Z10xm132Setupv+0x1b8>)
   d4732:	ac08      	add	r4, sp, #32
   d4734:	6818      	ldr	r0, [r3, #0]
   d4736:	f844 0d10 	str.w	r0, [r4, #-16]!
  while(writeToXM132(rangeRegisterAddr,range_length));
   d473a:	4621      	mov	r1, r4
   d473c:	2021      	movs	r0, #33	; 0x21
   d473e:	f7ff ff0f 	bl	d4560 <_Z12writeToXM132hPh>
   d4742:	2800      	cmp	r0, #0
   d4744:	d1f9      	bne.n	d473a <_Z10xm132Setupv+0xd2>

  //set threshold register
  Log.warn("Set threshold");
   d4746:	4831      	ldr	r0, [pc, #196]	; (d480c <_Z10xm132Setupv+0x1a4>)
   d4748:	4936      	ldr	r1, [pc, #216]	; (d4824 <_Z10xm132Setupv+0x1bc>)
   d474a:	f7ff fe26 	bl	d439a <_ZNK5spark6Logger4warnEPKcz>
  unsigned char thresholdRegisterAddr = 0x40;
  // 0xFA0 = 4000
  // 0x7D0 = 2000
  unsigned char threshold[4] = {0x00, 0x00, 0x07, 0xD0};
   d474e:	4b36      	ldr	r3, [pc, #216]	; (d4828 <_Z10xm132Setupv+0x1c0>)
   d4750:	ad08      	add	r5, sp, #32
   d4752:	6818      	ldr	r0, [r3, #0]
   d4754:	f845 0d0c 	str.w	r0, [r5, #-12]!
  while(writeToXM132(thresholdRegisterAddr,threshold));
   d4758:	4629      	mov	r1, r5
   d475a:	2040      	movs	r0, #64	; 0x40
   d475c:	f7ff ff00 	bl	d4560 <_Z12writeToXM132hPh>
   d4760:	4604      	mov	r4, r0
   d4762:	2800      	cmp	r0, #0
   d4764:	d1f8      	bne.n	d4758 <_Z10xm132Setupv+0xf0>

  //set inter frame time const
  Log.warn("Set inter frame time const");
   d4766:	4931      	ldr	r1, [pc, #196]	; (d482c <_Z10xm132Setupv+0x1c4>)
   d4768:	4828      	ldr	r0, [pc, #160]	; (d480c <_Z10xm132Setupv+0x1a4>)
   d476a:	f7ff fe16 	bl	d439a <_ZNK5spark6Logger4warnEPKcz>
  unsigned char interTimeConstRegisterAddr = 0x42;
  // 0x14 = 20
  unsigned char interTimeConst[4] = {0x00, 0x00, 0x00, 0x14};
   d476e:	2314      	movs	r3, #20
   d4770:	f88d 4018 	strb.w	r4, [sp, #24]
   d4774:	f88d 4019 	strb.w	r4, [sp, #25]
   d4778:	f88d 401a 	strb.w	r4, [sp, #26]
   d477c:	f88d 301b 	strb.w	r3, [sp, #27]
  while(writeToXM132(interTimeConstRegisterAddr,interTimeConst));
   d4780:	a906      	add	r1, sp, #24
   d4782:	2042      	movs	r0, #66	; 0x42
   d4784:	f7ff feec 	bl	d4560 <_Z12writeToXM132hPh>
   d4788:	4604      	mov	r4, r0
   d478a:	2800      	cmp	r0, #0
   d478c:	d1f8      	bne.n	d4780 <_Z10xm132Setupv+0x118>

  //start service
  Log.warn("Start service");
   d478e:	4928      	ldr	r1, [pc, #160]	; (d4830 <_Z10xm132Setupv+0x1c8>)
   d4790:	481e      	ldr	r0, [pc, #120]	; (d480c <_Z10xm132Setupv+0x1a4>)
   d4792:	f7ff fe02 	bl	d439a <_ZNK5spark6Logger4warnEPKcz>
  unsigned char start_service[4] = START_SERVICE;
   d4796:	2303      	movs	r3, #3
   d4798:	f88d 401c 	strb.w	r4, [sp, #28]
   d479c:	f88d 401d 	strb.w	r4, [sp, #29]
   d47a0:	f88d 401e 	strb.w	r4, [sp, #30]
   d47a4:	f88d 301f 	strb.w	r3, [sp, #31]
  while(writeToXM132(MAIN_CONTROL_REGISTER,start_service));
   d47a8:	a907      	add	r1, sp, #28
   d47aa:	2003      	movs	r0, #3
   d47ac:	f7ff fed8 	bl	d4560 <_Z12writeToXM132hPh>
   d47b0:	2800      	cmp	r0, #0
   d47b2:	d1f9      	bne.n	d47a8 <_Z10xm132Setupv+0x140>

  //wait for module to be activated and created
  Log.warn("Check status register for service creation");
   d47b4:	491f      	ldr	r1, [pc, #124]	; (d4834 <_Z10xm132Setupv+0x1cc>)
   d47b6:	4815      	ldr	r0, [pc, #84]	; (d480c <_Z10xm132Setupv+0x1a4>)
   d47b8:	f7ff fdef 	bl	d439a <_ZNK5spark6Logger4warnEPKcz>
  if(waitForStatusReady(MODULE_CREATED_AND_ACTIVATED,3000)){
   d47bc:	f640 31b8 	movw	r1, #3000	; 0xbb8
   d47c0:	2003      	movs	r0, #3
   d47c2:	f7ff fe93 	bl	d44ec <_Z18waitForStatusReadyjj>
   d47c6:	b120      	cbz	r0, d47d2 <_Z10xm132Setupv+0x16a>
    Log.warn("Module created and activated");
   d47c8:	491b      	ldr	r1, [pc, #108]	; (d4838 <_Z10xm132Setupv+0x1d0>)
   d47ca:	4810      	ldr	r0, [pc, #64]	; (d480c <_Z10xm132Setupv+0x1a4>)
   d47cc:	f7ff fde5 	bl	d439a <_ZNK5spark6Logger4warnEPKcz>
   d47d0:	e003      	b.n	d47da <_Z10xm132Setupv+0x172>
  } else{
    Log.error("Module failed to activate!");
   d47d2:	491a      	ldr	r1, [pc, #104]	; (d483c <_Z10xm132Setupv+0x1d4>)
   d47d4:	480d      	ldr	r0, [pc, #52]	; (d480c <_Z10xm132Setupv+0x1a4>)
   d47d6:	f7ff fdd2 	bl	d437e <_ZNK5spark6Logger5errorEPKcz>
  }

  //read out start of sweep in mm
  unsigned int start;
  start = readFromXM132(START_REGISTER);
   d47da:	2081      	movs	r0, #129	; 0x81
   d47dc:	f7ff fdf6 	bl	d43cc <_Z13readFromXM132h>
  Log.warn("Start of sweep (mm) = %u", start);
   d47e0:	4917      	ldr	r1, [pc, #92]	; (d4840 <_Z10xm132Setupv+0x1d8>)
   d47e2:	4602      	mov	r2, r0
   d47e4:	4809      	ldr	r0, [pc, #36]	; (d480c <_Z10xm132Setupv+0x1a4>)
   d47e6:	f7ff fdd8 	bl	d439a <_ZNK5spark6Logger4warnEPKcz>

  //read out length of sweep in mm
  unsigned int length;
  length = readFromXM132(LENGTH_REGISTER);
   d47ea:	2082      	movs	r0, #130	; 0x82
   d47ec:	f7ff fdee 	bl	d43cc <_Z13readFromXM132h>
  Log.warn("Length of sweep (mm) = %u", length);  
   d47f0:	4914      	ldr	r1, [pc, #80]	; (d4844 <_Z10xm132Setupv+0x1dc>)
   d47f2:	4602      	mov	r2, r0
   d47f4:	4805      	ldr	r0, [pc, #20]	; (d480c <_Z10xm132Setupv+0x1a4>)
   d47f6:	f7ff fdd0 	bl	d439a <_ZNK5spark6Logger4warnEPKcz>

  Log.warn("XM132 setup complete");
   d47fa:	4913      	ldr	r1, [pc, #76]	; (d4848 <_Z10xm132Setupv+0x1e0>)
   d47fc:	4803      	ldr	r0, [pc, #12]	; (d480c <_Z10xm132Setupv+0x1a4>)
   d47fe:	f7ff fdcc 	bl	d439a <_ZNK5spark6Logger4warnEPKcz>

}
   d4802:	b009      	add	sp, #36	; 0x24
   d4804:	bd30      	pop	{r4, r5, pc}
   d4806:	bf00      	nop
   d4808:	000d79a2 	.word	0x000d79a2
   d480c:	2003e508 	.word	0x2003e508
   d4810:	000d79b7 	.word	0x000d79b7
   d4814:	000d79c4 	.word	0x000d79c4
   d4818:	000d79e1 	.word	0x000d79e1
   d481c:	000d79f3 	.word	0x000d79f3
   d4820:	000d7793 	.word	0x000d7793
   d4824:	000d7a11 	.word	0x000d7a11
   d4828:	000d7797 	.word	0x000d7797
   d482c:	000d7a1f 	.word	0x000d7a1f
   d4830:	000d7a3a 	.word	0x000d7a3a
   d4834:	000d7a48 	.word	0x000d7a48
   d4838:	000d7a73 	.word	0x000d7a73
   d483c:	000d7a90 	.word	0x000d7a90
   d4840:	000d7aab 	.word	0x000d7aab
   d4844:	000d7ac4 	.word	0x000d7ac4
   d4848:	000d7ade 	.word	0x000d7ade

000d484c <_Z10checkXM132v>:

//***************************XM132 functions**********************************

/*****************called from loop() or loop() sub-functions*******************/

void checkXM132(){
   d484c:	b5f0      	push	{r4, r5, r6, r7, lr}
  unsigned int score;
  unsigned int distance;
  static unsigned long lastPublish = 0;

  //read and print/cloud publish data every 1.5 seconds
  if((millis()-lastPublish) > 1500){
   d484e:	4d42      	ldr	r5, [pc, #264]	; (d4958 <_Z10checkXM132v+0x10c>)

//***************************XM132 functions**********************************

/*****************called from loop() or loop() sub-functions*******************/

void checkXM132(){
   d4850:	f2ad 4d1c 	subw	sp, sp, #1052	; 0x41c
   d4854:	f000 f8c8 	bl	d49e8 <HAL_Timer_Get_Milli_Seconds>
  unsigned int score;
  unsigned int distance;
  static unsigned long lastPublish = 0;

  //read and print/cloud publish data every 1.5 seconds
  if((millis()-lastPublish) > 1500){
   d4858:	682b      	ldr	r3, [r5, #0]
   d485a:	1ac0      	subs	r0, r0, r3
   d485c:	f240 53dc 	movw	r3, #1500	; 0x5dc
   d4860:	4298      	cmp	r0, r3
   d4862:	d976      	bls.n	d4952 <_Z10checkXM132v+0x106>

    //clear errors and status bits
    Log.warn("Clear errors and status bits");
   d4864:	493d      	ldr	r1, [pc, #244]	; (d495c <_Z10checkXM132v+0x110>)
   d4866:	483e      	ldr	r0, [pc, #248]	; (d4960 <_Z10checkXM132v+0x114>)
   d4868:	f7ff fd97 	bl	d439a <_ZNK5spark6Logger4warnEPKcz>
    unsigned char clear_bits[4] = CLEAR_STATUS_BITS;
   d486c:	2300      	movs	r3, #0
   d486e:	f88d 300c 	strb.w	r3, [sp, #12]
   d4872:	f88d 300d 	strb.w	r3, [sp, #13]
   d4876:	f88d 300e 	strb.w	r3, [sp, #14]
   d487a:	2304      	movs	r3, #4
   d487c:	f88d 300f 	strb.w	r3, [sp, #15]
    while(writeToXM132(MAIN_CONTROL_REGISTER,clear_bits));
   d4880:	a903      	add	r1, sp, #12
   d4882:	2003      	movs	r0, #3
   d4884:	f7ff fe6c 	bl	d4560 <_Z12writeToXM132hPh>
   d4888:	2800      	cmp	r0, #0
   d488a:	d1f9      	bne.n	d4880 <_Z10checkXM132v+0x34>

    Log.warn("Check status register for data ready");
   d488c:	4935      	ldr	r1, [pc, #212]	; (d4964 <_Z10checkXM132v+0x118>)
   d488e:	4834      	ldr	r0, [pc, #208]	; (d4960 <_Z10checkXM132v+0x114>)
   d4890:	f7ff fd83 	bl	d439a <_ZNK5spark6Logger4warnEPKcz>
    if(waitForStatusReady(DATA_READY,3000)){
   d4894:	f640 31b8 	movw	r1, #3000	; 0xbb8
   d4898:	f44f 7080 	mov.w	r0, #256	; 0x100
   d489c:	f7ff fe26 	bl	d44ec <_Z18waitForStatusReadyjj>
   d48a0:	b120      	cbz	r0, d48ac <_Z10checkXM132v+0x60>
      Log.warn("Data Ready");
   d48a2:	4931      	ldr	r1, [pc, #196]	; (d4968 <_Z10checkXM132v+0x11c>)
   d48a4:	482e      	ldr	r0, [pc, #184]	; (d4960 <_Z10checkXM132v+0x114>)
   d48a6:	f7ff fd78 	bl	d439a <_ZNK5spark6Logger4warnEPKcz>
   d48aa:	e003      	b.n	d48b4 <_Z10checkXM132v+0x68>
    } else{
      Log.error("Data Not Ready");
   d48ac:	492f      	ldr	r1, [pc, #188]	; (d496c <_Z10checkXM132v+0x120>)
   d48ae:	482c      	ldr	r0, [pc, #176]	; (d4960 <_Z10checkXM132v+0x114>)
   d48b0:	f7ff fd65 	bl	d437e <_ZNK5spark6Logger5errorEPKcz>
    }

    //read detection register
    detected = readFromXM132(DETECTED_REGISTER);
   d48b4:	20b0      	movs	r0, #176	; 0xb0
   d48b6:	f7ff fd89 	bl	d43cc <_Z13readFromXM132h>
    if(detected == 0xFFFFFFFF) detected = 1;
   d48ba:	f1b0 3fff 	cmp.w	r0, #4294967295
   d48be:	bf14      	ite	ne
   d48c0:	4606      	movne	r6, r0
   d48c2:	2601      	moveq	r6, #1
    //read score register
    score = readFromXM132(SCORE_REGISTER);
   d48c4:	20b1      	movs	r0, #177	; 0xb1
   d48c6:	f7ff fd81 	bl	d43cc <_Z13readFromXM132h>
   d48ca:	4607      	mov	r7, r0
    //read distance register
    distance = readFromXM132(DISTANCE_REGISTER);
   d48cc:	20b2      	movs	r0, #178	; 0xb2
   d48ce:	f7ff fd7d 	bl	d43cc <_Z13readFromXM132h>

    Log.warn("Detection = %u", detected);
   d48d2:	4632      	mov	r2, r6
    detected = readFromXM132(DETECTED_REGISTER);
    if(detected == 0xFFFFFFFF) detected = 1;
    //read score register
    score = readFromXM132(SCORE_REGISTER);
    //read distance register
    distance = readFromXM132(DISTANCE_REGISTER);
   d48d4:	4604      	mov	r4, r0

    Log.warn("Detection = %u", detected);
   d48d6:	4926      	ldr	r1, [pc, #152]	; (d4970 <_Z10checkXM132v+0x124>)
   d48d8:	4821      	ldr	r0, [pc, #132]	; (d4960 <_Z10checkXM132v+0x114>)
   d48da:	f7ff fd5e 	bl	d439a <_ZNK5spark6Logger4warnEPKcz>
    Log.warn("Score = %u", score);
   d48de:	463a      	mov	r2, r7
   d48e0:	4924      	ldr	r1, [pc, #144]	; (d4974 <_Z10checkXM132v+0x128>)
   d48e2:	481f      	ldr	r0, [pc, #124]	; (d4960 <_Z10checkXM132v+0x114>)
   d48e4:	f7ff fd59 	bl	d439a <_ZNK5spark6Logger4warnEPKcz>
    Log.warn("Distance (cm) = %u", distance/10);
   d48e8:	230a      	movs	r3, #10
   d48ea:	4923      	ldr	r1, [pc, #140]	; (d4978 <_Z10checkXM132v+0x12c>)
   d48ec:	fbb4 f4f3 	udiv	r4, r4, r3
   d48f0:	481b      	ldr	r0, [pc, #108]	; (d4960 <_Z10checkXM132v+0x114>)
   d48f2:	4622      	mov	r2, r4
   d48f4:	f7ff fd51 	bl	d439a <_ZNK5spark6Logger4warnEPKcz>

    //create JSON
    char data[1024];
    snprintf(data, sizeof(data), "{\"detection\":\"%u\", \"score\":\"%u\", \"distance\":\"%u\"}", 
            detected, score, distance/10); 
   d48f8:	9401      	str	r4, [sp, #4]
   d48fa:	4633      	mov	r3, r6
   d48fc:	4a1f      	ldr	r2, [pc, #124]	; (d497c <_Z10checkXM132v+0x130>)
   d48fe:	9700      	str	r7, [sp, #0]
   d4900:	f44f 6180 	mov.w	r1, #1024	; 0x400
   d4904:	a806      	add	r0, sp, #24
   d4906:	f000 fa1b 	bl	d4d40 <snprintf>
   d490a:	4b1d      	ldr	r3, [pc, #116]	; (d4980 <_Z10checkXM132v+0x134>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d490c:	491d      	ldr	r1, [pc, #116]	; (d4984 <_Z10checkXM132v+0x138>)
   d490e:	781b      	ldrb	r3, [r3, #0]
   d4910:	f88d 3000 	strb.w	r3, [sp]
   d4914:	aa06      	add	r2, sp, #24
   d4916:	233c      	movs	r3, #60	; 0x3c
   d4918:	a804      	add	r0, sp, #16
   d491a:	f001 fdab 	bl	d6474 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d491e:	9c05      	ldr	r4, [sp, #20]
   d4920:	b17c      	cbz	r4, d4942 <_Z10checkXM132v+0xf6>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4922:	6863      	ldr	r3, [r4, #4]
   d4924:	3b01      	subs	r3, #1
   d4926:	6063      	str	r3, [r4, #4]
   d4928:	b95b      	cbnz	r3, d4942 <_Z10checkXM132v+0xf6>
        {
          _M_dispose();
   d492a:	6823      	ldr	r3, [r4, #0]
   d492c:	4620      	mov	r0, r4
   d492e:	689b      	ldr	r3, [r3, #8]
   d4930:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4932:	68a3      	ldr	r3, [r4, #8]
   d4934:	3b01      	subs	r3, #1
   d4936:	60a3      	str	r3, [r4, #8]
   d4938:	b91b      	cbnz	r3, d4942 <_Z10checkXM132v+0xf6>
            _M_destroy();
   d493a:	6823      	ldr	r3, [r4, #0]
   d493c:	4620      	mov	r0, r4
   d493e:	68db      	ldr	r3, [r3, #12]
   d4940:	4798      	blx	r3

    //publish to cloud
    Particle.publish("XM132", data, PRIVATE);
    //print to USB Serial
    SerialUSB.println(data);
   d4942:	f001 fff1 	bl	d6928 <_Z16_fetch_usbserialv>
   d4946:	a906      	add	r1, sp, #24
   d4948:	f000 fb6d 	bl	d5026 <_ZN5Print7printlnEPKc>
   d494c:	f000 f84c 	bl	d49e8 <HAL_Timer_Get_Milli_Seconds>

    lastPublish = millis();
   d4950:	6028      	str	r0, [r5, #0]

  } 


}
   d4952:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
   d4956:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4958:	2003e4b4 	.word	0x2003e4b4
   d495c:	000d79c4 	.word	0x000d79c4
   d4960:	2003e508 	.word	0x2003e508
   d4964:	000d7af3 	.word	0x000d7af3
   d4968:	000d7b18 	.word	0x000d7b18
   d496c:	000d7b23 	.word	0x000d7b23
   d4970:	000d7b32 	.word	0x000d7b32
   d4974:	000d7b41 	.word	0x000d7b41
   d4978:	000d7b4c 	.word	0x000d7b4c
   d497c:	000d7b5f 	.word	0x000d7b5f
   d4980:	2003e4b8 	.word	0x2003e4b8
   d4984:	000d7b91 	.word	0x000d7b91

000d4988 <_GLOBAL__sub_I__Z10checkXM132v>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4988:	4b02      	ldr	r3, [pc, #8]	; (d4994 <_GLOBAL__sub_I__Z10checkXM132v+0xc>)
   d498a:	2201      	movs	r2, #1
   d498c:	701a      	strb	r2, [r3, #0]
   d498e:	f000 b813 	b.w	d49b8 <HAL_Pin_Map>
   d4992:	bf00      	nop
   d4994:	2003e4b8 	.word	0x2003e4b8

000d4998 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4998:	b508      	push	{r3, lr}
   d499a:	4b02      	ldr	r3, [pc, #8]	; (d49a4 <netdb_freeaddrinfo+0xc>)
   d499c:	681b      	ldr	r3, [r3, #0]
   d499e:	689b      	ldr	r3, [r3, #8]
   d49a0:	9301      	str	r3, [sp, #4]
   d49a2:	bd08      	pop	{r3, pc}
   d49a4:	00030268 	.word	0x00030268

000d49a8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d49a8:	b508      	push	{r3, lr}
   d49aa:	4b02      	ldr	r3, [pc, #8]	; (d49b4 <netdb_getaddrinfo+0xc>)
   d49ac:	681b      	ldr	r3, [r3, #0]
   d49ae:	68db      	ldr	r3, [r3, #12]
   d49b0:	9301      	str	r3, [sp, #4]
   d49b2:	bd08      	pop	{r3, pc}
   d49b4:	00030268 	.word	0x00030268

000d49b8 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d49b8:	b508      	push	{r3, lr}
   d49ba:	4b02      	ldr	r3, [pc, #8]	; (d49c4 <HAL_Pin_Map+0xc>)
   d49bc:	681b      	ldr	r3, [r3, #0]
   d49be:	681b      	ldr	r3, [r3, #0]
   d49c0:	9301      	str	r3, [sp, #4]
   d49c2:	bd08      	pop	{r3, pc}
   d49c4:	0003022c 	.word	0x0003022c

000d49c8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d49c8:	b508      	push	{r3, lr}
   d49ca:	4b02      	ldr	r3, [pc, #8]	; (d49d4 <HAL_RNG_GetRandomNumber+0xc>)
   d49cc:	681b      	ldr	r3, [r3, #0]
   d49ce:	685b      	ldr	r3, [r3, #4]
   d49d0:	9301      	str	r3, [sp, #4]
   d49d2:	bd08      	pop	{r3, pc}
   d49d4:	00030218 	.word	0x00030218

000d49d8 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d49d8:	b508      	push	{r3, lr}
   d49da:	4b02      	ldr	r3, [pc, #8]	; (d49e4 <HAL_Delay_Microseconds+0xc>)
   d49dc:	681b      	ldr	r3, [r3, #0]
   d49de:	68db      	ldr	r3, [r3, #12]
   d49e0:	9301      	str	r3, [sp, #4]
   d49e2:	bd08      	pop	{r3, pc}
   d49e4:	00030218 	.word	0x00030218

000d49e8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d49e8:	b508      	push	{r3, lr}
   d49ea:	4b02      	ldr	r3, [pc, #8]	; (d49f4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d49ec:	681b      	ldr	r3, [r3, #0]
   d49ee:	695b      	ldr	r3, [r3, #20]
   d49f0:	9301      	str	r3, [sp, #4]
   d49f2:	bd08      	pop	{r3, pc}
   d49f4:	00030218 	.word	0x00030218

000d49f8 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d49f8:	b508      	push	{r3, lr}
   d49fa:	4b02      	ldr	r3, [pc, #8]	; (d4a04 <os_thread_is_current+0xc>)
   d49fc:	681b      	ldr	r3, [r3, #0]
   d49fe:	689b      	ldr	r3, [r3, #8]
   d4a00:	9301      	str	r3, [sp, #4]
   d4a02:	bd08      	pop	{r3, pc}
   d4a04:	00030248 	.word	0x00030248

000d4a08 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4a08:	b508      	push	{r3, lr}
   d4a0a:	4b02      	ldr	r3, [pc, #8]	; (d4a14 <os_thread_join+0xc>)
   d4a0c:	681b      	ldr	r3, [r3, #0]
   d4a0e:	691b      	ldr	r3, [r3, #16]
   d4a10:	9301      	str	r3, [sp, #4]
   d4a12:	bd08      	pop	{r3, pc}
   d4a14:	00030248 	.word	0x00030248

000d4a18 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4a18:	b508      	push	{r3, lr}
   d4a1a:	4b02      	ldr	r3, [pc, #8]	; (d4a24 <os_thread_cleanup+0xc>)
   d4a1c:	681b      	ldr	r3, [r3, #0]
   d4a1e:	695b      	ldr	r3, [r3, #20]
   d4a20:	9301      	str	r3, [sp, #4]
   d4a22:	bd08      	pop	{r3, pc}
   d4a24:	00030248 	.word	0x00030248

000d4a28 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4a28:	b508      	push	{r3, lr}
   d4a2a:	4b02      	ldr	r3, [pc, #8]	; (d4a34 <os_mutex_recursive_create+0xc>)
   d4a2c:	681b      	ldr	r3, [r3, #0]
   d4a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4a30:	9301      	str	r3, [sp, #4]
   d4a32:	bd08      	pop	{r3, pc}
   d4a34:	00030248 	.word	0x00030248

000d4a38 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4a38:	b508      	push	{r3, lr}
   d4a3a:	4b02      	ldr	r3, [pc, #8]	; (d4a44 <os_mutex_recursive_destroy+0xc>)
   d4a3c:	681b      	ldr	r3, [r3, #0]
   d4a3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4a40:	9301      	str	r3, [sp, #4]
   d4a42:	bd08      	pop	{r3, pc}
   d4a44:	00030248 	.word	0x00030248

000d4a48 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d4a48:	b508      	push	{r3, lr}
   d4a4a:	4b02      	ldr	r3, [pc, #8]	; (d4a54 <os_mutex_recursive_lock+0xc>)
   d4a4c:	681b      	ldr	r3, [r3, #0]
   d4a4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4a50:	9301      	str	r3, [sp, #4]
   d4a52:	bd08      	pop	{r3, pc}
   d4a54:	00030248 	.word	0x00030248

000d4a58 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d4a58:	b508      	push	{r3, lr}
   d4a5a:	4b02      	ldr	r3, [pc, #8]	; (d4a64 <os_mutex_recursive_unlock+0xc>)
   d4a5c:	681b      	ldr	r3, [r3, #0]
   d4a5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4a60:	9301      	str	r3, [sp, #4]
   d4a62:	bd08      	pop	{r3, pc}
   d4a64:	00030248 	.word	0x00030248

000d4a68 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4a68:	b508      	push	{r3, lr}
   d4a6a:	4b02      	ldr	r3, [pc, #8]	; (d4a74 <inet_inet_ntop+0xc>)
   d4a6c:	681b      	ldr	r3, [r3, #0]
   d4a6e:	695b      	ldr	r3, [r3, #20]
   d4a70:	9301      	str	r3, [sp, #4]
   d4a72:	bd08      	pop	{r3, pc}
   d4a74:	00030264 	.word	0x00030264

000d4a78 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4a78:	b508      	push	{r3, lr}
   d4a7a:	4b02      	ldr	r3, [pc, #8]	; (d4a84 <HAL_USART_Init+0xc>)
   d4a7c:	681b      	ldr	r3, [r3, #0]
   d4a7e:	681b      	ldr	r3, [r3, #0]
   d4a80:	9301      	str	r3, [sp, #4]
   d4a82:	bd08      	pop	{r3, pc}
   d4a84:	0003023c 	.word	0x0003023c

000d4a88 <HAL_USART_End>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
   d4a88:	b508      	push	{r3, lr}
   d4a8a:	4b02      	ldr	r3, [pc, #8]	; (d4a94 <HAL_USART_End+0xc>)
   d4a8c:	681b      	ldr	r3, [r3, #0]
   d4a8e:	689b      	ldr	r3, [r3, #8]
   d4a90:	9301      	str	r3, [sp, #4]
   d4a92:	bd08      	pop	{r3, pc}
   d4a94:	0003023c 	.word	0x0003023c

000d4a98 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4a98:	b508      	push	{r3, lr}
   d4a9a:	4b02      	ldr	r3, [pc, #8]	; (d4aa4 <HAL_USART_Write_Data+0xc>)
   d4a9c:	681b      	ldr	r3, [r3, #0]
   d4a9e:	68db      	ldr	r3, [r3, #12]
   d4aa0:	9301      	str	r3, [sp, #4]
   d4aa2:	bd08      	pop	{r3, pc}
   d4aa4:	0003023c 	.word	0x0003023c

000d4aa8 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4aa8:	b508      	push	{r3, lr}
   d4aaa:	4b02      	ldr	r3, [pc, #8]	; (d4ab4 <HAL_USART_Available_Data+0xc>)
   d4aac:	681b      	ldr	r3, [r3, #0]
   d4aae:	691b      	ldr	r3, [r3, #16]
   d4ab0:	9301      	str	r3, [sp, #4]
   d4ab2:	bd08      	pop	{r3, pc}
   d4ab4:	0003023c 	.word	0x0003023c

000d4ab8 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4ab8:	b508      	push	{r3, lr}
   d4aba:	4b02      	ldr	r3, [pc, #8]	; (d4ac4 <HAL_USART_Read_Data+0xc>)
   d4abc:	681b      	ldr	r3, [r3, #0]
   d4abe:	695b      	ldr	r3, [r3, #20]
   d4ac0:	9301      	str	r3, [sp, #4]
   d4ac2:	bd08      	pop	{r3, pc}
   d4ac4:	0003023c 	.word	0x0003023c

000d4ac8 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4ac8:	b508      	push	{r3, lr}
   d4aca:	4b02      	ldr	r3, [pc, #8]	; (d4ad4 <HAL_USART_Peek_Data+0xc>)
   d4acc:	681b      	ldr	r3, [r3, #0]
   d4ace:	699b      	ldr	r3, [r3, #24]
   d4ad0:	9301      	str	r3, [sp, #4]
   d4ad2:	bd08      	pop	{r3, pc}
   d4ad4:	0003023c 	.word	0x0003023c

000d4ad8 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4ad8:	b508      	push	{r3, lr}
   d4ada:	4b02      	ldr	r3, [pc, #8]	; (d4ae4 <HAL_USART_Flush_Data+0xc>)
   d4adc:	681b      	ldr	r3, [r3, #0]
   d4ade:	69db      	ldr	r3, [r3, #28]
   d4ae0:	9301      	str	r3, [sp, #4]
   d4ae2:	bd08      	pop	{r3, pc}
   d4ae4:	0003023c 	.word	0x0003023c

000d4ae8 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4ae8:	b508      	push	{r3, lr}
   d4aea:	4b02      	ldr	r3, [pc, #8]	; (d4af4 <HAL_USART_Available_Data_For_Write+0xc>)
   d4aec:	681b      	ldr	r3, [r3, #0]
   d4aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4af0:	9301      	str	r3, [sp, #4]
   d4af2:	bd08      	pop	{r3, pc}
   d4af4:	0003023c 	.word	0x0003023c

000d4af8 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   d4af8:	b508      	push	{r3, lr}
   d4afa:	4b02      	ldr	r3, [pc, #8]	; (d4b04 <HAL_USART_BeginConfig+0xc>)
   d4afc:	681b      	ldr	r3, [r3, #0]
   d4afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4b00:	9301      	str	r3, [sp, #4]
   d4b02:	bd08      	pop	{r3, pc}
   d4b04:	0003023c 	.word	0x0003023c

000d4b08 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4b08:	b508      	push	{r3, lr}
   d4b0a:	4b02      	ldr	r3, [pc, #8]	; (d4b14 <HAL_USB_USART_Init+0xc>)
   d4b0c:	681b      	ldr	r3, [r3, #0]
   d4b0e:	681b      	ldr	r3, [r3, #0]
   d4b10:	9301      	str	r3, [sp, #4]
   d4b12:	bd08      	pop	{r3, pc}
   d4b14:	0003024c 	.word	0x0003024c

000d4b18 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4b18:	b508      	push	{r3, lr}
   d4b1a:	4b02      	ldr	r3, [pc, #8]	; (d4b24 <HAL_USB_USART_Begin+0xc>)
   d4b1c:	681b      	ldr	r3, [r3, #0]
   d4b1e:	685b      	ldr	r3, [r3, #4]
   d4b20:	9301      	str	r3, [sp, #4]
   d4b22:	bd08      	pop	{r3, pc}
   d4b24:	0003024c 	.word	0x0003024c

000d4b28 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   d4b28:	b508      	push	{r3, lr}
   d4b2a:	4b02      	ldr	r3, [pc, #8]	; (d4b34 <HAL_USB_USART_End+0xc>)
   d4b2c:	681b      	ldr	r3, [r3, #0]
   d4b2e:	689b      	ldr	r3, [r3, #8]
   d4b30:	9301      	str	r3, [sp, #4]
   d4b32:	bd08      	pop	{r3, pc}
   d4b34:	0003024c 	.word	0x0003024c

000d4b38 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4b38:	b508      	push	{r3, lr}
   d4b3a:	4b02      	ldr	r3, [pc, #8]	; (d4b44 <HAL_USB_USART_Available_Data+0xc>)
   d4b3c:	681b      	ldr	r3, [r3, #0]
   d4b3e:	691b      	ldr	r3, [r3, #16]
   d4b40:	9301      	str	r3, [sp, #4]
   d4b42:	bd08      	pop	{r3, pc}
   d4b44:	0003024c 	.word	0x0003024c

000d4b48 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4b48:	b508      	push	{r3, lr}
   d4b4a:	4b02      	ldr	r3, [pc, #8]	; (d4b54 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4b4c:	681b      	ldr	r3, [r3, #0]
   d4b4e:	695b      	ldr	r3, [r3, #20]
   d4b50:	9301      	str	r3, [sp, #4]
   d4b52:	bd08      	pop	{r3, pc}
   d4b54:	0003024c 	.word	0x0003024c

000d4b58 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4b58:	b508      	push	{r3, lr}
   d4b5a:	4b02      	ldr	r3, [pc, #8]	; (d4b64 <HAL_USB_USART_Receive_Data+0xc>)
   d4b5c:	681b      	ldr	r3, [r3, #0]
   d4b5e:	699b      	ldr	r3, [r3, #24]
   d4b60:	9301      	str	r3, [sp, #4]
   d4b62:	bd08      	pop	{r3, pc}
   d4b64:	0003024c 	.word	0x0003024c

000d4b68 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4b68:	b508      	push	{r3, lr}
   d4b6a:	4b02      	ldr	r3, [pc, #8]	; (d4b74 <HAL_USB_USART_Send_Data+0xc>)
   d4b6c:	681b      	ldr	r3, [r3, #0]
   d4b6e:	69db      	ldr	r3, [r3, #28]
   d4b70:	9301      	str	r3, [sp, #4]
   d4b72:	bd08      	pop	{r3, pc}
   d4b74:	0003024c 	.word	0x0003024c

000d4b78 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4b78:	b508      	push	{r3, lr}
   d4b7a:	4b02      	ldr	r3, [pc, #8]	; (d4b84 <HAL_USB_USART_Flush_Data+0xc>)
   d4b7c:	681b      	ldr	r3, [r3, #0]
   d4b7e:	6a1b      	ldr	r3, [r3, #32]
   d4b80:	9301      	str	r3, [sp, #4]
   d4b82:	bd08      	pop	{r3, pc}
   d4b84:	0003024c 	.word	0x0003024c

000d4b88 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d4b88:	b508      	push	{r3, lr}
   d4b8a:	4b02      	ldr	r3, [pc, #8]	; (d4b94 <panic_+0xc>)
   d4b8c:	681b      	ldr	r3, [r3, #0]
   d4b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4b90:	9301      	str	r3, [sp, #4]
   d4b92:	bd08      	pop	{r3, pc}
   d4b94:	00030260 	.word	0x00030260

000d4b98 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d4b98:	b508      	push	{r3, lr}
   d4b9a:	4b02      	ldr	r3, [pc, #8]	; (d4ba4 <log_message_v+0xc>)
   d4b9c:	681b      	ldr	r3, [r3, #0]
   d4b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4ba0:	9301      	str	r3, [sp, #4]
   d4ba2:	bd08      	pop	{r3, pc}
   d4ba4:	00030260 	.word	0x00030260

000d4ba8 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   d4ba8:	b508      	push	{r3, lr}
   d4baa:	4b02      	ldr	r3, [pc, #8]	; (d4bb4 <log_level_name+0xc>)
   d4bac:	681b      	ldr	r3, [r3, #0]
   d4bae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d4bb0:	9301      	str	r3, [sp, #4]
   d4bb2:	bd08      	pop	{r3, pc}
   d4bb4:	00030260 	.word	0x00030260

000d4bb8 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   d4bb8:	b508      	push	{r3, lr}
   d4bba:	4b02      	ldr	r3, [pc, #8]	; (d4bc4 <log_set_callbacks+0xc>)
   d4bbc:	681b      	ldr	r3, [r3, #0]
   d4bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d4bc0:	9301      	str	r3, [sp, #4]
   d4bc2:	bd08      	pop	{r3, pc}
   d4bc4:	00030260 	.word	0x00030260

000d4bc8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4bc8:	b508      	push	{r3, lr}
   d4bca:	4b02      	ldr	r3, [pc, #8]	; (d4bd4 <set_system_mode+0xc>)
   d4bcc:	681b      	ldr	r3, [r3, #0]
   d4bce:	685b      	ldr	r3, [r3, #4]
   d4bd0:	9301      	str	r3, [sp, #4]
   d4bd2:	bd08      	pop	{r3, pc}
   d4bd4:	00030220 	.word	0x00030220

000d4bd8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4bd8:	b508      	push	{r3, lr}
   d4bda:	4b02      	ldr	r3, [pc, #8]	; (d4be4 <system_delay_ms+0xc>)
   d4bdc:	681b      	ldr	r3, [r3, #0]
   d4bde:	695b      	ldr	r3, [r3, #20]
   d4be0:	9301      	str	r3, [sp, #4]
   d4be2:	bd08      	pop	{r3, pc}
   d4be4:	00030220 	.word	0x00030220

000d4be8 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d4be8:	b508      	push	{r3, lr}
   d4bea:	4b02      	ldr	r3, [pc, #8]	; (d4bf4 <application_thread_current+0xc>)
   d4bec:	681b      	ldr	r3, [r3, #0]
   d4bee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4bf0:	9301      	str	r3, [sp, #4]
   d4bf2:	bd08      	pop	{r3, pc}
   d4bf4:	00030220 	.word	0x00030220

000d4bf8 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4bf8:	b508      	push	{r3, lr}
   d4bfa:	4b02      	ldr	r3, [pc, #8]	; (d4c04 <application_thread_invoke+0xc>)
   d4bfc:	681b      	ldr	r3, [r3, #0]
   d4bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4c00:	9301      	str	r3, [sp, #4]
   d4c02:	bd08      	pop	{r3, pc}
   d4c04:	00030220 	.word	0x00030220

000d4c08 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4c08:	b508      	push	{r3, lr}
   d4c0a:	4b03      	ldr	r3, [pc, #12]	; (d4c18 <system_ctrl_set_app_request_handler+0x10>)
   d4c0c:	681b      	ldr	r3, [r3, #0]
   d4c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4c12:	9301      	str	r3, [sp, #4]
   d4c14:	bd08      	pop	{r3, pc}
   d4c16:	0000      	.short	0x0000
   d4c18:	00030220 	.word	0x00030220

000d4c1c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4c1c:	b508      	push	{r3, lr}
   d4c1e:	4b03      	ldr	r3, [pc, #12]	; (d4c2c <system_ctrl_set_result+0x10>)
   d4c20:	681b      	ldr	r3, [r3, #0]
   d4c22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4c26:	9301      	str	r3, [sp, #4]
   d4c28:	bd08      	pop	{r3, pc}
   d4c2a:	0000      	.short	0x0000
   d4c2c:	00030220 	.word	0x00030220

000d4c30 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4c30:	b508      	push	{r3, lr}
   d4c32:	4b02      	ldr	r3, [pc, #8]	; (d4c3c <network_connect+0xc>)
   d4c34:	681b      	ldr	r3, [r3, #0]
   d4c36:	685b      	ldr	r3, [r3, #4]
   d4c38:	9301      	str	r3, [sp, #4]
   d4c3a:	bd08      	pop	{r3, pc}
   d4c3c:	00030240 	.word	0x00030240

000d4c40 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4c40:	b508      	push	{r3, lr}
   d4c42:	4b02      	ldr	r3, [pc, #8]	; (d4c4c <network_connecting+0xc>)
   d4c44:	681b      	ldr	r3, [r3, #0]
   d4c46:	689b      	ldr	r3, [r3, #8]
   d4c48:	9301      	str	r3, [sp, #4]
   d4c4a:	bd08      	pop	{r3, pc}
   d4c4c:	00030240 	.word	0x00030240

000d4c50 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4c50:	b508      	push	{r3, lr}
   d4c52:	4b02      	ldr	r3, [pc, #8]	; (d4c5c <network_disconnect+0xc>)
   d4c54:	681b      	ldr	r3, [r3, #0]
   d4c56:	68db      	ldr	r3, [r3, #12]
   d4c58:	9301      	str	r3, [sp, #4]
   d4c5a:	bd08      	pop	{r3, pc}
   d4c5c:	00030240 	.word	0x00030240

000d4c60 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4c60:	b508      	push	{r3, lr}
   d4c62:	4b02      	ldr	r3, [pc, #8]	; (d4c6c <network_ready+0xc>)
   d4c64:	681b      	ldr	r3, [r3, #0]
   d4c66:	691b      	ldr	r3, [r3, #16]
   d4c68:	9301      	str	r3, [sp, #4]
   d4c6a:	bd08      	pop	{r3, pc}
   d4c6c:	00030240 	.word	0x00030240

000d4c70 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4c70:	b508      	push	{r3, lr}
   d4c72:	4b02      	ldr	r3, [pc, #8]	; (d4c7c <network_on+0xc>)
   d4c74:	681b      	ldr	r3, [r3, #0]
   d4c76:	695b      	ldr	r3, [r3, #20]
   d4c78:	9301      	str	r3, [sp, #4]
   d4c7a:	bd08      	pop	{r3, pc}
   d4c7c:	00030240 	.word	0x00030240

000d4c80 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4c80:	b508      	push	{r3, lr}
   d4c82:	4b02      	ldr	r3, [pc, #8]	; (d4c8c <network_off+0xc>)
   d4c84:	681b      	ldr	r3, [r3, #0]
   d4c86:	699b      	ldr	r3, [r3, #24]
   d4c88:	9301      	str	r3, [sp, #4]
   d4c8a:	bd08      	pop	{r3, pc}
   d4c8c:	00030240 	.word	0x00030240

000d4c90 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4c90:	b508      	push	{r3, lr}
   d4c92:	4b02      	ldr	r3, [pc, #8]	; (d4c9c <network_listen+0xc>)
   d4c94:	681b      	ldr	r3, [r3, #0]
   d4c96:	69db      	ldr	r3, [r3, #28]
   d4c98:	9301      	str	r3, [sp, #4]
   d4c9a:	bd08      	pop	{r3, pc}
   d4c9c:	00030240 	.word	0x00030240

000d4ca0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4ca0:	b508      	push	{r3, lr}
   d4ca2:	4b02      	ldr	r3, [pc, #8]	; (d4cac <network_listening+0xc>)
   d4ca4:	681b      	ldr	r3, [r3, #0]
   d4ca6:	6a1b      	ldr	r3, [r3, #32]
   d4ca8:	9301      	str	r3, [sp, #4]
   d4caa:	bd08      	pop	{r3, pc}
   d4cac:	00030240 	.word	0x00030240

000d4cb0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4cb0:	b508      	push	{r3, lr}
   d4cb2:	4b02      	ldr	r3, [pc, #8]	; (d4cbc <network_set_listen_timeout+0xc>)
   d4cb4:	681b      	ldr	r3, [r3, #0]
   d4cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4cb8:	9301      	str	r3, [sp, #4]
   d4cba:	bd08      	pop	{r3, pc}
   d4cbc:	00030240 	.word	0x00030240

000d4cc0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4cc0:	b508      	push	{r3, lr}
   d4cc2:	4b02      	ldr	r3, [pc, #8]	; (d4ccc <network_get_listen_timeout+0xc>)
   d4cc4:	681b      	ldr	r3, [r3, #0]
   d4cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4cc8:	9301      	str	r3, [sp, #4]
   d4cca:	bd08      	pop	{r3, pc}
   d4ccc:	00030240 	.word	0x00030240

000d4cd0 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d4cd0:	b508      	push	{r3, lr}
   d4cd2:	4b02      	ldr	r3, [pc, #8]	; (d4cdc <spark_cloud_flag_connected+0xc>)
   d4cd4:	681b      	ldr	r3, [r3, #0]
   d4cd6:	695b      	ldr	r3, [r3, #20]
   d4cd8:	9301      	str	r3, [sp, #4]
   d4cda:	bd08      	pop	{r3, pc}
   d4cdc:	00030244 	.word	0x00030244

000d4ce0 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d4ce0:	b508      	push	{r3, lr}
   d4ce2:	4b02      	ldr	r3, [pc, #8]	; (d4cec <spark_send_event+0xc>)
   d4ce4:	681b      	ldr	r3, [r3, #0]
   d4ce6:	6a1b      	ldr	r3, [r3, #32]
   d4ce8:	9301      	str	r3, [sp, #4]
   d4cea:	bd08      	pop	{r3, pc}
   d4cec:	00030244 	.word	0x00030244

000d4cf0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4cf0:	b508      	push	{r3, lr}
   d4cf2:	4b02      	ldr	r3, [pc, #8]	; (d4cfc <spark_set_random_seed_from_cloud_handler+0xc>)
   d4cf4:	681b      	ldr	r3, [r3, #0]
   d4cf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4cf8:	9301      	str	r3, [sp, #4]
   d4cfa:	bd08      	pop	{r3, pc}
   d4cfc:	00030244 	.word	0x00030244

000d4d00 <spark_publish_vitals>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
   d4d00:	b508      	push	{r3, lr}
   d4d02:	4b02      	ldr	r3, [pc, #8]	; (d4d0c <spark_publish_vitals+0xc>)
   d4d04:	681b      	ldr	r3, [r3, #0]
   d4d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4d08:	9301      	str	r3, [sp, #4]
   d4d0a:	bd08      	pop	{r3, pc}
   d4d0c:	00030244 	.word	0x00030244

000d4d10 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4d10:	b508      	push	{r3, lr}
   d4d12:	4b02      	ldr	r3, [pc, #8]	; (d4d1c <malloc+0xc>)
   d4d14:	681b      	ldr	r3, [r3, #0]
   d4d16:	681b      	ldr	r3, [r3, #0]
   d4d18:	9301      	str	r3, [sp, #4]
   d4d1a:	bd08      	pop	{r3, pc}
   d4d1c:	0003021c 	.word	0x0003021c

000d4d20 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4d20:	b508      	push	{r3, lr}
   d4d22:	4b02      	ldr	r3, [pc, #8]	; (d4d2c <free+0xc>)
   d4d24:	681b      	ldr	r3, [r3, #0]
   d4d26:	685b      	ldr	r3, [r3, #4]
   d4d28:	9301      	str	r3, [sp, #4]
   d4d2a:	bd08      	pop	{r3, pc}
   d4d2c:	0003021c 	.word	0x0003021c

000d4d30 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4d30:	b508      	push	{r3, lr}
   d4d32:	4b02      	ldr	r3, [pc, #8]	; (d4d3c <realloc+0xc>)
   d4d34:	681b      	ldr	r3, [r3, #0]
   d4d36:	689b      	ldr	r3, [r3, #8]
   d4d38:	9301      	str	r3, [sp, #4]
   d4d3a:	bd08      	pop	{r3, pc}
   d4d3c:	0003021c 	.word	0x0003021c

000d4d40 <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d4d40:	b508      	push	{r3, lr}
   d4d42:	4b02      	ldr	r3, [pc, #8]	; (d4d4c <snprintf+0xc>)
   d4d44:	681b      	ldr	r3, [r3, #0]
   d4d46:	69db      	ldr	r3, [r3, #28]
   d4d48:	9301      	str	r3, [sp, #4]
   d4d4a:	bd08      	pop	{r3, pc}
   d4d4c:	0003021c 	.word	0x0003021c

000d4d50 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4d50:	b508      	push	{r3, lr}
   d4d52:	4b02      	ldr	r3, [pc, #8]	; (d4d5c <vsnprintf+0xc>)
   d4d54:	681b      	ldr	r3, [r3, #0]
   d4d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4d58:	9301      	str	r3, [sp, #4]
   d4d5a:	bd08      	pop	{r3, pc}
   d4d5c:	0003021c 	.word	0x0003021c

000d4d60 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4d60:	b508      	push	{r3, lr}
   d4d62:	4b02      	ldr	r3, [pc, #8]	; (d4d6c <abort+0xc>)
   d4d64:	681b      	ldr	r3, [r3, #0]
   d4d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4d68:	9301      	str	r3, [sp, #4]
   d4d6a:	bd08      	pop	{r3, pc}
   d4d6c:	0003021c 	.word	0x0003021c

000d4d70 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d4d70:	b508      	push	{r3, lr}
   d4d72:	4b02      	ldr	r3, [pc, #8]	; (d4d7c <_malloc_r+0xc>)
   d4d74:	681b      	ldr	r3, [r3, #0]
   d4d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4d78:	9301      	str	r3, [sp, #4]
   d4d7a:	bd08      	pop	{r3, pc}
   d4d7c:	0003021c 	.word	0x0003021c

000d4d80 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4d80:	2200      	movs	r2, #0
   d4d82:	4611      	mov	r1, r2
   d4d84:	6840      	ldr	r0, [r0, #4]
   d4d86:	f7ff bf8b 	b.w	d4ca0 <network_listening>

000d4d8a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4d8a:	2200      	movs	r2, #0
   d4d8c:	4611      	mov	r1, r2
   d4d8e:	6840      	ldr	r0, [r0, #4]
   d4d90:	f7ff bf96 	b.w	d4cc0 <network_get_listen_timeout>

000d4d94 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4d94:	2200      	movs	r2, #0
   d4d96:	6840      	ldr	r0, [r0, #4]
   d4d98:	f7ff bf8a 	b.w	d4cb0 <network_set_listen_timeout>

000d4d9c <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4d9c:	2200      	movs	r2, #0
   d4d9e:	f081 0101 	eor.w	r1, r1, #1
   d4da2:	6840      	ldr	r0, [r0, #4]
   d4da4:	f7ff bf74 	b.w	d4c90 <network_listen>

000d4da8 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4da8:	2300      	movs	r3, #0
   d4daa:	461a      	mov	r2, r3
   d4dac:	4619      	mov	r1, r3
   d4dae:	6840      	ldr	r0, [r0, #4]
   d4db0:	f7ff bf66 	b.w	d4c80 <network_off>

000d4db4 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4db4:	2300      	movs	r3, #0
   d4db6:	461a      	mov	r2, r3
   d4db8:	4619      	mov	r1, r3
   d4dba:	6840      	ldr	r0, [r0, #4]
   d4dbc:	f7ff bf58 	b.w	d4c70 <network_on>

000d4dc0 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4dc0:	2200      	movs	r2, #0
   d4dc2:	4611      	mov	r1, r2
   d4dc4:	6840      	ldr	r0, [r0, #4]
   d4dc6:	f7ff bf4b 	b.w	d4c60 <network_ready>

000d4dca <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4dca:	2200      	movs	r2, #0
   d4dcc:	4611      	mov	r1, r2
   d4dce:	6840      	ldr	r0, [r0, #4]
   d4dd0:	f7ff bf36 	b.w	d4c40 <network_connecting>

000d4dd4 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4dd4:	2200      	movs	r2, #0
   d4dd6:	2102      	movs	r1, #2
   d4dd8:	6840      	ldr	r0, [r0, #4]
   d4dda:	f7ff bf39 	b.w	d4c50 <network_disconnect>

000d4dde <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4dde:	2300      	movs	r3, #0
   d4de0:	461a      	mov	r2, r3
   d4de2:	6840      	ldr	r0, [r0, #4]
   d4de4:	f7ff bf24 	b.w	d4c30 <network_connect>

000d4de8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4de8:	4b02      	ldr	r3, [pc, #8]	; (d4df4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4dea:	2203      	movs	r2, #3
   d4dec:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4dee:	4a02      	ldr	r2, [pc, #8]	; (d4df8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4df0:	601a      	str	r2, [r3, #0]
   d4df2:	4770      	bx	lr
   d4df4:	2003e4bc 	.word	0x2003e4bc
   d4df8:	000d7ba0 	.word	0x000d7ba0

000d4dfc <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4dfc:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4dfe:	4c09      	ldr	r4, [pc, #36]	; (d4e24 <_GLOBAL__sub_I_System+0x28>)
   d4e00:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4e02:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4e06:	6020      	str	r0, [r4, #0]
   d4e08:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4e0a:	71a0      	strb	r0, [r4, #6]
   d4e0c:	8120      	strh	r0, [r4, #8]
   d4e0e:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4e10:	f7ff feda 	bl	d4bc8 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d4e14:	4620      	mov	r0, r4
   d4e16:	4a04      	ldr	r2, [pc, #16]	; (d4e28 <_GLOBAL__sub_I_System+0x2c>)
   d4e18:	4904      	ldr	r1, [pc, #16]	; (d4e2c <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4e1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d4e1e:	f002 b9c4 	b.w	d71aa <__aeabi_atexit>
   d4e22:	bf00      	nop
   d4e24:	2003e4c4 	.word	0x2003e4c4
   d4e28:	2003e480 	.word	0x2003e480
   d4e2c:	000d40d3 	.word	0x000d40d3

000d4e30 <_ZN6StringC1EOS_>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4e30:	2300      	movs	r3, #0
   d4e32:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d4e34:	6043      	str	r3, [r0, #4]
	len = 0;
   d4e36:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4e38:	7303      	strb	r3, [r0, #12]
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
   d4e3a:	b510      	push	{r4, lr}
			return;
		} else {
			free(buffer);
		}
	}
	buffer = rhs.buffer;
   d4e3c:	680c      	ldr	r4, [r1, #0]
   d4e3e:	6004      	str	r4, [r0, #0]
	capacity = rhs.capacity;
   d4e40:	684c      	ldr	r4, [r1, #4]
   d4e42:	6044      	str	r4, [r0, #4]
	len = rhs.len;
   d4e44:	688c      	ldr	r4, [r1, #8]
   d4e46:	6084      	str	r4, [r0, #8]
	rhs.buffer = NULL;
   d4e48:	600b      	str	r3, [r1, #0]
	rhs.capacity = 0;
   d4e4a:	604b      	str	r3, [r1, #4]
	rhs.len = 0;
   d4e4c:	608b      	str	r3, [r1, #8]
#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
{
	init();
	move(rval);
}
   d4e4e:	bd10      	pop	{r4, pc}

000d4e50 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d4e50:	b510      	push	{r4, lr}
   d4e52:	4604      	mov	r4, r0
{
	free(buffer);
   d4e54:	6800      	ldr	r0, [r0, #0]
   d4e56:	f7ff ff63 	bl	d4d20 <free>
}
   d4e5a:	4620      	mov	r0, r4
   d4e5c:	bd10      	pop	{r4, pc}

000d4e5e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d4e5e:	b510      	push	{r4, lr}
   d4e60:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d4e62:	6800      	ldr	r0, [r0, #0]
   d4e64:	b108      	cbz	r0, d4e6a <_ZN6String10invalidateEv+0xc>
   d4e66:	f7ff ff5b 	bl	d4d20 <free>
	buffer = NULL;
   d4e6a:	2300      	movs	r3, #0
   d4e6c:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d4e6e:	60a3      	str	r3, [r4, #8]
   d4e70:	6063      	str	r3, [r4, #4]
   d4e72:	bd10      	pop	{r4, pc}

000d4e74 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d4e74:	b538      	push	{r3, r4, r5, lr}
   d4e76:	4604      	mov	r4, r0
   d4e78:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d4e7a:	6800      	ldr	r0, [r0, #0]
   d4e7c:	3101      	adds	r1, #1
   d4e7e:	f7ff ff57 	bl	d4d30 <realloc>
	if (newbuffer) {
   d4e82:	b110      	cbz	r0, d4e8a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d4e84:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d4e88:	2001      	movs	r0, #1
	}
	return 0;
}
   d4e8a:	bd38      	pop	{r3, r4, r5, pc}

000d4e8c <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4e8c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d4e8e:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4e90:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d4e92:	b113      	cbz	r3, d4e9a <_ZN6String7reserveEj+0xe>
   d4e94:	6843      	ldr	r3, [r0, #4]
   d4e96:	428b      	cmp	r3, r1
   d4e98:	d207      	bcs.n	d4eaa <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d4e9a:	4620      	mov	r0, r4
   d4e9c:	f7ff ffea 	bl	d4e74 <_ZN6String12changeBufferEj>
   d4ea0:	b120      	cbz	r0, d4eac <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d4ea2:	68a3      	ldr	r3, [r4, #8]
   d4ea4:	b90b      	cbnz	r3, d4eaa <_ZN6String7reserveEj+0x1e>
   d4ea6:	6822      	ldr	r2, [r4, #0]
   d4ea8:	7013      	strb	r3, [r2, #0]
   d4eaa:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d4eac:	bd10      	pop	{r4, pc}

000d4eae <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4eae:	b570      	push	{r4, r5, r6, lr}
   d4eb0:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d4eb2:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4eb4:	4604      	mov	r4, r0
   d4eb6:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d4eb8:	f7ff ffe8 	bl	d4e8c <_ZN6String7reserveEj>
   d4ebc:	b918      	cbnz	r0, d4ec6 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d4ebe:	4620      	mov	r0, r4
   d4ec0:	f7ff ffcd 	bl	d4e5e <_ZN6String10invalidateEv>
		return *this;
   d4ec4:	e009      	b.n	d4eda <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d4ec6:	462a      	mov	r2, r5
   d4ec8:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d4eca:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d4ecc:	6820      	ldr	r0, [r4, #0]
   d4ece:	f002 fae3 	bl	d7498 <memcpy>
	buffer[len] = 0;
   d4ed2:	6822      	ldr	r2, [r4, #0]
   d4ed4:	68a3      	ldr	r3, [r4, #8]
   d4ed6:	2100      	movs	r1, #0
   d4ed8:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d4eda:	4620      	mov	r0, r4
   d4edc:	bd70      	pop	{r4, r5, r6, pc}

000d4ede <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d4ede:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d4ee0:	b510      	push	{r4, lr}
   d4ee2:	460b      	mov	r3, r1
   d4ee4:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d4ee6:	d007      	beq.n	d4ef8 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d4ee8:	6809      	ldr	r1, [r1, #0]
   d4eea:	b119      	cbz	r1, d4ef4 <_ZN6StringaSERKS_+0x16>
   d4eec:	689a      	ldr	r2, [r3, #8]
   d4eee:	f7ff ffde 	bl	d4eae <_ZN6String4copyEPKcj>
   d4ef2:	e001      	b.n	d4ef8 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d4ef4:	f7ff ffb3 	bl	d4e5e <_ZN6String10invalidateEv>

	return *this;
}
   d4ef8:	4620      	mov	r0, r4
   d4efa:	bd10      	pop	{r4, pc}

000d4efc <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d4efc:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4efe:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d4f00:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4f02:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d4f04:	6043      	str	r3, [r0, #4]
	len = 0;
   d4f06:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4f08:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d4f0a:	f7ff ffe8 	bl	d4ede <_ZN6StringaSERKS_>
}
   d4f0e:	4620      	mov	r0, r4
   d4f10:	bd10      	pop	{r4, pc}

000d4f12 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4f12:	b510      	push	{r4, lr}
   d4f14:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4f16:	6800      	ldr	r0, [r0, #0]
   d4f18:	b108      	cbz	r0, d4f1e <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4f1a:	f7ff fd8d 	bl	d4a38 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d4f1e:	4620      	mov	r0, r4
   d4f20:	bd10      	pop	{r4, pc}

000d4f22 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4f22:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d4f24:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4f26:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d4f28:	689b      	ldr	r3, [r3, #8]
   d4f2a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4f2c:	68a3      	ldr	r3, [r4, #8]
   d4f2e:	3b01      	subs	r3, #1
   d4f30:	60a3      	str	r3, [r4, #8]
   d4f32:	b92b      	cbnz	r3, d4f40 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112+0x1e>
            _M_destroy();
   d4f34:	6823      	ldr	r3, [r4, #0]
   d4f36:	4620      	mov	r0, r4
   d4f38:	68db      	ldr	r3, [r3, #12]
        }
    }
   d4f3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d4f3e:	4718      	bx	r3
   d4f40:	bd10      	pop	{r4, pc}

000d4f42 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d4f42:	680b      	ldr	r3, [r1, #0]
   d4f44:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d4f46:	b113      	cbz	r3, d4f4e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d4f48:	685a      	ldr	r2, [r3, #4]
   d4f4a:	3201      	adds	r2, #1
   d4f4c:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d4f4e:	4770      	bx	lr

000d4f50 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4f50:	b510      	push	{r4, lr}
   d4f52:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d4f54:	6800      	ldr	r0, [r0, #0]
   d4f56:	b128      	cbz	r0, d4f64 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4f58:	6843      	ldr	r3, [r0, #4]
   d4f5a:	3b01      	subs	r3, #1
   d4f5c:	6043      	str	r3, [r0, #4]
   d4f5e:	b90b      	cbnz	r3, d4f64 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d4f60:	f7ff ffdf 	bl	d4f22 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d4f64:	4620      	mov	r0, r4
   d4f66:	bd10      	pop	{r4, pc}

000d4f68 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>:
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
   d4f68:	b538      	push	{r3, r4, r5, lr}
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d4f6a:	680c      	ldr	r4, [r1, #0]
	if (__tmp != _M_pi)
   d4f6c:	6803      	ldr	r3, [r0, #0]
   d4f6e:	429c      	cmp	r4, r3
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
   d4f70:	4605      	mov	r5, r0
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
   d4f72:	d00c      	beq.n	d4f8e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x26>
	  {
	    if (__tmp != 0)
   d4f74:	b114      	cbz	r4, d4f7c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x14>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d4f76:	6863      	ldr	r3, [r4, #4]
   d4f78:	3301      	adds	r3, #1
   d4f7a:	6063      	str	r3, [r4, #4]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
   d4f7c:	6828      	ldr	r0, [r5, #0]
   d4f7e:	b128      	cbz	r0, d4f8c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4f80:	6843      	ldr	r3, [r0, #4]
   d4f82:	3b01      	subs	r3, #1
   d4f84:	6043      	str	r3, [r0, #4]
   d4f86:	b90b      	cbnz	r3, d4f8c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>
   d4f88:	f7ff ffcb 	bl	d4f22 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
	      _M_pi->_M_release();
	    _M_pi = __tmp;
   d4f8c:	602c      	str	r4, [r5, #0]
	  }
	return *this;
      }
   d4f8e:	4628      	mov	r0, r5
   d4f90:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4f94 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4f94:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4f96:	4c06      	ldr	r4, [pc, #24]	; (d4fb0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4f98:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d4f9a:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4f9c:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d4f9e:	f7ff fd43 	bl	d4a28 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d4fa2:	4620      	mov	r0, r4
   d4fa4:	4a03      	ldr	r2, [pc, #12]	; (d4fb4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d4fa6:	4904      	ldr	r1, [pc, #16]	; (d4fb8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4fa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d4fac:	f002 b8fd 	b.w	d71aa <__aeabi_atexit>
   d4fb0:	2003e4d0 	.word	0x2003e4d0
   d4fb4:	2003e480 	.word	0x2003e480
   d4fb8:	000d4f13 	.word	0x000d4f13

000d4fbc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4fbe:	4606      	mov	r6, r0
   d4fc0:	460d      	mov	r5, r1
   d4fc2:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d4fc4:	2400      	movs	r4, #0
  while (size--) {
   d4fc6:	42bd      	cmp	r5, r7
   d4fc8:	d00c      	beq.n	d4fe4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4fca:	6833      	ldr	r3, [r6, #0]
   d4fcc:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4fd0:	689b      	ldr	r3, [r3, #8]
   d4fd2:	4630      	mov	r0, r6
   d4fd4:	4798      	blx	r3
     if (chunk>=0)
   d4fd6:	2800      	cmp	r0, #0
   d4fd8:	db01      	blt.n	d4fde <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4fda:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d4fdc:	e7f3      	b.n	d4fc6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4fde:	2c00      	cmp	r4, #0
   d4fe0:	bf08      	it	eq
   d4fe2:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d4fe4:	4620      	mov	r0, r4
   d4fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4fe8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4fe8:	b570      	push	{r4, r5, r6, lr}
   d4fea:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d4fec:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d4fee:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d4ff0:	b149      	cbz	r1, d5006 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d4ff2:	f002 fae4 	bl	d75be <strlen>
   d4ff6:	682b      	ldr	r3, [r5, #0]
   d4ff8:	4602      	mov	r2, r0
   d4ffa:	4621      	mov	r1, r4
   d4ffc:	4628      	mov	r0, r5
   d4ffe:	68db      	ldr	r3, [r3, #12]
    }
   d5000:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5004:	4718      	bx	r3
    }
   d5006:	bd70      	pop	{r4, r5, r6, pc}

000d5008 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5008:	6803      	ldr	r3, [r0, #0]
   d500a:	689b      	ldr	r3, [r3, #8]
   d500c:	4718      	bx	r3

000d500e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d500e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5010:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5012:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5014:	f7ff fff8 	bl	d5008 <_ZN5Print5printEc>
  n += print('\n');
   d5018:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d501a:	4604      	mov	r4, r0
  n += print('\n');
   d501c:	4628      	mov	r0, r5
   d501e:	f7ff fff3 	bl	d5008 <_ZN5Print5printEc>
  return n;
}
   d5022:	4420      	add	r0, r4
   d5024:	bd38      	pop	{r3, r4, r5, pc}

000d5026 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d5026:	b538      	push	{r3, r4, r5, lr}
   d5028:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d502a:	f7ff ffdd 	bl	d4fe8 <_ZN5Print5writeEPKc>
   d502e:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d5030:	4628      	mov	r0, r5
   d5032:	f7ff ffec 	bl	d500e <_ZN5Print7printlnEv>
  return n;
}
   d5036:	4420      	add	r0, r4
   d5038:	bd38      	pop	{r3, r4, r5, pc}

000d503a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d503a:	b530      	push	{r4, r5, lr}
   d503c:	b08b      	sub	sp, #44	; 0x2c
   d503e:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5040:	2100      	movs	r1, #0
   d5042:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5046:	2a01      	cmp	r2, #1
   d5048:	bf98      	it	ls
   d504a:	220a      	movls	r2, #10
   d504c:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d5050:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d5054:	fb05 3312 	mls	r3, r5, r2, r3
   d5058:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d505c:	2b09      	cmp	r3, #9
   d505e:	bf94      	ite	ls
   d5060:	3330      	addls	r3, #48	; 0x30
   d5062:	3337      	addhi	r3, #55	; 0x37
   d5064:	b2db      	uxtb	r3, r3
   d5066:	4621      	mov	r1, r4
   d5068:	f804 3901 	strb.w	r3, [r4], #-1
   d506c:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d506e:	2d00      	cmp	r5, #0
   d5070:	d1ee      	bne.n	d5050 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d5072:	f7ff ffb9 	bl	d4fe8 <_ZN5Print5writeEPKc>
}
   d5076:	b00b      	add	sp, #44	; 0x2c
   d5078:	bd30      	pop	{r4, r5, pc}

000d507a <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d507a:	b40c      	push	{r2, r3}
   d507c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5080:	b087      	sub	sp, #28
   d5082:	af00      	add	r7, sp, #0
   d5084:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d5088:	4605      	mov	r5, r0
   d508a:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d508e:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d5090:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d5092:	4623      	mov	r3, r4
   d5094:	464a      	mov	r2, r9
   d5096:	2114      	movs	r1, #20
   d5098:	1d38      	adds	r0, r7, #4
   d509a:	f7ff fe59 	bl	d4d50 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d509e:	2813      	cmp	r0, #19
   d50a0:	d805      	bhi.n	d50ae <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d50a2:	1d39      	adds	r1, r7, #4
   d50a4:	4628      	mov	r0, r5
   d50a6:	f7ff ff9f 	bl	d4fe8 <_ZN5Print5writeEPKc>
   d50aa:	4604      	mov	r4, r0
   d50ac:	e013      	b.n	d50d6 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d50ae:	f100 0308 	add.w	r3, r0, #8
   d50b2:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d50b6:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d50b8:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d50bc:	1c41      	adds	r1, r0, #1
   d50be:	4623      	mov	r3, r4
   d50c0:	464a      	mov	r2, r9
   d50c2:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d50c4:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d50c6:	f7ff fe43 	bl	d4d50 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d50ca:	4669      	mov	r1, sp
   d50cc:	4628      	mov	r0, r5
   d50ce:	f7ff ff8b 	bl	d4fe8 <_ZN5Print5writeEPKc>
   d50d2:	4604      	mov	r4, r0
   d50d4:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d50d6:	b11e      	cbz	r6, d50e0 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d50d8:	4628      	mov	r0, r5
   d50da:	f7ff ff98 	bl	d500e <_ZN5Print7printlnEv>
   d50de:	4404      	add	r4, r0
    return n;
}
   d50e0:	4620      	mov	r0, r4
   d50e2:	371c      	adds	r7, #28
   d50e4:	46bd      	mov	sp, r7
   d50e6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d50ea:	b002      	add	sp, #8
   d50ec:	4770      	bx	lr

000d50ee <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   d50ee:	6880      	ldr	r0, [r0, #8]
   d50f0:	6803      	ldr	r3, [r0, #0]
   d50f2:	68db      	ldr	r3, [r3, #12]
   d50f4:	4718      	bx	r3

000d50f6 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
inline void spark::StreamLogHandler::printf(const char *fmt, ArgsT... args) {
    stream_->printf(fmt, args...);
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
   d50f6:	4770      	bx	lr

000d50f8 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   d50f8:	b119      	cbz	r1, d5102 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   d50fa:	680b      	ldr	r3, [r1, #0]
   d50fc:	4608      	mov	r0, r1
   d50fe:	685b      	ldr	r3, [r3, #4]
   d5100:	4718      	bx	r3
   d5102:	4770      	bx	lr

000d5104 <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print>:
}

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   d5104:	b119      	cbz	r1, d510e <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print+0xa>
   d5106:	680b      	ldr	r3, [r1, #0]
   d5108:	4608      	mov	r0, r1
   d510a:	685b      	ldr	r3, [r3, #4]
   d510c:	4718      	bx	r3
   d510e:	4770      	bx	lr

000d5110 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:

    virtual Print* createStream(const char *type, const JSONValue &params) = 0;
    virtual void destroyStream(Print *stream);
};

class DefaultOutputStreamFactory: public OutputStreamFactory {
   d5110:	4770      	bx	lr

000d5112 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
    virtual LogHandler* createHandler(const char *type, LogLevel level, LogCategoryFilters filters, Print *stream,
            const JSONValue &params) = 0; // TODO: Use some generic container or a buffer instead of JSONValue
    virtual void destroyHandler(LogHandler *handler);
};

class DefaultLogHandlerFactory: public LogHandlerFactory {
   d5112:	4770      	bx	lr

000d5114 <_ZN5spark16JSONStreamWriterD1Ev>:
    void writeSeparator();
    void writeEscaped(const char *data, size_t size);
    void write(char c);
};

class JSONStreamWriter: public JSONWriter {
   d5114:	4770      	bx	lr

000d5116 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
    return s;
}
#endif

// Iterates over subcategory names separated by '.' character
const char* nextSubcategoryName(const char* &category, size_t &size) {
   d5116:	b538      	push	{r3, r4, r5, lr}
   d5118:	4604      	mov	r4, r0
   d511a:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   d511c:	6800      	ldr	r0, [r0, #0]
   d511e:	212e      	movs	r1, #46	; 0x2e
   d5120:	f002 fa1e 	bl	d7560 <strchrnul>
    size = s - category;
   d5124:	6823      	ldr	r3, [r4, #0]
   d5126:	1ac3      	subs	r3, r0, r3
   d5128:	602b      	str	r3, [r5, #0]
    if (size) {
   d512a:	b123      	cbz	r3, d5136 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   d512c:	7803      	ldrb	r3, [r0, #0]
   d512e:	b103      	cbz	r3, d5132 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   d5130:	3001      	adds	r0, #1
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5132:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d5134:	6020      	str	r0, [r4, #0]
        }
        std::swap(s, category);
        return s;
    }
    return nullptr;
   d5136:	4618      	mov	r0, r3
}
   d5138:	bd38      	pop	{r3, r4, r5, pc}

000d513a <_ZN5spark16JSONStreamWriterD0Ev>:
   d513a:	b510      	push	{r4, lr}
   d513c:	210c      	movs	r1, #12
   d513e:	4604      	mov	r4, r0
   d5140:	f002 f840 	bl	d71c4 <_ZdlPvj>
   d5144:	4620      	mov	r0, r4
   d5146:	bd10      	pop	{r4, pc}

000d5148 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   d5148:	b510      	push	{r4, lr}
   d514a:	2104      	movs	r1, #4
   d514c:	4604      	mov	r4, r0
   d514e:	f002 f839 	bl	d71c4 <_ZdlPvj>
   d5152:	4620      	mov	r0, r4
   d5154:	bd10      	pop	{r4, pc}

000d5156 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:

    virtual Print* createStream(const char *type, const JSONValue &params) = 0;
    virtual void destroyStream(Print *stream);
};

class DefaultOutputStreamFactory: public OutputStreamFactory {
   d5156:	b510      	push	{r4, lr}
   d5158:	2104      	movs	r1, #4
   d515a:	4604      	mov	r4, r0
   d515c:	f002 f832 	bl	d71c4 <_ZdlPvj>
   d5160:	4620      	mov	r0, r4
   d5162:	bd10      	pop	{r4, pc}

000d5164 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   d5164:	b538      	push	{r3, r4, r5, lr}
   d5166:	460c      	mov	r4, r1
   d5168:	4605      	mov	r5, r0
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   d516a:	f001 fbdd 	bl	d6928 <_Z16_fetch_usbserialv>
   d516e:	4284      	cmp	r4, r0
   d5170:	d00d      	beq.n	d518e <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2a>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   d5172:	f001 fc61 	bl	d6a38 <_Z22__fetch_global_Serial1v>
   d5176:	4284      	cmp	r4, r0
   d5178:	d105      	bne.n	d5186 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x22>
        Serial1.end();
   d517a:	f001 fc5d 	bl	d6a38 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   d517e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
        Serial1.end();
   d5182:	f001 bc56 	b.w	d6a32 <_ZN11USARTSerial3endEv>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
   d5186:	4621      	mov	r1, r4
   d5188:	4628      	mov	r0, r5
   d518a:	f7ff ffbb 	bl	d5104 <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print>
   d518e:	bd38      	pop	{r3, r4, r5, pc}

000d5190 <_ZNK5spark10JSONStringeqEPKc.isra.7>:

inline bool spark::JSONString::isEmpty() const {
    return !n_;
}

inline bool spark::JSONString::operator==(const char *str) const {
   d5190:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   d5192:	f002 f9ef 	bl	d7574 <strcmp>
}
   d5196:	fab0 f080 	clz	r0, r0
   d519a:	0940      	lsrs	r0, r0, #5
   d519c:	bd08      	pop	{r3, pc}

000d519e <_ZN5spark10JSONWriter5valueEPKc>:

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d519e:	b538      	push	{r3, r4, r5, lr}
   d51a0:	4605      	mov	r5, r0
    return value(val, strlen(val));
   d51a2:	4608      	mov	r0, r1

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d51a4:	460c      	mov	r4, r1
    return value(val, strlen(val));
   d51a6:	f002 fa0a 	bl	d75be <strlen>
   d51aa:	4621      	mov	r1, r4
   d51ac:	4602      	mov	r2, r0
   d51ae:	4628      	mov	r0, r5
}
   d51b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
    return value(val, strlen(val));
   d51b4:	f001 bf97 	b.w	d70e6 <_ZN5spark10JSONWriter5valueEPKcj>

000d51b8 <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d51b8:	6800      	ldr	r0, [r0, #0]
   d51ba:	f7ff bc45 	b.w	d4a48 <os_mutex_recursive_lock>

000d51be <_ZN5spark16StreamLogHandler5writeEPKc>:

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
   d51be:	b570      	push	{r4, r5, r6, lr}
   d51c0:	4604      	mov	r4, r0
    write(str, strlen(str));
   d51c2:	4608      	mov	r0, r1

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
   d51c4:	460d      	mov	r5, r1
    write(str, strlen(str));
   d51c6:	f002 f9fa 	bl	d75be <strlen>
   d51ca:	6823      	ldr	r3, [r4, #0]
   d51cc:	4602      	mov	r2, r0
   d51ce:	4629      	mov	r1, r5
   d51d0:	4620      	mov	r0, r4
   d51d2:	68db      	ldr	r3, [r3, #12]
}
   d51d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
    write(str, strlen(str));
   d51d8:	4718      	bx	r3

000d51da <_ZN5spark16StreamLogHandler5writeEc>:
}

inline void spark::StreamLogHandler::write(char c) {
   d51da:	b513      	push	{r0, r1, r4, lr}
   d51dc:	ab02      	add	r3, sp, #8
    write(&c, 1);
   d51de:	6802      	ldr	r2, [r0, #0]

inline void spark::StreamLogHandler::write(const char *str) {
    write(str, strlen(str));
}

inline void spark::StreamLogHandler::write(char c) {
   d51e0:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
   d51e4:	68d4      	ldr	r4, [r2, #12]
   d51e6:	4619      	mov	r1, r3
   d51e8:	2201      	movs	r2, #1
   d51ea:	47a0      	blx	r4
}
   d51ec:	b002      	add	sp, #8
   d51ee:	bd10      	pop	{r4, pc}

000d51f0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
        }
    }
    return level;
}

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d51f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d51f4:	6845      	ldr	r5, [r0, #4]
   d51f6:	6807      	ldr	r7, [r0, #0]
   d51f8:	b085      	sub	sp, #20
   d51fa:	4691      	mov	r9, r2
   d51fc:	2214      	movs	r2, #20
   d51fe:	4355      	muls	r5, r2
   d5200:	9301      	str	r3, [sp, #4]
   d5202:	10ab      	asrs	r3, r5, #2
   d5204:	4d19      	ldr	r5, [pc, #100]	; (d526c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x7c>)
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
   d5206:	9202      	str	r2, [sp, #8]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d5208:	435d      	muls	r5, r3
   d520a:	468b      	mov	fp, r1
   d520c:	463c      	mov	r4, r7
    return std::distance(nodes.begin(), std::lower_bound(nodes.begin(), nodes.end(), std::make_pair(name, size),
            [&found](const Node &node, const std::pair<const char*, size_t> &value) {
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
                if (cmp == 0) {
                    if (node.size == value.second) { // Lengths are equal
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d520e:	2301      	movs	r3, #1
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   d5210:	2d00      	cmp	r5, #0
   d5212:	9303      	str	r3, [sp, #12]
   d5214:	dd23      	ble.n	d525e <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x6e>
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
   d5216:	9b02      	ldr	r3, [sp, #8]
	{
	  _DistanceType __half = __len >> 1;
   d5218:	106e      	asrs	r6, r5, #1
   d521a:	fb03 f006 	mul.w	r0, r3, r6
   d521e:	eb04 0800 	add.w	r8, r4, r0

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
    // Using binary search to find existent node or suitable position for new node
    return std::distance(nodes.begin(), std::lower_bound(nodes.begin(), nodes.end(), std::make_pair(name, size),
            [&found](const Node &node, const std::pair<const char*, size_t> &value) {
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   d5222:	464a      	mov	r2, r9
   d5224:	f8b8 a004 	ldrh.w	sl, [r8, #4]
   d5228:	5820      	ldr	r0, [r4, r0]
   d522a:	45d1      	cmp	r9, sl
   d522c:	bf28      	it	cs
   d522e:	4652      	movcs	r2, sl
   d5230:	4659      	mov	r1, fp
   d5232:	f002 f9cc 	bl	d75ce <strncmp>
                if (cmp == 0) {
   d5236:	9b03      	ldr	r3, [sp, #12]
   d5238:	b948      	cbnz	r0, d524e <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x5e>
                    if (node.size == value.second) { // Lengths are equal
   d523a:	45d1      	cmp	r9, sl
   d523c:	d103      	bne.n	d5246 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d523e:	9a01      	ldr	r2, [sp, #4]
   d5240:	7013      	strb	r3, [r2, #0]
        }
    }
    return level;
}

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d5242:	4635      	mov	r5, r6
   d5244:	e7e4      	b.n	d5210 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x20>
                if (cmp == 0) {
                    if (node.size == value.second) { // Lengths are equal
                        found = true; // Allows caller code to avoid extra call to strncmp()
                        return false;
                    }
                    return node.size < value.second;
   d5246:	bf8c      	ite	hi
   d5248:	2001      	movhi	r0, #1
   d524a:	2000      	movls	r0, #0
   d524c:	e000      	b.n	d5250 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                }
                return cmp < 0;
   d524e:	0fc0      	lsrs	r0, r0, #31
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   d5250:	2800      	cmp	r0, #0
   d5252:	d0f6      	beq.n	d5242 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x52>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   d5254:	1bae      	subs	r6, r5, r6
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
	    {
	      __first = __middle;
	      ++__first;
   d5256:	f108 0414 	add.w	r4, r8, #20
	      __len = __len - __half - 1;
   d525a:	3e01      	subs	r6, #1
   d525c:	e7f1      	b.n	d5242 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x52>
            }));
   d525e:	1be4      	subs	r4, r4, r7
}
   d5260:	4802      	ldr	r0, [pc, #8]	; (d526c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x7c>)
                        return false;
                    }
                    return node.size < value.second;
                }
                return cmp < 0;
            }));
   d5262:	10a4      	asrs	r4, r4, #2
}
   d5264:	4360      	muls	r0, r4
   d5266:	b005      	add	sp, #20
   d5268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d526c:	cccccccd 	.word	0xcccccccd

000d5270 <_ZNK5spark6detail9LogFilter5levelEPKc>:
}

spark::detail::LogFilter::~LogFilter() {
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
   d5270:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5272:	b085      	sub	sp, #20
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
   d5274:	6903      	ldr	r3, [r0, #16]
}

spark::detail::LogFilter::~LogFilter() {
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
   d5276:	9101      	str	r1, [sp, #4]
    LogLevel level = level_; // Default level
   d5278:	7e06      	ldrb	r6, [r0, #24]
    if (!nodes_.isEmpty() && category) {
   d527a:	b313      	cbz	r3, d52c2 <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
   d527c:	b309      	cbz	r1, d52c2 <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d527e:	af04      	add	r7, sp, #16
   d5280:	2300      	movs	r3, #0
   d5282:	f847 3d04 	str.w	r3, [r7, #-4]!
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   d5286:	f100 040c 	add.w	r4, r0, #12
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d528a:	461d      	mov	r5, r3
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d528c:	4639      	mov	r1, r7
   d528e:	a801      	add	r0, sp, #4
   d5290:	f7ff ff41 	bl	d5116 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d5294:	4601      	mov	r1, r0
   d5296:	b1a0      	cbz	r0, d52c2 <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
            bool found = false;
   d5298:	ab04      	add	r3, sp, #16
            const int index = nodeIndex(*pNodes, name, size, found);
   d529a:	9a03      	ldr	r2, [sp, #12]
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d529c:	f803 5d05 	strb.w	r5, [r3, #-5]!
            const int index = nodeIndex(*pNodes, name, size, found);
   d52a0:	4620      	mov	r0, r4
   d52a2:	f7ff ffa5 	bl	d51f0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   d52a6:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d52aa:	b153      	cbz	r3, d52c2 <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
    return data_[i];
}

template<typename T, typename AllocatorT>
inline const T& spark::Vector<T, AllocatorT>::at(int i) const {
    return data_[i];
   d52ac:	6823      	ldr	r3, [r4, #0]
   d52ae:	2414      	movs	r4, #20
   d52b0:	fb04 3400 	mla	r4, r4, r0, r3
            }
            const Node &node = pNodes->at(index);
            if (node.level >= 0) {
                level = (LogLevel)node.level;
            }
            pNodes = &node.nodes;
   d52b4:	3408      	adds	r4, #8
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found) {
                break;
            }
            const Node &node = pNodes->at(index);
            if (node.level >= 0) {
   d52b6:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   d52ba:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   d52bc:	bfa8      	it	ge
   d52be:	b2de      	uxtbge	r6, r3
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d52c0:	e7e4      	b.n	d528c <_ZNK5spark6detail9LogFilter5levelEPKc+0x1c>
            }
            pNodes = &node.nodes;
        }
    }
    return level;
}
   d52c2:	4630      	mov	r0, r6
   d52c4:	b005      	add	sp, #20
   d52c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d52c8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   d52c8:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   d52ca:	4c09      	ldr	r4, [pc, #36]	; (d52f0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   d52cc:	6823      	ldr	r3, [r4, #0]
   d52ce:	07db      	lsls	r3, r3, #31
   d52d0:	d40b      	bmi.n	d52ea <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d52d2:	4620      	mov	r0, r4
   d52d4:	f7fe fef0 	bl	d40b8 <__cxa_guard_acquire>
   d52d8:	b138      	cbz	r0, d52ea <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d52da:	4620      	mov	r0, r4
   d52dc:	f7fe fef1 	bl	d40c2 <__cxa_guard_release>
   d52e0:	4a04      	ldr	r2, [pc, #16]	; (d52f4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   d52e2:	4905      	ldr	r1, [pc, #20]	; (d52f8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   d52e4:	4805      	ldr	r0, [pc, #20]	; (d52fc <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d52e6:	f001 ff60 	bl	d71aa <__aeabi_atexit>
    return &factory;
}
   d52ea:	4804      	ldr	r0, [pc, #16]	; (d52fc <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d52ec:	bd10      	pop	{r4, pc}
   d52ee:	bf00      	nop
   d52f0:	2003e4d4 	.word	0x2003e4d4
   d52f4:	2003e480 	.word	0x2003e480
   d52f8:	000d5113 	.word	0x000d5113
   d52fc:	2003e410 	.word	0x2003e410

000d5300 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   d5300:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   d5302:	4c09      	ldr	r4, [pc, #36]	; (d5328 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   d5304:	6823      	ldr	r3, [r4, #0]
   d5306:	07db      	lsls	r3, r3, #31
   d5308:	d40b      	bmi.n	d5322 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d530a:	4620      	mov	r0, r4
   d530c:	f7fe fed4 	bl	d40b8 <__cxa_guard_acquire>
   d5310:	b138      	cbz	r0, d5322 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d5312:	4620      	mov	r0, r4
   d5314:	f7fe fed5 	bl	d40c2 <__cxa_guard_release>
   d5318:	4a04      	ldr	r2, [pc, #16]	; (d532c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   d531a:	4905      	ldr	r1, [pc, #20]	; (d5330 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   d531c:	4805      	ldr	r0, [pc, #20]	; (d5334 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d531e:	f001 ff44 	bl	d71aa <__aeabi_atexit>
    return &factory;
}
   d5322:	4804      	ldr	r0, [pc, #16]	; (d5334 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d5324:	bd10      	pop	{r4, pc}
   d5326:	bf00      	nop
   d5328:	2003e504 	.word	0x2003e504
   d532c:	2003e480 	.word	0x2003e480
   d5330:	000d5111 	.word	0x000d5111
   d5334:	2003e40c 	.word	0x2003e40c

000d5338 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   d5338:	b538      	push	{r3, r4, r5, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d533a:	2500      	movs	r5, #0
   d533c:	4604      	mov	r4, r0
   d533e:	6005      	str	r5, [r0, #0]
   d5340:	6045      	str	r5, [r0, #4]
   d5342:	6085      	str	r5, [r0, #8]
   d5344:	6105      	str	r5, [r0, #16]
   d5346:	6145      	str	r5, [r0, #20]
   d5348:	6185      	str	r5, [r0, #24]
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d534a:	f840 5f24 	str.w	r5, [r0, #36]!
    {
        os_mutex_recursive_create(&handle_);
   d534e:	f7ff fb6b 	bl	d4a28 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   d5352:	f7ff ffb9 	bl	d52c8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   d5356:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d5358:	f7ff ffd2 	bl	d5300 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   d535c:	7325      	strb	r5, [r4, #12]
#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d535e:	6220      	str	r0, [r4, #32]
#endif
    outputActive_ = false;
}
   d5360:	4620      	mov	r0, r4
   d5362:	bd38      	pop	{r3, r4, r5, pc}

000d5364 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   d5364:	b510      	push	{r4, lr}
    static LogManager mgr;
   d5366:	4c0a      	ldr	r4, [pc, #40]	; (d5390 <_ZN5spark10LogManager8instanceEv+0x2c>)
   d5368:	6823      	ldr	r3, [r4, #0]
   d536a:	07db      	lsls	r3, r3, #31
   d536c:	d40e      	bmi.n	d538c <_ZN5spark10LogManager8instanceEv+0x28>
   d536e:	4620      	mov	r0, r4
   d5370:	f7fe fea2 	bl	d40b8 <__cxa_guard_acquire>
   d5374:	b150      	cbz	r0, d538c <_ZN5spark10LogManager8instanceEv+0x28>
   d5376:	4807      	ldr	r0, [pc, #28]	; (d5394 <_ZN5spark10LogManager8instanceEv+0x30>)
   d5378:	f7ff ffde 	bl	d5338 <_ZN5spark10LogManagerC1Ev>
   d537c:	4620      	mov	r0, r4
   d537e:	f7fe fea0 	bl	d40c2 <__cxa_guard_release>
   d5382:	4a05      	ldr	r2, [pc, #20]	; (d5398 <_ZN5spark10LogManager8instanceEv+0x34>)
   d5384:	4905      	ldr	r1, [pc, #20]	; (d539c <_ZN5spark10LogManager8instanceEv+0x38>)
   d5386:	4803      	ldr	r0, [pc, #12]	; (d5394 <_ZN5spark10LogManager8instanceEv+0x30>)
   d5388:	f001 ff0f 	bl	d71aa <__aeabi_atexit>
    return &mgr;
}
   d538c:	4801      	ldr	r0, [pc, #4]	; (d5394 <_ZN5spark10LogManager8instanceEv+0x30>)
   d538e:	bd10      	pop	{r4, pc}
   d5390:	2003e4d8 	.word	0x2003e4d8
   d5394:	2003e4dc 	.word	0x2003e4dc
   d5398:	2003e480 	.word	0x2003e480
   d539c:	000d57cf 	.word	0x000d57cf

000d53a0 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   d53a0:	2300      	movs	r3, #0
   d53a2:	4a02      	ldr	r2, [pc, #8]	; (d53ac <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   d53a4:	4902      	ldr	r1, [pc, #8]	; (d53b0 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   d53a6:	4803      	ldr	r0, [pc, #12]	; (d53b4 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   d53a8:	f7ff bc06 	b.w	d4bb8 <log_set_callbacks>
   d53ac:	000d56b1 	.word	0x000d56b1
   d53b0:	000d5641 	.word	0x000d5641
   d53b4:	000d55c9 	.word	0x000d55c9

000d53b8 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   d53b8:	2300      	movs	r3, #0
   d53ba:	461a      	mov	r2, r3
   d53bc:	4619      	mov	r1, r3
   d53be:	4618      	mov	r0, r3
   d53c0:	f7ff bbfa 	b.w	d4bb8 <log_set_callbacks>

000d53c4 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d53c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d53c6:	ac02      	add	r4, sp, #8
        JSONObjectIterator(value.t_, value.d_) {
   d53c8:	688e      	ldr	r6, [r1, #8]
   d53ca:	f851 3b04 	ldr.w	r3, [r1], #4
   d53ce:	f844 3d08 	str.w	r3, [r4, #-8]!
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d53d2:	4605      	mov	r5, r0
   d53d4:	a801      	add	r0, sp, #4
   d53d6:	f7ff fdb4 	bl	d4f42 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        JSONObjectIterator(value.t_, value.d_) {
   d53da:	4622      	mov	r2, r4
   d53dc:	4631      	mov	r1, r6
   d53de:	4628      	mov	r0, r5
   d53e0:	f001 feb8 	bl	d7154 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d53e4:	a801      	add	r0, sp, #4
   d53e6:	f7ff fdb3 	bl	d4f50 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d53ea:	4628      	mov	r0, r5
   d53ec:	b002      	add	sp, #8
   d53ee:	bd70      	pop	{r4, r5, r6, pc}

000d53f0 <_ZNK5spark18JSONObjectIterator5valueEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d53f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d53f2:	ac02      	add	r4, sp, #8
    return JSONValue(v_, d_);
   d53f4:	690e      	ldr	r6, [r1, #16]
   d53f6:	f851 3b04 	ldr.w	r3, [r1], #4
   d53fa:	f844 3d08 	str.w	r3, [r4, #-8]!

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d53fe:	4605      	mov	r5, r0
   d5400:	a801      	add	r0, sp, #4
   d5402:	f7ff fd9e 	bl	d4f42 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONValue(v_, d_);
   d5406:	4622      	mov	r2, r4
   d5408:	4631      	mov	r1, r6
   d540a:	4628      	mov	r0, r5
   d540c:	f001 febd 	bl	d718a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5410:	a801      	add	r0, sp, #4
   d5412:	f7ff fd9d 	bl	d4f50 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5416:	4628      	mov	r0, r5
   d5418:	b002      	add	sp, #8
   d541a:	bd70      	pop	{r4, r5, r6, pc}

000d541c <_ZNK5spark18JSONObjectIterator4nameEv>:

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
        JSONObjectIterator(value.t_, value.d_) {
}

inline spark::JSONString spark::JSONObjectIterator::name() const {
   d541c:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d541e:	ac02      	add	r4, sp, #8
    return JSONString(k_, d_);
   d5420:	68ce      	ldr	r6, [r1, #12]
   d5422:	f851 3b04 	ldr.w	r3, [r1], #4
   d5426:	f844 3d08 	str.w	r3, [r4, #-8]!

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
        JSONObjectIterator(value.t_, value.d_) {
}

inline spark::JSONString spark::JSONObjectIterator::name() const {
   d542a:	4605      	mov	r5, r0
   d542c:	a801      	add	r0, sp, #4
   d542e:	f7ff fd88 	bl	d4f42 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONString(k_, d_);
   d5432:	4622      	mov	r2, r4
   d5434:	4631      	mov	r1, r6
   d5436:	4628      	mov	r0, r5
   d5438:	f001 fe64 	bl	d7104 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d543c:	a801      	add	r0, sp, #4
   d543e:	f7ff fd87 	bl	d4f50 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5442:	4628      	mov	r0, r5
   d5444:	b002      	add	sp, #8
   d5446:	bd70      	pop	{r4, r5, r6, pc}

000d5448 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
    static DefaultOutputStreamFactory factory;
    return &factory;
}

void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   d5448:	b530      	push	{r4, r5, lr}
   d544a:	b08b      	sub	sp, #44	; 0x2c
   d544c:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   d544e:	4601      	mov	r1, r0
   d5450:	a804      	add	r0, sp, #16
   d5452:	f7ff ffb7 	bl	d53c4 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
    while (it.next()) {
   d5456:	a804      	add	r0, sp, #16
   d5458:	f001 fd87 	bl	d6f6a <_ZN5spark18JSONObjectIterator4nextEv>
   d545c:	b1e8      	cbz	r0, d549a <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x52>
        if (it.name() == "baud" && baudRate) {
   d545e:	a904      	add	r1, sp, #16
   d5460:	4668      	mov	r0, sp
   d5462:	f7ff ffdb 	bl	d541c <_ZNK5spark18JSONObjectIterator4nameEv>
   d5466:	490f      	ldr	r1, [pc, #60]	; (d54a4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x5c>)
   d5468:	9802      	ldr	r0, [sp, #8]
   d546a:	f7ff fe91 	bl	d5190 <_ZNK5spark10JSONStringeqEPKc.isra.7>
   d546e:	4604      	mov	r4, r0
   d5470:	b110      	cbz	r0, d5478 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x30>
   d5472:	1c2c      	adds	r4, r5, #0
   d5474:	bf18      	it	ne
   d5476:	2401      	movne	r4, #1
   d5478:	a801      	add	r0, sp, #4
   d547a:	f7ff fd69 	bl	d4f50 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d547e:	2c00      	cmp	r4, #0
   d5480:	d0e9      	beq.n	d5456 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0xe>
            *baudRate = it.value().toInt();
   d5482:	a904      	add	r1, sp, #16
   d5484:	4668      	mov	r0, sp
   d5486:	f7ff ffb3 	bl	d53f0 <_ZNK5spark18JSONObjectIterator5valueEv>
   d548a:	4668      	mov	r0, sp
   d548c:	f001 fd4d 	bl	d6f2a <_ZNK5spark9JSONValue5toIntEv>
   d5490:	6028      	str	r0, [r5, #0]
   d5492:	a801      	add	r0, sp, #4
   d5494:	f7ff fd5c 	bl	d4f50 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5498:	e7dd      	b.n	d5456 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0xe>
   d549a:	a805      	add	r0, sp, #20
   d549c:	f7ff fd58 	bl	d4f50 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
    }
}
   d54a0:	b00b      	add	sp, #44	; 0x2c
   d54a2:	bd30      	pop	{r4, r5, pc}
   d54a4:	000d7bfc 	.word	0x000d7bfc

000d54a8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
    static DefaultLogHandlerFactory factory;
    return &factory;
}

// spark::DefaultOutputStreamFactory
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d54a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d54aa:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (strcmp(type, "Serial") == 0) {
   d54ac:	4620      	mov	r0, r4
   d54ae:	4913      	ldr	r1, [pc, #76]	; (d54fc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
    static DefaultLogHandlerFactory factory;
    return &factory;
}

// spark::DefaultOutputStreamFactory
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d54b0:	4615      	mov	r5, r2
#if PLATFORM_ID != 3
    if (strcmp(type, "Serial") == 0) {
   d54b2:	f002 f85f 	bl	d7574 <strcmp>
   d54b6:	b940      	cbnz	r0, d54ca <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x22>
        Serial.begin();
   d54b8:	f001 fa36 	bl	d6928 <_Z16_fetch_usbserialv>
   d54bc:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d54c0:	f001 fa22 	bl	d6908 <_ZN9USBSerial5beginEl>
        return &Serial;
   d54c4:	f001 fa30 	bl	d6928 <_Z16_fetch_usbserialv>
   d54c8:	e015      	b.n	d54f6 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4e>
    if (strcmp(type, "USBSerial1") == 0) {
        USBSerial1.begin();
        return &USBSerial1;
    }
#endif
    if (strcmp(type, "Serial1") == 0) {
   d54ca:	490d      	ldr	r1, [pc, #52]	; (d5500 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   d54cc:	4620      	mov	r0, r4
   d54ce:	f002 f851 	bl	d7574 <strcmp>
   d54d2:	b978      	cbnz	r0, d54f4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   d54d4:	a902      	add	r1, sp, #8
   d54d6:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   d54da:	f841 3d04 	str.w	r3, [r1, #-4]!
        getParams(params, &baud);
   d54de:	4628      	mov	r0, r5
   d54e0:	f7ff ffb2 	bl	d5448 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   d54e4:	f001 faa8 	bl	d6a38 <_Z22__fetch_global_Serial1v>
   d54e8:	9901      	ldr	r1, [sp, #4]
   d54ea:	f001 fa9f 	bl	d6a2c <_ZN11USARTSerial5beginEm>
        return &Serial1;
   d54ee:	f001 faa3 	bl	d6a38 <_Z22__fetch_global_Serial1v>
   d54f2:	e000      	b.n	d54f6 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4e>
    }
#endif // PLATFORM_ID != 3
    return nullptr;
   d54f4:	2000      	movs	r0, #0
}
   d54f6:	b003      	add	sp, #12
   d54f8:	bd30      	pop	{r4, r5, pc}
   d54fa:	bf00      	nop
   d54fc:	000d7c01 	.word	0x000d7c01
   d5500:	000d7c08 	.word	0x000d7c08

000d5504 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5504:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d5506:	6804      	ldr	r4, [r0, #0]
   d5508:	6843      	ldr	r3, [r0, #4]
   d550a:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d550c:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d550e:	fb06 4603 	mla	r6, r6, r3, r4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5512:	42a6      	cmp	r6, r4
   d5514:	d005      	beq.n	d5522 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d5516:	f104 0008 	add.w	r0, r4, #8
   d551a:	f7ff fff3 	bl	d5504 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d551e:	3414      	adds	r4, #20
   d5520:	e7f7      	b.n	d5512 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5522:	6828      	ldr	r0, [r5, #0]
   d5524:	f7ff fbfc 	bl	d4d20 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d5528:	4628      	mov	r0, r5
   d552a:	bd70      	pop	{r4, r5, r6, pc}

000d552c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d552c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d552e:	6804      	ldr	r4, [r0, #0]
   d5530:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5532:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d5534:	eb04 1603 	add.w	r6, r4, r3, lsl #4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5538:	42a6      	cmp	r6, r4
   d553a:	d004      	beq.n	d5546 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   d553c:	4620      	mov	r0, r4
   d553e:	f7ff fc87 	bl	d4e50 <_ZN6StringD1Ev>
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5542:	3410      	adds	r4, #16
   d5544:	e7f8      	b.n	d5538 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5546:	6828      	ldr	r0, [r5, #0]
   d5548:	f7ff fbea 	bl	d4d20 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d554c:	4628      	mov	r0, r5
   d554e:	bd70      	pop	{r4, r5, r6, pc}

000d5550 <_ZN5spark6detail9LogFilterD1Ev>:
    swap(cats_, cats);
    swap(nodes_, nodes);
    level_ = level;
}

spark::detail::LogFilter::~LogFilter() {
   d5550:	b510      	push	{r4, lr}
   d5552:	4604      	mov	r4, r0
   d5554:	300c      	adds	r0, #12
   d5556:	f7ff ffd5 	bl	d5504 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d555a:	4620      	mov	r0, r4
   d555c:	f7ff ffe6 	bl	d552c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d5560:	4620      	mov	r0, r4
   d5562:	bd10      	pop	{r4, pc}

000d5564 <_ZN5spark16StreamLogHandlerD1Ev>:
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d5564:	b510      	push	{r4, lr}
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d5566:	4b04      	ldr	r3, [pc, #16]	; (d5578 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d5568:	4604      	mov	r4, r0
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d556a:	f840 3b04 	str.w	r3, [r0], #4
   d556e:	f7ff ffef 	bl	d5550 <_ZN5spark6detail9LogFilterD1Ev>
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d5572:	4620      	mov	r0, r4
   d5574:	bd10      	pop	{r4, pc}
   d5576:	bf00      	nop
   d5578:	000d775c 	.word	0x000d775c

000d557c <_ZN5spark16StreamLogHandlerD0Ev>:
   d557c:	b510      	push	{r4, lr}
   d557e:	4604      	mov	r4, r0
   d5580:	f7ff fff0 	bl	d5564 <_ZN5spark16StreamLogHandlerD1Ev>
   d5584:	4620      	mov	r0, r4
   d5586:	2124      	movs	r1, #36	; 0x24
   d5588:	f001 fe1c 	bl	d71c4 <_ZdlPvj>
   d558c:	4620      	mov	r0, r4
   d558e:	bd10      	pop	{r4, pc}

000d5590 <_ZN5spark20JSONStreamLogHandlerD1Ev>:

private:
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
   d5590:	b510      	push	{r4, lr}
   d5592:	4b03      	ldr	r3, [pc, #12]	; (d55a0 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   d5594:	6003      	str	r3, [r0, #0]
   d5596:	4604      	mov	r4, r0
   d5598:	f7ff ffe4 	bl	d5564 <_ZN5spark16StreamLogHandlerD1Ev>
   d559c:	4620      	mov	r0, r4
   d559e:	bd10      	pop	{r4, pc}
   d55a0:	000d7bec 	.word	0x000d7bec

000d55a4 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   d55a4:	b510      	push	{r4, lr}
   d55a6:	4604      	mov	r4, r0
   d55a8:	f7ff fff2 	bl	d5590 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   d55ac:	4620      	mov	r0, r4
   d55ae:	2124      	movs	r1, #36	; 0x24
   d55b0:	f001 fe08 	bl	d71c4 <_ZdlPvj>
   d55b4:	4620      	mov	r0, r4
   d55b6:	bd10      	pop	{r4, pc}

000d55b8 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d55b8:	b510      	push	{r4, lr}
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d55ba:	6803      	ldr	r3, [r0, #0]
   d55bc:	4604      	mov	r4, r0
   d55be:	6818      	ldr	r0, [r3, #0]
   d55c0:	f7ff fa4a 	bl	d4a58 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   d55c4:	4620      	mov	r0, r4
   d55c6:	bd10      	pop	{r4, pc}

000d55c8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d55c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d55cc:	469b      	mov	fp, r3
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   d55ce:	4b1b      	ldr	r3, [pc, #108]	; (d563c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>)
   d55d0:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d55d2:	f3c3 0308 	ubfx	r3, r3, #0, #9

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d55d6:	b085      	sub	sp, #20
   d55d8:	4682      	mov	sl, r0
   d55da:	460e      	mov	r6, r1
   d55dc:	4690      	mov	r8, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d55de:	bb53      	cbnz	r3, d5636 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x6e>
        return;
    }
#endif
    LogManager *that = instance();
   d55e0:	f7ff fec0 	bl	d5364 <_ZN5spark10LogManager8instanceEv>
   d55e4:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d55e6:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d55e8:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   d55ea:	f7ff fde5 	bl	d51b8 <_ZN14RecursiveMutex4lockEv>
        // prevent re-entry
        if (that->isActive()) {
   d55ee:	7b23      	ldrb	r3, [r4, #12]
   d55f0:	b9f3      	cbnz	r3, d5630 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x68>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d55f2:	2301      	movs	r3, #1
   d55f4:	7323      	strb	r3, [r4, #12]
   d55f6:	6825      	ldr	r5, [r4, #0]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d55f8:	6863      	ldr	r3, [r4, #4]
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
   d55fa:	b2f6      	uxtb	r6, r6
   d55fc:	eb05 0983 	add.w	r9, r5, r3, lsl #2
        // prevent re-entry
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
   d5600:	454d      	cmp	r5, r9
   d5602:	d013      	beq.n	d562c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x64>
   d5604:	f855 7b04 	ldr.w	r7, [r5], #4
inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
}

inline void spark::LogHandler::message(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
    if (level >= filter_.level(category)) {
   d5608:	4641      	mov	r1, r8
   d560a:	1d38      	adds	r0, r7, #4
   d560c:	f7ff fe30 	bl	d5270 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d5610:	4286      	cmp	r6, r0
   d5612:	d3f5      	bcc.n	d5600 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x38>
        logMessage(msg, level, category, attr);
   d5614:	683b      	ldr	r3, [r7, #0]
   d5616:	f8cd b000 	str.w	fp, [sp]
   d561a:	689b      	ldr	r3, [r3, #8]
   d561c:	469e      	mov	lr, r3
   d561e:	4638      	mov	r0, r7
   d5620:	4643      	mov	r3, r8
   d5622:	4632      	mov	r2, r6
   d5624:	4651      	mov	r1, sl
   d5626:	4677      	mov	r7, lr
   d5628:	47b8      	blx	r7
   d562a:	e7e9      	b.n	d5600 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x38>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d562c:	2300      	movs	r3, #0
   d562e:	7323      	strb	r3, [r4, #12]
#endif
    LogManager *that = instance();
    LOG_WITH_LOCK(that->mutex_) {
        // prevent re-entry
        if (that->isActive()) {
            return;
   d5630:	a803      	add	r0, sp, #12
   d5632:	f7ff ffc1 	bl	d55b8 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   d5636:	b005      	add	sp, #20
   d5638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d563c:	e000ed00 	.word	0xe000ed00

000d5640 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:

void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d5640:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5644:	4699      	mov	r9, r3
   d5646:	4b19      	ldr	r3, [pc, #100]	; (d56ac <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x6c>)
   d5648:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d564a:	f3c3 0308 	ubfx	r3, r3, #0, #9
        }
        that->setActive(false);
    }
}

void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d564e:	4607      	mov	r7, r0
   d5650:	4688      	mov	r8, r1
   d5652:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d5654:	bb33      	cbnz	r3, d56a4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x64>
        return;
    }
#endif
    LogManager *that = instance();
   d5656:	f7ff fe85 	bl	d5364 <_ZN5spark10LogManager8instanceEv>
   d565a:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d565c:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d565e:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d5660:	f7ff fdaa 	bl	d51b8 <_ZN14RecursiveMutex4lockEv>
        // prevent re-entry
        if (that->isActive()) {
   d5664:	7b23      	ldrb	r3, [r4, #12]
   d5666:	b9d3      	cbnz	r3, d569e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x5e>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d5668:	2301      	movs	r3, #1
   d566a:	7323      	strb	r3, [r4, #12]
   d566c:	6825      	ldr	r5, [r4, #0]
   d566e:	6863      	ldr	r3, [r4, #4]
    }
}

inline void spark::LogHandler::write(const char *data, size_t size, LogLevel level, const char *category) {
    if (level >= filter_.level(category)) {
   d5670:	fa5f fb86 	uxtb.w	fp, r6
   d5674:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        // prevent re-entry
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
   d5678:	4555      	cmp	r5, sl
   d567a:	d00e      	beq.n	d569a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x5a>
   d567c:	f855 6b04 	ldr.w	r6, [r5], #4
   d5680:	4649      	mov	r1, r9
   d5682:	1d30      	adds	r0, r6, #4
   d5684:	f7ff fdf4 	bl	d5270 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d5688:	4583      	cmp	fp, r0
   d568a:	d3f5      	bcc.n	d5678 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
        write(data, size);
   d568c:	6833      	ldr	r3, [r6, #0]
   d568e:	4642      	mov	r2, r8
   d5690:	68db      	ldr	r3, [r3, #12]
   d5692:	4639      	mov	r1, r7
   d5694:	4630      	mov	r0, r6
   d5696:	4798      	blx	r3
   d5698:	e7ee      	b.n	d5678 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d569a:	2300      	movs	r3, #0
   d569c:	7323      	strb	r3, [r4, #12]
#endif
    LogManager *that = instance();
    LOG_WITH_LOCK(that->mutex_) {
        // prevent re-entry
        if (that->isActive()) {
            return;
   d569e:	a801      	add	r0, sp, #4
   d56a0:	f7ff ff8a 	bl	d55b8 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->write(data, size, (LogLevel)level, category);
        }
        that->setActive(false);
    }
}
   d56a4:	b003      	add	sp, #12
   d56a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d56aa:	bf00      	nop
   d56ac:	e000ed00 	.word	0xe000ed00

000d56b0 <_ZN5spark10LogManager10logEnabledEiPKcPv>:

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d56b0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d56b4:	4b15      	ldr	r3, [pc, #84]	; (d570c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5c>)
   d56b6:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d56b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
        }
        that->setActive(false);
    }
}

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d56bc:	4604      	mov	r4, r0
   d56be:	4688      	mov	r8, r1
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d56c0:	b9fb      	cbnz	r3, d5702 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x52>
        return 0;
    }
#endif
    LogManager *that = instance();
   d56c2:	f7ff fe4f 	bl	d5364 <_ZN5spark10LogManager8instanceEv>
   d56c6:	4606      	mov	r6, r0
    int minLevel = LOG_LEVEL_NONE;
    LOG_WITH_LOCK(that->mutex_) {
   d56c8:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d56ca:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d56cc:	f7ff fd74 	bl	d51b8 <_ZN14RecursiveMutex4lockEv>
   d56d0:	e896 00a0 	ldmia.w	r6, {r5, r7}
   d56d4:	2646      	movs	r6, #70	; 0x46
   d56d6:	eb05 0787 	add.w	r7, r5, r7, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d56da:	42af      	cmp	r7, r5
   d56dc:	d107      	bne.n	d56ee <_ZN5spark10LogManager10logEnabledEiPKcPv+0x3e>
        return 0;
    }
#endif
    LogManager *that = instance();
    int minLevel = LOG_LEVEL_NONE;
    LOG_WITH_LOCK(that->mutex_) {
   d56de:	a801      	add	r0, sp, #4
   d56e0:	f7ff ff6a 	bl	d55b8 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            if (level < minLevel) {
                minLevel = level;
            }
        }
    }
    return (level >= minLevel);
   d56e4:	42b4      	cmp	r4, r6
   d56e6:	bfb4      	ite	lt
   d56e8:	2000      	movlt	r0, #0
   d56ea:	2001      	movge	r0, #1
   d56ec:	e00a      	b.n	d5704 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x54>
inline LogLevel spark::LogHandler::level() const {
    return filter_.level();
}

inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
   d56ee:	f855 0b04 	ldr.w	r0, [r5], #4
   d56f2:	4641      	mov	r1, r8
   d56f4:	3004      	adds	r0, #4
   d56f6:	f7ff fdbb 	bl	d5270 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d56fa:	4286      	cmp	r6, r0
   d56fc:	bfa8      	it	ge
   d56fe:	4606      	movge	r6, r0
   d5700:	e7eb      	b.n	d56da <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2a>
}

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
        return 0;
   d5702:	2000      	movs	r0, #0
                minLevel = level;
            }
        }
    }
    return (level >= minLevel);
}
   d5704:	b002      	add	sp, #8
   d5706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d570a:	bf00      	nop
   d570c:	e000ed00 	.word	0xe000ed00

000d5710 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d5710:	b570      	push	{r4, r5, r6, lr}
    T* const p = find(data_, data_ + size_, value);
   d5712:	6803      	ldr	r3, [r0, #0]
   d5714:	6842      	ldr	r2, [r0, #4]
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d5716:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   d5718:	eb03 0282 	add.w	r2, r3, r2, lsl #2
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d571c:	429a      	cmp	r2, r3
   d571e:	4618      	mov	r0, r3
   d5720:	d00e      	beq.n	d5740 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x30>
            if (*p == value) {
   d5722:	6806      	ldr	r6, [r0, #0]
   d5724:	680d      	ldr	r5, [r1, #0]
   d5726:	42ae      	cmp	r6, r5
   d5728:	f103 0304 	add.w	r3, r3, #4
   d572c:	d1f6      	bne.n	d571c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xc>
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d572e:	1d01      	adds	r1, r0, #4
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d5730:	1a52      	subs	r2, r2, r1
   d5732:	f001 febc 	bl	d74ae <memmove>
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
   d5736:	6863      	ldr	r3, [r4, #4]
   d5738:	3b01      	subs	r3, #1
   d573a:	6063      	str	r3, [r4, #4]
    return true;
   d573c:	2001      	movs	r0, #1
}
   d573e:	bd70      	pop	{r4, r5, r6, pc}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
   d5740:	2000      	movs	r0, #0
   d5742:	bd70      	pop	{r4, r5, r6, pc}

000d5744 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
        }
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
   d5744:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d5746:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
   d5748:	3024      	adds	r0, #36	; 0x24
        }
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
   d574a:	9101      	str	r1, [sp, #4]
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d574c:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   d574e:	f7ff fd33 	bl	d51b8 <_ZN14RecursiveMutex4lockEv>
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d5752:	a901      	add	r1, sp, #4
   d5754:	4620      	mov	r0, r4
   d5756:	f7ff ffdb 	bl	d5710 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   d575a:	b920      	cbnz	r0, d5766 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x22>
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
   d575c:	a803      	add	r0, sp, #12
   d575e:	f7ff ff2b 	bl	d55b8 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
            resetSystemCallbacks();
        }
    }
}
   d5762:	b004      	add	sp, #16
   d5764:	bd10      	pop	{r4, pc}
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d5766:	6863      	ldr	r3, [r4, #4]
   d5768:	2b00      	cmp	r3, #0
   d576a:	d1f7      	bne.n	d575c <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x18>
            resetSystemCallbacks();
   d576c:	f7ff fe24 	bl	d53b8 <_ZN5spark10LogManager20resetSystemCallbacksEv>
   d5770:	e7f4      	b.n	d575c <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x18>

000d5772 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
            break;
        }
    }
}

void spark::LogManager::destroyFactoryHandlers() {
   d5772:	b570      	push	{r4, r5, r6, lr}
   d5774:	6905      	ldr	r5, [r0, #16]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d5776:	6943      	ldr	r3, [r0, #20]
   d5778:	2618      	movs	r6, #24
   d577a:	4604      	mov	r4, r0
   d577c:	fb06 5603 	mla	r6, r6, r3, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   d5780:	42ae      	cmp	r6, r5
   d5782:	d015      	beq.n	d57b0 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   d5784:	f105 0110 	add.w	r1, r5, #16
   d5788:	4620      	mov	r0, r4
   d578a:	f7ff ffc1 	bl	d5710 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   d578e:	6863      	ldr	r3, [r4, #4]
   d5790:	b90b      	cbnz	r3, d5796 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   d5792:	f7ff fe11 	bl	d53b8 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        }
        handlerFactory_->destroyHandler(h.handler);
   d5796:	69e0      	ldr	r0, [r4, #28]
   d5798:	6929      	ldr	r1, [r5, #16]
   d579a:	6803      	ldr	r3, [r0, #0]
   d579c:	68db      	ldr	r3, [r3, #12]
   d579e:	4798      	blx	r3
        if (h.stream) {
   d57a0:	6969      	ldr	r1, [r5, #20]
   d57a2:	b119      	cbz	r1, d57ac <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   d57a4:	6a20      	ldr	r0, [r4, #32]
   d57a6:	6803      	ldr	r3, [r0, #0]
   d57a8:	68db      	ldr	r3, [r3, #12]
   d57aa:	4798      	blx	r3
   d57ac:	3518      	adds	r5, #24
        }
    }
}

void spark::LogManager::destroyFactoryHandlers() {
    for (const FactoryHandler &h: factoryHandlers_) {
   d57ae:	e7e7      	b.n	d5780 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d57b0:	6925      	ldr	r5, [r4, #16]
   d57b2:	6963      	ldr	r3, [r4, #20]
   d57b4:	2618      	movs	r6, #24
   d57b6:	fb06 5603 	mla	r6, r6, r3, r5
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d57ba:	42b5      	cmp	r5, r6
   d57bc:	d004      	beq.n	d57c8 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
        }
    }
}

// spark::LogManager
struct spark::LogManager::FactoryHandler {
   d57be:	4628      	mov	r0, r5
   d57c0:	f7ff fb46 	bl	d4e50 <_ZN6StringD1Ev>
   d57c4:	3518      	adds	r5, #24
   d57c6:	e7f8      	b.n	d57ba <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d57c8:	2300      	movs	r3, #0
   d57ca:	6163      	str	r3, [r4, #20]
   d57cc:	bd70      	pop	{r4, r5, r6, pc}

000d57ce <_ZN5spark10LogManagerD1Ev>:
    streamFactory_ = DefaultOutputStreamFactory::instance();
#endif
    outputActive_ = false;
}

spark::LogManager::~LogManager() {
   d57ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d57d0:	4604      	mov	r4, r0
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d57d2:	ad02      	add	r5, sp, #8
    resetSystemCallbacks();
   d57d4:	f7ff fdf0 	bl	d53b8 <_ZN5spark10LogManager20resetSystemCallbacksEv>
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
   d57d8:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d57dc:	f845 0d04 	str.w	r0, [r5, #-4]!
      { _M_device.lock(); }
   d57e0:	f7ff fcea 	bl	d51b8 <_ZN14RecursiveMutex4lockEv>
         destroyFactoryHandlers();
   d57e4:	4620      	mov	r0, r4
   d57e6:	f7ff ffc4 	bl	d5772 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
}

spark::LogManager::~LogManager() {
    resetSystemCallbacks();
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
   d57ea:	4628      	mov	r0, r5
   d57ec:	f7ff fee4 	bl	d55b8 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d57f0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d57f2:	b108      	cbz	r0, d57f8 <_ZN5spark10LogManagerD1Ev+0x2a>
            os_mutex_recursive_destroy(handle_);
   d57f4:	f7ff f920 	bl	d4a38 <os_mutex_recursive_destroy>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d57f8:	6925      	ldr	r5, [r4, #16]
   d57fa:	6963      	ldr	r3, [r4, #20]
   d57fc:	2618      	movs	r6, #24
   d57fe:	fb06 5603 	mla	r6, r6, r3, r5
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5802:	42b5      	cmp	r5, r6
   d5804:	d004      	beq.n	d5810 <_ZN5spark10LogManagerD1Ev+0x42>
        }
    }
}

// spark::LogManager
struct spark::LogManager::FactoryHandler {
   d5806:	4628      	mov	r0, r5
   d5808:	f7ff fb22 	bl	d4e50 <_ZN6StringD1Ev>
   d580c:	3518      	adds	r5, #24
   d580e:	e7f8      	b.n	d5802 <_ZN5spark10LogManagerD1Ev+0x34>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5810:	6920      	ldr	r0, [r4, #16]
   d5812:	f7ff fa85 	bl	d4d20 <free>
   d5816:	6820      	ldr	r0, [r4, #0]
   d5818:	f7ff fa82 	bl	d4d20 <free>
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
         destroyFactoryHandlers();
    }
#endif
}
   d581c:	4620      	mov	r0, r4
   d581e:	b002      	add	sp, #8
   d5820:	bd70      	pop	{r4, r5, r6, pc}

000d5822 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>:
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5822:	6803      	ldr	r3, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5824:	680a      	ldr	r2, [r1, #0]
   d5826:	6002      	str	r2, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d5828:	600b      	str	r3, [r1, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d582a:	6843      	ldr	r3, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d582c:	684a      	ldr	r2, [r1, #4]
   d582e:	6042      	str	r2, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d5830:	604b      	str	r3, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5832:	6883      	ldr	r3, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   d5834:	688a      	ldr	r2, [r1, #8]
   d5836:	6082      	str	r2, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5838:	608b      	str	r3, [r1, #8]
   d583a:	4770      	bx	lr

000d583c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        size_ = vector.size_;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d583c:	b510      	push	{r4, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d583e:	2300      	movs	r3, #0
        size_ = vector.size_;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d5840:	4604      	mov	r4, r0
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d5842:	6003      	str	r3, [r0, #0]
   d5844:	6043      	str	r3, [r0, #4]
   d5846:	6083      	str	r3, [r0, #8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d5848:	f7ff ffeb 	bl	d5822 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
}
   d584c:	4620      	mov	r0, r4
   d584e:	bd10      	pop	{r4, pc}

000d5850 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d5850:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d5852:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5854:	4604      	mov	r4, r0
   d5856:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d5858:	d925      	bls.n	d58a6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
   d585a:	4290      	cmp	r0, r2
   d585c:	d224      	bcs.n	d58a8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x58>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d585e:	1a55      	subs	r5, r2, r1
   d5860:	3d14      	subs	r5, #20
   d5862:	442c      	add	r4, r5
   d5864:	f1a1 0714 	sub.w	r7, r1, #20
   d5868:	f1a2 050c 	sub.w	r5, r2, #12
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d586c:	2600      	movs	r6, #0
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d586e:	f1a5 0308 	sub.w	r3, r5, #8
   d5872:	429f      	cmp	r7, r3
   d5874:	d037      	beq.n	d58e6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
                new(dest) T(std::move(*end));
   d5876:	b184      	cbz	r4, d589a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4a>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d5878:	f855 3c08 	ldr.w	r3, [r5, #-8]
   d587c:	6023      	str	r3, [r4, #0]
   d587e:	f835 3c04 	ldrh.w	r3, [r5, #-4]
   d5882:	80a3      	strh	r3, [r4, #4]
   d5884:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
   d5888:	80e3      	strh	r3, [r4, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d588a:	60a6      	str	r6, [r4, #8]
   d588c:	60e6      	str	r6, [r4, #12]
   d588e:	6126      	str	r6, [r4, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d5890:	4629      	mov	r1, r5
   d5892:	f104 0008 	add.w	r0, r4, #8
   d5896:	f7ff ffc4 	bl	d5822 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
   d589a:	4628      	mov	r0, r5
   d589c:	f7ff fe32 	bl	d5504 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d58a0:	3c14      	subs	r4, #20
   d58a2:	3d14      	subs	r5, #20
   d58a4:	e7e3      	b.n	d586e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d58a6:	d01e      	beq.n	d58e6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
   d58a8:	f101 0508 	add.w	r5, r1, #8
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d58ac:	2700      	movs	r7, #0
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d58ae:	f1a5 0308 	sub.w	r3, r5, #8
   d58b2:	429e      	cmp	r6, r3
   d58b4:	d017      	beq.n	d58e6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
                new(dest) T(std::move(*p));
   d58b6:	b184      	cbz	r4, d58da <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x8a>
   d58b8:	f855 3c08 	ldr.w	r3, [r5, #-8]
   d58bc:	6023      	str	r3, [r4, #0]
   d58be:	f835 3c04 	ldrh.w	r3, [r5, #-4]
   d58c2:	80a3      	strh	r3, [r4, #4]
   d58c4:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
   d58c8:	80e3      	strh	r3, [r4, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d58ca:	60a7      	str	r7, [r4, #8]
   d58cc:	60e7      	str	r7, [r4, #12]
   d58ce:	6127      	str	r7, [r4, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d58d0:	4629      	mov	r1, r5
   d58d2:	f104 0008 	add.w	r0, r4, #8
   d58d6:	f7ff ffa4 	bl	d5822 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
   d58da:	4628      	mov	r0, r5
   d58dc:	f7ff fe12 	bl	d5504 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d58e0:	3414      	adds	r4, #20
   d58e2:	3514      	adds	r5, #20
   d58e4:	e7e3      	b.n	d58ae <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
   d58e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d58e8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d58e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d58ea:	6845      	ldr	r5, [r0, #4]
   d58ec:	6883      	ldr	r3, [r0, #8]
   d58ee:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d58f0:	4604      	mov	r4, r0
   d58f2:	460e      	mov	r6, r1
   d58f4:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d58f6:	db0e      	blt.n	d5916 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2e>
   d58f8:	3501      	adds	r5, #1
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d58fa:	2d00      	cmp	r5, #0
   d58fc:	dd05      	ble.n	d590a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
}

inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
   d58fe:	00a9      	lsls	r1, r5, #2
   d5900:	6800      	ldr	r0, [r0, #0]
   d5902:	f7ff fa15 	bl	d4d30 <realloc>
    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
            if (!d) {
   d5906:	b920      	cbnz	r0, d5912 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2a>
   d5908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d590a:	6800      	ldr	r0, [r0, #0]
   d590c:	f7ff fa08 	bl	d4d20 <free>
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d5910:	2000      	movs	r0, #0
                return false;
            }
        } else {
            AllocatorT::free(data_);
        }
        data_ = d;
   d5912:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d5914:	60a5      	str	r5, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d5916:	6825      	ldr	r5, [r4, #0]
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d5918:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d591a:	eb05 0186 	add.w	r1, r5, r6, lsl #2
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d591e:	eb05 0282 	add.w	r2, r5, r2, lsl #2
   d5922:	1a52      	subs	r2, r2, r1
   d5924:	1d08      	adds	r0, r1, #4
   d5926:	f001 fdc2 	bl	d74ae <memmove>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
   d592a:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   d592e:	6863      	ldr	r3, [r4, #4]
   d5930:	3301      	adds	r3, #1
   d5932:	6063      	str	r3, [r4, #4]
   d5934:	2001      	movs	r0, #1
    return true;
}
   d5936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5938 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
         destroyFactoryHandlers();
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
   d5938:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d593a:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
   d593c:	3024      	adds	r0, #36	; 0x24
         destroyFactoryHandlers();
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
   d593e:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5940:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d5942:	f7ff fc39 	bl	d51b8 <_ZN14RecursiveMutex4lockEv>
    return p - data_;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::contains(const T &value) const {
    return find(data_, data_ + size_, value);
   d5946:	6823      	ldr	r3, [r4, #0]
   d5948:	6861      	ldr	r1, [r4, #4]
   d594a:	eb03 0081 	add.w	r0, r3, r1, lsl #2
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d594e:	4283      	cmp	r3, r0
   d5950:	461a      	mov	r2, r3
   d5952:	d009      	beq.n	d5968 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>
            if (*p == value) {
   d5954:	6812      	ldr	r2, [r2, #0]
   d5956:	42aa      	cmp	r2, r5
   d5958:	f103 0304 	add.w	r3, r3, #4
   d595c:	d1f7      	bne.n	d594e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x16>
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
            return false;
   d595e:	a801      	add	r0, sp, #4
   d5960:	f7ff fe2a 	bl	d55b8 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   d5964:	2500      	movs	r5, #0
   d5966:	e00e      	b.n	d5986 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d5968:	462a      	mov	r2, r5
   d596a:	4620      	mov	r0, r4
   d596c:	f7ff ffbc 	bl	d58e8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   d5970:	4605      	mov	r5, r0
   d5972:	2800      	cmp	r0, #0
   d5974:	d0f3      	beq.n	d595e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x26>
            return false;
        }
        if (activeHandlers_.size() == 1) {
   d5976:	6863      	ldr	r3, [r4, #4]
   d5978:	2b01      	cmp	r3, #1
   d597a:	d101      	bne.n	d5980 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x48>
            setSystemCallbacks();
   d597c:	f7ff fd10 	bl	d53a0 <_ZN5spark10LogManager18setSystemCallbacksEv>
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
   d5980:	a801      	add	r0, sp, #4
   d5982:	f7ff fe19 	bl	d55b8 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (activeHandlers_.size() == 1) {
            setSystemCallbacks();
        }
    }
    return true;
}
   d5986:	4628      	mov	r0, r5
   d5988:	b003      	add	sp, #12
   d598a:	bd30      	pop	{r4, r5, pc}

000d598c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d598c:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d598e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5990:	4606      	mov	r6, r0
   d5992:	460c      	mov	r4, r1
   d5994:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d5996:	d914      	bls.n	d59c2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   d5998:	4290      	cmp	r0, r2
   d599a:	d213      	bcs.n	d59c4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d599c:	f1a2 0510 	sub.w	r5, r2, #16
            dest += end - p - 1;
   d59a0:	1a6c      	subs	r4, r5, r1
   d59a2:	f1a1 0710 	sub.w	r7, r1, #16
   d59a6:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d59a8:	42af      	cmp	r7, r5
   d59aa:	d018      	beq.n	d59de <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   d59ac:	b11c      	cbz	r4, d59b6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   d59ae:	4629      	mov	r1, r5
   d59b0:	4620      	mov	r0, r4
   d59b2:	f7ff fa3d 	bl	d4e30 <_ZN6StringC1EOS_>
                end->~T();
   d59b6:	4628      	mov	r0, r5
   d59b8:	f7ff fa4a 	bl	d4e50 <_ZN6StringD1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d59bc:	3d10      	subs	r5, #16
   d59be:	3c10      	subs	r4, #16
   d59c0:	e7f2      	b.n	d59a8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d59c2:	d00c      	beq.n	d59de <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   d59c4:	42ac      	cmp	r4, r5
   d59c6:	d00a      	beq.n	d59de <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   d59c8:	b11e      	cbz	r6, d59d2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   d59ca:	4621      	mov	r1, r4
   d59cc:	4630      	mov	r0, r6
   d59ce:	f7ff fa2f 	bl	d4e30 <_ZN6StringC1EOS_>
                p->~T();
   d59d2:	4620      	mov	r0, r4
   d59d4:	f7ff fa3c 	bl	d4e50 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d59d8:	3410      	adds	r4, #16
   d59da:	3610      	adds	r6, #16
   d59dc:	e7f2      	b.n	d59c4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
   d59de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d59e0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d59e0:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d59e2:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d59e4:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d59e6:	dd0b      	ble.n	d5a00 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d59e8:	0130      	lsls	r0, r6, #4
   d59ea:	f7ff f991 	bl	d4d10 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d59ee:	4604      	mov	r4, r0
   d59f0:	b170      	cbz	r0, d5a10 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d59f2:	e895 0006 	ldmia.w	r5, {r1, r2}
   d59f6:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   d59fa:	f7ff ffc7 	bl	d598c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
   d59fe:	e000      	b.n	d5a02 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d5a00:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5a02:	6828      	ldr	r0, [r5, #0]
   d5a04:	f7ff f98c 	bl	d4d20 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d5a08:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d5a0a:	60ae      	str	r6, [r5, #8]
        return true;
   d5a0c:	2001      	movs	r0, #1
   d5a0e:	bd70      	pop	{r4, r5, r6, pc}
    }
   d5a10:	bd70      	pop	{r4, r5, r6, pc}

000d5a12 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d5a12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d5a16:	2300      	movs	r3, #0
   d5a18:	b095      	sub	sp, #84	; 0x54
   d5a1a:	4692      	mov	sl, r2
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d5a1c:	2246      	movs	r2, #70	; 0x46
   d5a1e:	6003      	str	r3, [r0, #0]
   d5a20:	6043      	str	r3, [r0, #4]
   d5a22:	6083      	str	r3, [r0, #8]
   d5a24:	60c3      	str	r3, [r0, #12]
   d5a26:	6103      	str	r3, [r0, #16]
   d5a28:	6143      	str	r3, [r0, #20]
   d5a2a:	7602      	strb	r2, [r0, #24]

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d5a2c:	9102      	str	r1, [sp, #8]
   d5a2e:	f8da 1004 	ldr.w	r1, [sl, #4]
   d5a32:	9308      	str	r3, [sp, #32]
    return size_ == 0;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
    if (n > capacity_ && !realloc(n)) {
   d5a34:	4299      	cmp	r1, r3
   d5a36:	4605      	mov	r5, r0
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d5a38:	9309      	str	r3, [sp, #36]	; 0x24
   d5a3a:	930a      	str	r3, [sp, #40]	; 0x28
    return size_ == 0;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
    if (n > capacity_ && !realloc(n)) {
   d5a3c:	f340 809d 	ble.w	d5b7a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x168>
   d5a40:	a808      	add	r0, sp, #32
   d5a42:	f7ff ffcd 	bl	d59e0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d5a46:	2800      	cmp	r0, #0
   d5a48:	f040 8097 	bne.w	d5b7a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x168>
   d5a4c:	e08e      	b.n	d5b6c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15a>
    Vector<String> cats;
    if (!cats.reserve(filters.size())) {
        return;
    }
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
   d5a4e:	4621      	mov	r1, r4
   d5a50:	a80b      	add	r0, sp, #44	; 0x2c
   d5a52:	f7ff f9ed 	bl	d4e30 <_ZN6StringC1EOS_>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d5a56:	a90b      	add	r1, sp, #44	; 0x2c
   d5a58:	a80f      	add	r0, sp, #60	; 0x3c
   d5a5a:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d5a5c:	f7ff f9e8 	bl	d4e30 <_ZN6StringC1EOS_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5a60:	9909      	ldr	r1, [sp, #36]	; 0x24
   d5a62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d5a64:	4299      	cmp	r1, r3
   d5a66:	f2c0 80ce 	blt.w	d5c06 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
   d5a6a:	3101      	adds	r1, #1
   d5a6c:	a808      	add	r0, sp, #32
   d5a6e:	f7ff ffb7 	bl	d59e0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d5a72:	2800      	cmp	r0, #0
   d5a74:	f040 80c7 	bne.w	d5c06 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d5a78:	a80f      	add	r0, sp, #60	; 0x3c
   d5a7a:	f7ff f9e9 	bl	d4e50 <_ZN6StringD1Ev>
   d5a7e:	a80b      	add	r0, sp, #44	; 0x2c
   d5a80:	f7ff f9e6 	bl	d4e50 <_ZN6StringD1Ev>
   d5a84:	3414      	adds	r4, #20
    // Store category names
    Vector<String> cats;
    if (!cats.reserve(filters.size())) {
        return;
    }
    for (LogCategoryFilter &filter: filters) {
   d5a86:	42a7      	cmp	r7, r4
   d5a88:	d1e1      	bne.n	d5a4e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x3c>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d5a8a:	2600      	movs	r6, #0
   d5a8c:	960b      	str	r6, [sp, #44]	; 0x2c
   d5a8e:	960c      	str	r6, [sp, #48]	; 0x30
   d5a90:	960d      	str	r6, [sp, #52]	; 0x34
        if (!category) {
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d5a92:	46b1      	mov	r9, r6
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
    for (int i = 0; i < cats.size(); ++i) {
   d5a94:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d5a96:	429e      	cmp	r6, r3
   d5a98:	f280 80a8 	bge.w	d5bec <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   d5a9c:	0133      	lsls	r3, r6, #4
   d5a9e:	9a08      	ldr	r2, [sp, #32]
   d5aa0:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   d5aa2:	9306      	str	r3, [sp, #24]
        if (!category) {
   d5aa4:	2b00      	cmp	r3, #0
   d5aa6:	f000 809f 	beq.w	d5be8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d6>
   d5aaa:	2314      	movs	r3, #20
   d5aac:	4373      	muls	r3, r6
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d5aae:	f8cd 901c 	str.w	r9, [sp, #28]
   d5ab2:	9301      	str	r3, [sp, #4]
    for (int i = 0; i < cats.size(); ++i) {
        const char *category = cats.at(i).c_str();
        if (!category) {
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
   d5ab4:	ac0b      	add	r4, sp, #44	; 0x2c
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d5ab6:	a907      	add	r1, sp, #28
   d5ab8:	a806      	add	r0, sp, #24
   d5aba:	f7ff fb2c 	bl	d5116 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d5abe:	4607      	mov	r7, r0
   d5ac0:	2800      	cmp	r0, #0
   d5ac2:	f000 8091 	beq.w	d5be8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d6>
            bool found = false;
   d5ac6:	ab14      	add	r3, sp, #80	; 0x50
            const int index = nodeIndex(*pNodes, name, size, found);
   d5ac8:	4601      	mov	r1, r0
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d5aca:	f803 9d39 	strb.w	r9, [r3, #-57]!
            const int index = nodeIndex(*pNodes, name, size, found);
   d5ace:	9a07      	ldr	r2, [sp, #28]
   d5ad0:	4620      	mov	r0, r4
   d5ad2:	f7ff fb8d 	bl	d51f0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d5ad6:	f89d 8017 	ldrb.w	r8, [sp, #23]
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
   d5ada:	9000      	str	r0, [sp, #0]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d5adc:	f1b8 0f00 	cmp.w	r8, #0
   d5ae0:	d153      	bne.n	d5b8a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x178>
   d5ae2:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    Vector<Node> nodes; // Children nodes

    Node(const char *name, uint16_t size) :
            name(name),
            size(size),
            level(-1) {
   d5ae6:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
   d5aea:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d5aee:	970f      	str	r7, [sp, #60]	; 0x3c
   d5af0:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   d5af4:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
   d5af8:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
   d5afc:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5b00:	6867      	ldr	r7, [r4, #4]
   d5b02:	68a3      	ldr	r3, [r4, #8]
   d5b04:	429f      	cmp	r7, r3
   d5b06:	da4f      	bge.n	d5ba8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x196>
        return false;
    }
    T* const p = data_ + i;
   d5b08:	9b00      	ldr	r3, [sp, #0]
   d5b0a:	f8d4 b000 	ldr.w	fp, [r4]
    move(p + 1, p, data_ + size_);
   d5b0e:	6861      	ldr	r1, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d5b10:	2214      	movs	r2, #20
   d5b12:	4353      	muls	r3, r2
   d5b14:	eb0b 0703 	add.w	r7, fp, r3
    move(p + 1, p, data_ + size_);
   d5b18:	fb02 b201 	mla	r2, r2, r1, fp
   d5b1c:	f107 0014 	add.w	r0, r7, #20
   d5b20:	4639      	mov	r1, r7
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d5b22:	9303      	str	r3, [sp, #12]
    move(p + 1, p, data_ + size_);
   d5b24:	f7ff fe94 	bl	d5850 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   d5b28:	b1a7      	cbz	r7, d5b54 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x142>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d5b2a:	9b03      	ldr	r3, [sp, #12]
   d5b2c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d5b2e:	f84b 2003 	str.w	r2, [fp, r3]
   d5b32:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   d5b36:	80bb      	strh	r3, [r7, #4]
   d5b38:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
   d5b3c:	80fb      	strh	r3, [r7, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d5b3e:	f8c7 9008 	str.w	r9, [r7, #8]
   d5b42:	f8c7 900c 	str.w	r9, [r7, #12]
   d5b46:	f8c7 9010 	str.w	r9, [r7, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d5b4a:	a911      	add	r1, sp, #68	; 0x44
   d5b4c:	f107 0008 	add.w	r0, r7, #8
   d5b50:	f7ff fe67 	bl	d5822 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
    ++size_;
   d5b54:	6863      	ldr	r3, [r4, #4]
   d5b56:	3301      	adds	r3, #1
   d5b58:	6063      	str	r3, [r4, #4]
   d5b5a:	a811      	add	r0, sp, #68	; 0x44
   d5b5c:	f7ff fcd2 	bl	d5504 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d5b60:	f1b8 0f00 	cmp.w	r8, #0
   d5b64:	d011      	beq.n	d5b8a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x178>
    }
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
   d5b66:	a80b      	add	r0, sp, #44	; 0x2c
   d5b68:	f7ff fccc 	bl	d5504 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d5b6c:	a808      	add	r0, sp, #32
   d5b6e:	f7ff fcdd 	bl	d552c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    }
    using std::swap;
    swap(cats_, cats);
    swap(nodes_, nodes);
    level_ = level;
}
   d5b72:	4628      	mov	r0, r5
   d5b74:	b015      	add	sp, #84	; 0x54
   d5b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5b7a:	f8da 4000 	ldr.w	r4, [sl]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d5b7e:	f8da 3004 	ldr.w	r3, [sl, #4]
   d5b82:	2714      	movs	r7, #20
   d5b84:	fb07 4703 	mla	r7, r7, r3, r4
   d5b88:	e77d      	b.n	d5a86 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_[size_ - 1];
}

template<typename T, typename AllocatorT>
inline T& spark::Vector<T, AllocatorT>::at(int i) {
    return data_[i];
   d5b8a:	6823      	ldr	r3, [r4, #0]
   d5b8c:	9a00      	ldr	r2, [sp, #0]
   d5b8e:	2414      	movs	r4, #20
   d5b90:	fb04 3402 	mla	r4, r4, r2, r3
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
                return;
            }
            Node &node = pNodes->at(index);
            if (!*category) { // Check if it's last subcategory
   d5b94:	9b06      	ldr	r3, [sp, #24]
   d5b96:	781b      	ldrb	r3, [r3, #0]
   d5b98:	bb23      	cbnz	r3, d5be4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d2>
                node.level = filters.at(i).level_;
   d5b9a:	f8da 3000 	ldr.w	r3, [sl]
   d5b9e:	9a01      	ldr	r2, [sp, #4]
   d5ba0:	4413      	add	r3, r2
   d5ba2:	7c1b      	ldrb	r3, [r3, #16]
   d5ba4:	80e3      	strh	r3, [r4, #6]
   d5ba6:	e01d      	b.n	d5be4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d2>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5ba8:	3701      	adds	r7, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d5baa:	2f00      	cmp	r7, #0
   d5bac:	dd0f      	ble.n	d5bce <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d5bae:	2314      	movs	r3, #20
   d5bb0:	fb03 f007 	mul.w	r0, r3, r7
   d5bb4:	9303      	str	r3, [sp, #12]
   d5bb6:	f7ff f8ab 	bl	d4d10 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d5bba:	4683      	mov	fp, r0
   d5bbc:	b178      	cbz	r0, d5bde <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1cc>
                return false;
            }
            move(d, data_, data_ + size_);
   d5bbe:	e894 0006 	ldmia.w	r4, {r1, r2}
   d5bc2:	9b03      	ldr	r3, [sp, #12]
   d5bc4:	fb03 1202 	mla	r2, r3, r2, r1
   d5bc8:	f7ff fe42 	bl	d5850 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   d5bcc:	e000      	b.n	d5bd0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1be>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d5bce:	46c3      	mov	fp, r8
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5bd0:	6820      	ldr	r0, [r4, #0]
   d5bd2:	f7ff f8a5 	bl	d4d20 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d5bd6:	f8c4 b000 	str.w	fp, [r4]
        capacity_ = n;
   d5bda:	60a7      	str	r7, [r4, #8]
   d5bdc:	e794      	b.n	d5b08 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xf6>
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d5bde:	f04f 0801 	mov.w	r8, #1
   d5be2:	e7ba      	b.n	d5b5a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x148>
            }
            Node &node = pNodes->at(index);
            if (!*category) { // Check if it's last subcategory
                node.level = filters.at(i).level_;
            }
            pNodes = &node.nodes;
   d5be4:	3408      	adds	r4, #8
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d5be6:	e766      	b.n	d5ab6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa4>
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
    for (int i = 0; i < cats.size(); ++i) {
   d5be8:	3601      	adds	r6, #1
   d5bea:	e753      	b.n	d5a94 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x82>
            }
            pNodes = &node.nodes;
        }
    }
    using std::swap;
    swap(cats_, cats);
   d5bec:	a908      	add	r1, sp, #32
   d5bee:	4628      	mov	r0, r5
   d5bf0:	f7ff fe17 	bl	d5822 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
    swap(nodes_, nodes);
   d5bf4:	a90b      	add	r1, sp, #44	; 0x2c
   d5bf6:	f105 000c 	add.w	r0, r5, #12
   d5bfa:	f7ff fe12 	bl	d5822 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
    level_ = level;
   d5bfe:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d5c02:	762b      	strb	r3, [r5, #24]
   d5c04:	e7af      	b.n	d5b66 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x154>
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d5c06:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   d5c08:	9a09      	ldr	r2, [sp, #36]	; 0x24
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d5c0a:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   d5c0e:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   d5c12:	4631      	mov	r1, r6
   d5c14:	f106 0010 	add.w	r0, r6, #16
   d5c18:	f7ff feb8 	bl	d598c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   d5c1c:	b11e      	cbz	r6, d5c26 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x214>
   d5c1e:	a90f      	add	r1, sp, #60	; 0x3c
   d5c20:	4630      	mov	r0, r6
   d5c22:	f7ff f905 	bl	d4e30 <_ZN6StringC1EOS_>
    ++size_;
   d5c26:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d5c28:	3301      	adds	r3, #1
   d5c2a:	9309      	str	r3, [sp, #36]	; 0x24
   d5c2c:	e724      	b.n	d5a78 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x66>
	...

000d5c30 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
// spark::LogHandler
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d5c30:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   d5c32:	4604      	mov	r4, r0
   d5c34:	4b09      	ldr	r3, [pc, #36]	; (d5c5c <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   d5c36:	f844 3b04 	str.w	r3, [r4], #4
// spark::LogHandler
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d5c3a:	4605      	mov	r5, r0
   d5c3c:	460e      	mov	r6, r1
        filter_(level, filters) {
   d5c3e:	a801      	add	r0, sp, #4
   d5c40:	4611      	mov	r1, r2
   d5c42:	f7fe faf2 	bl	d422a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d5c46:	aa01      	add	r2, sp, #4
   d5c48:	4631      	mov	r1, r6
   d5c4a:	4620      	mov	r0, r4
   d5c4c:	f7ff fee1 	bl	d5a12 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d5c50:	a801      	add	r0, sp, #4
   d5c52:	f7fe faa9 	bl	d41a8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   d5c56:	4628      	mov	r0, r5
   d5c58:	b004      	add	sp, #16
   d5c5a:	bd70      	pop	{r4, r5, r6, pc}
   d5c5c:	000d775c 	.word	0x000d775c

000d5c60 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d5c60:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5c62:	460f      	mov	r7, r1
   d5c64:	b08b      	sub	sp, #44	; 0x2c
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d5c66:	492b      	ldr	r1, [pc, #172]	; (d5d14 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb4>)

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d5c68:	9c10      	ldr	r4, [sp, #64]	; 0x40
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d5c6a:	4638      	mov	r0, r7

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d5c6c:	4616      	mov	r6, r2
   d5c6e:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d5c70:	f001 fc80 	bl	d7574 <strcmp>
   d5c74:	bb28      	cbnz	r0, d5cc2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x62>
        if (!stream) {
   d5c76:	2c00      	cmp	r4, #0
   d5c78:	d049      	beq.n	d5d0e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xae>
            return nullptr; // Output stream is not specified
        }
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   d5c7a:	4629      	mov	r1, r5
   d5c7c:	a801      	add	r0, sp, #4
   d5c7e:	f7ff fddd 	bl	d583c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d5c82:	4925      	ldr	r1, [pc, #148]	; (d5d18 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb8>)
   d5c84:	2024      	movs	r0, #36	; 0x24
   d5c86:	f001 fa9f 	bl	d71c8 <_ZnwjRKSt9nothrow_t>
   d5c8a:	4605      	mov	r5, r0
   d5c8c:	b1b8      	cbz	r0, d5cbe <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x5e>
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
public:
    using StreamLogHandler::StreamLogHandler;
   d5c8e:	a901      	add	r1, sp, #4
   d5c90:	a804      	add	r0, sp, #16
   d5c92:	f7ff fdd3 	bl	d583c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d5c96:	a904      	add	r1, sp, #16
   d5c98:	a807      	add	r0, sp, #28
   d5c9a:	f7fe fac6 	bl	d422a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d5c9e:	aa07      	add	r2, sp, #28
   d5ca0:	4631      	mov	r1, r6
   d5ca2:	4628      	mov	r0, r5
   d5ca4:	f7ff ffc4 	bl	d5c30 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d5ca8:	a807      	add	r0, sp, #28
   d5caa:	f7fe fa7d 	bl	d41a8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d5cae:	4b1b      	ldr	r3, [pc, #108]	; (d5d1c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xbc>)
   d5cb0:	602b      	str	r3, [r5, #0]
   d5cb2:	622c      	str	r4, [r5, #32]
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
public:
    using StreamLogHandler::StreamLogHandler;
   d5cb4:	a804      	add	r0, sp, #16
   d5cb6:	f7fe fa77 	bl	d41a8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d5cba:	4b19      	ldr	r3, [pc, #100]	; (d5d20 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xc0>)
   d5cbc:	602b      	str	r3, [r5, #0]
   d5cbe:	a801      	add	r0, sp, #4
   d5cc0:	e01f      	b.n	d5d02 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa2>
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   d5cc2:	4918      	ldr	r1, [pc, #96]	; (d5d24 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xc4>)
   d5cc4:	4638      	mov	r0, r7
   d5cc6:	f001 fc55 	bl	d7574 <strcmp>
   d5cca:	b9f0      	cbnz	r0, d5d0a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xaa>
        if (!stream) {
   d5ccc:	b1fc      	cbz	r4, d5d0e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xae>
            return nullptr;
        }
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d5cce:	4629      	mov	r1, r5
   d5cd0:	a804      	add	r0, sp, #16
   d5cd2:	f7ff fdb3 	bl	d583c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d5cd6:	4910      	ldr	r1, [pc, #64]	; (d5d18 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb8>)
   d5cd8:	2024      	movs	r0, #36	; 0x24
   d5cda:	f001 fa75 	bl	d71c8 <_ZnwjRKSt9nothrow_t>
   d5cde:	4605      	mov	r5, r0
   d5ce0:	b170      	cbz	r0, d5d00 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d5ce2:	a904      	add	r1, sp, #16
   d5ce4:	a807      	add	r0, sp, #28
   d5ce6:	f7fe faa0 	bl	d422a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d5cea:	aa07      	add	r2, sp, #28
   d5cec:	4631      	mov	r1, r6
   d5cee:	4628      	mov	r0, r5
   d5cf0:	f7ff ff9e 	bl	d5c30 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d5cf4:	a807      	add	r0, sp, #28
   d5cf6:	f7fe fa57 	bl	d41a8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d5cfa:	4b08      	ldr	r3, [pc, #32]	; (d5d1c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xbc>)
   d5cfc:	602b      	str	r3, [r5, #0]
   d5cfe:	622c      	str	r4, [r5, #32]
   d5d00:	a804      	add	r0, sp, #16
   d5d02:	f7fe fa51 	bl	d41a8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d5d06:	4628      	mov	r0, r5
   d5d08:	e002      	b.n	d5d10 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>
// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
        if (!stream) {
            return nullptr; // Output stream is not specified
   d5d0a:	2000      	movs	r0, #0
   d5d0c:	e000      	b.n	d5d10 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>
   d5d0e:	4620      	mov	r0, r4
            return nullptr;
        }
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
    }
    return nullptr; // Unknown handler type
}
   d5d10:	b00b      	add	sp, #44	; 0x2c
   d5d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5d14:	000d7c5a 	.word	0x000d7c5a
   d5d18:	000d7e9f 	.word	0x000d7e9f
   d5d1c:	000d7ce4 	.word	0x000d7ce4
   d5d20:	000d7bec 	.word	0x000d7bec
   d5d24:	000d7c5e 	.word	0x000d7c5e

000d5d28 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5d28:	4b01      	ldr	r3, [pc, #4]	; (d5d30 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5d2a:	4a02      	ldr	r2, [pc, #8]	; (d5d34 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5d2c:	601a      	str	r2, [r3, #0]
   d5d2e:	4770      	bx	lr
   d5d30:	2003e508 	.word	0x2003e508
   d5d34:	000d7c6f 	.word	0x000d7c6f

000d5d38 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d5d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5d3c:	9d08      	ldr	r5, [sp, #32]
    // TODO: Move this check to a base class (see also JSONStreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (stream_ == &Serial && Network.listening()) {
   d5d3e:	f8d0 9020 	ldr.w	r9, [r0, #32]
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d5d42:	4604      	mov	r4, r0
   d5d44:	460e      	mov	r6, r1
   d5d46:	4617      	mov	r7, r2
   d5d48:	4698      	mov	r8, r3
    // TODO: Move this check to a base class (see also JSONStreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (stream_ == &Serial && Network.listening()) {
   d5d4a:	f000 fded 	bl	d6928 <_Z16_fetch_usbserialv>
   d5d4e:	4581      	cmp	r9, r0
   d5d50:	d105      	bne.n	d5d5e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x26>
   d5d52:	485a      	ldr	r0, [pc, #360]	; (d5ebc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   d5d54:	f000 ffef 	bl	d6d36 <_ZN5spark12NetworkClass9listeningEv>
   d5d58:	2800      	cmp	r0, #0
   d5d5a:	f040 80ac 	bne.w	d5eb6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17e>
        return; // Do not mix logging and serial console output
    }
#endif
    const char *s = nullptr;
    // Timestamp
    if (attr.has_time) {
   d5d5e:	792b      	ldrb	r3, [r5, #4]
   d5d60:	071b      	lsls	r3, r3, #28
   d5d62:	d505      	bpl.n	d5d70 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x38>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d5d64:	696b      	ldr	r3, [r5, #20]
   d5d66:	4a56      	ldr	r2, [pc, #344]	; (d5ec0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   d5d68:	6a20      	ldr	r0, [r4, #32]
   d5d6a:	2100      	movs	r1, #0
   d5d6c:	f7ff f985 	bl	d507a <_ZN5Print11printf_implEbPKcz>
        printf("%010u ", (unsigned)attr.time);
    }
    // Category
    if (category) {
   d5d70:	f1b8 0f00 	cmp.w	r8, #0
   d5d74:	d00d      	beq.n	d5d92 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x5a>
        write('[');
   d5d76:	215b      	movs	r1, #91	; 0x5b
   d5d78:	4620      	mov	r0, r4
   d5d7a:	f7ff fa2e 	bl	d51da <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   d5d7e:	4641      	mov	r1, r8
   d5d80:	4620      	mov	r0, r4
   d5d82:	f7ff fa1c 	bl	d51be <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   d5d86:	6823      	ldr	r3, [r4, #0]
   d5d88:	494e      	ldr	r1, [pc, #312]	; (d5ec4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   d5d8a:	68db      	ldr	r3, [r3, #12]
   d5d8c:	2202      	movs	r2, #2
   d5d8e:	4620      	mov	r0, r4
   d5d90:	4798      	blx	r3
    }
    // Source file
    if (attr.has_file) {
   d5d92:	792b      	ldrb	r3, [r5, #4]
   d5d94:	07d9      	lsls	r1, r3, #31
   d5d96:	d525      	bpl.n	d5de4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xac>
        s = extractFileName(attr.file); // Strip directory path
   d5d98:	f8d5 8008 	ldr.w	r8, [r5, #8]
    }
    return nullptr;
}

const char* extractFileName(const char *s) {
    const char *s1 = strrchr(s, '/');
   d5d9c:	212f      	movs	r1, #47	; 0x2f
   d5d9e:	4640      	mov	r0, r8
   d5da0:	f001 fc2a 	bl	d75f8 <strrchr>
    if (s1) {
   d5da4:	b108      	cbz	r0, d5daa <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x72>
        return s1 + 1;
   d5da6:	f100 0801 	add.w	r8, r0, #1
        write("] ", 2);
    }
    // Source file
    if (attr.has_file) {
        s = extractFileName(attr.file); // Strip directory path
        write(s); // File name
   d5daa:	4641      	mov	r1, r8
   d5dac:	4620      	mov	r0, r4
   d5dae:	f7ff fa06 	bl	d51be <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   d5db2:	792b      	ldrb	r3, [r5, #4]
   d5db4:	079a      	lsls	r2, r3, #30
   d5db6:	d509      	bpl.n	d5dcc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x94>
            write(':');
   d5db8:	213a      	movs	r1, #58	; 0x3a
   d5dba:	4620      	mov	r0, r4
   d5dbc:	f7ff fa0d 	bl	d51da <_ZN5spark16StreamLogHandler5writeEc>
   d5dc0:	68eb      	ldr	r3, [r5, #12]
   d5dc2:	4a41      	ldr	r2, [pc, #260]	; (d5ec8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   d5dc4:	6a20      	ldr	r0, [r4, #32]
   d5dc6:	2100      	movs	r1, #0
   d5dc8:	f7ff f957 	bl	d507a <_ZN5Print11printf_implEbPKcz>
            printf("%d", (int)attr.line); // Line number
        }
        if (attr.has_function) {
   d5dcc:	792b      	ldrb	r3, [r5, #4]
   d5dce:	f013 0f04 	tst.w	r3, #4
   d5dd2:	6823      	ldr	r3, [r4, #0]
            write(", ", 2);
   d5dd4:	bf18      	it	ne
   d5dd6:	493d      	ldrne	r1, [pc, #244]	; (d5ecc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d5dd8:	68db      	ldr	r3, [r3, #12]
        } else {
            write(": ", 2);
   d5dda:	bf08      	it	eq
   d5ddc:	493c      	ldreq	r1, [pc, #240]	; (d5ed0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
        if (attr.has_line) {
            write(':');
            printf("%d", (int)attr.line); // Line number
        }
        if (attr.has_function) {
            write(", ", 2);
   d5dde:	2202      	movs	r2, #2
        } else {
            write(": ", 2);
   d5de0:	4620      	mov	r0, r4
   d5de2:	4798      	blx	r3
        }
    }
    // Function name
    if (attr.has_function) {
   d5de4:	792b      	ldrb	r3, [r5, #4]
   d5de6:	075b      	lsls	r3, r3, #29
   d5de8:	d518      	bpl.n	d5e1c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe4>
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d5dea:	6929      	ldr	r1, [r5, #16]
   d5dec:	460a      	mov	r2, r1
    return s;
}

const char* extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
    for (; *s; ++s) {
   d5dee:	4613      	mov	r3, r2
   d5df0:	f813 0b01 	ldrb.w	r0, [r3], #1
   d5df4:	b138      	cbz	r0, d5e06 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xce>
        if (*s == ' ') {
   d5df6:	2820      	cmp	r0, #32
   d5df8:	d101      	bne.n	d5dfe <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
            s1 = s + 1; // Skip return type
   d5dfa:	4619      	mov	r1, r3
   d5dfc:	e001      	b.n	d5e02 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xca>
        } else if (*s == '(') {
   d5dfe:	2828      	cmp	r0, #40	; 0x28
   d5e00:	d001      	beq.n	d5e06 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xce>
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d5e02:	461a      	mov	r2, r3
   d5e04:	e7f3      	b.n	d5dee <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    }
    // Function name
    if (attr.has_function) {
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
        write(s, n);
   d5e06:	6823      	ldr	r3, [r4, #0]
   d5e08:	1a52      	subs	r2, r2, r1
   d5e0a:	68db      	ldr	r3, [r3, #12]
   d5e0c:	4620      	mov	r0, r4
   d5e0e:	4798      	blx	r3
        write("(): ", 4);
   d5e10:	6823      	ldr	r3, [r4, #0]
   d5e12:	4930      	ldr	r1, [pc, #192]	; (d5ed4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   d5e14:	68db      	ldr	r3, [r3, #12]
   d5e16:	2204      	movs	r2, #4
   d5e18:	4620      	mov	r0, r4
   d5e1a:	4798      	blx	r3
inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
}

inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
   d5e1c:	2100      	movs	r1, #0
   d5e1e:	4638      	mov	r0, r7
   d5e20:	f7fe fec2 	bl	d4ba8 <log_level_name>
    }
    // Level
    s = levelName(level);
    write(s);
   d5e24:	4601      	mov	r1, r0
   d5e26:	4620      	mov	r0, r4
   d5e28:	f7ff f9c9 	bl	d51be <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   d5e2c:	6823      	ldr	r3, [r4, #0]
   d5e2e:	4928      	ldr	r1, [pc, #160]	; (d5ed0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   d5e30:	68db      	ldr	r3, [r3, #12]
   d5e32:	2202      	movs	r2, #2
   d5e34:	4620      	mov	r0, r4
   d5e36:	4798      	blx	r3
    // Message
    if (msg) {
   d5e38:	b11e      	cbz	r6, d5e42 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x10a>
        write(msg);
   d5e3a:	4631      	mov	r1, r6
   d5e3c:	4620      	mov	r0, r4
   d5e3e:	f7ff f9be 	bl	d51be <_ZN5spark16StreamLogHandler5writeEPKc>
    }
    // Additional attributes
    if (attr.has_code || attr.has_details) {
   d5e42:	792b      	ldrb	r3, [r5, #4]
   d5e44:	f013 0f30 	tst.w	r3, #48	; 0x30
   d5e48:	d02d      	beq.n	d5ea6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16e>
        write(" [", 2);
   d5e4a:	6823      	ldr	r3, [r4, #0]
   d5e4c:	4922      	ldr	r1, [pc, #136]	; (d5ed8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   d5e4e:	68db      	ldr	r3, [r3, #12]
   d5e50:	4620      	mov	r0, r4
   d5e52:	2202      	movs	r2, #2
   d5e54:	4798      	blx	r3
        // Code
        if (attr.has_code) {
   d5e56:	792b      	ldrb	r3, [r5, #4]
   d5e58:	06d8      	lsls	r0, r3, #27
   d5e5a:	d50b      	bpl.n	d5e74 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
            write("code = ", 7);
   d5e5c:	6823      	ldr	r3, [r4, #0]
   d5e5e:	491f      	ldr	r1, [pc, #124]	; (d5edc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
   d5e60:	68db      	ldr	r3, [r3, #12]
   d5e62:	2207      	movs	r2, #7
   d5e64:	4620      	mov	r0, r4
   d5e66:	4798      	blx	r3
   d5e68:	69ab      	ldr	r3, [r5, #24]
   d5e6a:	4a1d      	ldr	r2, [pc, #116]	; (d5ee0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a8>)
   d5e6c:	6a20      	ldr	r0, [r4, #32]
   d5e6e:	2100      	movs	r1, #0
   d5e70:	f7ff f903 	bl	d507a <_ZN5Print11printf_implEbPKcz>
            printf("%" PRIiPTR, (intptr_t)attr.code);
        }
        // Details
        if (attr.has_details) {
   d5e74:	792b      	ldrb	r3, [r5, #4]
   d5e76:	0699      	lsls	r1, r3, #26
   d5e78:	d511      	bpl.n	d5e9e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
            if (attr.has_code) {
   d5e7a:	06da      	lsls	r2, r3, #27
   d5e7c:	d505      	bpl.n	d5e8a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x152>
                write(", ", 2);
   d5e7e:	6823      	ldr	r3, [r4, #0]
   d5e80:	4912      	ldr	r1, [pc, #72]	; (d5ecc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d5e82:	68db      	ldr	r3, [r3, #12]
   d5e84:	2202      	movs	r2, #2
   d5e86:	4620      	mov	r0, r4
   d5e88:	4798      	blx	r3
            }
            write("details = ", 10);
   d5e8a:	6823      	ldr	r3, [r4, #0]
   d5e8c:	4915      	ldr	r1, [pc, #84]	; (d5ee4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1ac>)
   d5e8e:	68db      	ldr	r3, [r3, #12]
   d5e90:	4620      	mov	r0, r4
   d5e92:	220a      	movs	r2, #10
   d5e94:	4798      	blx	r3
            write(attr.details);
   d5e96:	69e9      	ldr	r1, [r5, #28]
   d5e98:	4620      	mov	r0, r4
   d5e9a:	f7ff f990 	bl	d51be <_ZN5spark16StreamLogHandler5writeEPKc>
        }
        write(']');
   d5e9e:	215d      	movs	r1, #93	; 0x5d
   d5ea0:	4620      	mov	r0, r4
   d5ea2:	f7ff f99a 	bl	d51da <_ZN5spark16StreamLogHandler5writeEc>
    }
    write("\r\n", 2);
   d5ea6:	6823      	ldr	r3, [r4, #0]
   d5ea8:	490f      	ldr	r1, [pc, #60]	; (d5ee8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1b0>)
   d5eaa:	68db      	ldr	r3, [r3, #12]
   d5eac:	4620      	mov	r0, r4
   d5eae:	2202      	movs	r2, #2
}
   d5eb0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            write("details = ", 10);
            write(attr.details);
        }
        write(']');
    }
    write("\r\n", 2);
   d5eb4:	4718      	bx	r3
   d5eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d5eba:	bf00      	nop
   d5ebc:	2003e73c 	.word	0x2003e73c
   d5ec0:	000d7c73 	.word	0x000d7c73
   d5ec4:	000d7c7a 	.word	0x000d7c7a
   d5ec8:	000d7c7d 	.word	0x000d7c7d
   d5ecc:	000d7c80 	.word	0x000d7c80
   d5ed0:	000d7c85 	.word	0x000d7c85
   d5ed4:	000d7c83 	.word	0x000d7c83
   d5ed8:	000d7c88 	.word	0x000d7c88
   d5edc:	000d7c8b 	.word	0x000d7c8b
   d5ee0:	000d7c93 	.word	0x000d7c93
   d5ee4:	000d7c96 	.word	0x000d7c96
   d5ee8:	000d7ca1 	.word	0x000d7ca1

000d5eec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d5eec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5ef0:	b085      	sub	sp, #20
   d5ef2:	f8d0 8020 	ldr.w	r8, [r0, #32]
   d5ef6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   d5ef8:	4606      	mov	r6, r0
   d5efa:	460f      	mov	r7, r1
   d5efc:	4691      	mov	r9, r2
   d5efe:	461d      	mov	r5, r3
    // TODO: Move this check to a base class (see also StreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (this->stream() == &Serial && Network.listening()) {
   d5f00:	f000 fd12 	bl	d6928 <_Z16_fetch_usbserialv>
   d5f04:	4580      	cmp	r8, r0
   d5f06:	d105      	bne.n	d5f14 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   d5f08:	484a      	ldr	r0, [pc, #296]	; (d6034 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   d5f0a:	f000 ff14 	bl	d6d36 <_ZN5spark12NetworkClass9listeningEv>
   d5f0e:	2800      	cmp	r0, #0
   d5f10:	f040 808c 	bne.w	d602c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x140>
   d5f14:	6a33      	ldr	r3, [r6, #32]
    write(&c, 1);
}

// spark::JSONStreamWriter
inline spark::JSONStreamWriter::JSONStreamWriter(Print &stream) :
        strm_(stream) {
   d5f16:	4a48      	ldr	r2, [pc, #288]	; (d6038 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   d5f18:	9201      	str	r2, [sp, #4]
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
   d5f1a:	f04f 0800 	mov.w	r8, #0
        return; // Do not mix logging and serial console output
    }
#endif
    JSONStreamWriter json(*this->stream());
    json.beginObject();
   d5f1e:	a801      	add	r0, sp, #4
    write(&c, 1);
}

// spark::JSONStreamWriter
inline spark::JSONStreamWriter::JSONStreamWriter(Print &stream) :
        strm_(stream) {
   d5f20:	9303      	str	r3, [sp, #12]
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
   d5f22:	f88d 8008 	strb.w	r8, [sp, #8]
   d5f26:	f001 f84a 	bl	d6fbe <_ZN5spark10JSONWriter11beginObjectEv>
   d5f2a:	4641      	mov	r1, r8
   d5f2c:	4648      	mov	r0, r9
   d5f2e:	f7fe fe3b 	bl	d4ba8 <log_level_name>
    // Level
    const char *s = levelName(level);
    json.name("l", 1).value(s);
   d5f32:	4942      	ldr	r1, [pc, #264]	; (d603c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   d5f34:	4680      	mov	r8, r0
   d5f36:	2201      	movs	r2, #1
   d5f38:	a801      	add	r0, sp, #4
   d5f3a:	f001 f8c5 	bl	d70c8 <_ZN5spark10JSONWriter4nameEPKcj>
   d5f3e:	4641      	mov	r1, r8
   d5f40:	f7ff f92d 	bl	d519e <_ZN5spark10JSONWriter5valueEPKc>
    // Message
    if (msg) {
   d5f44:	b13f      	cbz	r7, d5f56 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   d5f46:	493e      	ldr	r1, [pc, #248]	; (d6040 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   d5f48:	2201      	movs	r2, #1
   d5f4a:	a801      	add	r0, sp, #4
   d5f4c:	f001 f8bc 	bl	d70c8 <_ZN5spark10JSONWriter4nameEPKcj>
   d5f50:	4639      	mov	r1, r7
   d5f52:	f7ff f924 	bl	d519e <_ZN5spark10JSONWriter5valueEPKc>
    }
    // Category
    if (category) {
   d5f56:	b13d      	cbz	r5, d5f68 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   d5f58:	493a      	ldr	r1, [pc, #232]	; (d6044 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   d5f5a:	2201      	movs	r2, #1
   d5f5c:	a801      	add	r0, sp, #4
   d5f5e:	f001 f8b3 	bl	d70c8 <_ZN5spark10JSONWriter4nameEPKcj>
   d5f62:	4629      	mov	r1, r5
   d5f64:	f7ff f91b 	bl	d519e <_ZN5spark10JSONWriter5valueEPKc>
    }
    // File name
    if (attr.has_file) {
   d5f68:	7923      	ldrb	r3, [r4, #4]
   d5f6a:	07df      	lsls	r7, r3, #31
   d5f6c:	d50e      	bpl.n	d5f8c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   d5f6e:	68a5      	ldr	r5, [r4, #8]
    }
    return nullptr;
}

const char* extractFileName(const char *s) {
    const char *s1 = strrchr(s, '/');
   d5f70:	212f      	movs	r1, #47	; 0x2f
   d5f72:	4628      	mov	r0, r5
   d5f74:	f001 fb40 	bl	d75f8 <strrchr>
    if (s1) {
   d5f78:	b100      	cbz	r0, d5f7c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   d5f7a:	1c45      	adds	r5, r0, #1
        json.name("c", 1).value(category);
    }
    // File name
    if (attr.has_file) {
        s = extractFileName(attr.file); // Strip directory path
        json.name("f", 1).value(s);
   d5f7c:	4932      	ldr	r1, [pc, #200]	; (d6048 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   d5f7e:	2201      	movs	r2, #1
   d5f80:	a801      	add	r0, sp, #4
   d5f82:	f001 f8a1 	bl	d70c8 <_ZN5spark10JSONWriter4nameEPKcj>
   d5f86:	4629      	mov	r1, r5
   d5f88:	f7ff f909 	bl	d519e <_ZN5spark10JSONWriter5valueEPKc>
    }
    // Line number
    if (attr.has_line) {
   d5f8c:	7923      	ldrb	r3, [r4, #4]
   d5f8e:	079d      	lsls	r5, r3, #30
   d5f90:	d507      	bpl.n	d5fa2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   d5f92:	492e      	ldr	r1, [pc, #184]	; (d604c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   d5f94:	2202      	movs	r2, #2
   d5f96:	a801      	add	r0, sp, #4
   d5f98:	f001 f896 	bl	d70c8 <_ZN5spark10JSONWriter4nameEPKcj>
   d5f9c:	68e1      	ldr	r1, [r4, #12]
   d5f9e:	f001 f81b 	bl	d6fd8 <_ZN5spark10JSONWriter5valueEi>
    }
    // Function name
    if (attr.has_function) {
   d5fa2:	7923      	ldrb	r3, [r4, #4]
   d5fa4:	0758      	lsls	r0, r3, #29
   d5fa6:	d516      	bpl.n	d5fd6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xea>
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d5fa8:	6925      	ldr	r5, [r4, #16]
   d5faa:	462f      	mov	r7, r5
    return s;
}

const char* extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
    for (; *s; ++s) {
   d5fac:	463b      	mov	r3, r7
   d5fae:	f813 2b01 	ldrb.w	r2, [r3], #1
   d5fb2:	b13a      	cbz	r2, d5fc4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd8>
        if (*s == ' ') {
   d5fb4:	2a20      	cmp	r2, #32
   d5fb6:	d101      	bne.n	d5fbc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   d5fb8:	461d      	mov	r5, r3
   d5fba:	e001      	b.n	d5fc0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        } else if (*s == '(') {
   d5fbc:	2a28      	cmp	r2, #40	; 0x28
   d5fbe:	d001      	beq.n	d5fc4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd8>
    }
    write("\r\n", 2);
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d5fc0:	461f      	mov	r7, r3
   d5fc2:	e7f3      	b.n	d5fac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
    }
    // Function name
    if (attr.has_function) {
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
        json.name("fn", 2).value(s, n);
   d5fc4:	2202      	movs	r2, #2
   d5fc6:	4922      	ldr	r1, [pc, #136]	; (d6050 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   d5fc8:	a801      	add	r0, sp, #4
   d5fca:	f001 f87d 	bl	d70c8 <_ZN5spark10JSONWriter4nameEPKcj>
   d5fce:	1b7a      	subs	r2, r7, r5
   d5fd0:	4629      	mov	r1, r5
   d5fd2:	f001 f888 	bl	d70e6 <_ZN5spark10JSONWriter5valueEPKcj>
    }
    // Timestamp
    if (attr.has_time) {
   d5fd6:	7923      	ldrb	r3, [r4, #4]
   d5fd8:	0719      	lsls	r1, r3, #28
   d5fda:	d507      	bpl.n	d5fec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x100>
        json.name("t", 1).value((unsigned)attr.time);
   d5fdc:	491d      	ldr	r1, [pc, #116]	; (d6054 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   d5fde:	2201      	movs	r2, #1
   d5fe0:	a801      	add	r0, sp, #4
   d5fe2:	f001 f871 	bl	d70c8 <_ZN5spark10JSONWriter4nameEPKcj>
   d5fe6:	6961      	ldr	r1, [r4, #20]
   d5fe8:	f001 f808 	bl	d6ffc <_ZN5spark10JSONWriter5valueEj>
    }
    // Code (additional attribute)
    if (attr.has_code) {
   d5fec:	7923      	ldrb	r3, [r4, #4]
   d5fee:	06da      	lsls	r2, r3, #27
   d5ff0:	d508      	bpl.n	d6004 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x118>
        json.name("code", 4).value((int)attr.code);
   d5ff2:	2204      	movs	r2, #4
   d5ff4:	4918      	ldr	r1, [pc, #96]	; (d6058 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   d5ff6:	eb0d 0002 	add.w	r0, sp, r2
   d5ffa:	f001 f865 	bl	d70c8 <_ZN5spark10JSONWriter4nameEPKcj>
   d5ffe:	69a1      	ldr	r1, [r4, #24]
   d6000:	f000 ffea 	bl	d6fd8 <_ZN5spark10JSONWriter5valueEi>
    }
    // Details (additional attribute)
    if (attr.has_details) {
   d6004:	7923      	ldrb	r3, [r4, #4]
   d6006:	069b      	lsls	r3, r3, #26
   d6008:	d507      	bpl.n	d601a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12e>
        json.name("detail", 6).value(attr.details);
   d600a:	4914      	ldr	r1, [pc, #80]	; (d605c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   d600c:	2206      	movs	r2, #6
   d600e:	a801      	add	r0, sp, #4
   d6010:	f001 f85a 	bl	d70c8 <_ZN5spark10JSONWriter4nameEPKcj>
   d6014:	69e1      	ldr	r1, [r4, #28]
   d6016:	f7ff f8c2 	bl	d519e <_ZN5spark10JSONWriter5valueEPKc>
    }
    json.endObject();
   d601a:	a801      	add	r0, sp, #4
   d601c:	f000 ffb9 	bl	d6f92 <_ZN5spark10JSONWriter9endObjectEv>
   d6020:	6a30      	ldr	r0, [r6, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   d6022:	490f      	ldr	r1, [pc, #60]	; (d6060 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   d6024:	6803      	ldr	r3, [r0, #0]
   d6026:	2202      	movs	r2, #2
   d6028:	68db      	ldr	r3, [r3, #12]
   d602a:	4798      	blx	r3
}
   d602c:	b005      	add	sp, #20
   d602e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d6032:	bf00      	nop
   d6034:	2003e73c 	.word	0x2003e73c
   d6038:	000d7bd4 	.word	0x000d7bd4
   d603c:	000d7c06 	.word	0x000d7c06
   d6040:	000d7c19 	.word	0x000d7c19
   d6044:	000d7cd5 	.word	0x000d7cd5
   d6048:	000d7e8f 	.word	0x000d7e8f
   d604c:	000d7ca4 	.word	0x000d7ca4
   d6050:	000d7ca7 	.word	0x000d7ca7
   d6054:	000d7c2e 	.word	0x000d7c2e
   d6058:	000d7caa 	.word	0x000d7caa
   d605c:	000d7caf 	.word	0x000d7caf
   d6060:	000d7ca1 	.word	0x000d7ca1

000d6064 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d6064:	4b02      	ldr	r3, [pc, #8]	; (d6070 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d6066:	681a      	ldr	r2, [r3, #0]
   d6068:	4b02      	ldr	r3, [pc, #8]	; (d6074 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d606a:	601a      	str	r2, [r3, #0]
   d606c:	4770      	bx	lr
   d606e:	bf00      	nop
   d6070:	2003e414 	.word	0x2003e414
   d6074:	2003e50c 	.word	0x2003e50c

000d6078 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d6078:	2100      	movs	r1, #0
   d607a:	f7fe bdad 	b.w	d4bd8 <system_delay_ms>

000d607e <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d607e:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d6080:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d6082:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d6084:	b113      	cbz	r3, d608c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6086:	2203      	movs	r2, #3
   d6088:	4601      	mov	r1, r0
   d608a:	4798      	blx	r3
    }
   d608c:	4620      	mov	r0, r4
   d608e:	bd10      	pop	{r4, pc}

000d6090 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d6090:	b510      	push	{r4, lr}
   d6092:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6094:	f7ff fff3 	bl	d607e <_ZNSt14_Function_baseD1Ev>
   d6098:	4620      	mov	r0, r4
   d609a:	bd10      	pop	{r4, pc}

000d609c <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d609c:	b513      	push	{r0, r1, r4, lr}
   d609e:	460b      	mov	r3, r1
   d60a0:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d60a2:	c803      	ldmia	r0, {r0, r1}
   d60a4:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d60a8:	e893 0003 	ldmia.w	r3, {r0, r1}
   d60ac:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d60b0:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d60b4:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d60b8:	b002      	add	sp, #8
   d60ba:	bd10      	pop	{r4, pc}

000d60bc <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d60bc:	4803      	ldr	r0, [pc, #12]	; (d60cc <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d60be:	4a04      	ldr	r2, [pc, #16]	; (d60d0 <_GLOBAL__sub_I_RGB+0x14>)
   d60c0:	4904      	ldr	r1, [pc, #16]	; (d60d4 <_GLOBAL__sub_I_RGB+0x18>)
   d60c2:	2300      	movs	r3, #0
   d60c4:	6083      	str	r3, [r0, #8]
   d60c6:	f001 b870 	b.w	d71aa <__aeabi_atexit>
   d60ca:	bf00      	nop
   d60cc:	2003e510 	.word	0x2003e510
   d60d0:	2003e480 	.word	0x2003e480
   d60d4:	000d6091 	.word	0x000d6091

000d60d8 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d60d8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d60da:	4b0c      	ldr	r3, [pc, #48]	; (d610c <serialEventRun+0x34>)
   d60dc:	b133      	cbz	r3, d60ec <serialEventRun+0x14>
   d60de:	f000 fc23 	bl	d6928 <_Z16_fetch_usbserialv>
   d60e2:	6803      	ldr	r3, [r0, #0]
   d60e4:	691b      	ldr	r3, [r3, #16]
   d60e6:	4798      	blx	r3
   d60e8:	2800      	cmp	r0, #0
   d60ea:	dc09      	bgt.n	d6100 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d60ec:	4b08      	ldr	r3, [pc, #32]	; (d6110 <serialEventRun+0x38>)
   d60ee:	b163      	cbz	r3, d610a <serialEventRun+0x32>
   d60f0:	f000 fca2 	bl	d6a38 <_Z22__fetch_global_Serial1v>
   d60f4:	6803      	ldr	r3, [r0, #0]
   d60f6:	691b      	ldr	r3, [r3, #16]
   d60f8:	4798      	blx	r3
   d60fa:	2800      	cmp	r0, #0
   d60fc:	dc03      	bgt.n	d6106 <serialEventRun+0x2e>
   d60fe:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d6100:	f3af 8000 	nop.w
   d6104:	e7f2      	b.n	d60ec <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d6106:	f3af 8000 	nop.w
   d610a:	bd08      	pop	{r3, pc}
	...

000d6114 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d6114:	b508      	push	{r3, lr}
	serialEventRun();
   d6116:	f7ff ffdf 	bl	d60d8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d611a:	f7fe fc65 	bl	d49e8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d611e:	4b01      	ldr	r3, [pc, #4]	; (d6124 <_post_loop+0x10>)
   d6120:	6018      	str	r0, [r3, #0]
   d6122:	bd08      	pop	{r3, pc}
   d6124:	2003e744 	.word	0x2003e744

000d6128 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d6128:	4802      	ldr	r0, [pc, #8]	; (d6134 <_Z33system_initialize_user_backup_ramv+0xc>)
   d612a:	4a03      	ldr	r2, [pc, #12]	; (d6138 <_Z33system_initialize_user_backup_ramv+0x10>)
   d612c:	4903      	ldr	r1, [pc, #12]	; (d613c <_Z33system_initialize_user_backup_ramv+0x14>)
   d612e:	1a12      	subs	r2, r2, r0
   d6130:	f001 b9b2 	b.w	d7498 <memcpy>
   d6134:	2003f400 	.word	0x2003f400
   d6138:	2003f404 	.word	0x2003f404
   d613c:	000d8050 	.word	0x000d8050

000d6140 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6140:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6142:	2300      	movs	r3, #0
   d6144:	9300      	str	r3, [sp, #0]
   d6146:	461a      	mov	r2, r3
   d6148:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d614c:	f7fe fd66 	bl	d4c1c <system_ctrl_set_result>
}
   d6150:	b003      	add	sp, #12
   d6152:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6158 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d6158:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d615a:	8843      	ldrh	r3, [r0, #2]
   d615c:	2b0a      	cmp	r3, #10
   d615e:	d008      	beq.n	d6172 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6160:	2b50      	cmp	r3, #80	; 0x50
   d6162:	d109      	bne.n	d6178 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d6164:	4b09      	ldr	r3, [pc, #36]	; (d618c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d6166:	681b      	ldr	r3, [r3, #0]
   d6168:	b13b      	cbz	r3, d617a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d616a:	b003      	add	sp, #12
   d616c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d6170:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d6172:	f7ff ffe5 	bl	d6140 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d6176:	e006      	b.n	d6186 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6178:	2300      	movs	r3, #0
   d617a:	9300      	str	r3, [sp, #0]
   d617c:	461a      	mov	r2, r3
   d617e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6182:	f7fe fd4b 	bl	d4c1c <system_ctrl_set_result>
        break;
    }
}
   d6186:	b003      	add	sp, #12
   d6188:	f85d fb04 	ldr.w	pc, [sp], #4
   d618c:	2003e520 	.word	0x2003e520

000d6190 <module_user_init_hook>:

void module_user_init_hook()
{
   d6190:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d6192:	4c10      	ldr	r4, [pc, #64]	; (d61d4 <module_user_init_hook+0x44>)
   d6194:	4d10      	ldr	r5, [pc, #64]	; (d61d8 <module_user_init_hook+0x48>)
   d6196:	6823      	ldr	r3, [r4, #0]
   d6198:	42ab      	cmp	r3, r5
   d619a:	4b10      	ldr	r3, [pc, #64]	; (d61dc <module_user_init_hook+0x4c>)
   d619c:	bf0c      	ite	eq
   d619e:	2201      	moveq	r2, #1
   d61a0:	2200      	movne	r2, #0
   d61a2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d61a4:	d002      	beq.n	d61ac <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d61a6:	f7ff ffbf 	bl	d6128 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d61aa:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d61ac:	f7fe fc0c 	bl	d49c8 <HAL_RNG_GetRandomNumber>
   d61b0:	4604      	mov	r4, r0
    srand(seed);
   d61b2:	f001 f99f 	bl	d74f4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d61b6:	4b0a      	ldr	r3, [pc, #40]	; (d61e0 <module_user_init_hook+0x50>)
   d61b8:	b113      	cbz	r3, d61c0 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d61ba:	4620      	mov	r0, r4
   d61bc:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d61c0:	2100      	movs	r1, #0
   d61c2:	4807      	ldr	r0, [pc, #28]	; (d61e0 <module_user_init_hook+0x50>)
   d61c4:	f7fe fd94 	bl	d4cf0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d61c8:	2100      	movs	r1, #0
   d61ca:	4806      	ldr	r0, [pc, #24]	; (d61e4 <module_user_init_hook+0x54>)
}
   d61cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d61d0:	f7fe bd1a 	b.w	d4c08 <system_ctrl_set_app_request_handler>
   d61d4:	2003f400 	.word	0x2003f400
   d61d8:	9a271c1e 	.word	0x9a271c1e
   d61dc:	2003e524 	.word	0x2003e524
   d61e0:	00000000 	.word	0x00000000
   d61e4:	000d6159 	.word	0x000d6159

000d61e8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d61e8:	4770      	bx	lr

000d61ea <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d61ea:	2000      	movs	r0, #0
   d61ec:	4770      	bx	lr

000d61ee <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d61ee:	b510      	push	{r4, lr}
   d61f0:	2110      	movs	r1, #16
   d61f2:	4604      	mov	r4, r0
   d61f4:	f000 ffe6 	bl	d71c4 <_ZdlPvj>
   d61f8:	4620      	mov	r0, r4
   d61fa:	bd10      	pop	{r4, pc}

000d61fc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d61fc:	b508      	push	{r3, lr}
      { delete this; }
   d61fe:	b108      	cbz	r0, d6204 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d6200:	f7ff fff5 	bl	d61ee <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d6204:	bd08      	pop	{r3, pc}

000d6206 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d6206:	2200      	movs	r2, #0
   d6208:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d620a:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d620c:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d6210:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6212:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d6216:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d6218:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d621a:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d621c:	680c      	ldr	r4, [r1, #0]
   d621e:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d6220:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d6222:	bd10      	pop	{r4, pc}

000d6224 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d6224:	b510      	push	{r4, lr}
   d6226:	4604      	mov	r4, r0
    free((void*)msg_);
   d6228:	6800      	ldr	r0, [r0, #0]
   d622a:	f7fe fd79 	bl	d4d20 <free>
}
   d622e:	4620      	mov	r0, r4
   d6230:	bd10      	pop	{r4, pc}

000d6232 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d6232:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d6234:	68c4      	ldr	r4, [r0, #12]
   d6236:	b1f4      	cbz	r4, d6276 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d6238:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d623a:	2b02      	cmp	r3, #2
   d623c:	d103      	bne.n	d6246 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d623e:	f104 000c 	add.w	r0, r4, #12
   d6242:	f7ff ffef 	bl	d6224 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d6246:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d6248:	b135      	cbz	r5, d6258 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d624a:	4628      	mov	r0, r5
   d624c:	f7ff ff17 	bl	d607e <_ZNSt14_Function_baseD1Ev>
   d6250:	2110      	movs	r1, #16
   d6252:	4628      	mov	r0, r5
   d6254:	f000 ffb6 	bl	d71c4 <_ZdlPvj>
   d6258:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d625a:	b135      	cbz	r5, d626a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d625c:	4628      	mov	r0, r5
   d625e:	f7ff ff0e 	bl	d607e <_ZNSt14_Function_baseD1Ev>
   d6262:	2110      	movs	r1, #16
   d6264:	4628      	mov	r0, r5
   d6266:	f000 ffad 	bl	d71c4 <_ZdlPvj>
   d626a:	4620      	mov	r0, r4
   d626c:	2114      	movs	r1, #20
   d626e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d6272:	f000 bfa7 	b.w	d71c4 <_ZdlPvj>
   d6276:	bd38      	pop	{r3, r4, r5, pc}

000d6278 <_ZN10CloudClass13publishVitalsEm>:
    }

    return p.future();
}

int CloudClass::publishVitals(system_tick_t period_s_) {
   d6278:	4608      	mov	r0, r1
    return spark_publish_vitals(period_s_, nullptr);
   d627a:	2100      	movs	r1, #0
   d627c:	f7fe bd40 	b.w	d4d00 <spark_publish_vitals>

000d6280 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d6280:	b513      	push	{r0, r1, r4, lr}
   d6282:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6284:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d6288:	2300      	movs	r3, #0
   d628a:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d628c:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d628e:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d6290:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6292:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d6294:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d6296:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6298:	f7fe fe5a 	bl	d4f50 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d629c:	4620      	mov	r0, r4
   d629e:	b002      	add	sp, #8
   d62a0:	bd10      	pop	{r4, pc}

000d62a2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d62a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d62a4:	460c      	mov	r4, r1
   d62a6:	ad02      	add	r5, sp, #8
   d62a8:	f854 3b04 	ldr.w	r3, [r4], #4
   d62ac:	f845 3d08 	str.w	r3, [r5, #-8]!
   d62b0:	4606      	mov	r6, r0
   d62b2:	460f      	mov	r7, r1
   d62b4:	a801      	add	r0, sp, #4
   d62b6:	4621      	mov	r1, r4
   d62b8:	f7fe fe43 	bl	d4f42 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d62bc:	4629      	mov	r1, r5
   d62be:	4630      	mov	r0, r6
   d62c0:	f7ff ffde 	bl	d6280 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d62c4:	a801      	add	r0, sp, #4
   d62c6:	f7fe fe43 	bl	d4f50 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d62ca:	4620      	mov	r0, r4
   d62cc:	f7fe fe40 	bl	d4f50 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d62d0:	4638      	mov	r0, r7
   d62d2:	2108      	movs	r1, #8
   d62d4:	f000 ff76 	bl	d71c4 <_ZdlPvj>
        return p;
    }
   d62d8:	4630      	mov	r0, r6
   d62da:	b003      	add	sp, #12
   d62dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d62e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d62e0:	b538      	push	{r3, r4, r5, lr}
   d62e2:	2300      	movs	r3, #0
   d62e4:	4604      	mov	r4, r0
   d62e6:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d62e8:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d62ea:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d62ec:	f7fd fed3 	bl	d4096 <_Znwj>
   d62f0:	b128      	cbz	r0, d62fe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d62f2:	2301      	movs	r3, #1
   d62f4:	6043      	str	r3, [r0, #4]
   d62f6:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d62f8:	4b02      	ldr	r3, [pc, #8]	; (d6304 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d62fa:	6003      	str	r3, [r0, #0]
   d62fc:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d62fe:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d6300:	4620      	mov	r0, r4
   d6302:	bd38      	pop	{r3, r4, r5, pc}
   d6304:	000d7d58 	.word	0x000d7d58

000d6308 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6308:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d630a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d630c:	b90a      	cbnz	r2, d6312 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d630e:	f000 ff6a 	bl	d71e6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6312:	68c3      	ldr	r3, [r0, #12]
    }
   d6314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6318:	4718      	bx	r3

000d631a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d631a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d631c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d631e:	f100 0110 	add.w	r1, r0, #16
   d6322:	f7ff fff1 	bl	d6308 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d6326:	bd08      	pop	{r3, pc}

000d6328 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6328:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d632a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d632c:	b90a      	cbnz	r2, d6332 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d632e:	f000 ff5a 	bl	d71e6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6332:	68c3      	ldr	r3, [r0, #12]
    }
   d6334:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6338:	4718      	bx	r3

000d633a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d633a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d633c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d633e:	f100 0110 	add.w	r1, r0, #16
   d6342:	f7ff fff1 	bl	d6328 <_ZNKSt8functionIFvRKbEEclES1_>
   d6346:	bd08      	pop	{r3, pc}

000d6348 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6348:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d634a:	2300      	movs	r3, #0
   d634c:	6083      	str	r3, [r0, #8]
   d634e:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6350:	4604      	mov	r4, r0
   d6352:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d6354:	b12b      	cbz	r3, d6362 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6356:	2202      	movs	r2, #2
   d6358:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d635a:	68eb      	ldr	r3, [r5, #12]
   d635c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d635e:	68ab      	ldr	r3, [r5, #8]
   d6360:	60a3      	str	r3, [r4, #8]
	}
    }
   d6362:	4620      	mov	r0, r4
   d6364:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6368 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d6368:	b5f0      	push	{r4, r5, r6, r7, lr}
   d636a:	b089      	sub	sp, #36	; 0x24
   d636c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d636e:	4668      	mov	r0, sp
   d6370:	f7ff ff49 	bl	d6206 <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d6374:	2300      	movs	r3, #0
   d6376:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d637a:	f04f 0202 	mov.w	r2, #2
   d637e:	e8d4 3f4f 	ldrexb	r3, [r4]
   d6382:	2b00      	cmp	r3, #0
   d6384:	d103      	bne.n	d638e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d6386:	e8c4 2f41 	strexb	r1, r2, [r4]
   d638a:	2900      	cmp	r1, #0
   d638c:	d1f7      	bne.n	d637e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d638e:	d002      	beq.n	d6396 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d6390:	f88d 3008 	strb.w	r3, [sp, #8]
   d6394:	e063      	b.n	d645e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d6396:	f114 050c 	adds.w	r5, r4, #12
   d639a:	d003      	beq.n	d63a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d639c:	4669      	mov	r1, sp
   d639e:	4628      	mov	r0, r5
   d63a0:	f7ff ff31 	bl	d6206 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d63a4:	f3bf 8f5f 	dmb	sy
   d63a8:	2301      	movs	r3, #1
   d63aa:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d63ac:	2000      	movs	r0, #0
   d63ae:	f104 0308 	add.w	r3, r4, #8
   d63b2:	f3bf 8f5f 	dmb	sy
   d63b6:	e853 6f00 	ldrex	r6, [r3]
   d63ba:	e843 0200 	strex	r2, r0, [r3]
   d63be:	2a00      	cmp	r2, #0
   d63c0:	d1f9      	bne.n	d63b6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d63c2:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d63c6:	2e00      	cmp	r6, #0
   d63c8:	d049      	beq.n	d645e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d63ca:	f7fe fc0d 	bl	d4be8 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d63ce:	b120      	cbz	r0, d63da <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d63d0:	4629      	mov	r1, r5
   d63d2:	4630      	mov	r0, r6
   d63d4:	f7ff ff98 	bl	d6308 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d63d8:	e03a      	b.n	d6450 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d63da:	4631      	mov	r1, r6
   d63dc:	a802      	add	r0, sp, #8
   d63de:	f7ff ffb3 	bl	d6348 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d63e2:	68e0      	ldr	r0, [r4, #12]
   d63e4:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d63e8:	b108      	cbz	r0, d63ee <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d63ea:	f001 f8cd 	bl	d7588 <strdup>
   d63ee:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d63f0:	2010      	movs	r0, #16
   d63f2:	f8ad 501c 	strh.w	r5, [sp, #28]
   d63f6:	f7fd fe4e 	bl	d4096 <_Znwj>
   d63fa:	4605      	mov	r5, r0
   d63fc:	b1e8      	cbz	r0, d643a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d63fe:	2700      	movs	r7, #0
   d6400:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6402:	2018      	movs	r0, #24
   d6404:	f7fd fe47 	bl	d4096 <_Znwj>
   d6408:	4604      	mov	r4, r0
   d640a:	b188      	cbz	r0, d6430 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d640c:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d640e:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d6410:	a802      	add	r0, sp, #8
   d6412:	f7ff fe43 	bl	d609c <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6416:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d6418:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d641a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d641c:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d641e:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6420:	a906      	add	r1, sp, #24
   d6422:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6424:	60e3      	str	r3, [r4, #12]
   d6426:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d642a:	9205      	str	r2, [sp, #20]
   d642c:	f7ff feeb 	bl	d6206 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d6430:	4b0d      	ldr	r3, [pc, #52]	; (d6468 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d6432:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6434:	4b0d      	ldr	r3, [pc, #52]	; (d646c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6436:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d6438:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d643a:	a806      	add	r0, sp, #24
   d643c:	f7ff fef2 	bl	d6224 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6440:	a802      	add	r0, sp, #8
   d6442:	f7ff fe1c 	bl	d607e <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6446:	2200      	movs	r2, #0
   d6448:	4629      	mov	r1, r5
   d644a:	4809      	ldr	r0, [pc, #36]	; (d6470 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d644c:	f7fe fbd4 	bl	d4bf8 <application_thread_invoke>
   d6450:	4630      	mov	r0, r6
   d6452:	f7ff fe14 	bl	d607e <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d6456:	2110      	movs	r1, #16
   d6458:	4630      	mov	r0, r6
   d645a:	f000 feb3 	bl	d71c4 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d645e:	4668      	mov	r0, sp
   d6460:	f7ff fee0 	bl	d6224 <_ZN8particle5ErrorD1Ev>
    }
   d6464:	b009      	add	sp, #36	; 0x24
   d6466:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6468:	000d631b 	.word	0x000d631b
   d646c:	000d6591 	.word	0x000d6591
   d6470:	000d6ab9 	.word	0x000d6ab9

000d6474 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d6474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6478:	b08b      	sub	sp, #44	; 0x2c
   d647a:	4606      	mov	r6, r0
   d647c:	460f      	mov	r7, r1
   d647e:	4690      	mov	r8, r2
   d6480:	4699      	mov	r9, r3
   d6482:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6486:	f7fe fc23 	bl	d4cd0 <spark_cloud_flag_connected>
   d648a:	ad07      	add	r5, sp, #28
    if (!connected()) {
   d648c:	4683      	mov	fp, r0
   d648e:	bb30      	cbnz	r0, d64de <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d6490:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d6494:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d6496:	a905      	add	r1, sp, #20
   d6498:	4628      	mov	r0, r5
   d649a:	f8ad 3018 	strh.w	r3, [sp, #24]
   d649e:	f7ff feb2 	bl	d6206 <_ZN8particle5ErrorC1EOS0_>
   d64a2:	2014      	movs	r0, #20
   d64a4:	f7fd fdf7 	bl	d4096 <_Znwj>
   d64a8:	4604      	mov	r4, r0
   d64aa:	b158      	cbz	r0, d64c4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d64ac:	2302      	movs	r3, #2
   d64ae:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d64b0:	2301      	movs	r3, #1
   d64b2:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d64b4:	f8c0 b004 	str.w	fp, [r0, #4]
   d64b8:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d64bc:	4629      	mov	r1, r5
   d64be:	300c      	adds	r0, #12
   d64c0:	f7ff fea1 	bl	d6206 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d64c4:	4630      	mov	r0, r6
   d64c6:	4621      	mov	r1, r4
   d64c8:	f840 4b04 	str.w	r4, [r0], #4
   d64cc:	f7ff ff08 	bl	d62e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d64d0:	4628      	mov	r0, r5
   d64d2:	f7ff fea7 	bl	d6224 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d64d6:	a805      	add	r0, sp, #20
   d64d8:	f7ff fea4 	bl	d6224 <_ZN8particle5ErrorD1Ev>
   d64dc:	e052      	b.n	d6584 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d64de:	2400      	movs	r4, #0
   d64e0:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d64e2:	2014      	movs	r0, #20
   d64e4:	606c      	str	r4, [r5, #4]
   d64e6:	60ac      	str	r4, [r5, #8]
   d64e8:	9307      	str	r3, [sp, #28]
   d64ea:	f7fd fdd4 	bl	d4096 <_Znwj>
   d64ee:	4601      	mov	r1, r0
   d64f0:	b118      	cbz	r0, d64fa <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d64f2:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d64f4:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d64f6:	6044      	str	r4, [r0, #4]
   d64f8:	6084      	str	r4, [r0, #8]
   d64fa:	a804      	add	r0, sp, #16
   d64fc:	9103      	str	r1, [sp, #12]
   d64fe:	f7ff feef 	bl	d62e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d6502:	4b22      	ldr	r3, [pc, #136]	; (d658c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d6504:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d6506:	2008      	movs	r0, #8
   d6508:	f7fd fdc5 	bl	d4096 <_Znwj>
   d650c:	4604      	mov	r4, r0
   d650e:	b128      	cbz	r0, d651c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6510:	9b03      	ldr	r3, [sp, #12]
   d6512:	f840 3b04 	str.w	r3, [r0], #4
   d6516:	a904      	add	r1, sp, #16
   d6518:	f7fe fd13 	bl	d4f42 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d651c:	9500      	str	r5, [sp, #0]
   d651e:	fa5f f38a 	uxtb.w	r3, sl
   d6522:	464a      	mov	r2, r9
   d6524:	4641      	mov	r1, r8
   d6526:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d6528:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d652a:	f7fe fbd9 	bl	d4ce0 <spark_send_event>
   d652e:	b920      	cbnz	r0, d653a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d6530:	9b03      	ldr	r3, [sp, #12]
   d6532:	785b      	ldrb	r3, [r3, #1]
   d6534:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d6538:	b183      	cbz	r3, d655c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d653a:	9b03      	ldr	r3, [sp, #12]
   d653c:	9305      	str	r3, [sp, #20]
   d653e:	a904      	add	r1, sp, #16
   d6540:	a806      	add	r0, sp, #24
   d6542:	f7fe fcfe 	bl	d4f42 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d6546:	a905      	add	r1, sp, #20
   d6548:	4630      	mov	r0, r6
   d654a:	f7ff fe99 	bl	d6280 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d654e:	a806      	add	r0, sp, #24
   d6550:	f7fe fcfe 	bl	d4f50 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6554:	a804      	add	r0, sp, #16
   d6556:	f7fe fcfb 	bl	d4f50 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d655a:	e013      	b.n	d6584 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d655c:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d6560:	a905      	add	r1, sp, #20
   d6562:	a803      	add	r0, sp, #12
   d6564:	9205      	str	r2, [sp, #20]
   d6566:	f8ad 3018 	strh.w	r3, [sp, #24]
   d656a:	f7ff fefd 	bl	d6368 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d656e:	a805      	add	r0, sp, #20
   d6570:	f7ff fe58 	bl	d6224 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d6574:	a805      	add	r0, sp, #20
   d6576:	9909      	ldr	r1, [sp, #36]	; 0x24
   d6578:	f7ff fe93 	bl	d62a2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d657c:	a806      	add	r0, sp, #24
   d657e:	f7fe fce7 	bl	d4f50 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6582:	e7da      	b.n	d653a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   d6584:	4630      	mov	r0, r6
   d6586:	b00b      	add	sp, #44	; 0x2c
   d6588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d658c:	000d6701 	.word	0x000d6701

000d6590 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d6590:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6592:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6594:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d6596:	d006      	beq.n	d65a6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d6598:	2a03      	cmp	r2, #3
   d659a:	d017      	beq.n	d65cc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d659c:	2a01      	cmp	r2, #1
   d659e:	d122      	bne.n	d65e6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d65a0:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d65a2:	6003      	str	r3, [r0, #0]
	      break;
   d65a4:	e01f      	b.n	d65e6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d65a6:	2018      	movs	r0, #24
   d65a8:	680e      	ldr	r6, [r1, #0]
   d65aa:	f7fd fd74 	bl	d4096 <_Znwj>
   d65ae:	4605      	mov	r5, r0
   d65b0:	b150      	cbz	r0, d65c8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d65b2:	4631      	mov	r1, r6
   d65b4:	f7ff fec8 	bl	d6348 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d65b8:	6930      	ldr	r0, [r6, #16]
   d65ba:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d65be:	b108      	cbz	r0, d65c4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d65c0:	f000 ffe2 	bl	d7588 <strdup>
   d65c4:	6128      	str	r0, [r5, #16]
   d65c6:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d65c8:	6025      	str	r5, [r4, #0]
   d65ca:	e00c      	b.n	d65e6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d65cc:	6804      	ldr	r4, [r0, #0]
   d65ce:	b154      	cbz	r4, d65e6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d65d0:	f104 0010 	add.w	r0, r4, #16
   d65d4:	f7ff fe26 	bl	d6224 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d65d8:	4620      	mov	r0, r4
   d65da:	f7ff fd50 	bl	d607e <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d65de:	2118      	movs	r1, #24
   d65e0:	4620      	mov	r0, r4
   d65e2:	f000 fdef 	bl	d71c4 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d65e6:	2000      	movs	r0, #0
   d65e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d65ea <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d65ea:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d65ec:	2300      	movs	r3, #0
   d65ee:	6083      	str	r3, [r0, #8]
   d65f0:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d65f2:	4604      	mov	r4, r0
   d65f4:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d65f6:	b12b      	cbz	r3, d6604 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d65f8:	2202      	movs	r2, #2
   d65fa:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d65fc:	68eb      	ldr	r3, [r5, #12]
   d65fe:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d6600:	68ab      	ldr	r3, [r5, #8]
   d6602:	60a3      	str	r3, [r4, #8]
	}
    }
   d6604:	4620      	mov	r0, r4
   d6606:	bd38      	pop	{r3, r4, r5, pc}

000d6608 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d6608:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d660a:	b570      	push	{r4, r5, r6, lr}
   d660c:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d660e:	d006      	beq.n	d661e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d6610:	2a03      	cmp	r2, #3
   d6612:	d011      	beq.n	d6638 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d6614:	2a01      	cmp	r2, #1
   d6616:	d118      	bne.n	d664a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d6618:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d661a:	6003      	str	r3, [r0, #0]
	      break;
   d661c:	e015      	b.n	d664a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d661e:	2014      	movs	r0, #20
   d6620:	680e      	ldr	r6, [r1, #0]
   d6622:	f7fd fd38 	bl	d4096 <_Znwj>
   d6626:	4605      	mov	r5, r0
   d6628:	b120      	cbz	r0, d6634 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d662a:	4631      	mov	r1, r6
   d662c:	f7ff ffdd 	bl	d65ea <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d6630:	7c33      	ldrb	r3, [r6, #16]
   d6632:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6634:	6025      	str	r5, [r4, #0]
   d6636:	e008      	b.n	d664a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6638:	6804      	ldr	r4, [r0, #0]
   d663a:	b134      	cbz	r4, d664a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d663c:	4620      	mov	r0, r4
   d663e:	f7ff fd1e 	bl	d607e <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6642:	2114      	movs	r1, #20
   d6644:	4620      	mov	r0, r4
   d6646:	f000 fdbd 	bl	d71c4 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d664a:	2000      	movs	r0, #0
   d664c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6650 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d6650:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d6652:	2300      	movs	r3, #0
   d6654:	b087      	sub	sp, #28
   d6656:	460c      	mov	r4, r1
   d6658:	f3bf 8f5f 	dmb	sy
   d665c:	e850 6f00 	ldrex	r6, [r0]
   d6660:	e840 3200 	strex	r2, r3, [r0]
   d6664:	2a00      	cmp	r2, #0
   d6666:	d1f9      	bne.n	d665c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d6668:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d666c:	2e00      	cmp	r6, #0
   d666e:	d03f      	beq.n	d66f0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d6670:	4618      	mov	r0, r3
   d6672:	f7fe fab9 	bl	d4be8 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d6676:	4607      	mov	r7, r0
   d6678:	b120      	cbz	r0, d6684 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d667a:	4621      	mov	r1, r4
   d667c:	4630      	mov	r0, r6
   d667e:	f7ff fe53 	bl	d6328 <_ZNKSt8functionIFvRKbEEclES1_>
   d6682:	e02e      	b.n	d66e2 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d6684:	4631      	mov	r1, r6
   d6686:	a801      	add	r0, sp, #4
   d6688:	f7ff ffaf 	bl	d65ea <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d668c:	7823      	ldrb	r3, [r4, #0]
   d668e:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d6692:	2010      	movs	r0, #16
   d6694:	f7fd fcff 	bl	d4096 <_Znwj>
   d6698:	4605      	mov	r5, r0
   d669a:	b1d0      	cbz	r0, d66d2 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d669c:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d669e:	2014      	movs	r0, #20
   d66a0:	f7fd fcf9 	bl	d4096 <_Znwj>
   d66a4:	4604      	mov	r4, r0
   d66a6:	b178      	cbz	r0, d66c8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d66a8:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d66aa:	4601      	mov	r1, r0
   d66ac:	a801      	add	r0, sp, #4
   d66ae:	f7ff fcf5 	bl	d609c <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d66b2:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d66b4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d66b6:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d66b8:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d66ba:	9203      	str	r2, [sp, #12]
   d66bc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d66be:	60e3      	str	r3, [r4, #12]
   d66c0:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d66c4:	9204      	str	r2, [sp, #16]
   d66c6:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d66c8:	4b0a      	ldr	r3, [pc, #40]	; (d66f4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d66ca:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d66cc:	4b0a      	ldr	r3, [pc, #40]	; (d66f8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d66ce:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d66d0:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d66d2:	a801      	add	r0, sp, #4
   d66d4:	f7ff fcd3 	bl	d607e <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d66d8:	2200      	movs	r2, #0
   d66da:	4629      	mov	r1, r5
   d66dc:	4807      	ldr	r0, [pc, #28]	; (d66fc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d66de:	f7fe fa8b 	bl	d4bf8 <application_thread_invoke>
   d66e2:	4630      	mov	r0, r6
   d66e4:	f7ff fccb 	bl	d607e <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d66e8:	2110      	movs	r1, #16
   d66ea:	4630      	mov	r0, r6
   d66ec:	f000 fd6a 	bl	d71c4 <_ZdlPvj>
        }
    }
   d66f0:	b007      	add	sp, #28
   d66f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d66f4:	000d633b 	.word	0x000d633b
   d66f8:	000d6609 	.word	0x000d6609
   d66fc:	000d6ab9 	.word	0x000d6ab9

000d6700 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d6700:	b530      	push	{r4, r5, lr}
   d6702:	b085      	sub	sp, #20
   d6704:	4604      	mov	r4, r0
   d6706:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d6708:	4668      	mov	r0, sp
   d670a:	4611      	mov	r1, r2
   d670c:	f7ff fdc9 	bl	d62a2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d6710:	b17c      	cbz	r4, d6732 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d6712:	b224      	sxth	r4, r4
   d6714:	4628      	mov	r0, r5
   d6716:	b10d      	cbz	r5, d671c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d6718:	f000 ff36 	bl	d7588 <strdup>
   d671c:	9002      	str	r0, [sp, #8]
   d671e:	a902      	add	r1, sp, #8
   d6720:	4668      	mov	r0, sp
   d6722:	f8ad 400c 	strh.w	r4, [sp, #12]
   d6726:	f7ff fe1f 	bl	d6368 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d672a:	a802      	add	r0, sp, #8
   d672c:	f7ff fd7a 	bl	d6224 <_ZN8particle5ErrorD1Ev>
   d6730:	e01d      	b.n	d676e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d6732:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d6734:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d6738:	f04f 0201 	mov.w	r2, #1
   d673c:	e8d0 3f4f 	ldrexb	r3, [r0]
   d6740:	42a3      	cmp	r3, r4
   d6742:	d103      	bne.n	d674c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d6744:	e8c0 2f41 	strexb	r1, r2, [r0]
   d6748:	2900      	cmp	r1, #0
   d674a:	d1f7      	bne.n	d673c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d674c:	d002      	beq.n	d6754 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d674e:	f88d 3008 	strb.w	r3, [sp, #8]
   d6752:	e00c      	b.n	d676e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d6754:	f110 010c 	adds.w	r1, r0, #12
   d6758:	f04f 0301 	mov.w	r3, #1
   d675c:	bf18      	it	ne
   d675e:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d6760:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d6764:	3004      	adds	r0, #4
   d6766:	f800 3c03 	strb.w	r3, [r0, #-3]
   d676a:	f7ff ff71 	bl	d6650 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d676e:	a801      	add	r0, sp, #4
   d6770:	f7fe fbee 	bl	d4f50 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d6774:	b005      	add	sp, #20
   d6776:	bd30      	pop	{r4, r5, pc}

000d6778 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d6778:	4770      	bx	lr

000d677a <_ZN9IPAddressD0Ev>:
   d677a:	b510      	push	{r4, lr}
   d677c:	2118      	movs	r1, #24
   d677e:	4604      	mov	r4, r0
   d6780:	f000 fd20 	bl	d71c4 <_ZdlPvj>
   d6784:	4620      	mov	r0, r4
   d6786:	bd10      	pop	{r4, pc}

000d6788 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6788:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d678a:	7d03      	ldrb	r3, [r0, #20]
   d678c:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d678e:	b08d      	sub	sp, #52	; 0x34
   d6790:	460e      	mov	r6, r1
   d6792:	f100 0704 	add.w	r7, r0, #4
   d6796:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d679a:	d002      	beq.n	d67a2 <_ZNK9IPAddress7printToER5Print+0x1a>
   d679c:	f100 0508 	add.w	r5, r0, #8
   d67a0:	e018      	b.n	d67d4 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d67a2:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d67a4:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d67a6:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d67aa:	232f      	movs	r3, #47	; 0x2f
   d67ac:	462a      	mov	r2, r5
   d67ae:	200a      	movs	r0, #10
   d67b0:	f7fe f95a 	bl	d4a68 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d67b4:	4628      	mov	r0, r5
   d67b6:	f000 ff02 	bl	d75be <strlen>
   d67ba:	6833      	ldr	r3, [r6, #0]
   d67bc:	4602      	mov	r2, r0
   d67be:	68db      	ldr	r3, [r3, #12]
   d67c0:	4629      	mov	r1, r5
   d67c2:	4630      	mov	r0, r6
   d67c4:	4798      	blx	r3
   d67c6:	e00f      	b.n	d67e8 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d67c8:	b124      	cbz	r4, d67d4 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d67ca:	212e      	movs	r1, #46	; 0x2e
   d67cc:	4630      	mov	r0, r6
   d67ce:	f7fe fc1b 	bl	d5008 <_ZN5Print5printEc>
   d67d2:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d67d4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d67d8:	220a      	movs	r2, #10
   d67da:	4630      	mov	r0, r6
   d67dc:	f7fe fc2d 	bl	d503a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d67e0:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d67e2:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d67e4:	d1f0      	bne.n	d67c8 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d67e6:	4620      	mov	r0, r4
    }
    return n;
}
   d67e8:	b00d      	add	sp, #52	; 0x34
   d67ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d67ec <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d67ec:	b510      	push	{r4, lr}
   d67ee:	4b05      	ldr	r3, [pc, #20]	; (d6804 <_ZN9IPAddressC1Ev+0x18>)
   d67f0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d67f2:	2211      	movs	r2, #17
   d67f4:	f840 3b04 	str.w	r3, [r0], #4
   d67f8:	2100      	movs	r1, #0
   d67fa:	f000 fe73 	bl	d74e4 <memset>
{
    clear();
}
   d67fe:	4620      	mov	r0, r4
   d6800:	bd10      	pop	{r4, pc}
   d6802:	bf00      	nop
   d6804:	000d7d74 	.word	0x000d7d74

000d6808 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d6808:	4603      	mov	r3, r0
   d680a:	4a07      	ldr	r2, [pc, #28]	; (d6828 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d680c:	b510      	push	{r4, lr}
   d680e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d6812:	f101 0210 	add.w	r2, r1, #16
   d6816:	f851 4b04 	ldr.w	r4, [r1], #4
   d681a:	f843 4b04 	str.w	r4, [r3], #4
   d681e:	4291      	cmp	r1, r2
   d6820:	d1f9      	bne.n	d6816 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d6822:	780a      	ldrb	r2, [r1, #0]
   d6824:	701a      	strb	r2, [r3, #0]
}
   d6826:	bd10      	pop	{r4, pc}
   d6828:	000d7d74 	.word	0x000d7d74

000d682c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d682c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d682e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d6832:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d6836:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d683a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d683e:	2304      	movs	r3, #4
   d6840:	6041      	str	r1, [r0, #4]
   d6842:	7503      	strb	r3, [r0, #20]
   d6844:	bd10      	pop	{r4, pc}

000d6846 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d6846:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d6848:	780d      	ldrb	r5, [r1, #0]
   d684a:	788b      	ldrb	r3, [r1, #2]
   d684c:	784a      	ldrb	r2, [r1, #1]
   d684e:	78c9      	ldrb	r1, [r1, #3]
   d6850:	9100      	str	r1, [sp, #0]
   d6852:	4629      	mov	r1, r5
   d6854:	f7ff ffea 	bl	d682c <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d6858:	b003      	add	sp, #12
   d685a:	bd30      	pop	{r4, r5, pc}

000d685c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d685c:	7441      	strb	r1, [r0, #17]
   d685e:	4770      	bx	lr

000d6860 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d6860:	4770      	bx	lr

000d6862 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d6862:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d6864:	2100      	movs	r1, #0
   d6866:	7c00      	ldrb	r0, [r0, #16]
   d6868:	f7fe f976 	bl	d4b58 <HAL_USB_USART_Receive_Data>
}
   d686c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6870:	bf28      	it	cs
   d6872:	f04f 30ff 	movcs.w	r0, #4294967295
   d6876:	bd08      	pop	{r3, pc}

000d6878 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d6878:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d687a:	2101      	movs	r1, #1
   d687c:	7c00      	ldrb	r0, [r0, #16]
   d687e:	f7fe f96b 	bl	d4b58 <HAL_USB_USART_Receive_Data>
}
   d6882:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6886:	bf28      	it	cs
   d6888:	f04f 30ff 	movcs.w	r0, #4294967295
   d688c:	bd08      	pop	{r3, pc}

000d688e <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d688e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d6890:	7c00      	ldrb	r0, [r0, #16]
   d6892:	f7fe f959 	bl	d4b48 <HAL_USB_USART_Available_Data_For_Write>
}
   d6896:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d689a:	bd08      	pop	{r3, pc}

000d689c <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d689c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d689e:	7c00      	ldrb	r0, [r0, #16]
   d68a0:	f7fe f94a 	bl	d4b38 <HAL_USB_USART_Available_Data>
}
   d68a4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d68a8:	bd08      	pop	{r3, pc}

000d68aa <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d68aa:	7c00      	ldrb	r0, [r0, #16]
   d68ac:	f7fe b964 	b.w	d4b78 <HAL_USB_USART_Flush_Data>

000d68b0 <_ZN9USBSerialD0Ev>:
   d68b0:	b510      	push	{r4, lr}
   d68b2:	2114      	movs	r1, #20
   d68b4:	4604      	mov	r4, r0
   d68b6:	f000 fc85 	bl	d71c4 <_ZdlPvj>
   d68ba:	4620      	mov	r0, r4
   d68bc:	bd10      	pop	{r4, pc}

000d68be <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d68be:	b538      	push	{r3, r4, r5, lr}
   d68c0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d68c2:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d68c4:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d68c6:	f7fe f93f 	bl	d4b48 <HAL_USB_USART_Available_Data_For_Write>
   d68ca:	2800      	cmp	r0, #0
   d68cc:	dc01      	bgt.n	d68d2 <_ZN9USBSerial5writeEh+0x14>
   d68ce:	7c60      	ldrb	r0, [r4, #17]
   d68d0:	b128      	cbz	r0, d68de <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d68d2:	4629      	mov	r1, r5
   d68d4:	7c20      	ldrb	r0, [r4, #16]
   d68d6:	f7fe f947 	bl	d4b68 <HAL_USB_USART_Send_Data>
   d68da:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d68de:	bd38      	pop	{r3, r4, r5, pc}

000d68e0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d68e0:	b510      	push	{r4, lr}
   d68e2:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d68e4:	2300      	movs	r3, #0
   d68e6:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d68e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d68ec:	60a3      	str	r3, [r4, #8]
   d68ee:	4b05      	ldr	r3, [pc, #20]	; (d6904 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d68f0:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d68f2:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d68f4:	4608      	mov	r0, r1
{
  _serial = serial;
   d68f6:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d68f8:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d68fa:	4611      	mov	r1, r2
   d68fc:	f7fe f904 	bl	d4b08 <HAL_USB_USART_Init>
}
   d6900:	4620      	mov	r0, r4
   d6902:	bd10      	pop	{r4, pc}
   d6904:	000d7d88 	.word	0x000d7d88

000d6908 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d6908:	2200      	movs	r2, #0
   d690a:	7c00      	ldrb	r0, [r0, #16]
   d690c:	f7fe b904 	b.w	d4b18 <HAL_USB_USART_Begin>

000d6910 <_ZN9USBSerial3endEv>:
}

void USBSerial::end()
{
    HAL_USB_USART_End(_serial);
   d6910:	7c00      	ldrb	r0, [r0, #16]
   d6912:	f7fe b909 	b.w	d4b28 <HAL_USB_USART_End>

000d6916 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6916:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d6918:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d691a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d691c:	2100      	movs	r1, #0
   d691e:	f000 fde1 	bl	d74e4 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6922:	4620      	mov	r0, r4
   d6924:	bd10      	pop	{r4, pc}
	...

000d6928 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d6928:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d692a:	4d0e      	ldr	r5, [pc, #56]	; (d6964 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d692c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d692e:	a801      	add	r0, sp, #4
   d6930:	f7ff fff1 	bl	d6916 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6934:	6829      	ldr	r1, [r5, #0]
   d6936:	f011 0401 	ands.w	r4, r1, #1
   d693a:	d110      	bne.n	d695e <_Z16_fetch_usbserialv+0x36>
   d693c:	4628      	mov	r0, r5
   d693e:	f7fd fbbb 	bl	d40b8 <__cxa_guard_acquire>
   d6942:	b160      	cbz	r0, d695e <_Z16_fetch_usbserialv+0x36>
   d6944:	aa01      	add	r2, sp, #4
   d6946:	4621      	mov	r1, r4
   d6948:	4807      	ldr	r0, [pc, #28]	; (d6968 <_Z16_fetch_usbserialv+0x40>)
   d694a:	f7ff ffc9 	bl	d68e0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d694e:	4628      	mov	r0, r5
   d6950:	f7fd fbb7 	bl	d40c2 <__cxa_guard_release>
   d6954:	4a05      	ldr	r2, [pc, #20]	; (d696c <_Z16_fetch_usbserialv+0x44>)
   d6956:	4906      	ldr	r1, [pc, #24]	; (d6970 <_Z16_fetch_usbserialv+0x48>)
   d6958:	4803      	ldr	r0, [pc, #12]	; (d6968 <_Z16_fetch_usbserialv+0x40>)
   d695a:	f000 fc26 	bl	d71aa <__aeabi_atexit>
	return _usbserial;
}
   d695e:	4802      	ldr	r0, [pc, #8]	; (d6968 <_Z16_fetch_usbserialv+0x40>)
   d6960:	b007      	add	sp, #28
   d6962:	bd30      	pop	{r4, r5, pc}
   d6964:	2003e528 	.word	0x2003e528
   d6968:	2003e52c 	.word	0x2003e52c
   d696c:	2003e480 	.word	0x2003e480
   d6970:	000d6861 	.word	0x000d6861

000d6974 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d6974:	4770      	bx	lr

000d6976 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6976:	7441      	strb	r1, [r0, #17]
   d6978:	4770      	bx	lr

000d697a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d697a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d697c:	7c00      	ldrb	r0, [r0, #16]
   d697e:	f7fe f8b3 	bl	d4ae8 <HAL_USART_Available_Data_For_Write>
}
   d6982:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6986:	bd08      	pop	{r3, pc}

000d6988 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d6988:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d698a:	7c00      	ldrb	r0, [r0, #16]
   d698c:	f7fe f88c 	bl	d4aa8 <HAL_USART_Available_Data>
}
   d6990:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6994:	bd08      	pop	{r3, pc}

000d6996 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d6996:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d6998:	7c00      	ldrb	r0, [r0, #16]
   d699a:	f7fe f895 	bl	d4ac8 <HAL_USART_Peek_Data>
}
   d699e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d69a2:	bf28      	it	cs
   d69a4:	f04f 30ff 	movcs.w	r0, #4294967295
   d69a8:	bd08      	pop	{r3, pc}

000d69aa <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d69aa:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d69ac:	7c00      	ldrb	r0, [r0, #16]
   d69ae:	f7fe f883 	bl	d4ab8 <HAL_USART_Read_Data>
}
   d69b2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d69b6:	bf28      	it	cs
   d69b8:	f04f 30ff 	movcs.w	r0, #4294967295
   d69bc:	bd08      	pop	{r3, pc}

000d69be <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d69be:	7c00      	ldrb	r0, [r0, #16]
   d69c0:	f7fe b88a 	b.w	d4ad8 <HAL_USART_Flush_Data>

000d69c4 <_ZN11USARTSerialD0Ev>:
   d69c4:	b510      	push	{r4, lr}
   d69c6:	2114      	movs	r1, #20
   d69c8:	4604      	mov	r4, r0
   d69ca:	f000 fbfb 	bl	d71c4 <_ZdlPvj>
   d69ce:	4620      	mov	r0, r4
   d69d0:	bd10      	pop	{r4, pc}

000d69d2 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d69d2:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d69d4:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d69d6:	4604      	mov	r4, r0
   d69d8:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d69da:	b925      	cbnz	r5, d69e6 <_ZN11USARTSerial5writeEh+0x14>
   d69dc:	7c00      	ldrb	r0, [r0, #16]
   d69de:	f7fe f883 	bl	d4ae8 <HAL_USART_Available_Data_For_Write>
   d69e2:	2800      	cmp	r0, #0
   d69e4:	dd05      	ble.n	d69f2 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d69e6:	4631      	mov	r1, r6
   d69e8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d69ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d69ee:	f7fe b853 	b.w	d4a98 <HAL_USART_Write_Data>
  }
  return 0;
}
   d69f2:	4628      	mov	r0, r5
   d69f4:	bd70      	pop	{r4, r5, r6, pc}
	...

000d69f8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d69f8:	b510      	push	{r4, lr}
   d69fa:	4604      	mov	r4, r0
   d69fc:	4608      	mov	r0, r1
   d69fe:	4611      	mov	r1, r2
   d6a00:	2200      	movs	r2, #0
   d6a02:	6062      	str	r2, [r4, #4]
   d6a04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6a08:	60a2      	str	r2, [r4, #8]
   d6a0a:	4a05      	ldr	r2, [pc, #20]	; (d6a20 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d6a0c:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d6a0e:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d6a10:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d6a12:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d6a14:	461a      	mov	r2, r3
   d6a16:	f7fe f82f 	bl	d4a78 <HAL_USART_Init>
}
   d6a1a:	4620      	mov	r0, r4
   d6a1c:	bd10      	pop	{r4, pc}
   d6a1e:	bf00      	nop
   d6a20:	000d7db8 	.word	0x000d7db8

000d6a24 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   d6a24:	2300      	movs	r3, #0
   d6a26:	7c00      	ldrb	r0, [r0, #16]
   d6a28:	f7fe b866 	b.w	d4af8 <HAL_USART_BeginConfig>

000d6a2c <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
   d6a2c:	2200      	movs	r2, #0
   d6a2e:	f7ff bff9 	b.w	d6a24 <_ZN11USARTSerial5beginEmm>

000d6a32 <_ZN11USARTSerial3endEv>:
  HAL_USART_BeginConfig(_serial, baud, config, 0);
}

void USARTSerial::end()
{
  HAL_USART_End(_serial);
   d6a32:	7c00      	ldrb	r0, [r0, #16]
   d6a34:	f7fe b828 	b.w	d4a88 <HAL_USART_End>

000d6a38 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
   d6a3a:	4c19      	ldr	r4, [pc, #100]	; (d6aa0 <_Z22__fetch_global_Serial1v+0x68>)
   d6a3c:	6825      	ldr	r5, [r4, #0]
   d6a3e:	b94d      	cbnz	r5, d6a54 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
   d6a40:	2084      	movs	r0, #132	; 0x84
   d6a42:	f7fd fb28 	bl	d4096 <_Znwj>
   d6a46:	4606      	mov	r6, r0
   d6a48:	b118      	cbz	r0, d6a52 <_Z22__fetch_global_Serial1v+0x1a>
   d6a4a:	2284      	movs	r2, #132	; 0x84
   d6a4c:	4629      	mov	r1, r5
   d6a4e:	f000 fd49 	bl	d74e4 <memset>
   d6a52:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
   d6a54:	4d13      	ldr	r5, [pc, #76]	; (d6aa4 <_Z22__fetch_global_Serial1v+0x6c>)
   d6a56:	682e      	ldr	r6, [r5, #0]
   d6a58:	b94e      	cbnz	r6, d6a6e <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
   d6a5a:	2084      	movs	r0, #132	; 0x84
   d6a5c:	f7fd fb1b 	bl	d4096 <_Znwj>
   d6a60:	4607      	mov	r7, r0
   d6a62:	b118      	cbz	r0, d6a6c <_Z22__fetch_global_Serial1v+0x34>
   d6a64:	2284      	movs	r2, #132	; 0x84
   d6a66:	4631      	mov	r1, r6
   d6a68:	f000 fd3c 	bl	d74e4 <memset>
   d6a6c:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   d6a6e:	4f0e      	ldr	r7, [pc, #56]	; (d6aa8 <_Z22__fetch_global_Serial1v+0x70>)
   d6a70:	6839      	ldr	r1, [r7, #0]
   d6a72:	f011 0601 	ands.w	r6, r1, #1
   d6a76:	d111      	bne.n	d6a9c <_Z22__fetch_global_Serial1v+0x64>
   d6a78:	4638      	mov	r0, r7
   d6a7a:	f7fd fb1d 	bl	d40b8 <__cxa_guard_acquire>
   d6a7e:	b168      	cbz	r0, d6a9c <_Z22__fetch_global_Serial1v+0x64>
   d6a80:	6822      	ldr	r2, [r4, #0]
   d6a82:	682b      	ldr	r3, [r5, #0]
   d6a84:	4809      	ldr	r0, [pc, #36]	; (d6aac <_Z22__fetch_global_Serial1v+0x74>)
   d6a86:	4631      	mov	r1, r6
   d6a88:	f7ff ffb6 	bl	d69f8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d6a8c:	4638      	mov	r0, r7
   d6a8e:	f7fd fb18 	bl	d40c2 <__cxa_guard_release>
   d6a92:	4a07      	ldr	r2, [pc, #28]	; (d6ab0 <_Z22__fetch_global_Serial1v+0x78>)
   d6a94:	4907      	ldr	r1, [pc, #28]	; (d6ab4 <_Z22__fetch_global_Serial1v+0x7c>)
   d6a96:	4805      	ldr	r0, [pc, #20]	; (d6aac <_Z22__fetch_global_Serial1v+0x74>)
   d6a98:	f000 fb87 	bl	d71aa <__aeabi_atexit>
#endif
	return serial1;
}
   d6a9c:	4803      	ldr	r0, [pc, #12]	; (d6aac <_Z22__fetch_global_Serial1v+0x74>)
   d6a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d6aa0:	2003e55c 	.word	0x2003e55c
   d6aa4:	2003e554 	.word	0x2003e554
   d6aa8:	2003e558 	.word	0x2003e558
   d6aac:	2003e540 	.word	0x2003e540
   d6ab0:	2003e480 	.word	0x2003e480
   d6ab4:	000d6975 	.word	0x000d6975

000d6ab8 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d6ab8:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6aba:	6883      	ldr	r3, [r0, #8]
   d6abc:	4604      	mov	r4, r0
   d6abe:	b90b      	cbnz	r3, d6ac4 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d6ac0:	f000 fb91 	bl	d71e6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6ac4:	68c3      	ldr	r3, [r0, #12]
   d6ac6:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d6ac8:	68a3      	ldr	r3, [r4, #8]
   d6aca:	b11b      	cbz	r3, d6ad4 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6acc:	2203      	movs	r2, #3
   d6ace:	4621      	mov	r1, r4
   d6ad0:	4620      	mov	r0, r4
   d6ad2:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d6ad4:	4620      	mov	r0, r4
   d6ad6:	2110      	movs	r1, #16
}
   d6ad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d6adc:	f000 bb72 	b.w	d71c4 <_ZdlPvj>

000d6ae0 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6ae0:	2200      	movs	r2, #0
   d6ae2:	4611      	mov	r1, r2
   d6ae4:	6840      	ldr	r0, [r0, #4]
   d6ae6:	f7fe b8db 	b.w	d4ca0 <network_listening>

000d6aea <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6aea:	2200      	movs	r2, #0
   d6aec:	4611      	mov	r1, r2
   d6aee:	6840      	ldr	r0, [r0, #4]
   d6af0:	f7fe b8e6 	b.w	d4cc0 <network_get_listen_timeout>

000d6af4 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6af4:	2200      	movs	r2, #0
   d6af6:	6840      	ldr	r0, [r0, #4]
   d6af8:	f7fe b8da 	b.w	d4cb0 <network_set_listen_timeout>

000d6afc <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6afc:	2200      	movs	r2, #0
   d6afe:	f081 0101 	eor.w	r1, r1, #1
   d6b02:	6840      	ldr	r0, [r0, #4]
   d6b04:	f7fe b8c4 	b.w	d4c90 <network_listen>

000d6b08 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d6b08:	2300      	movs	r3, #0
   d6b0a:	461a      	mov	r2, r3
   d6b0c:	2101      	movs	r1, #1
   d6b0e:	6840      	ldr	r0, [r0, #4]
   d6b10:	f7fe b8b6 	b.w	d4c80 <network_off>

000d6b14 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6b14:	2300      	movs	r3, #0
   d6b16:	461a      	mov	r2, r3
   d6b18:	4619      	mov	r1, r3
   d6b1a:	6840      	ldr	r0, [r0, #4]
   d6b1c:	f7fe b8a8 	b.w	d4c70 <network_on>

000d6b20 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6b20:	2200      	movs	r2, #0
   d6b22:	4611      	mov	r1, r2
   d6b24:	6840      	ldr	r0, [r0, #4]
   d6b26:	f7fe b89b 	b.w	d4c60 <network_ready>

000d6b2a <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6b2a:	2200      	movs	r2, #0
   d6b2c:	4611      	mov	r1, r2
   d6b2e:	6840      	ldr	r0, [r0, #4]
   d6b30:	f7fe b886 	b.w	d4c40 <network_connecting>

000d6b34 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6b34:	2200      	movs	r2, #0
   d6b36:	2102      	movs	r1, #2
   d6b38:	6840      	ldr	r0, [r0, #4]
   d6b3a:	f7fe b889 	b.w	d4c50 <network_disconnect>

000d6b3e <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6b3e:	2300      	movs	r3, #0
   d6b40:	461a      	mov	r2, r3
   d6b42:	6840      	ldr	r0, [r0, #4]
   d6b44:	f7fe b874 	b.w	d4c30 <network_connect>

000d6b48 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d6b48:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6b4a:	4605      	mov	r5, r0
   d6b4c:	b188      	cbz	r0, d6b72 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6b4e:	6804      	ldr	r4, [r0, #0]
   d6b50:	b14c      	cbz	r4, d6b66 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d6b52:	68a3      	ldr	r3, [r4, #8]
   d6b54:	b11b      	cbz	r3, d6b5e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6b56:	2203      	movs	r2, #3
   d6b58:	4621      	mov	r1, r4
   d6b5a:	4620      	mov	r0, r4
   d6b5c:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6b5e:	2110      	movs	r1, #16
   d6b60:	4620      	mov	r0, r4
   d6b62:	f000 fb2f 	bl	d71c4 <_ZdlPvj>
   d6b66:	4628      	mov	r0, r5
   d6b68:	2114      	movs	r1, #20
      }
   d6b6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6b6e:	f000 bb29 	b.w	d71c4 <_ZdlPvj>
   d6b72:	bd38      	pop	{r3, r4, r5, pc}

000d6b74 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d6b74:	b110      	cbz	r0, d6b7c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d6b76:	6803      	ldr	r3, [r0, #0]
   d6b78:	685b      	ldr	r3, [r3, #4]
   d6b7a:	4718      	bx	r3
   d6b7c:	4770      	bx	lr

000d6b7e <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d6b7e:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6b80:	6803      	ldr	r3, [r0, #0]
   d6b82:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d6b84:	b1bb      	cbz	r3, d6bb6 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d6b86:	6858      	ldr	r0, [r3, #4]
   d6b88:	f7fd ff36 	bl	d49f8 <os_thread_is_current>
   d6b8c:	b978      	cbnz	r0, d6bae <_ZN6ThreadD1Ev+0x30>
   d6b8e:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d6b90:	7c5a      	ldrb	r2, [r3, #17]
   d6b92:	b912      	cbnz	r2, d6b9a <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d6b94:	6858      	ldr	r0, [r3, #4]
   d6b96:	f7fd ff37 	bl	d4a08 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d6b9a:	6823      	ldr	r3, [r4, #0]
   d6b9c:	6858      	ldr	r0, [r3, #4]
   d6b9e:	f7fd ff3b 	bl	d4a18 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6ba2:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6ba4:	2300      	movs	r3, #0
   d6ba6:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d6ba8:	b128      	cbz	r0, d6bb6 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d6baa:	f7ff ffcd 	bl	d6b48 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6bae:	6820      	ldr	r0, [r4, #0]
   d6bb0:	b108      	cbz	r0, d6bb6 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d6bb2:	f7ff ffc9 	bl	d6b48 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d6bb6:	4620      	mov	r0, r4
   d6bb8:	bd10      	pop	{r4, pc}

000d6bba <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d6bba:	b538      	push	{r3, r4, r5, lr}
   d6bbc:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6bbe:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d6bc2:	b108      	cbz	r0, d6bc8 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d6bc4:	f7fd fa6b 	bl	d409e <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d6bc8:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d6bcc:	b108      	cbz	r0, d6bd2 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d6bce:	f7fd ff33 	bl	d4a38 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6bd2:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d6bd6:	b135      	cbz	r5, d6be6 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6bd8:	4628      	mov	r0, r5
   d6bda:	f7ff ffd0 	bl	d6b7e <_ZN6ThreadD1Ev>
   d6bde:	2104      	movs	r1, #4
   d6be0:	4628      	mov	r0, r5
   d6be2:	f000 faef 	bl	d71c4 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6be6:	6820      	ldr	r0, [r4, #0]
   d6be8:	b108      	cbz	r0, d6bee <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d6bea:	f7ff ffc3 	bl	d6b74 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d6bee:	4620      	mov	r0, r4
   d6bf0:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6bf4 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d6bf4:	b510      	push	{r4, lr}
   d6bf6:	4b04      	ldr	r3, [pc, #16]	; (d6c08 <_ZN5spark9MeshClassD1Ev+0x14>)
   d6bf8:	4604      	mov	r4, r0
   d6bfa:	f840 3b08 	str.w	r3, [r0], #8
   d6bfe:	f7ff ffdc 	bl	d6bba <_ZN5spark11MeshPublishD1Ev>
   d6c02:	4620      	mov	r0, r4
   d6c04:	bd10      	pop	{r4, pc}
   d6c06:	bf00      	nop
   d6c08:	000d7de8 	.word	0x000d7de8

000d6c0c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d6c0c:	b538      	push	{r3, r4, r5, lr}
   d6c0e:	4c0e      	ldr	r4, [pc, #56]	; (d6c48 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d6c10:	4b0e      	ldr	r3, [pc, #56]	; (d6c4c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d6c12:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d6c14:	2500      	movs	r5, #0
   d6c16:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d6c18:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d6c1c:	6063      	str	r3, [r4, #4]
   d6c1e:	60a5      	str	r5, [r4, #8]
   d6c20:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6c24:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d6c28:	f7fd fefe 	bl	d4a28 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d6c2c:	4b08      	ldr	r3, [pc, #32]	; (d6c50 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d6c2e:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6c32:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d6c36:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d6c38:	4620      	mov	r0, r4
   d6c3a:	4a06      	ldr	r2, [pc, #24]	; (d6c54 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d6c3c:	4906      	ldr	r1, [pc, #24]	; (d6c58 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d6c3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d6c42:	f000 bab2 	b.w	d71aa <__aeabi_atexit>
   d6c46:	bf00      	nop
   d6c48:	2003e560 	.word	0x2003e560
   d6c4c:	000d7e50 	.word	0x000d7e50
   d6c50:	000d7de8 	.word	0x000d7de8
   d6c54:	2003e480 	.word	0x2003e480
   d6c58:	000d6bf5 	.word	0x000d6bf5

000d6c5c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d6c5c:	2200      	movs	r2, #0
   d6c5e:	4611      	mov	r1, r2
   d6c60:	6840      	ldr	r0, [r0, #4]
   d6c62:	f7fd bffd 	b.w	d4c60 <network_ready>

000d6c66 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6c66:	2200      	movs	r2, #0
   d6c68:	4611      	mov	r1, r2
   d6c6a:	6840      	ldr	r0, [r0, #4]
   d6c6c:	f7fe b818 	b.w	d4ca0 <network_listening>

000d6c70 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6c70:	2200      	movs	r2, #0
   d6c72:	4611      	mov	r1, r2
   d6c74:	6840      	ldr	r0, [r0, #4]
   d6c76:	f7fe b823 	b.w	d4cc0 <network_get_listen_timeout>

000d6c7a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6c7a:	2200      	movs	r2, #0
   d6c7c:	6840      	ldr	r0, [r0, #4]
   d6c7e:	f7fe b817 	b.w	d4cb0 <network_set_listen_timeout>

000d6c82 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6c82:	2200      	movs	r2, #0
   d6c84:	f081 0101 	eor.w	r1, r1, #1
   d6c88:	6840      	ldr	r0, [r0, #4]
   d6c8a:	f7fe b801 	b.w	d4c90 <network_listen>

000d6c8e <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d6c8e:	2300      	movs	r3, #0
   d6c90:	461a      	mov	r2, r3
   d6c92:	4619      	mov	r1, r3
   d6c94:	6840      	ldr	r0, [r0, #4]
   d6c96:	f7fd bff3 	b.w	d4c80 <network_off>

000d6c9a <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d6c9a:	2300      	movs	r3, #0
   d6c9c:	461a      	mov	r2, r3
   d6c9e:	4619      	mov	r1, r3
   d6ca0:	6840      	ldr	r0, [r0, #4]
   d6ca2:	f7fd bfe5 	b.w	d4c70 <network_on>

000d6ca6 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6ca6:	2200      	movs	r2, #0
   d6ca8:	4611      	mov	r1, r2
   d6caa:	6840      	ldr	r0, [r0, #4]
   d6cac:	f7fd bfc8 	b.w	d4c40 <network_connecting>

000d6cb0 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6cb0:	2200      	movs	r2, #0
   d6cb2:	2102      	movs	r1, #2
   d6cb4:	6840      	ldr	r0, [r0, #4]
   d6cb6:	f7fd bfcb 	b.w	d4c50 <network_disconnect>

000d6cba <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6cba:	2300      	movs	r3, #0
   d6cbc:	461a      	mov	r2, r3
   d6cbe:	6840      	ldr	r0, [r0, #4]
   d6cc0:	f7fd bfb6 	b.w	d4c30 <network_connect>

000d6cc4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d6cc4:	4b02      	ldr	r3, [pc, #8]	; (d6cd0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d6cc6:	2204      	movs	r2, #4
   d6cc8:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d6cca:	4a02      	ldr	r2, [pc, #8]	; (d6cd4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d6ccc:	601a      	str	r2, [r3, #0]
   d6cce:	4770      	bx	lr
   d6cd0:	2003e734 	.word	0x2003e734
   d6cd4:	000d7e1c 	.word	0x000d7e1c

000d6cd8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6cd8:	2300      	movs	r3, #0
   d6cda:	461a      	mov	r2, r3
   d6cdc:	6840      	ldr	r0, [r0, #4]
   d6cde:	f7fd bfa7 	b.w	d4c30 <network_connect>

000d6ce2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d6ce2:	2200      	movs	r2, #0
   d6ce4:	2102      	movs	r1, #2
   d6ce6:	6840      	ldr	r0, [r0, #4]
   d6ce8:	f7fd bfb2 	b.w	d4c50 <network_disconnect>

000d6cec <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6cec:	2200      	movs	r2, #0
   d6cee:	4611      	mov	r1, r2
   d6cf0:	6840      	ldr	r0, [r0, #4]
   d6cf2:	f7fd bfa5 	b.w	d4c40 <network_connecting>

000d6cf6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d6cf6:	2200      	movs	r2, #0
   d6cf8:	4611      	mov	r1, r2
   d6cfa:	6840      	ldr	r0, [r0, #4]
   d6cfc:	f7fd bfb0 	b.w	d4c60 <network_ready>

000d6d00 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6d00:	2300      	movs	r3, #0
   d6d02:	461a      	mov	r2, r3
   d6d04:	4619      	mov	r1, r3
   d6d06:	6840      	ldr	r0, [r0, #4]
   d6d08:	f7fd bfb2 	b.w	d4c70 <network_on>

000d6d0c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6d0c:	2300      	movs	r3, #0
   d6d0e:	461a      	mov	r2, r3
   d6d10:	4619      	mov	r1, r3
   d6d12:	6840      	ldr	r0, [r0, #4]
   d6d14:	f7fd bfb4 	b.w	d4c80 <network_off>

000d6d18 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6d18:	2200      	movs	r2, #0
   d6d1a:	f081 0101 	eor.w	r1, r1, #1
   d6d1e:	6840      	ldr	r0, [r0, #4]
   d6d20:	f7fd bfb6 	b.w	d4c90 <network_listen>

000d6d24 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6d24:	2200      	movs	r2, #0
   d6d26:	6840      	ldr	r0, [r0, #4]
   d6d28:	f7fd bfc2 	b.w	d4cb0 <network_set_listen_timeout>

000d6d2c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6d2c:	2200      	movs	r2, #0
   d6d2e:	4611      	mov	r1, r2
   d6d30:	6840      	ldr	r0, [r0, #4]
   d6d32:	f7fd bfc5 	b.w	d4cc0 <network_get_listen_timeout>

000d6d36 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d6d36:	2200      	movs	r2, #0
   d6d38:	4611      	mov	r1, r2
   d6d3a:	6840      	ldr	r0, [r0, #4]
   d6d3c:	f7fd bfb0 	b.w	d4ca0 <network_listening>

000d6d40 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6d40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6d44:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d6d46:	b095      	sub	sp, #84	; 0x54
   d6d48:	4616      	mov	r6, r2
   d6d4a:	460d      	mov	r5, r1
   d6d4c:	4607      	mov	r7, r0
    IPAddress addr;
   d6d4e:	f7ff fd4d 	bl	d67ec <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d6d52:	4621      	mov	r1, r4
   d6d54:	2220      	movs	r2, #32
   d6d56:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6d58:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d6d5a:	f000 fbc3 	bl	d74e4 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d6d5e:	2340      	movs	r3, #64	; 0x40
   d6d60:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d6d62:	4621      	mov	r1, r4
   d6d64:	466b      	mov	r3, sp
   d6d66:	aa0c      	add	r2, sp, #48	; 0x30
   d6d68:	4630      	mov	r0, r6
   d6d6a:	f7fd fe1d 	bl	d49a8 <netdb_getaddrinfo>
    if (!r) {
   d6d6e:	4604      	mov	r4, r0
   d6d70:	2800      	cmp	r0, #0
   d6d72:	d144      	bne.n	d6dfe <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6d74:	4602      	mov	r2, r0
   d6d76:	2101      	movs	r1, #1
   d6d78:	6868      	ldr	r0, [r5, #4]
   d6d7a:	f7fd ff71 	bl	d4c60 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6d7e:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6d80:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6d82:	4622      	mov	r2, r4
   d6d84:	6868      	ldr	r0, [r5, #4]
   d6d86:	f7fd ff6b 	bl	d4c60 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6d8a:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6d8c:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d6d8e:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6d90:	2e00      	cmp	r6, #0
   d6d92:	d034      	beq.n	d6dfe <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d6d94:	2900      	cmp	r1, #0
   d6d96:	d132      	bne.n	d6dfe <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d6d98:	6873      	ldr	r3, [r6, #4]
   d6d9a:	2b02      	cmp	r3, #2
   d6d9c:	d002      	beq.n	d6da4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d6d9e:	2b0a      	cmp	r3, #10
   d6da0:	d009      	beq.n	d6db6 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d6da2:	e02a      	b.n	d6dfa <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d6da4:	f1b8 0f00 	cmp.w	r8, #0
   d6da8:	d027      	beq.n	d6dfa <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d6daa:	6971      	ldr	r1, [r6, #20]
   d6dac:	4638      	mov	r0, r7
   d6dae:	3104      	adds	r1, #4
   d6db0:	f7ff fd49 	bl	d6846 <_ZN9IPAddressaSEPKh>
   d6db4:	e020      	b.n	d6df8 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d6db6:	f1b9 0f00 	cmp.w	r9, #0
   d6dba:	d01e      	beq.n	d6dfa <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d6dbc:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d6dbe:	2211      	movs	r2, #17
   d6dc0:	a801      	add	r0, sp, #4
   d6dc2:	f000 fb8f 	bl	d74e4 <memset>
                    a.v = 6;
   d6dc6:	2306      	movs	r3, #6
   d6dc8:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6dcc:	ad01      	add	r5, sp, #4
   d6dce:	f104 0308 	add.w	r3, r4, #8
   d6dd2:	3418      	adds	r4, #24
   d6dd4:	6818      	ldr	r0, [r3, #0]
   d6dd6:	6859      	ldr	r1, [r3, #4]
   d6dd8:	462a      	mov	r2, r5
   d6dda:	c203      	stmia	r2!, {r0, r1}
   d6ddc:	3308      	adds	r3, #8
   d6dde:	42a3      	cmp	r3, r4
   d6de0:	4615      	mov	r5, r2
   d6de2:	d1f7      	bne.n	d6dd4 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d6de4:	a901      	add	r1, sp, #4
   d6de6:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6de8:	ad07      	add	r5, sp, #28
   d6dea:	f7ff fd0d 	bl	d6808 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6dee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6df0:	1d3c      	adds	r4, r7, #4
   d6df2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6df4:	682b      	ldr	r3, [r5, #0]
   d6df6:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d6df8:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6dfa:	69f6      	ldr	r6, [r6, #28]
   d6dfc:	e7c8      	b.n	d6d90 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d6dfe:	9800      	ldr	r0, [sp, #0]
   d6e00:	f7fd fdca 	bl	d4998 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6e04:	4638      	mov	r0, r7
   d6e06:	b015      	add	sp, #84	; 0x54
   d6e08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d6e0c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6e0c:	4b02      	ldr	r3, [pc, #8]	; (d6e18 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d6e0e:	4a03      	ldr	r2, [pc, #12]	; (d6e1c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6e10:	601a      	str	r2, [r3, #0]
   d6e12:	2200      	movs	r2, #0
   d6e14:	605a      	str	r2, [r3, #4]
   d6e16:	4770      	bx	lr
   d6e18:	2003e73c 	.word	0x2003e73c
   d6e1c:	000d7e50 	.word	0x000d7e50

000d6e20 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:
#include <cstdarg>

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
   d6e20:	f100 0210 	add.w	r2, r0, #16
    size_t n = 1;
   d6e24:	2301      	movs	r3, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d6e26:	f812 1c10 	ldrb.w	r1, [r2, #-16]
   d6e2a:	2901      	cmp	r1, #1
   d6e2c:	4610      	mov	r0, r2
   d6e2e:	d104      	bne.n	d6e3a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x1a>
            n += t->size * 2; // Number of name and value tokens
   d6e30:	f852 1c04 	ldr.w	r1, [r2, #-4]
   d6e34:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   d6e38:	e004      	b.n	d6e44 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x24>
        } else if (t->type == JSMN_ARRAY) {
   d6e3a:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d6e3c:	bf04      	itt	eq
   d6e3e:	f852 1c04 	ldreq.w	r1, [r2, #-4]
   d6e42:	185b      	addeq	r3, r3, r1
namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
    do {
   d6e44:	3b01      	subs	r3, #1
   d6e46:	f102 0210 	add.w	r2, r2, #16
   d6e4a:	d1ec      	bne.n	d6e26 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
        }
        ++t;
        --n;
    } while (n);
    return t;
}
   d6e4c:	4770      	bx	lr

000d6e4e <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   d6e4e:	b40e      	push	{r1, r2, r3}
   d6e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6e54:	b087      	sub	sp, #28
   d6e56:	af00      	add	r7, sp, #0
   d6e58:	f107 0434 	add.w	r4, r7, #52	; 0x34
   d6e5c:	4605      	mov	r5, r0
   d6e5e:	f854 6b04 	ldr.w	r6, [r4], #4
    char buf[16];
    va_list args;
    va_start(args, fmt);
   d6e62:	607c      	str	r4, [r7, #4]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6e64:	4623      	mov	r3, r4
   d6e66:	4632      	mov	r2, r6
   d6e68:	2110      	movs	r1, #16
   d6e6a:	f107 0008 	add.w	r0, r7, #8
   d6e6e:	f7fd ff6f 	bl	d4d50 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   d6e72:	280f      	cmp	r0, #15
   d6e74:	d916      	bls.n	d6ea4 <_ZN5spark10JSONWriter6printfEPKcz+0x56>
        char buf[n + 1]; // Use larger buffer
   d6e76:	f100 0308 	add.w	r3, r0, #8
   d6e7a:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   d6e7e:	46e8      	mov	r8, sp
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
        char buf[n + 1]; // Use larger buffer
   d6e80:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6e84:	4632      	mov	r2, r6
   d6e86:	1c41      	adds	r1, r0, #1
   d6e88:	4623      	mov	r3, r4
   d6e8a:	4668      	mov	r0, sp
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
        char buf[n + 1]; // Use larger buffer
        va_start(args, fmt);
   d6e8c:	607c      	str	r4, [r7, #4]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6e8e:	f7fd ff5f 	bl	d4d50 <vsnprintf>
        va_end(args);
        if (n > 0) {
   d6e92:	1e02      	subs	r2, r0, #0
   d6e94:	dd04      	ble.n	d6ea0 <_ZN5spark10JSONWriter6printfEPKcz+0x52>
            write(buf, n);
   d6e96:	682b      	ldr	r3, [r5, #0]
   d6e98:	4669      	mov	r1, sp
   d6e9a:	689b      	ldr	r3, [r3, #8]
   d6e9c:	4628      	mov	r0, r5
   d6e9e:	4798      	blx	r3
   d6ea0:	46c5      	mov	sp, r8
   d6ea2:	e007      	b.n	d6eb4 <_ZN5spark10JSONWriter6printfEPKcz+0x66>
        }
    } else if (n > 0) {
   d6ea4:	b130      	cbz	r0, d6eb4 <_ZN5spark10JSONWriter6printfEPKcz+0x66>
        write(buf, n);
   d6ea6:	682b      	ldr	r3, [r5, #0]
   d6ea8:	4602      	mov	r2, r0
   d6eaa:	689b      	ldr	r3, [r3, #8]
   d6eac:	f107 0108 	add.w	r1, r7, #8
   d6eb0:	4628      	mov	r0, r5
   d6eb2:	4798      	blx	r3
    }
}
   d6eb4:	371c      	adds	r7, #28
   d6eb6:	46bd      	mov	sp, r7
   d6eb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d6ebc:	b003      	add	sp, #12
   d6ebe:	4770      	bx	lr

000d6ec0 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d6ec0:	b513      	push	{r0, r1, r4, lr}
   d6ec2:	ab02      	add	r3, sp, #8
    write(&c, 1);
   d6ec4:	6802      	ldr	r2, [r0, #0]

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d6ec6:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
   d6eca:	6894      	ldr	r4, [r2, #8]
   d6ecc:	4619      	mov	r1, r3
   d6ece:	2201      	movs	r2, #1
   d6ed0:	47a0      	blx	r4
}
   d6ed2:	b002      	add	sp, #8
   d6ed4:	bd10      	pop	{r4, pc}

000d6ed6 <_ZNK5spark9JSONValue4typeEv>:
        return 0.0;
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
   d6ed6:	6883      	ldr	r3, [r0, #8]
   d6ed8:	b1fb      	cbz	r3, d6f1a <_ZNK5spark9JSONValue4typeEv+0x44>
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
   d6eda:	781a      	ldrb	r2, [r3, #0]
   d6edc:	2a03      	cmp	r2, #3
   d6ede:	d81a      	bhi.n	d6f16 <_ZNK5spark9JSONValue4typeEv+0x40>
   d6ee0:	e8df f002 	tbb	[pc, r2]
   d6ee4:	1d021704 	.word	0x1d021704
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
   d6ee8:	2005      	movs	r0, #5
   d6eea:	4770      	bx	lr
    if (!t_) {
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
   d6eec:	6802      	ldr	r2, [r0, #0]
   d6eee:	685b      	ldr	r3, [r3, #4]
   d6ef0:	6852      	ldr	r2, [r2, #4]
   d6ef2:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d6ef4:	282d      	cmp	r0, #45	; 0x2d
   d6ef6:	d014      	beq.n	d6f22 <_ZNK5spark9JSONValue4typeEv+0x4c>
   d6ef8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d6efc:	2b09      	cmp	r3, #9
   d6efe:	d910      	bls.n	d6f22 <_ZNK5spark9JSONValue4typeEv+0x4c>
            return JSON_TYPE_NUMBER;
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d6f00:	2874      	cmp	r0, #116	; 0x74
   d6f02:	d010      	beq.n	d6f26 <_ZNK5spark9JSONValue4typeEv+0x50>
   d6f04:	2866      	cmp	r0, #102	; 0x66
   d6f06:	d00e      	beq.n	d6f26 <_ZNK5spark9JSONValue4typeEv+0x50>
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
   d6f08:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d6f0c:	4258      	negs	r0, r3
   d6f0e:	4158      	adcs	r0, r3
   d6f10:	4770      	bx	lr
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
   d6f12:	2006      	movs	r0, #6
   d6f14:	4770      	bx	lr
    default:
        return JSON_TYPE_INVALID;
   d6f16:	2000      	movs	r0, #0
   d6f18:	4770      	bx	lr
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
   d6f1a:	4618      	mov	r0, r3
   d6f1c:	4770      	bx	lr
            return JSON_TYPE_NULL;
        }
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
   d6f1e:	2004      	movs	r0, #4
   d6f20:	4770      	bx	lr
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
        if (c == '-' || (c >= '0' && c <= '9')) {
            return JSON_TYPE_NUMBER;
   d6f22:	2003      	movs	r0, #3
   d6f24:	4770      	bx	lr
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
            return JSON_TYPE_BOOL;
   d6f26:	2002      	movs	r0, #2
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
    default:
        return JSON_TYPE_INVALID;
    }
}
   d6f28:	4770      	bx	lr

000d6f2a <_ZNK5spark9JSONValue5toIntEv>:
    default:
        return false;
    }
}

int spark::JSONValue::toInt() const {
   d6f2a:	b510      	push	{r4, lr}
   d6f2c:	4604      	mov	r4, r0
    switch (type()) {
   d6f2e:	f7ff ffd2 	bl	d6ed6 <_ZNK5spark9JSONValue4typeEv>
   d6f32:	2802      	cmp	r0, #2
   d6f34:	d00d      	beq.n	d6f52 <_ZNK5spark9JSONValue5toIntEv+0x28>
   d6f36:	d316      	bcc.n	d6f66 <_ZNK5spark9JSONValue5toIntEv+0x3c>
   d6f38:	2804      	cmp	r0, #4
   d6f3a:	d814      	bhi.n	d6f66 <_ZNK5spark9JSONValue5toIntEv+0x3c>
    }
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        // toInt() may produce incorrect results for floating point numbers, since we want to keep
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
   d6f3c:	6822      	ldr	r2, [r4, #0]
   d6f3e:	68a3      	ldr	r3, [r4, #8]
        return strtol(s, nullptr, 10);
   d6f40:	6850      	ldr	r0, [r2, #4]
   d6f42:	685b      	ldr	r3, [r3, #4]
   d6f44:	220a      	movs	r2, #10
   d6f46:	2100      	movs	r1, #0
   d6f48:	4418      	add	r0, r3
    }
    default:
        return 0;
    }
}
   d6f4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        // toInt() may produce incorrect results for floating point numbers, since we want to keep
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
        return strtol(s, nullptr, 10);
   d6f4e:	f000 bbed 	b.w	d772c <strtol>
}

int spark::JSONValue::toInt() const {
    switch (type()) {
    case JSON_TYPE_BOOL: {
        const char* const s = d_->json + t_->start;
   d6f52:	6822      	ldr	r2, [r4, #0]
   d6f54:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d6f56:	6852      	ldr	r2, [r2, #4]
   d6f58:	685b      	ldr	r3, [r3, #4]
   d6f5a:	5cd0      	ldrb	r0, [r2, r3]
   d6f5c:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d6f60:	4258      	negs	r0, r3
   d6f62:	4158      	adcs	r0, r3
   d6f64:	bd10      	pop	{r4, pc}
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
        return strtol(s, nullptr, 10);
    }
    default:
        return 0;
   d6f66:	2000      	movs	r0, #0
    }
}
   d6f68:	bd10      	pop	{r4, pc}

000d6f6a <_ZN5spark18JSONObjectIterator4nextEv>:
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
   d6f6a:	b510      	push	{r4, lr}
    if (!n_) {
   d6f6c:	6943      	ldr	r3, [r0, #20]
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
   d6f6e:	4604      	mov	r4, r0
    if (!n_) {
   d6f70:	b15b      	cbz	r3, d6f8a <_ZN5spark18JSONObjectIterator4nextEv+0x20>
        return false;
    }
    k_ = t_; // Name
   d6f72:	6880      	ldr	r0, [r0, #8]
   d6f74:	60e0      	str	r0, [r4, #12]
    ++t_;
    v_ = t_; // Value
    --n_;
   d6f76:	3b01      	subs	r3, #1
bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
    }
    k_ = t_; // Name
    ++t_;
   d6f78:	3010      	adds	r0, #16
   d6f7a:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d6f7c:	6120      	str	r0, [r4, #16]
    --n_;
   d6f7e:	6163      	str	r3, [r4, #20]
    if (n_) {
   d6f80:	b12b      	cbz	r3, d6f8e <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        t_ = skipToken(t_);
   d6f82:	f7ff ff4d 	bl	d6e20 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d6f86:	60a0      	str	r0, [r4, #8]
   d6f88:	e001      	b.n	d6f8e <_ZN5spark18JSONObjectIterator4nextEv+0x24>
    }
}

bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
   d6f8a:	4618      	mov	r0, r3
   d6f8c:	bd10      	pop	{r4, pc}
    v_ = t_; // Value
    --n_;
    if (n_) {
        t_ = skipToken(t_);
    }
    return true;
   d6f8e:	2001      	movs	r0, #1
}
   d6f90:	bd10      	pop	{r4, pc}

000d6f92 <_ZN5spark10JSONWriter9endObjectEv>:
    write('{');
    state_ = BEGIN;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::endObject() {
   d6f92:	b510      	push	{r4, lr}
    write('}');
   d6f94:	217d      	movs	r1, #125	; 0x7d
    write('{');
    state_ = BEGIN;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::endObject() {
   d6f96:	4604      	mov	r4, r0
    write('}');
   d6f98:	f7ff ff92 	bl	d6ec0 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   d6f9c:	2301      	movs	r3, #1
   d6f9e:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d6fa0:	4620      	mov	r0, r4
   d6fa2:	bd10      	pop	{r4, pc}

000d6fa4 <_ZN5spark10JSONWriter14writeSeparatorEv>:
    } else if (n > 0) {
        write(buf, n);
    }
}

void spark::JSONWriter::writeSeparator() {
   d6fa4:	b508      	push	{r3, lr}
    switch (state_) {
   d6fa6:	7903      	ldrb	r3, [r0, #4]
   d6fa8:	2b01      	cmp	r3, #1
   d6faa:	d002      	beq.n	d6fb2 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   d6fac:	2b02      	cmp	r3, #2
   d6fae:	d002      	beq.n	d6fb6 <_ZN5spark10JSONWriter14writeSeparatorEv+0x12>
   d6fb0:	bd08      	pop	{r3, pc}
    case NEXT:
        write(',');
   d6fb2:	212c      	movs	r1, #44	; 0x2c
   d6fb4:	e000      	b.n	d6fb8 <_ZN5spark10JSONWriter14writeSeparatorEv+0x14>
        break;
    case VALUE:
        write(':');
   d6fb6:	213a      	movs	r1, #58	; 0x3a
   d6fb8:	f7ff ff82 	bl	d6ec0 <_ZN5spark10JSONWriter5writeEc>
   d6fbc:	bd08      	pop	{r3, pc}

000d6fbe <_ZN5spark10JSONWriter11beginObjectEv>:
    write(']');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::beginObject() {
   d6fbe:	b510      	push	{r4, lr}
   d6fc0:	4604      	mov	r4, r0
    writeSeparator();
   d6fc2:	f7ff ffef 	bl	d6fa4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   d6fc6:	4620      	mov	r0, r4
   d6fc8:	217b      	movs	r1, #123	; 0x7b
   d6fca:	f7ff ff79 	bl	d6ec0 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   d6fce:	2300      	movs	r3, #0
   d6fd0:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d6fd2:	4620      	mov	r0, r4
   d6fd4:	bd10      	pop	{r4, pc}
	...

000d6fd8 <_ZN5spark10JSONWriter5valueEi>:
    }
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(int val) {
   d6fd8:	b538      	push	{r3, r4, r5, lr}
   d6fda:	4604      	mov	r4, r0
   d6fdc:	460d      	mov	r5, r1
    writeSeparator();
   d6fde:	f7ff ffe1 	bl	d6fa4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   d6fe2:	6823      	ldr	r3, [r4, #0]
   d6fe4:	4904      	ldr	r1, [pc, #16]	; (d6ff8 <_ZN5spark10JSONWriter5valueEi+0x20>)
   d6fe6:	68db      	ldr	r3, [r3, #12]
   d6fe8:	4620      	mov	r0, r4
   d6fea:	462a      	mov	r2, r5
   d6fec:	4798      	blx	r3
    state_ = NEXT;
   d6fee:	2301      	movs	r3, #1
   d6ff0:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d6ff2:	4620      	mov	r0, r4
   d6ff4:	bd38      	pop	{r3, r4, r5, pc}
   d6ff6:	bf00      	nop
   d6ff8:	000d7c7d 	.word	0x000d7c7d

000d6ffc <_ZN5spark10JSONWriter5valueEj>:

spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   d6ffc:	b538      	push	{r3, r4, r5, lr}
   d6ffe:	4604      	mov	r4, r0
   d7000:	460d      	mov	r5, r1
    writeSeparator();
   d7002:	f7ff ffcf 	bl	d6fa4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   d7006:	6823      	ldr	r3, [r4, #0]
   d7008:	4904      	ldr	r1, [pc, #16]	; (d701c <_ZN5spark10JSONWriter5valueEj+0x20>)
   d700a:	68db      	ldr	r3, [r3, #12]
   d700c:	4620      	mov	r0, r4
   d700e:	462a      	mov	r2, r5
   d7010:	4798      	blx	r3
    state_ = NEXT;
   d7012:	2301      	movs	r3, #1
   d7014:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d7016:	4620      	mov	r0, r4
   d7018:	bd38      	pop	{r3, r4, r5, pc}
   d701a:	bf00      	nop
   d701c:	000d7b5c 	.word	0x000d7b5c

000d7020 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d7020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7022:	460d      	mov	r5, r1
   d7024:	4617      	mov	r7, r2
    write('"');
   d7026:	2122      	movs	r1, #34	; 0x22
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d7028:	4604      	mov	r4, r0
   d702a:	442f      	add	r7, r5
    write('"');
   d702c:	f7ff ff48 	bl	d6ec0 <_ZN5spark10JSONWriter5writeEc>
   d7030:	462a      	mov	r2, r5
    const char* const end = str + size;
   d7032:	4629      	mov	r1, r5
    const char *s = str;
    while (s != end) {
   d7034:	42ba      	cmp	r2, r7
   d7036:	d038      	beq.n	d70aa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8a>
        const char c = *s;
   d7038:	4616      	mov	r6, r2
   d703a:	f816 5b01 	ldrb.w	r5, [r6], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   d703e:	2d22      	cmp	r5, #34	; 0x22
   d7040:	d003      	beq.n	d704a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
   d7042:	2d5c      	cmp	r5, #92	; 0x5c
   d7044:	d001      	beq.n	d704a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
   d7046:	2d1f      	cmp	r5, #31
   d7048:	d82d      	bhi.n	d70a6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x86>
            write(str, s - str); // Write preceeding characters
   d704a:	6823      	ldr	r3, [r4, #0]
   d704c:	1a52      	subs	r2, r2, r1
   d704e:	689b      	ldr	r3, [r3, #8]
   d7050:	4620      	mov	r0, r4
   d7052:	4798      	blx	r3
            write('\\');
   d7054:	215c      	movs	r1, #92	; 0x5c
   d7056:	4620      	mov	r0, r4
   d7058:	f7ff ff32 	bl	d6ec0 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   d705c:	2d0c      	cmp	r5, #12
   d705e:	d019      	beq.n	d7094 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
   d7060:	d807      	bhi.n	d7072 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x52>
   d7062:	2d09      	cmp	r5, #9
   d7064:	d00f      	beq.n	d7086 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x66>
   d7066:	2d0a      	cmp	r5, #10
   d7068:	d012      	beq.n	d7090 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x70>
   d706a:	2d08      	cmp	r5, #8
   d706c:	d114      	bne.n	d7098 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
   d706e:	2162      	movs	r1, #98	; 0x62
   d7070:	e00a      	b.n	d7088 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
    while (s != end) {
        const char c = *s;
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
   d7072:	2d22      	cmp	r5, #34	; 0x22
   d7074:	d005      	beq.n	d7082 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d7076:	2d5c      	cmp	r5, #92	; 0x5c
   d7078:	d003      	beq.n	d7082 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d707a:	2d0d      	cmp	r5, #13
   d707c:	d10c      	bne.n	d7098 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
                break;
            case 0x0c: // Form feed
                write('f');
                break;
            case 0x0d: // Carriage return
                write('r');
   d707e:	2172      	movs	r1, #114	; 0x72
   d7080:	e002      	b.n	d7088 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
            case '"':
            case '\\':
                write(c);
   d7082:	4629      	mov	r1, r5
   d7084:	e000      	b.n	d7088 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x08: // Backspace
                write('b');
                break;
            case 0x09: // Tab
                write('t');
   d7086:	2174      	movs	r1, #116	; 0x74
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
   d7088:	4620      	mov	r0, r4
   d708a:	f7ff ff19 	bl	d6ec0 <_ZN5spark10JSONWriter5writeEc>
                break;
   d708e:	e009      	b.n	d70a4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x84>
            case 0x09: // Tab
                write('t');
                break;
            case 0x0a: // Line feed
                write('n');
   d7090:	216e      	movs	r1, #110	; 0x6e
   d7092:	e7f9      	b.n	d7088 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x0c: // Form feed
                write('f');
   d7094:	2166      	movs	r1, #102	; 0x66
   d7096:	e7f7      	b.n	d7088 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   d7098:	6823      	ldr	r3, [r4, #0]
   d709a:	490a      	ldr	r1, [pc, #40]	; (d70c4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xa4>)
   d709c:	68db      	ldr	r3, [r3, #12]
   d709e:	462a      	mov	r2, r5
   d70a0:	4620      	mov	r0, r4
   d70a2:	4798      	blx	r3
                break;
            }
            str = s + 1;
   d70a4:	4631      	mov	r1, r6

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
    write('"');
    const char* const end = str + size;
    const char *s = str;
    while (s != end) {
   d70a6:	4632      	mov	r2, r6
   d70a8:	e7c4      	b.n	d7034 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x14>
            }
            str = s + 1;
        }
        ++s;
    }
    if (s != str) {
   d70aa:	4291      	cmp	r1, r2
   d70ac:	d004      	beq.n	d70b8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x98>
        write(str, s - str); // Write remaining characters
   d70ae:	6823      	ldr	r3, [r4, #0]
   d70b0:	1a52      	subs	r2, r2, r1
   d70b2:	689d      	ldr	r5, [r3, #8]
   d70b4:	4620      	mov	r0, r4
   d70b6:	47a8      	blx	r5
    }
    write('"');
   d70b8:	2122      	movs	r1, #34	; 0x22
   d70ba:	4620      	mov	r0, r4
   d70bc:	f7ff ff00 	bl	d6ec0 <_ZN5spark10JSONWriter5writeEc>
   d70c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d70c2:	bf00      	nop
   d70c4:	000d7e99 	.word	0x000d7e99

000d70c8 <_ZN5spark10JSONWriter4nameEPKcj>:
    write('}');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   d70c8:	b570      	push	{r4, r5, r6, lr}
   d70ca:	4604      	mov	r4, r0
   d70cc:	460d      	mov	r5, r1
   d70ce:	4616      	mov	r6, r2
    writeSeparator();
   d70d0:	f7ff ff68 	bl	d6fa4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   d70d4:	4620      	mov	r0, r4
   d70d6:	4632      	mov	r2, r6
   d70d8:	4629      	mov	r1, r5
   d70da:	f7ff ffa1 	bl	d7020 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   d70de:	2302      	movs	r3, #2
   d70e0:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d70e2:	4620      	mov	r0, r4
   d70e4:	bd70      	pop	{r4, r5, r6, pc}

000d70e6 <_ZN5spark10JSONWriter5valueEPKcj>:
    printf("%g", val);
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   d70e6:	b570      	push	{r4, r5, r6, lr}
   d70e8:	4604      	mov	r4, r0
   d70ea:	460d      	mov	r5, r1
   d70ec:	4616      	mov	r6, r2
    writeSeparator();
   d70ee:	f7ff ff59 	bl	d6fa4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   d70f2:	4620      	mov	r0, r4
   d70f4:	4632      	mov	r2, r6
   d70f6:	4629      	mov	r1, r5
   d70f8:	f7ff ff92 	bl	d7020 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   d70fc:	2301      	movs	r3, #1
   d70fe:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d7100:	4620      	mov	r0, r4
   d7102:	bd70      	pop	{r4, r5, r6, pc}

000d7104 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
    t->end = str - json; // Update string length
    return true;
}

// spark::JSONString
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d7104:	b510      	push	{r4, lr}

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d7106:	2300      	movs	r3, #0
   d7108:	4604      	mov	r4, r0
   d710a:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d710c:	6043      	str	r3, [r0, #4]
}

// spark::JSONString
inline spark::JSONString::JSONString() :
        s_(""),
        n_(0) {
   d710e:	4810      	ldr	r0, [pc, #64]	; (d7150 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x4c>)
   d7110:	60a0      	str	r0, [r4, #8]
   d7112:	60e3      	str	r3, [r4, #12]
        JSONString() {
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d7114:	b1d1      	cbz	r1, d714c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
   d7116:	780b      	ldrb	r3, [r1, #0]
   d7118:	2b03      	cmp	r3, #3
   d711a:	d006      	beq.n	d712a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d711c:	b9b3      	cbnz	r3, d714c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d711e:	6813      	ldr	r3, [r2, #0]
   d7120:	6858      	ldr	r0, [r3, #4]
   d7122:	684b      	ldr	r3, [r1, #4]
   d7124:	5cc3      	ldrb	r3, [r0, r3]
   d7126:	2b6e      	cmp	r3, #110	; 0x6e
   d7128:	d008      	beq.n	d713c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x38>
            s_ = d->json + t->start;
   d712a:	6813      	ldr	r3, [r2, #0]
   d712c:	6858      	ldr	r0, [r3, #4]
   d712e:	684b      	ldr	r3, [r1, #4]
   d7130:	4403      	add	r3, r0
   d7132:	60a3      	str	r3, [r4, #8]
            n_ = t->end - t->start;
   d7134:	688b      	ldr	r3, [r1, #8]
   d7136:	6849      	ldr	r1, [r1, #4]
   d7138:	1a5b      	subs	r3, r3, r1
   d713a:	60e3      	str	r3, [r4, #12]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d713c:	4611      	mov	r1, r2
   d713e:	4620      	mov	r0, r4
   d7140:	f851 3b04 	ldr.w	r3, [r1], #4
   d7144:	f840 3b04 	str.w	r3, [r0], #4
   d7148:	f7fd ff0e 	bl	d4f68 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        }
        d_ = d;
    }
}
   d714c:	4620      	mov	r0, r4
   d714e:	bd10      	pop	{r4, pc}
   d7150:	000d7ca3 	.word	0x000d7ca3

000d7154 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d7154:	2300      	movs	r3, #0
bool spark::JSONString::operator==(const JSONString &str) const {
    return n_ == str.n_ && strncmp(s_, str.s_, n_) == 0;
}

// spark::JSONObjectIterator
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d7156:	b510      	push	{r4, lr}
   d7158:	4604      	mov	r4, r0
   d715a:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d715c:	6043      	str	r3, [r0, #4]
// spark::JSONObjectIterator
inline spark::JSONObjectIterator::JSONObjectIterator() :
        t_(nullptr),
        k_(nullptr),
        v_(nullptr),
        n_(0) {
   d715e:	6083      	str	r3, [r0, #8]
   d7160:	60c3      	str	r3, [r0, #12]
   d7162:	6103      	str	r3, [r0, #16]
   d7164:	6143      	str	r3, [r0, #20]
        JSONObjectIterator() {
    if (t && t->type == JSMN_OBJECT) {
   d7166:	b171      	cbz	r1, d7186 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
   d7168:	780b      	ldrb	r3, [r1, #0]
   d716a:	2b01      	cmp	r3, #1
   d716c:	d10b      	bne.n	d7186 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
        t_ = t + 1; // First property's name
   d716e:	f101 0310 	add.w	r3, r1, #16
   d7172:	6083      	str	r3, [r0, #8]
        n_ = t->size; // Number of properties
   d7174:	68cb      	ldr	r3, [r1, #12]
   d7176:	6143      	str	r3, [r0, #20]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d7178:	4611      	mov	r1, r2
   d717a:	f851 3b04 	ldr.w	r3, [r1], #4
   d717e:	f840 3b04 	str.w	r3, [r0], #4
   d7182:	f7fd fef1 	bl	d4f68 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        d_ = d;
    }
}
   d7186:	4620      	mov	r0, r4
   d7188:	bd10      	pop	{r4, pc}

000d718a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d718a:	2300      	movs	r3, #0
        }
    }
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d718c:	b510      	push	{r4, lr}
   d718e:	4604      	mov	r4, r0
   d7190:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d7192:	6043      	str	r3, [r0, #4]
        JSONValue() {
    if (t) {
        t_ = t;
   d7194:	6081      	str	r1, [r0, #8]
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
        JSONValue() {
    if (t) {
   d7196:	b131      	cbz	r1, d71a6 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x1c>
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d7198:	4611      	mov	r1, r2
   d719a:	f851 3b04 	ldr.w	r3, [r1], #4
   d719e:	f840 3b04 	str.w	r3, [r0], #4
   d71a2:	f7fd fee1 	bl	d4f68 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        t_ = t;
        d_ = d;
    }
}
   d71a6:	4620      	mov	r0, r4
   d71a8:	bd10      	pop	{r4, pc}

000d71aa <__aeabi_atexit>:
   d71aa:	460b      	mov	r3, r1
   d71ac:	4601      	mov	r1, r0
   d71ae:	4618      	mov	r0, r3
   d71b0:	f000 b964 	b.w	d747c <__cxa_atexit>

000d71b4 <_ZSt15get_new_handlerv>:
   d71b4:	4b02      	ldr	r3, [pc, #8]	; (d71c0 <_ZSt15get_new_handlerv+0xc>)
   d71b6:	6818      	ldr	r0, [r3, #0]
   d71b8:	f3bf 8f5f 	dmb	sy
   d71bc:	4770      	bx	lr
   d71be:	bf00      	nop
   d71c0:	2003e74c 	.word	0x2003e74c

000d71c4 <_ZdlPvj>:
   d71c4:	f7fc bf69 	b.w	d409a <_ZdlPv>

000d71c8 <_ZnwjRKSt9nothrow_t>:
   d71c8:	b510      	push	{r4, lr}
   d71ca:	2800      	cmp	r0, #0
   d71cc:	bf14      	ite	ne
   d71ce:	4604      	movne	r4, r0
   d71d0:	2401      	moveq	r4, #1
   d71d2:	4620      	mov	r0, r4
   d71d4:	f7fd fd9c 	bl	d4d10 <malloc>
   d71d8:	b920      	cbnz	r0, d71e4 <_ZnwjRKSt9nothrow_t+0x1c>
   d71da:	f7ff ffeb 	bl	d71b4 <_ZSt15get_new_handlerv>
   d71de:	b108      	cbz	r0, d71e4 <_ZnwjRKSt9nothrow_t+0x1c>
   d71e0:	4780      	blx	r0
   d71e2:	e7f6      	b.n	d71d2 <_ZnwjRKSt9nothrow_t+0xa>
   d71e4:	bd10      	pop	{r4, pc}

000d71e6 <_ZSt25__throw_bad_function_callv>:
   d71e6:	b508      	push	{r3, lr}
   d71e8:	f7fd fdba 	bl	d4d60 <abort>

000d71ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d71ec:	4b18      	ldr	r3, [pc, #96]	; (d7250 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d71ee:	681a      	ldr	r2, [r3, #0]
   d71f0:	07d1      	lsls	r1, r2, #31
   d71f2:	bf5c      	itt	pl
   d71f4:	2201      	movpl	r2, #1
   d71f6:	601a      	strpl	r2, [r3, #0]
   d71f8:	4b16      	ldr	r3, [pc, #88]	; (d7254 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d71fa:	681a      	ldr	r2, [r3, #0]
   d71fc:	07d2      	lsls	r2, r2, #31
   d71fe:	bf5c      	itt	pl
   d7200:	2201      	movpl	r2, #1
   d7202:	601a      	strpl	r2, [r3, #0]
   d7204:	4b14      	ldr	r3, [pc, #80]	; (d7258 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d7206:	681a      	ldr	r2, [r3, #0]
   d7208:	07d0      	lsls	r0, r2, #31
   d720a:	bf5c      	itt	pl
   d720c:	2201      	movpl	r2, #1
   d720e:	601a      	strpl	r2, [r3, #0]
   d7210:	4b12      	ldr	r3, [pc, #72]	; (d725c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d7212:	681a      	ldr	r2, [r3, #0]
   d7214:	07d1      	lsls	r1, r2, #31
   d7216:	bf5c      	itt	pl
   d7218:	2201      	movpl	r2, #1
   d721a:	601a      	strpl	r2, [r3, #0]
   d721c:	4b10      	ldr	r3, [pc, #64]	; (d7260 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d721e:	681a      	ldr	r2, [r3, #0]
   d7220:	07d2      	lsls	r2, r2, #31
   d7222:	bf5c      	itt	pl
   d7224:	2201      	movpl	r2, #1
   d7226:	601a      	strpl	r2, [r3, #0]
   d7228:	4b0e      	ldr	r3, [pc, #56]	; (d7264 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d722a:	681a      	ldr	r2, [r3, #0]
   d722c:	07d0      	lsls	r0, r2, #31
   d722e:	bf5c      	itt	pl
   d7230:	2201      	movpl	r2, #1
   d7232:	601a      	strpl	r2, [r3, #0]
   d7234:	4b0c      	ldr	r3, [pc, #48]	; (d7268 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d7236:	681a      	ldr	r2, [r3, #0]
   d7238:	07d1      	lsls	r1, r2, #31
   d723a:	bf5c      	itt	pl
   d723c:	2201      	movpl	r2, #1
   d723e:	601a      	strpl	r2, [r3, #0]
   d7240:	4b0a      	ldr	r3, [pc, #40]	; (d726c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d7242:	681a      	ldr	r2, [r3, #0]
   d7244:	07d2      	lsls	r2, r2, #31
   d7246:	bf5c      	itt	pl
   d7248:	2201      	movpl	r2, #1
   d724a:	601a      	strpl	r2, [r3, #0]
   d724c:	4770      	bx	lr
   d724e:	bf00      	nop
   d7250:	2003e76c 	.word	0x2003e76c
   d7254:	2003e768 	.word	0x2003e768
   d7258:	2003e764 	.word	0x2003e764
   d725c:	2003e760 	.word	0x2003e760
   d7260:	2003e75c 	.word	0x2003e75c
   d7264:	2003e758 	.word	0x2003e758
   d7268:	2003e754 	.word	0x2003e754
   d726c:	2003e750 	.word	0x2003e750

000d7270 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d7270:	4b24      	ldr	r3, [pc, #144]	; (d7304 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d7272:	681a      	ldr	r2, [r3, #0]
   d7274:	07d0      	lsls	r0, r2, #31
   d7276:	bf5c      	itt	pl
   d7278:	2201      	movpl	r2, #1
   d727a:	601a      	strpl	r2, [r3, #0]
   d727c:	4b22      	ldr	r3, [pc, #136]	; (d7308 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d727e:	681a      	ldr	r2, [r3, #0]
   d7280:	07d1      	lsls	r1, r2, #31
   d7282:	bf5c      	itt	pl
   d7284:	2201      	movpl	r2, #1
   d7286:	601a      	strpl	r2, [r3, #0]
   d7288:	4b20      	ldr	r3, [pc, #128]	; (d730c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d728a:	681a      	ldr	r2, [r3, #0]
   d728c:	07d2      	lsls	r2, r2, #31
   d728e:	bf5c      	itt	pl
   d7290:	2201      	movpl	r2, #1
   d7292:	601a      	strpl	r2, [r3, #0]
   d7294:	4b1e      	ldr	r3, [pc, #120]	; (d7310 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d7296:	681a      	ldr	r2, [r3, #0]
   d7298:	07d0      	lsls	r0, r2, #31
   d729a:	bf5c      	itt	pl
   d729c:	2201      	movpl	r2, #1
   d729e:	601a      	strpl	r2, [r3, #0]
   d72a0:	4b1c      	ldr	r3, [pc, #112]	; (d7314 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d72a2:	681a      	ldr	r2, [r3, #0]
   d72a4:	07d1      	lsls	r1, r2, #31
   d72a6:	bf5c      	itt	pl
   d72a8:	2201      	movpl	r2, #1
   d72aa:	601a      	strpl	r2, [r3, #0]
   d72ac:	4b1a      	ldr	r3, [pc, #104]	; (d7318 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d72ae:	681a      	ldr	r2, [r3, #0]
   d72b0:	07d2      	lsls	r2, r2, #31
   d72b2:	bf5c      	itt	pl
   d72b4:	2201      	movpl	r2, #1
   d72b6:	601a      	strpl	r2, [r3, #0]
   d72b8:	4b18      	ldr	r3, [pc, #96]	; (d731c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d72ba:	681a      	ldr	r2, [r3, #0]
   d72bc:	07d0      	lsls	r0, r2, #31
   d72be:	bf5c      	itt	pl
   d72c0:	2201      	movpl	r2, #1
   d72c2:	601a      	strpl	r2, [r3, #0]
   d72c4:	4b16      	ldr	r3, [pc, #88]	; (d7320 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d72c6:	681a      	ldr	r2, [r3, #0]
   d72c8:	07d1      	lsls	r1, r2, #31
   d72ca:	bf5c      	itt	pl
   d72cc:	2201      	movpl	r2, #1
   d72ce:	601a      	strpl	r2, [r3, #0]
   d72d0:	4b14      	ldr	r3, [pc, #80]	; (d7324 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d72d2:	681a      	ldr	r2, [r3, #0]
   d72d4:	07d2      	lsls	r2, r2, #31
   d72d6:	bf5c      	itt	pl
   d72d8:	2201      	movpl	r2, #1
   d72da:	601a      	strpl	r2, [r3, #0]
   d72dc:	4b12      	ldr	r3, [pc, #72]	; (d7328 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d72de:	681a      	ldr	r2, [r3, #0]
   d72e0:	07d0      	lsls	r0, r2, #31
   d72e2:	bf5c      	itt	pl
   d72e4:	2201      	movpl	r2, #1
   d72e6:	601a      	strpl	r2, [r3, #0]
   d72e8:	4b10      	ldr	r3, [pc, #64]	; (d732c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d72ea:	681a      	ldr	r2, [r3, #0]
   d72ec:	07d1      	lsls	r1, r2, #31
   d72ee:	bf5c      	itt	pl
   d72f0:	2201      	movpl	r2, #1
   d72f2:	601a      	strpl	r2, [r3, #0]
   d72f4:	4b0e      	ldr	r3, [pc, #56]	; (d7330 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d72f6:	681a      	ldr	r2, [r3, #0]
   d72f8:	07d2      	lsls	r2, r2, #31
   d72fa:	bf5c      	itt	pl
   d72fc:	2201      	movpl	r2, #1
   d72fe:	601a      	strpl	r2, [r3, #0]
   d7300:	4770      	bx	lr
   d7302:	bf00      	nop
   d7304:	2003e79c 	.word	0x2003e79c
   d7308:	2003e798 	.word	0x2003e798
   d730c:	2003e794 	.word	0x2003e794
   d7310:	2003e790 	.word	0x2003e790
   d7314:	2003e78c 	.word	0x2003e78c
   d7318:	2003e788 	.word	0x2003e788
   d731c:	2003e784 	.word	0x2003e784
   d7320:	2003e780 	.word	0x2003e780
   d7324:	2003e77c 	.word	0x2003e77c
   d7328:	2003e778 	.word	0x2003e778
   d732c:	2003e774 	.word	0x2003e774
   d7330:	2003e770 	.word	0x2003e770

000d7334 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d7334:	4b24      	ldr	r3, [pc, #144]	; (d73c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d7336:	681a      	ldr	r2, [r3, #0]
   d7338:	07d0      	lsls	r0, r2, #31
   d733a:	bf5c      	itt	pl
   d733c:	2201      	movpl	r2, #1
   d733e:	601a      	strpl	r2, [r3, #0]
   d7340:	4b22      	ldr	r3, [pc, #136]	; (d73cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d7342:	681a      	ldr	r2, [r3, #0]
   d7344:	07d1      	lsls	r1, r2, #31
   d7346:	bf5c      	itt	pl
   d7348:	2201      	movpl	r2, #1
   d734a:	601a      	strpl	r2, [r3, #0]
   d734c:	4b20      	ldr	r3, [pc, #128]	; (d73d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d734e:	681a      	ldr	r2, [r3, #0]
   d7350:	07d2      	lsls	r2, r2, #31
   d7352:	bf5c      	itt	pl
   d7354:	2201      	movpl	r2, #1
   d7356:	601a      	strpl	r2, [r3, #0]
   d7358:	4b1e      	ldr	r3, [pc, #120]	; (d73d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d735a:	681a      	ldr	r2, [r3, #0]
   d735c:	07d0      	lsls	r0, r2, #31
   d735e:	bf5c      	itt	pl
   d7360:	2201      	movpl	r2, #1
   d7362:	601a      	strpl	r2, [r3, #0]
   d7364:	4b1c      	ldr	r3, [pc, #112]	; (d73d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d7366:	681a      	ldr	r2, [r3, #0]
   d7368:	07d1      	lsls	r1, r2, #31
   d736a:	bf5c      	itt	pl
   d736c:	2201      	movpl	r2, #1
   d736e:	601a      	strpl	r2, [r3, #0]
   d7370:	4b1a      	ldr	r3, [pc, #104]	; (d73dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d7372:	681a      	ldr	r2, [r3, #0]
   d7374:	07d2      	lsls	r2, r2, #31
   d7376:	bf5c      	itt	pl
   d7378:	2201      	movpl	r2, #1
   d737a:	601a      	strpl	r2, [r3, #0]
   d737c:	4b18      	ldr	r3, [pc, #96]	; (d73e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d737e:	681a      	ldr	r2, [r3, #0]
   d7380:	07d0      	lsls	r0, r2, #31
   d7382:	bf5c      	itt	pl
   d7384:	2201      	movpl	r2, #1
   d7386:	601a      	strpl	r2, [r3, #0]
   d7388:	4b16      	ldr	r3, [pc, #88]	; (d73e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d738a:	681a      	ldr	r2, [r3, #0]
   d738c:	07d1      	lsls	r1, r2, #31
   d738e:	bf5c      	itt	pl
   d7390:	2201      	movpl	r2, #1
   d7392:	601a      	strpl	r2, [r3, #0]
   d7394:	4b14      	ldr	r3, [pc, #80]	; (d73e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d7396:	681a      	ldr	r2, [r3, #0]
   d7398:	07d2      	lsls	r2, r2, #31
   d739a:	bf5c      	itt	pl
   d739c:	2201      	movpl	r2, #1
   d739e:	601a      	strpl	r2, [r3, #0]
   d73a0:	4b12      	ldr	r3, [pc, #72]	; (d73ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d73a2:	681a      	ldr	r2, [r3, #0]
   d73a4:	07d0      	lsls	r0, r2, #31
   d73a6:	bf5c      	itt	pl
   d73a8:	2201      	movpl	r2, #1
   d73aa:	601a      	strpl	r2, [r3, #0]
   d73ac:	4b10      	ldr	r3, [pc, #64]	; (d73f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d73ae:	681a      	ldr	r2, [r3, #0]
   d73b0:	07d1      	lsls	r1, r2, #31
   d73b2:	bf5c      	itt	pl
   d73b4:	2201      	movpl	r2, #1
   d73b6:	601a      	strpl	r2, [r3, #0]
   d73b8:	4b0e      	ldr	r3, [pc, #56]	; (d73f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d73ba:	681a      	ldr	r2, [r3, #0]
   d73bc:	07d2      	lsls	r2, r2, #31
   d73be:	bf5c      	itt	pl
   d73c0:	2201      	movpl	r2, #1
   d73c2:	601a      	strpl	r2, [r3, #0]
   d73c4:	4770      	bx	lr
   d73c6:	bf00      	nop
   d73c8:	2003e7cc 	.word	0x2003e7cc
   d73cc:	2003e7c8 	.word	0x2003e7c8
   d73d0:	2003e7c4 	.word	0x2003e7c4
   d73d4:	2003e7c0 	.word	0x2003e7c0
   d73d8:	2003e7bc 	.word	0x2003e7bc
   d73dc:	2003e7b8 	.word	0x2003e7b8
   d73e0:	2003e7b4 	.word	0x2003e7b4
   d73e4:	2003e7b0 	.word	0x2003e7b0
   d73e8:	2003e7ac 	.word	0x2003e7ac
   d73ec:	2003e7a8 	.word	0x2003e7a8
   d73f0:	2003e7a4 	.word	0x2003e7a4
   d73f4:	2003e7a0 	.word	0x2003e7a0

000d73f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d73f8:	4b18      	ldr	r3, [pc, #96]	; (d745c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d73fa:	681a      	ldr	r2, [r3, #0]
   d73fc:	07d1      	lsls	r1, r2, #31
   d73fe:	bf5c      	itt	pl
   d7400:	2201      	movpl	r2, #1
   d7402:	601a      	strpl	r2, [r3, #0]
   d7404:	4b16      	ldr	r3, [pc, #88]	; (d7460 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d7406:	681a      	ldr	r2, [r3, #0]
   d7408:	07d2      	lsls	r2, r2, #31
   d740a:	bf5c      	itt	pl
   d740c:	2201      	movpl	r2, #1
   d740e:	601a      	strpl	r2, [r3, #0]
   d7410:	4b14      	ldr	r3, [pc, #80]	; (d7464 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d7412:	681a      	ldr	r2, [r3, #0]
   d7414:	07d0      	lsls	r0, r2, #31
   d7416:	bf5c      	itt	pl
   d7418:	2201      	movpl	r2, #1
   d741a:	601a      	strpl	r2, [r3, #0]
   d741c:	4b12      	ldr	r3, [pc, #72]	; (d7468 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d741e:	681a      	ldr	r2, [r3, #0]
   d7420:	07d1      	lsls	r1, r2, #31
   d7422:	bf5c      	itt	pl
   d7424:	2201      	movpl	r2, #1
   d7426:	601a      	strpl	r2, [r3, #0]
   d7428:	4b10      	ldr	r3, [pc, #64]	; (d746c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d742a:	681a      	ldr	r2, [r3, #0]
   d742c:	07d2      	lsls	r2, r2, #31
   d742e:	bf5c      	itt	pl
   d7430:	2201      	movpl	r2, #1
   d7432:	601a      	strpl	r2, [r3, #0]
   d7434:	4b0e      	ldr	r3, [pc, #56]	; (d7470 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d7436:	681a      	ldr	r2, [r3, #0]
   d7438:	07d0      	lsls	r0, r2, #31
   d743a:	bf5c      	itt	pl
   d743c:	2201      	movpl	r2, #1
   d743e:	601a      	strpl	r2, [r3, #0]
   d7440:	4b0c      	ldr	r3, [pc, #48]	; (d7474 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d7442:	681a      	ldr	r2, [r3, #0]
   d7444:	07d1      	lsls	r1, r2, #31
   d7446:	bf5c      	itt	pl
   d7448:	2201      	movpl	r2, #1
   d744a:	601a      	strpl	r2, [r3, #0]
   d744c:	4b0a      	ldr	r3, [pc, #40]	; (d7478 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d744e:	681a      	ldr	r2, [r3, #0]
   d7450:	07d2      	lsls	r2, r2, #31
   d7452:	bf5c      	itt	pl
   d7454:	2201      	movpl	r2, #1
   d7456:	601a      	strpl	r2, [r3, #0]
   d7458:	4770      	bx	lr
   d745a:	bf00      	nop
   d745c:	2003e7ec 	.word	0x2003e7ec
   d7460:	2003e7e8 	.word	0x2003e7e8
   d7464:	2003e7e4 	.word	0x2003e7e4
   d7468:	2003e7e0 	.word	0x2003e7e0
   d746c:	2003e7dc 	.word	0x2003e7dc
   d7470:	2003e7d8 	.word	0x2003e7d8
   d7474:	2003e7d4 	.word	0x2003e7d4
   d7478:	2003e7d0 	.word	0x2003e7d0

000d747c <__cxa_atexit>:
   d747c:	b510      	push	{r4, lr}
   d747e:	4c05      	ldr	r4, [pc, #20]	; (d7494 <__cxa_atexit+0x18>)
   d7480:	4613      	mov	r3, r2
   d7482:	b12c      	cbz	r4, d7490 <__cxa_atexit+0x14>
   d7484:	460a      	mov	r2, r1
   d7486:	4601      	mov	r1, r0
   d7488:	2002      	movs	r0, #2
   d748a:	f3af 8000 	nop.w
   d748e:	bd10      	pop	{r4, pc}
   d7490:	4620      	mov	r0, r4
   d7492:	bd10      	pop	{r4, pc}
   d7494:	00000000 	.word	0x00000000

000d7498 <memcpy>:
   d7498:	b510      	push	{r4, lr}
   d749a:	1e43      	subs	r3, r0, #1
   d749c:	440a      	add	r2, r1
   d749e:	4291      	cmp	r1, r2
   d74a0:	d004      	beq.n	d74ac <memcpy+0x14>
   d74a2:	f811 4b01 	ldrb.w	r4, [r1], #1
   d74a6:	f803 4f01 	strb.w	r4, [r3, #1]!
   d74aa:	e7f8      	b.n	d749e <memcpy+0x6>
   d74ac:	bd10      	pop	{r4, pc}

000d74ae <memmove>:
   d74ae:	4288      	cmp	r0, r1
   d74b0:	b510      	push	{r4, lr}
   d74b2:	eb01 0302 	add.w	r3, r1, r2
   d74b6:	d801      	bhi.n	d74bc <memmove+0xe>
   d74b8:	1e42      	subs	r2, r0, #1
   d74ba:	e00b      	b.n	d74d4 <memmove+0x26>
   d74bc:	4298      	cmp	r0, r3
   d74be:	d2fb      	bcs.n	d74b8 <memmove+0xa>
   d74c0:	1881      	adds	r1, r0, r2
   d74c2:	1ad2      	subs	r2, r2, r3
   d74c4:	42d3      	cmn	r3, r2
   d74c6:	d004      	beq.n	d74d2 <memmove+0x24>
   d74c8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d74cc:	f801 4d01 	strb.w	r4, [r1, #-1]!
   d74d0:	e7f8      	b.n	d74c4 <memmove+0x16>
   d74d2:	bd10      	pop	{r4, pc}
   d74d4:	4299      	cmp	r1, r3
   d74d6:	d004      	beq.n	d74e2 <memmove+0x34>
   d74d8:	f811 4b01 	ldrb.w	r4, [r1], #1
   d74dc:	f802 4f01 	strb.w	r4, [r2, #1]!
   d74e0:	e7f8      	b.n	d74d4 <memmove+0x26>
   d74e2:	bd10      	pop	{r4, pc}

000d74e4 <memset>:
   d74e4:	4402      	add	r2, r0
   d74e6:	4603      	mov	r3, r0
   d74e8:	4293      	cmp	r3, r2
   d74ea:	d002      	beq.n	d74f2 <memset+0xe>
   d74ec:	f803 1b01 	strb.w	r1, [r3], #1
   d74f0:	e7fa      	b.n	d74e8 <memset+0x4>
   d74f2:	4770      	bx	lr

000d74f4 <srand>:
   d74f4:	b538      	push	{r3, r4, r5, lr}
   d74f6:	4b12      	ldr	r3, [pc, #72]	; (d7540 <srand+0x4c>)
   d74f8:	681c      	ldr	r4, [r3, #0]
   d74fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d74fc:	4605      	mov	r5, r0
   d74fe:	b9d3      	cbnz	r3, d7536 <srand+0x42>
   d7500:	2018      	movs	r0, #24
   d7502:	f7fd fc05 	bl	d4d10 <malloc>
   d7506:	f243 330e 	movw	r3, #13070	; 0x330e
   d750a:	63a0      	str	r0, [r4, #56]	; 0x38
   d750c:	8003      	strh	r3, [r0, #0]
   d750e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d7512:	8043      	strh	r3, [r0, #2]
   d7514:	f241 2334 	movw	r3, #4660	; 0x1234
   d7518:	8083      	strh	r3, [r0, #4]
   d751a:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d751e:	80c3      	strh	r3, [r0, #6]
   d7520:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d7524:	8103      	strh	r3, [r0, #8]
   d7526:	2305      	movs	r3, #5
   d7528:	8143      	strh	r3, [r0, #10]
   d752a:	230b      	movs	r3, #11
   d752c:	8183      	strh	r3, [r0, #12]
   d752e:	2201      	movs	r2, #1
   d7530:	2300      	movs	r3, #0
   d7532:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d7536:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7538:	2200      	movs	r2, #0
   d753a:	611d      	str	r5, [r3, #16]
   d753c:	615a      	str	r2, [r3, #20]
   d753e:	bd38      	pop	{r3, r4, r5, pc}
   d7540:	2003e47c 	.word	0x2003e47c

000d7544 <strchr>:
   d7544:	b2c9      	uxtb	r1, r1
   d7546:	4603      	mov	r3, r0
   d7548:	f810 2b01 	ldrb.w	r2, [r0], #1
   d754c:	b11a      	cbz	r2, d7556 <strchr+0x12>
   d754e:	4291      	cmp	r1, r2
   d7550:	d1f9      	bne.n	d7546 <strchr+0x2>
   d7552:	4618      	mov	r0, r3
   d7554:	4770      	bx	lr
   d7556:	2900      	cmp	r1, #0
   d7558:	bf0c      	ite	eq
   d755a:	4618      	moveq	r0, r3
   d755c:	2000      	movne	r0, #0
   d755e:	4770      	bx	lr

000d7560 <strchrnul>:
   d7560:	b510      	push	{r4, lr}
   d7562:	4604      	mov	r4, r0
   d7564:	f7ff ffee 	bl	d7544 <strchr>
   d7568:	b918      	cbnz	r0, d7572 <strchrnul+0x12>
   d756a:	4620      	mov	r0, r4
   d756c:	f000 f827 	bl	d75be <strlen>
   d7570:	4420      	add	r0, r4
   d7572:	bd10      	pop	{r4, pc}

000d7574 <strcmp>:
   d7574:	f810 2b01 	ldrb.w	r2, [r0], #1
   d7578:	f811 3b01 	ldrb.w	r3, [r1], #1
   d757c:	2a01      	cmp	r2, #1
   d757e:	bf28      	it	cs
   d7580:	429a      	cmpcs	r2, r3
   d7582:	d0f7      	beq.n	d7574 <strcmp>
   d7584:	1ad0      	subs	r0, r2, r3
   d7586:	4770      	bx	lr

000d7588 <strdup>:
   d7588:	4b02      	ldr	r3, [pc, #8]	; (d7594 <strdup+0xc>)
   d758a:	4601      	mov	r1, r0
   d758c:	6818      	ldr	r0, [r3, #0]
   d758e:	f000 b803 	b.w	d7598 <_strdup_r>
   d7592:	bf00      	nop
   d7594:	2003e47c 	.word	0x2003e47c

000d7598 <_strdup_r>:
   d7598:	b570      	push	{r4, r5, r6, lr}
   d759a:	4606      	mov	r6, r0
   d759c:	4608      	mov	r0, r1
   d759e:	460c      	mov	r4, r1
   d75a0:	f000 f80d 	bl	d75be <strlen>
   d75a4:	1c45      	adds	r5, r0, #1
   d75a6:	4629      	mov	r1, r5
   d75a8:	4630      	mov	r0, r6
   d75aa:	f7fd fbe1 	bl	d4d70 <_malloc_r>
   d75ae:	4606      	mov	r6, r0
   d75b0:	b118      	cbz	r0, d75ba <_strdup_r+0x22>
   d75b2:	462a      	mov	r2, r5
   d75b4:	4621      	mov	r1, r4
   d75b6:	f7ff ff6f 	bl	d7498 <memcpy>
   d75ba:	4630      	mov	r0, r6
   d75bc:	bd70      	pop	{r4, r5, r6, pc}

000d75be <strlen>:
   d75be:	4603      	mov	r3, r0
   d75c0:	f813 2b01 	ldrb.w	r2, [r3], #1
   d75c4:	2a00      	cmp	r2, #0
   d75c6:	d1fb      	bne.n	d75c0 <strlen+0x2>
   d75c8:	1a18      	subs	r0, r3, r0
   d75ca:	3801      	subs	r0, #1
   d75cc:	4770      	bx	lr

000d75ce <strncmp>:
   d75ce:	b530      	push	{r4, r5, lr}
   d75d0:	b182      	cbz	r2, d75f4 <strncmp+0x26>
   d75d2:	1e45      	subs	r5, r0, #1
   d75d4:	3901      	subs	r1, #1
   d75d6:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d75da:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d75de:	42a3      	cmp	r3, r4
   d75e0:	d106      	bne.n	d75f0 <strncmp+0x22>
   d75e2:	43ec      	mvns	r4, r5
   d75e4:	4414      	add	r4, r2
   d75e6:	42e0      	cmn	r0, r4
   d75e8:	d001      	beq.n	d75ee <strncmp+0x20>
   d75ea:	2b00      	cmp	r3, #0
   d75ec:	d1f3      	bne.n	d75d6 <strncmp+0x8>
   d75ee:	461c      	mov	r4, r3
   d75f0:	1b18      	subs	r0, r3, r4
   d75f2:	bd30      	pop	{r4, r5, pc}
   d75f4:	4610      	mov	r0, r2
   d75f6:	bd30      	pop	{r4, r5, pc}

000d75f8 <strrchr>:
   d75f8:	b538      	push	{r3, r4, r5, lr}
   d75fa:	4603      	mov	r3, r0
   d75fc:	460d      	mov	r5, r1
   d75fe:	b141      	cbz	r1, d7612 <strrchr+0x1a>
   d7600:	2400      	movs	r4, #0
   d7602:	4629      	mov	r1, r5
   d7604:	4618      	mov	r0, r3
   d7606:	f7ff ff9d 	bl	d7544 <strchr>
   d760a:	b130      	cbz	r0, d761a <strrchr+0x22>
   d760c:	1c43      	adds	r3, r0, #1
   d760e:	4604      	mov	r4, r0
   d7610:	e7f7      	b.n	d7602 <strrchr+0xa>
   d7612:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d7616:	f7ff bf95 	b.w	d7544 <strchr>
   d761a:	4620      	mov	r0, r4
   d761c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d7620 <_strtol_r>:
   d7620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7624:	4680      	mov	r8, r0
   d7626:	4840      	ldr	r0, [pc, #256]	; (d7728 <_strtol_r+0x108>)
   d7628:	f8d0 9000 	ldr.w	r9, [r0]
   d762c:	460f      	mov	r7, r1
   d762e:	463d      	mov	r5, r7
   d7630:	f815 4b01 	ldrb.w	r4, [r5], #1
   d7634:	eb09 0004 	add.w	r0, r9, r4
   d7638:	7840      	ldrb	r0, [r0, #1]
   d763a:	f000 0008 	and.w	r0, r0, #8
   d763e:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d7642:	b108      	cbz	r0, d7648 <_strtol_r+0x28>
   d7644:	462f      	mov	r7, r5
   d7646:	e7f2      	b.n	d762e <_strtol_r+0xe>
   d7648:	2c2d      	cmp	r4, #45	; 0x2d
   d764a:	d103      	bne.n	d7654 <_strtol_r+0x34>
   d764c:	1cbd      	adds	r5, r7, #2
   d764e:	787c      	ldrb	r4, [r7, #1]
   d7650:	2601      	movs	r6, #1
   d7652:	e003      	b.n	d765c <_strtol_r+0x3c>
   d7654:	2c2b      	cmp	r4, #43	; 0x2b
   d7656:	bf04      	itt	eq
   d7658:	787c      	ldrbeq	r4, [r7, #1]
   d765a:	1cbd      	addeq	r5, r7, #2
   d765c:	b113      	cbz	r3, d7664 <_strtol_r+0x44>
   d765e:	2b10      	cmp	r3, #16
   d7660:	d10a      	bne.n	d7678 <_strtol_r+0x58>
   d7662:	e05b      	b.n	d771c <_strtol_r+0xfc>
   d7664:	2c30      	cmp	r4, #48	; 0x30
   d7666:	d157      	bne.n	d7718 <_strtol_r+0xf8>
   d7668:	7828      	ldrb	r0, [r5, #0]
   d766a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d766e:	2858      	cmp	r0, #88	; 0x58
   d7670:	d14d      	bne.n	d770e <_strtol_r+0xee>
   d7672:	786c      	ldrb	r4, [r5, #1]
   d7674:	2310      	movs	r3, #16
   d7676:	3502      	adds	r5, #2
   d7678:	2e00      	cmp	r6, #0
   d767a:	bf14      	ite	ne
   d767c:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d7680:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d7684:	2700      	movs	r7, #0
   d7686:	fbbc faf3 	udiv	sl, ip, r3
   d768a:	4638      	mov	r0, r7
   d768c:	fb03 cc1a 	mls	ip, r3, sl, ip
   d7690:	eb09 0e04 	add.w	lr, r9, r4
   d7694:	f89e e001 	ldrb.w	lr, [lr, #1]
   d7698:	f01e 0f04 	tst.w	lr, #4
   d769c:	d001      	beq.n	d76a2 <_strtol_r+0x82>
   d769e:	3c30      	subs	r4, #48	; 0x30
   d76a0:	e00b      	b.n	d76ba <_strtol_r+0x9a>
   d76a2:	f01e 0e03 	ands.w	lr, lr, #3
   d76a6:	d01b      	beq.n	d76e0 <_strtol_r+0xc0>
   d76a8:	f1be 0f01 	cmp.w	lr, #1
   d76ac:	bf0c      	ite	eq
   d76ae:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d76b2:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d76b6:	ebce 0404 	rsb	r4, lr, r4
   d76ba:	42a3      	cmp	r3, r4
   d76bc:	dd10      	ble.n	d76e0 <_strtol_r+0xc0>
   d76be:	f1b7 3fff 	cmp.w	r7, #4294967295
   d76c2:	d00a      	beq.n	d76da <_strtol_r+0xba>
   d76c4:	4550      	cmp	r0, sl
   d76c6:	d806      	bhi.n	d76d6 <_strtol_r+0xb6>
   d76c8:	d101      	bne.n	d76ce <_strtol_r+0xae>
   d76ca:	4564      	cmp	r4, ip
   d76cc:	dc03      	bgt.n	d76d6 <_strtol_r+0xb6>
   d76ce:	fb03 4000 	mla	r0, r3, r0, r4
   d76d2:	2701      	movs	r7, #1
   d76d4:	e001      	b.n	d76da <_strtol_r+0xba>
   d76d6:	f04f 37ff 	mov.w	r7, #4294967295
   d76da:	f815 4b01 	ldrb.w	r4, [r5], #1
   d76de:	e7d7      	b.n	d7690 <_strtol_r+0x70>
   d76e0:	1c7b      	adds	r3, r7, #1
   d76e2:	d10c      	bne.n	d76fe <_strtol_r+0xde>
   d76e4:	2e00      	cmp	r6, #0
   d76e6:	f04f 0322 	mov.w	r3, #34	; 0x22
   d76ea:	bf14      	ite	ne
   d76ec:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d76f0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d76f4:	f8c8 3000 	str.w	r3, [r8]
   d76f8:	b92a      	cbnz	r2, d7706 <_strtol_r+0xe6>
   d76fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d76fe:	b106      	cbz	r6, d7702 <_strtol_r+0xe2>
   d7700:	4240      	negs	r0, r0
   d7702:	b172      	cbz	r2, d7722 <_strtol_r+0x102>
   d7704:	b107      	cbz	r7, d7708 <_strtol_r+0xe8>
   d7706:	1e69      	subs	r1, r5, #1
   d7708:	6011      	str	r1, [r2, #0]
   d770a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d770e:	2430      	movs	r4, #48	; 0x30
   d7710:	2b00      	cmp	r3, #0
   d7712:	d1b1      	bne.n	d7678 <_strtol_r+0x58>
   d7714:	2308      	movs	r3, #8
   d7716:	e7af      	b.n	d7678 <_strtol_r+0x58>
   d7718:	230a      	movs	r3, #10
   d771a:	e7ad      	b.n	d7678 <_strtol_r+0x58>
   d771c:	2c30      	cmp	r4, #48	; 0x30
   d771e:	d0a3      	beq.n	d7668 <_strtol_r+0x48>
   d7720:	e7aa      	b.n	d7678 <_strtol_r+0x58>
   d7722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7726:	bf00      	nop
   d7728:	2003e418 	.word	0x2003e418

000d772c <strtol>:
   d772c:	4613      	mov	r3, r2
   d772e:	460a      	mov	r2, r1
   d7730:	4601      	mov	r1, r0
   d7732:	4802      	ldr	r0, [pc, #8]	; (d773c <strtol+0x10>)
   d7734:	6800      	ldr	r0, [r0, #0]
   d7736:	f7ff bf73 	b.w	d7620 <_strtol_r>
   d773a:	bf00      	nop
   d773c:	2003e47c 	.word	0x2003e47c

000d7740 <dynalib_user>:
   d7740:	000d401d 000d4059 000d4085 000d4089     .@..Y@...@...@..
   d7750:	00000000                                ....

000d7754 <_ZTVN5spark10LogHandlerE>:
	...
   d7764:	000d40a5 000d40c9                       .@...@..

000d776c <_ZTVN5spark16SerialLogHandlerE>:
	...
   d7774:	000d40e5 000d4119 000d5d39 000d40cb     .@...A..9]...@..
   d7784:	27756f79 6c206572 69706f6f 0000676e     you're looping..
   d7794:	00b80b00 72d00700 73696765 5f726574     .......register_
   d77a4:	64616572 7165725f 74736575 5d64255b     read_request[%d]
   d77b4:	30203d20 32302578 75530058 73656363      = 0x%02X.Succes
   d77c4:	6c756673 7220796c 20646165 6d6f7266     sfully read from
   d77d4:	67657220 65747369 64612072 73657264      register addres
   d77e4:	203d2073 30257830 003a5832 69676572     s = 0x%02X:.regi
   d77f4:	72657473 7461645f 64255b61 203d205d     ster_data[%d] = 
   d7804:	30257830 46005832 656c6961 6f742064     0x%02X.Failed to
   d7814:	61657220 72662064 72206d6f 73696765      read from regis
   d7824:	20726574 72646461 20737365 7830203d     ter address = 0x
   d7834:	58323025 67657200 65747369 65725f72     %02X.register_re
   d7844:	725f6461 6f707365 5b65736e 205d6425     ad_response[%d] 
   d7854:	7830203d 58323025 74634100 206c6175     = 0x%02X.Actual 
   d7864:	74617473 72207375 20646165 7830203d     status read = 0x
   d7874:	58383025 73654400 64657269 61747320     %08X.Desired sta
   d7884:	20737574 30257830 72205838 69656365     tus 0x%08X recei
   d7894:	00646576 74696157 20676e69 20726f66     ved.Waiting for 
   d78a4:	69736564 20646572 74617473 66207375     desired status f
   d78b4:	3a67616c 25783020 00583830 656d6954     lag: 0x%08X.Time
   d78c4:	2074756f 2520666f 696d2064 73696c6c     out of %d millis
   d78d4:	6e6f6365 202c7364 69736564 20646572     econds, desired 
   d78e4:	74617473 30207375 38302578 6f6e2058     status 0x%08X no
   d78f4:	6f662074 00646e75 69676572 72657473     t found.register
   d7904:	6972775f 725f6574 65757165 255b7473     _write_request[%
   d7914:	3d205d64 25783020 00583230 63637553     d] = 0x%02X.Succ
   d7924:	66737365 796c6c75 6f727720 74206574     essfully wrote t
   d7934:	6572206f 74736967 61207265 65726464     o register addre
   d7944:	3d207373 25783020 00583230 6c696146     ss = 0x%02X.Fail
   d7954:	74206465 7277206f 20657469 72206f74     ed to write to r
   d7964:	73696765 20726574 72646461 20737365     egister address 
   d7974:	7830203d 58323025 67657200 65747369     = 0x%02X.registe
   d7984:	72775f72 5f657469 70736572 65736e6f     r_write_response
   d7994:	5d64255b 30203d20 32302578 6e450058     [%d] = 0x%02X.En
   d79a4:	65726574 4d582064 20323331 75746553     tered XM132 Setu
   d79b4:	53002070 20706f74 76726553 00656369     p .Stop Service.
   d79c4:	61656c43 72652072 73726f72 646e6120     Clear errors and
   d79d4:	61747320 20737574 73746962 74655300      status bits.Set
   d79e4:	65727020 636e6573 6f6d2065 53006564      presence mode.S
   d79f4:	72207465 65676e61 61747320 72207472     et range start r
   d7a04:	73696765 20726574 65646f6d 74655300     egister mode.Set
   d7a14:	72687420 6f687365 5300646c 69207465      threshold.Set i
   d7a24:	7265746e 61726620 7420656d 20656d69     nter frame time 
   d7a34:	736e6f63 74530074 20747261 76726573     const.Start serv
   d7a44:	00656369 63656843 7473206b 73757461     ice.Check status
   d7a54:	67657220 65747369 6f662072 65732072      register for se
   d7a64:	63697672 72632065 69746165 4d006e6f     rvice creation.M
   d7a74:	6c75646f 72632065 65746165 6e612064     odule created an
   d7a84:	63612064 61766974 00646574 75646f4d     d activated.Modu
   d7a94:	6620656c 656c6961 6f742064 74636120     le failed to act
   d7aa4:	74617669 53002165 74726174 20666f20     ivate!.Start of 
   d7ab4:	65657773 6d282070 3d20296d 00752520     sweep (mm) = %u.
   d7ac4:	676e654c 6f206874 77732066 20706565     Length of sweep 
   d7ad4:	296d6d28 25203d20 4d580075 20323331     (mm) = %u.XM132 
   d7ae4:	75746573 6f632070 656c706d 43006574     setup complete.C
   d7af4:	6b636568 61747320 20737574 69676572     heck status regi
   d7b04:	72657473 726f6620 74616420 65722061     ster for data re
   d7b14:	00796461 61746144 61655220 44007964     ady.Data Ready.D
   d7b24:	20617461 20746f4e 64616552 65440079     ata Not Ready.De
   d7b34:	74636574 206e6f69 7525203d 6f635300     tection = %u.Sco
   d7b44:	3d206572 00752520 74736944 65636e61     re = %u.Distance
   d7b54:	6d632820 203d2029 7b007525 74656422      (cm) = %u.{"det
   d7b64:	69746365 3a226e6f 22752522 7322202c     ection":"%u", "s
   d7b74:	65726f63 25223a22 202c2275 73696422     core":"%u", "dis
   d7b84:	636e6174 223a2265 7d227525 314d5800     tance":"%u"}.XM1
   d7b94:	00003233                                32..

000d7b98 <_ZTVN5spark13EthernetClassE>:
	...
   d7ba0:	000d4ddf 000d4dd5 000d4dcb 000d4dc1     .M...M...M...M..
   d7bb0:	000d4db5 000d4da9 000d4d9d 000d4d95     .M...M...M...M..
   d7bc0:	000d4d8b 000d4d81 000d6d41              .M...M..Am..

000d7bcc <_ZTVN5spark16JSONStreamWriterE>:
	...
   d7bd4:	000d5115 000d513b 000d50ef 000d6e4f     .Q..;Q...P..On..

000d7be4 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   d7bec:	000d5591 000d55a5 000d5eed 000d50f7     .U...U...^...P..
   d7bfc:	64756162 72655300 006c6169 69726553     baud.Serial.Seri
   d7c0c:	00316c61 65707974 72617000 63006d61     al1.type.param.c
   d7c1c:	6900646d 6e680064 74730064 66006d72     md.id.hnd.strm.f
   d7c2c:	00746c69 006c766c 48646461 6c646e61     ilt.lvl.addHandl
   d7c3c:	72007265 766f6d65 6e614865 72656c64     er.removeHandler
   d7c4c:	756e6500 6e61486d 72656c64 534a0073     .enumHandlers.JS
   d7c5c:	74534e4f 6d616572 48676f4c 6c646e61     ONStreamLogHandl
   d7c6c:	61007265 25007070 75303130 205d0020     er.app.%010u .] 
   d7c7c:	00642500 2800202c 00203a29 63005b20     .%d., .(): . [.c
   d7c8c:	2065646f 2500203d 65640069 6c696174     ode = .%i.detail
   d7c9c:	203d2073 000a0d00 66006e6c 6f63006e     s = ....ln.fn.co
   d7cac:	64006564 69617465 6f6e006c 7400656e     de.detail.none.t
   d7cbc:	65636172 666e6900 6177006f 65006e72     race.info.warn.e
   d7ccc:	726f7272 6e617000 61006369 00006c6c     rror.panic.all..

000d7cdc <_ZTVN5spark16StreamLogHandlerE>:
	...
   d7ce4:	000d5565 000d557d 000d5d39 000d40cb     eU..}U..9]...@..

000d7cf4 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   d7cfc:	000d5113 000d5149 000d5c61 000d50f9     .Q..IQ..a\...P..

000d7d0c <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   d7d14:	000d5111 000d5157 000d54a9 000d5165     .Q..WQ...T..eQ..
   d7d24:	2b25005a 3a643330 75323025 2d592500     Z.%+03d:%02u.%Y-
   d7d34:	252d6d25 48255464 3a4d253a 7a255325     %m-%dT%H:%M:%S%z
   d7d44:	63736100 656d6974 00000000              .asctime....

000d7d50 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d7d58:	000d61e9 000d61ef 000d6233 000d61fd     .a...a..3b...a..
   d7d68:	000d61eb                                .a..

000d7d6c <_ZTV9IPAddress>:
	...
   d7d74:	000d6789 000d6779 000d677b              .g..yg..{g..

000d7d80 <_ZTV9USBSerial>:
	...
   d7d88:	000d6861 000d68b1 000d68bf 000d4fbd     ah...h...h...O..
   d7d98:	000d689d 000d6863 000d6879 000d68ab     .h..ch..yh...h..
   d7da8:	000d688f 000d685d                       .h..]h..

000d7db0 <_ZTV11USARTSerial>:
	...
   d7db8:	000d6975 000d69c5 000d69d3 000d4fbd     ui...i...i...O..
   d7dc8:	000d6989 000d69ab 000d6997 000d69bf     .i...i...i...i..
   d7dd8:	000d6977 000d697b                       wi..{i..

000d7de0 <_ZTVN5spark9MeshClassE>:
	...
   d7de8:	000d6b3f 000d6b35 000d6b2b 000d6b21     ?k..5k..+k..!k..
   d7df8:	000d6b15 000d6b09 000d6afd 000d6af5     .k...k...j...j..
   d7e08:	000d6aeb 000d6ae1 000d6d41              .j...j..Am..

000d7e14 <_ZTVN5spark9WiFiClassE>:
	...
   d7e1c:	000d6cbb 000d6cb1 000d6ca7 000d6c5d     .l...l...l..]l..
   d7e2c:	000d6c9b 000d6c8f 000d6c83 000d6c7b     .l...l...l..{l..
   d7e3c:	000d6c71 000d6c67 000d6d41              ql..gl..Am..

000d7e48 <_ZTVN5spark12NetworkClassE>:
	...
   d7e50:	000d6cd9 000d6ce3 000d6ced 000d6cf7     .l...l...l...l..
   d7e60:	000d6d01 000d6d0d 000d6d19 000d6d25     .m...m...m..%m..
   d7e70:	000d6d2d 000d6d37 000d6d41 00302e30     -m..7m..Am..0.0.
   d7e80:	736c6166 72740065 25006575 666c2a2e     false.true.%.*lf
   d7e90:	00672500 6c6c756e 30257500 00007834              .%g.null.u%04x.

000d7e9f <_ZSt7nothrow>:
	...

000d7ea0 <_ctype_>:
   d7ea0:	20202000 20202020 28282020 20282828     .         ((((( 
   d7eb0:	20202020 20202020 20202020 20202020                     
   d7ec0:	10108820 10101010 10101010 10101010      ...............
   d7ed0:	04040410 04040404 10040404 10101010     ................
   d7ee0:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d7ef0:	01010101 01010101 01010101 10101010     ................
   d7f00:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d7f10:	02020202 02020202 02020202 10101010     ................
   d7f20:	00000020 00000000 00000000 00000000      ...............
	...

000d7fa4 <__sf_fake_stdin>:
	...

000d7fc4 <__sf_fake_stdout>:
	...

000d7fe4 <__sf_fake_stderr>:
	...
   d8004:	00000043                                         C.

000d8006 <link_const_variable_data_end>:
	...

000d8008 <link_constructors_location>:
   d8008:	000d4291 	.word	0x000d4291
   d800c:	000d4989 	.word	0x000d4989
   d8010:	000d4de9 	.word	0x000d4de9
   d8014:	000d4dfd 	.word	0x000d4dfd
   d8018:	000d4f95 	.word	0x000d4f95
   d801c:	000d5d29 	.word	0x000d5d29
   d8020:	000d6065 	.word	0x000d6065
   d8024:	000d60bd 	.word	0x000d60bd
   d8028:	000d6c0d 	.word	0x000d6c0d
   d802c:	000d6cc5 	.word	0x000d6cc5
   d8030:	000d6e0d 	.word	0x000d6e0d
   d8034:	000d71ed 	.word	0x000d71ed
   d8038:	000d7271 	.word	0x000d7271
   d803c:	000d7335 	.word	0x000d7335
   d8040:	000d73f9 	.word	0x000d73f9

000d8044 <link_constructors_end>:
	...
