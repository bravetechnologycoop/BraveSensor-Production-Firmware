
c:/Users/tlelena/Brave/BraveSensor-Production-Firmware/target/1.5.2/boron/BraveSensor-Production-Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006f64  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000daf80  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000098  2003e1c4  000daf84  0001e1c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000594  2003e25c  2003e25c  0002e25c  2**2
                  ALLOC
  6 .module_info_suffix 0000002c  000db01c  000db01c  0002b01c  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_crc 00000004  000db048  000db048  0002b048  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0014a4ca  00000000  00000000  0002b04c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00017808  00000000  00000000  00175516  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002540a  00000000  00000000  0018cd1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002fb0  00000000  00000000  001b2128  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00005828  00000000  00000000  001b50d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003da86  00000000  00000000  001ba900  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00038921  00000000  00000000  001f8386  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0011183c  00000000  00000000  00230ca7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000ecc8  00000000  00000000  003424e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f005 fde2 	bl	d9bf6 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f005 fe02 	bl	d9c42 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e1c4 	.word	0x2003e1c4
   d4048:	000daf84 	.word	0x000daf84
   d404c:	2003e25c 	.word	0x2003e25c
   d4050:	2003e25c 	.word	0x2003e25c
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f004 f8c7 	bl	d81ec <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000daf7c 	.word	0x000daf7c
   d4080:	000daf30 	.word	0x000daf30

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 bac4 	b.w	d4610 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fadf 	bl	d464c <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f004 b86d 	b.w	d8170 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f002 ba13 	b.w	d64c0 <malloc>

000d409a <_ZdlPv>:
   d409a:	f002 ba19 	b.w	d64d0 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f002 ba17 	b.w	d64d0 <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f002 f92c 	bl	d6308 <panic_>
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d5f9d 	.word	0x000d5f9d

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d40c8:	b40e      	push	{r1, r2, r3}
   d40ca:	b500      	push	{lr}
   d40cc:	b08c      	sub	sp, #48	; 0x30
   d40ce:	aa0d      	add	r2, sp, #52	; 0x34
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d40d0:	2320      	movs	r3, #32
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d40d2:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list args;
    va_start(args, fmt);
   d40d6:	9203      	str	r2, [sp, #12]

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d40d8:	e88d 0006 	stmia.w	sp, {r1, r2}
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d40dc:	9304      	str	r3, [sp, #16]
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d40de:	6801      	ldr	r1, [r0, #0]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d40e0:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d40e2:	aa04      	add	r2, sp, #16
   d40e4:	201e      	movs	r0, #30
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d40e6:	9305      	str	r3, [sp, #20]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d40e8:	f002 f91e 	bl	d6328 <log_message_v>
inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
    va_end(args);
}
   d40ec:	b00c      	add	sp, #48	; 0x30
   d40ee:	f85d eb04 	ldr.w	lr, [sp], #4
   d40f2:	b003      	add	sp, #12
   d40f4:	4770      	bx	lr

000d40f6 <_ZNK5spark6Logger4warnEPKcz>:

inline void spark::Logger::warn(const char *fmt, ...) const {
   d40f6:	b40e      	push	{r1, r2, r3}
   d40f8:	b500      	push	{lr}
   d40fa:	b08c      	sub	sp, #48	; 0x30
   d40fc:	aa0d      	add	r2, sp, #52	; 0x34
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d40fe:	2320      	movs	r3, #32
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
    va_end(args);
}

inline void spark::Logger::warn(const char *fmt, ...) const {
   d4100:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list args;
    va_start(args, fmt);
   d4104:	9203      	str	r2, [sp, #12]

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4106:	e88d 0006 	stmia.w	sp, {r1, r2}
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d410a:	9304      	str	r3, [sp, #16]
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d410c:	6801      	ldr	r1, [r0, #0]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d410e:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4110:	aa04      	add	r2, sp, #16
   d4112:	2028      	movs	r0, #40	; 0x28
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d4114:	9305      	str	r3, [sp, #20]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4116:	f002 f907 	bl	d6328 <log_message_v>
inline void spark::Logger::warn(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_WARN, fmt, args);
    va_end(args);
}
   d411a:	b00c      	add	sp, #48	; 0x30
   d411c:	f85d eb04 	ldr.w	lr, [sp], #4
   d4120:	b003      	add	sp, #12
   d4122:	4770      	bx	lr

000d4124 <_Z13setupWatchdogv>:
// Period of servicing watchdog
const std::chrono::milliseconds WATCHDOG_PERIOD = 2min;

//********************setup() functions*************************/

void setupWatchdog() {
   d4124:	b507      	push	{r0, r1, r2, lr}
    pinMode(WATCHDOG_PIN, OUTPUT);
   d4126:	2101      	movs	r1, #1
   d4128:	2006      	movs	r0, #6
   d412a:	f005 f99d 	bl	d9468 <pinMode>
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
   d412e:	a802      	add	r0, sp, #8
   d4130:	2200      	movs	r2, #0
   d4132:	f840 2d04 	str.w	r2, [r0, #-4]!
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d4136:	4611      	mov	r1, r2
   d4138:	f001 ff60 	bl	d5ffc <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d413c:	9b01      	ldr	r3, [sp, #4]
    if (System.resetReason() == RESET_REASON_PIN_RESET) {
   d413e:	2b14      	cmp	r3, #20
   d4140:	d103      	bne.n	d414a <_Z13setupWatchdogv+0x26>
        Log.info("RESET_REASON_PIN_RESET: either RESET or hardware watchdog");
   d4142:	4903      	ldr	r1, [pc, #12]	; (d4150 <_Z13setupWatchdogv+0x2c>)
   d4144:	4803      	ldr	r0, [pc, #12]	; (d4154 <_Z13setupWatchdogv+0x30>)
   d4146:	f7ff ffbf 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
    }
}
   d414a:	b003      	add	sp, #12
   d414c:	f85d fb04 	ldr.w	pc, [sp], #4
   d4150:	000d9eb4 	.word	0x000d9eb4
   d4154:	2003e4b8 	.word	0x2003e4b8

000d4158 <_Z15serviceWatchdogv>:

//********************loop() functions*************************/

// Pulses the watchdog service pin once WATCHDOG_PERIOD has passed
void serviceWatchdog() {
   d4158:	b510      	push	{r4, lr}
    static unsigned long lastWatchdogMillis = 0;

    if (millis() - lastWatchdogMillis >= WATCHDOG_PERIOD.count()) {
   d415a:	4c0e      	ldr	r4, [pc, #56]	; (d4194 <_Z15serviceWatchdogv+0x3c>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d415c:	f001 ff26 	bl	d5fac <HAL_Timer_Get_Milli_Seconds>
   d4160:	6823      	ldr	r3, [r4, #0]
   d4162:	1ac0      	subs	r0, r0, r3
   d4164:	4b0c      	ldr	r3, [pc, #48]	; (d4198 <_Z15serviceWatchdogv+0x40>)
   d4166:	4298      	cmp	r0, r3
   d4168:	d913      	bls.n	d4192 <_Z15serviceWatchdogv+0x3a>
   d416a:	f001 ff1f 	bl	d5fac <HAL_Timer_Get_Milli_Seconds>
        lastWatchdogMillis = millis();

        Log.warn("service watchdog");
   d416e:	490b      	ldr	r1, [pc, #44]	; (d419c <_Z15serviceWatchdogv+0x44>)
// Pulses the watchdog service pin once WATCHDOG_PERIOD has passed
void serviceWatchdog() {
    static unsigned long lastWatchdogMillis = 0;

    if (millis() - lastWatchdogMillis >= WATCHDOG_PERIOD.count()) {
        lastWatchdogMillis = millis();
   d4170:	6020      	str	r0, [r4, #0]

        Log.warn("service watchdog");
   d4172:	480b      	ldr	r0, [pc, #44]	; (d41a0 <_Z15serviceWatchdogv+0x48>)
   d4174:	f7ff ffbf 	bl	d40f6 <_ZNK5spark6Logger4warnEPKcz>

        // Actual minimum high period is 100 ns but there is no nanosecond delay
        // in Device OS. 1 microsecond is still a very short period of time so
        // blocking should not be an issue here as it only happens once every
        // 2 minutes.
        digitalWrite(WATCHDOG_PIN, HIGH);
   d4178:	2101      	movs	r1, #1
   d417a:	2006      	movs	r0, #6
   d417c:	f005 f985 	bl	d948a <digitalWrite>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d4180:	2001      	movs	r0, #1
   d4182:	f001 ff0b 	bl	d5f9c <HAL_Delay_Microseconds>
        delayMicroseconds(1);
        digitalWrite(WATCHDOG_PIN, LOW);
   d4186:	2100      	movs	r1, #0
   d4188:	2006      	movs	r0, #6
    }
   d418a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        // in Device OS. 1 microsecond is still a very short period of time so
        // blocking should not be an issue here as it only happens once every
        // 2 minutes.
        digitalWrite(WATCHDOG_PIN, HIGH);
        delayMicroseconds(1);
        digitalWrite(WATCHDOG_PIN, LOW);
   d418e:	f005 b97c 	b.w	d948a <digitalWrite>
   d4192:	bd10      	pop	{r4, pc}
   d4194:	2003e260 	.word	0x2003e260
   d4198:	0001d4bf 	.word	0x0001d4bf
   d419c:	000d9eee 	.word	0x000d9eee
   d41a0:	2003e4b8 	.word	0x2003e4b8

000d41a4 <_GLOBAL__sub_I__Z13setupWatchdogv>:

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d41a4:	f001 beba 	b.w	d5f1c <HAL_Pin_Map>

000d41a8 <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d41a8:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   d41aa:	2301      	movs	r3, #1
   d41ac:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   d41ae:	6883      	ldr	r3, [r0, #8]
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d41b0:	4604      	mov	r4, r0
        Data* th = (Data*)param;
        th->started = true;
        if (th->func) {
   d41b2:	b10b      	cbz	r3, d41b8 <_ZN6Thread3runEPv+0x10>
            (*(th->func))(th->func_param);
   d41b4:	68c0      	ldr	r0, [r0, #12]
   d41b6:	e006      	b.n	d41c6 <_ZN6Thread3runEPv+0x1e>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d41b8:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   d41ba:	b128      	cbz	r0, d41c8 <_ZN6Thread3runEPv+0x20>
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d41bc:	6883      	ldr	r3, [r0, #8]
   d41be:	b90b      	cbnz	r3, d41c4 <_ZN6Thread3runEPv+0x1c>
	__throw_bad_function_call();
   d41c0:	f005 f9f4 	bl	d95ac <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d41c4:	68c3      	ldr	r3, [r0, #12]
   d41c6:	4798      	blx	r3
            (*(th->wrapper))();
        }
        th->exited = true;
   d41c8:	2301      	movs	r3, #1
   d41ca:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   d41cc:	2000      	movs	r0, #0
    }
   d41ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            (*(th->func))(th->func_param);
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
        os_thread_exit(nullptr);
   d41d2:	f001 bfc1 	b.w	d6158 <os_thread_exit>
	...

000d41d8 <_Z16threadBLEScannerPv>:
  Log.warn("published IM21 warning, prev door byte = 0x%02X, curr door byte = 0x%02X",previousDoorData.controlByte, currentDoorData.controlByte);

}

//**********threads*****************
void threadBLEScanner(void *param) {
   d41d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d41da:	f5ad 7d5d 	sub.w	sp, sp, #884	; 0x374
   d41de:	ac0c      	add	r4, sp, #48	; 0x30
   d41e0:	adde      	add	r5, sp, #888	; 0x378
private:
    std::shared_ptr<BleServiceImpl> impl_;
};


class BleScanResult {
   d41e2:	f1a4 0008 	sub.w	r0, r4, #8
   d41e6:	f002 fb23 	bl	d6830 <_ZN8particle10BleAddressC1Ev>
   d41ea:	4620      	mov	r0, r4
   d41ec:	f002 fba1 	bl	d6932 <_ZN8particle18BleAdvertisingDataC1Ev>
   d41f0:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d41f4:	3454      	adds	r4, #84	; 0x54
   d41f6:	f002 fb9c 	bl	d6932 <_ZN8particle18BleAdvertisingDataC1Ev>
  
  const unsigned int SCAN_RESULT_MAX = 10;
  BleScanResult scanResults[SCAN_RESULT_MAX];
   d41fa:	42ac      	cmp	r4, r5
   d41fc:	d1f1      	bne.n	d41e2 <_Z16threadBLEScannerPv+0xa>
  doorData scanThreadDoorData;
  unsigned char doorAdvertisingData[BLE_MAX_ADV_DATA_LEN]; 
  
  //setting scan timeout (how long scan runs for) to 50ms = 5 centiseconds
  //using millis() to measure, timeout(1) = 13-14 ms. timout(5) = 53-54ms
  BLE.setScanTimeout(5);
   d41fe:	f002 fc2f 	bl	d6a60 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4202:	2105      	movs	r1, #5
   d4204:	f002 fc4e 	bl	d6aa4 <_ZNK8particle14BleLocalDevice14setScanTimeoutEt>

      //Log.warn("outside of if, dooradvertisingdata[1, 2, 3] = 0x%02X, 0x%02X, 0x%02X", doorAdvertisingData[1], doorAdvertisingData[2], doorAdvertisingData[3]);
      //Log.warn("outside of if, globalDoorID 1,2,3 = 0x%02X, 0x%02X, 0x%02X", globalDoorID.byte1, globalDoorID.byte2, globalDoorID.byte3);

      //if advertising data contains door sensor's device ID, extract door status and dump it in the queue
      if(doorAdvertisingData[1] == globalDoorID.byte1 && doorAdvertisingData[2] == globalDoorID.byte2 && doorAdvertisingData[3] == globalDoorID.byte3){
   d4208:	4d1b      	ldr	r5, [pc, #108]	; (d4278 <_Z16threadBLEScannerPv+0xa0>)
        //Log.warn("inside if, dooradvertisingdata[4, 5] = 0x%02X, 0x%02X", doorAdvertisingData[4], doorAdvertisingData[5]);

        scanThreadDoorData.doorStatus = doorAdvertisingData[5];
        scanThreadDoorData.controlByte = doorAdvertisingData[6];

        os_queue_put(bleQueue, (void *)&scanThreadDoorData, 0, 0);
   d420a:	4e1c      	ldr	r6, [pc, #112]	; (d427c <_Z16threadBLEScannerPv+0xa4>)
  //using millis() to measure, timeout(1) = 13-14 ms. timout(5) = 53-54ms
  BLE.setScanTimeout(5);

  while(true){

    int count = BLE.scan(scanResults, SCAN_RESULT_MAX);
   d420c:	f002 fc28 	bl	d6a60 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4210:	220a      	movs	r2, #10
   d4212:	a90a      	add	r1, sp, #40	; 0x28
   d4214:	f002 fc64 	bl	d6ae0 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>

    //loop over all devices found in the BLE scan
    for (int i = 0; i < count; i++) {
   d4218:	2400      	movs	r4, #0
  //using millis() to measure, timeout(1) = 13-14 ms. timout(5) = 53-54ms
  BLE.setScanTimeout(5);

  while(true){

    int count = BLE.scan(scanResults, SCAN_RESULT_MAX);
   d421a:	4607      	mov	r7, r0

    //loop over all devices found in the BLE scan
    for (int i = 0; i < count; i++) {
   d421c:	42bc      	cmp	r4, r7
   d421e:	da28      	bge.n	d4272 <_Z16threadBLEScannerPv+0x9a>

      //place advertising data in doorAdvertisingData buffer array
      scanResults[i].advertisingData.get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, doorAdvertisingData, BLE_MAX_ADV_DATA_LEN);
   d4220:	ab0a      	add	r3, sp, #40	; 0x28
   d4222:	2054      	movs	r0, #84	; 0x54
   d4224:	fb00 3004 	mla	r0, r0, r4, r3
   d4228:	aa02      	add	r2, sp, #8
   d422a:	231f      	movs	r3, #31
   d422c:	21ff      	movs	r1, #255	; 0xff
   d422e:	3008      	adds	r0, #8
   d4230:	f002 fb99 	bl	d6966 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>

      //Log.warn("outside of if, dooradvertisingdata[1, 2, 3] = 0x%02X, 0x%02X, 0x%02X", doorAdvertisingData[1], doorAdvertisingData[2], doorAdvertisingData[3]);
      //Log.warn("outside of if, globalDoorID 1,2,3 = 0x%02X, 0x%02X, 0x%02X", globalDoorID.byte1, globalDoorID.byte2, globalDoorID.byte3);

      //if advertising data contains door sensor's device ID, extract door status and dump it in the queue
      if(doorAdvertisingData[1] == globalDoorID.byte1 && doorAdvertisingData[2] == globalDoorID.byte2 && doorAdvertisingData[3] == globalDoorID.byte3){
   d4234:	f89d 2009 	ldrb.w	r2, [sp, #9]
   d4238:	782b      	ldrb	r3, [r5, #0]
   d423a:	429a      	cmp	r2, r3
   d423c:	d117      	bne.n	d426e <_Z16threadBLEScannerPv+0x96>
   d423e:	f89d 200a 	ldrb.w	r2, [sp, #10]
   d4242:	786b      	ldrb	r3, [r5, #1]
   d4244:	429a      	cmp	r2, r3
   d4246:	d112      	bne.n	d426e <_Z16threadBLEScannerPv+0x96>
   d4248:	f89d 200b 	ldrb.w	r2, [sp, #11]
   d424c:	78ab      	ldrb	r3, [r5, #2]
   d424e:	429a      	cmp	r2, r3
   d4250:	d10d      	bne.n	d426e <_Z16threadBLEScannerPv+0x96>

        //Log.warn("inside if, dooradvertisingdata[1, 2, 3] = 0x%02X, 0x%02X, 0x%02X", doorAdvertisingData[1], doorAdvertisingData[2], doorAdvertisingData[3]);
        //Log.warn("inside if, dooradvertisingdata[4, 5] = 0x%02X, 0x%02X", doorAdvertisingData[4], doorAdvertisingData[5]);

        scanThreadDoorData.doorStatus = doorAdvertisingData[5];
   d4252:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d4256:	f88d 3000 	strb.w	r3, [sp]
        scanThreadDoorData.controlByte = doorAdvertisingData[6];
   d425a:	f89d 300e 	ldrb.w	r3, [sp, #14]
   d425e:	f88d 3001 	strb.w	r3, [sp, #1]

        os_queue_put(bleQueue, (void *)&scanThreadDoorData, 0, 0);
   d4262:	2300      	movs	r3, #0
   d4264:	461a      	mov	r2, r3
   d4266:	4669      	mov	r1, sp
   d4268:	6830      	ldr	r0, [r6, #0]
   d426a:	f001 ff65 	bl	d6138 <os_queue_put>
  while(true){

    int count = BLE.scan(scanResults, SCAN_RESULT_MAX);

    //loop over all devices found in the BLE scan
    for (int i = 0; i < count; i++) {
   d426e:	3401      	adds	r4, #1
   d4270:	e7d4      	b.n	d421c <_Z16threadBLEScannerPv+0x44>
        os_queue_put(bleQueue, (void *)&scanThreadDoorData, 0, 0);

      }//endif
    }//endfor

    os_thread_yield();
   d4272:	f001 ff21 	bl	d60b8 <os_thread_yield>
  
  //setting scan timeout (how long scan runs for) to 50ms = 5 centiseconds
  //using millis() to measure, timeout(1) = 13-14 ms. timout(5) = 53-54ms
  BLE.setScanTimeout(5);

  while(true){
   d4276:	e7c9      	b.n	d420c <_Z16threadBLEScannerPv+0x34>
   d4278:	2003e1c8 	.word	0x2003e1c8
   d427c:	2003e270 	.word	0x2003e270

000d4280 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>:
    va_start(args, fmt);
    log(level, fmt, args);
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
   d4280:	b510      	push	{r4, lr}
   d4282:	b08a      	sub	sp, #40	; 0x28
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4284:	e88d 000c 	stmia.w	sp, {r2, r3}
    va_start(args, fmt);
    log(level, fmt, args);
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
   d4288:	460c      	mov	r4, r1
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d428a:	2120      	movs	r1, #32
   d428c:	9102      	str	r1, [sp, #8]
    attr.flags = 0;
   d428e:	2100      	movs	r1, #0
   d4290:	9103      	str	r1, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4292:	460b      	mov	r3, r1
   d4294:	aa02      	add	r2, sp, #8
   d4296:	6801      	ldr	r1, [r0, #0]
   d4298:	4620      	mov	r0, r4
   d429a:	f002 f845 	bl	d6328 <log_message_v>
}
   d429e:	b00a      	add	sp, #40	; 0x28
   d42a0:	bd10      	pop	{r4, pc}

000d42a2 <_ZNK5spark6Logger5errorEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_WARN, fmt, args);
    va_end(args);
}

inline void spark::Logger::error(const char *fmt, ...) const {
   d42a2:	b40e      	push	{r1, r2, r3}
   d42a4:	b503      	push	{r0, r1, lr}
   d42a6:	ab03      	add	r3, sp, #12
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_ERROR, fmt, args);
   d42a8:	2132      	movs	r1, #50	; 0x32
    va_start(args, fmt);
    log(LOG_LEVEL_WARN, fmt, args);
    va_end(args);
}

inline void spark::Logger::error(const char *fmt, ...) const {
   d42aa:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list args;
    va_start(args, fmt);
   d42ae:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_ERROR, fmt, args);
   d42b0:	f7ff ffe6 	bl	d4280 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
    va_end(args);
}
   d42b4:	b002      	add	sp, #8
   d42b6:	f85d eb04 	ldr.w	lr, [sp], #4
   d42ba:	b003      	add	sp, #12
   d42bc:	4770      	bx	lr
	...

000d42c0 <_Z9setupIM21v>:
bool doorLowBatteryFlag = false;
unsigned long doorHeartbeatReceived = millis();

//**********setup()******************

void setupIM21(){
   d42c0:	b537      	push	{r0, r1, r2, r4, r5, lr}

	// Create a queue. Each element is an unsigned char, there are 25 elements. Last parameter is always 0.
	os_queue_create(&bleQueue, sizeof(doorData), 25, 0);
   d42c2:	2300      	movs	r3, #0
   d42c4:	2219      	movs	r2, #25
   d42c6:	2108      	movs	r1, #8
   d42c8:	4822      	ldr	r0, [pc, #136]	; (d4354 <_Z9setupIM21v+0x94>)
   d42ca:	f001 ff2d 	bl	d6128 <os_queue_create>
	// Create the thread
	new Thread("scanBLEThread", threadBLEScanner);
   d42ce:	2004      	movs	r0, #4
   d42d0:	f7ff fee1 	bl	d4096 <_Znwj>
   d42d4:	4605      	mov	r5, r0
   d42d6:	2800      	cmp	r0, #0
   d42d8:	d039      	beq.n	d434e <_Z9setupIM21v+0x8e>
    {
    }

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
   d42da:	491f      	ldr	r1, [pc, #124]	; (d4358 <_Z9setupIM21v+0x98>)
   d42dc:	2014      	movs	r0, #20
   d42de:	f005 f953 	bl	d9588 <_ZnwjRKSt9nothrow_t>
   d42e2:	4604      	mov	r4, r0
   d42e4:	b130      	cbz	r0, d42f4 <_Z9setupIM21v+0x34>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d42e6:	2300      	movs	r3, #0
        Data() :
            handle(OS_THREAD_INVALID_HANDLE),
            func(nullptr),
            func_param(nullptr),
            started(false),
            exited(false) {
   d42e8:	7403      	strb	r3, [r0, #16]
   d42ea:	6003      	str	r3, [r0, #0]
   d42ec:	6043      	str	r3, [r0, #4]
   d42ee:	6083      	str	r3, [r0, #8]
   d42f0:	60c3      	str	r3, [r0, #12]
   d42f2:	7443      	strb	r3, [r0, #17]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d42f4:	602c      	str	r4, [r5, #0]

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
    {
        if (!d_) {
   d42f6:	b1a4      	cbz	r4, d4322 <_Z9setupIM21v+0x62>
            goto error;
        }
        d_->func = function;
   d42f8:	4b18      	ldr	r3, [pc, #96]	; (d435c <_Z9setupIM21v+0x9c>)
   d42fa:	60a3      	str	r3, [r4, #8]
        d_->func_param = function_param;
   d42fc:	2300      	movs	r3, #0
   d42fe:	60e3      	str	r3, [r4, #12]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d4300:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   d4304:	9301      	str	r3, [sp, #4]
   d4306:	9400      	str	r4, [sp, #0]
   d4308:	4b15      	ldr	r3, [pc, #84]	; (d4360 <_Z9setupIM21v+0xa0>)
   d430a:	4916      	ldr	r1, [pc, #88]	; (d4364 <_Z9setupIM21v+0xa4>)
   d430c:	2202      	movs	r2, #2
   d430e:	1d20      	adds	r0, r4, #4
   d4310:	f001 fec2 	bl	d6098 <os_thread_create>
   d4314:	b928      	cbnz	r0, d4322 <_Z9setupIM21v+0x62>
            goto error;
        }
        while (!d_->started) {
   d4316:	7c23      	ldrb	r3, [r4, #16]
   d4318:	b9cb      	cbnz	r3, d434e <_Z9setupIM21v+0x8e>
            // FIXME: This used to be os_thread_yield() but for some unknown reasons sometimes
            // it doesn't let the new thread to run.
            HAL_Delay_Milliseconds(1);
   d431a:	2001      	movs	r0, #1
   d431c:	f001 fe36 	bl	d5f8c <HAL_Delay_Milliseconds>
   d4320:	e7f9      	b.n	d4316 <_Z9setupIM21v+0x56>
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4322:	2300      	movs	r3, #0
   d4324:	602b      	str	r3, [r5, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d4326:	b194      	cbz	r4, d434e <_Z9setupIM21v+0x8e>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4328:	6825      	ldr	r5, [r4, #0]
   d432a:	b14d      	cbz	r5, d4340 <_Z9setupIM21v+0x80>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d432c:	68ab      	ldr	r3, [r5, #8]
   d432e:	b11b      	cbz	r3, d4338 <_Z9setupIM21v+0x78>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4330:	2203      	movs	r2, #3
   d4332:	4629      	mov	r1, r5
   d4334:	4628      	mov	r0, r5
   d4336:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4338:	2110      	movs	r1, #16
   d433a:	4628      	mov	r0, r5
   d433c:	f005 f920 	bl	d9580 <_ZdlPvj>
   d4340:	2114      	movs	r1, #20
   d4342:	4620      	mov	r0, r4

}
   d4344:	b003      	add	sp, #12
   d4346:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   d434a:	f005 b919 	b.w	d9580 <_ZdlPvj>
   d434e:	b003      	add	sp, #12
   d4350:	bd30      	pop	{r4, r5, pc}
   d4352:	bf00      	nop
   d4354:	2003e270 	.word	0x2003e270
   d4358:	000dadce 	.word	0x000dadce
   d435c:	000d41d9 	.word	0x000d41d9
   d4360:	000d41a9 	.word	0x000d41a9
   d4364:	000d9eff 	.word	0x000d9eff

000d4368 <_Z16initializeDoorIDv>:


//**********loop()*******************

void initializeDoorID(){
   d4368:	b573      	push	{r0, r1, r4, r5, r6, lr}

  uint16_t initializeDoorIDFlag;

  //Argon flash memory is initialized to all F's (1's)
  EEPROM.get(ADDR_INITIALIZE_DOOR_ID_FLAG, initializeDoorIDFlag);
   d436a:	f005 f8a7 	bl	d94bc <_Z21__fetch_global_EEPROMv>
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d436e:	2202      	movs	r2, #2
   d4370:	eb0d 0102 	add.w	r1, sp, r2
   d4374:	4610      	mov	r0, r2
   d4376:	f001 fe29 	bl	d5fcc <HAL_EEPROM_Get>
  Log.info("door ID flag is 0x%04X",initializeDoorIDFlag);
   d437a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   d437e:	4926      	ldr	r1, [pc, #152]	; (d4418 <_Z16initializeDoorIDv+0xb0>)
   d4380:	4826      	ldr	r0, [pc, #152]	; (d441c <_Z16initializeDoorIDv+0xb4>)
   d4382:	f7ff fea1 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>

  if(initializeDoorIDFlag != INITIALIZE_DOOR_ID_FLAG){
   d4386:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   d438a:	f648 0688 	movw	r6, #34952	; 0x8888
   d438e:	42b3      	cmp	r3, r6
   d4390:	d026      	beq.n	d43e0 <_Z16initializeDoorIDv+0x78>
    EEPROM.put(ADDR_IM21_DOORID, DOORID_BYTE1);
   d4392:	ac02      	add	r4, sp, #8
   d4394:	25aa      	movs	r5, #170	; 0xaa
   d4396:	f005 f891 	bl	d94bc <_Z21__fetch_global_EEPROMv>
   d439a:	f844 5d04 	str.w	r5, [r4, #-4]!
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d439e:	2204      	movs	r2, #4
   d43a0:	4621      	mov	r1, r4
   d43a2:	2014      	movs	r0, #20
   d43a4:	f001 fe1a 	bl	d5fdc <HAL_EEPROM_Put>
    EEPROM.put((ADDR_IM21_DOORID+1), DOORID_BYTE2);
   d43a8:	f005 f888 	bl	d94bc <_Z21__fetch_global_EEPROMv>
   d43ac:	2204      	movs	r2, #4
   d43ae:	4621      	mov	r1, r4
   d43b0:	2015      	movs	r0, #21
   d43b2:	9501      	str	r5, [sp, #4]
   d43b4:	f001 fe12 	bl	d5fdc <HAL_EEPROM_Put>
    EEPROM.put((ADDR_IM21_DOORID+2), DOORID_BYTE3);
   d43b8:	f005 f880 	bl	d94bc <_Z21__fetch_global_EEPROMv>
   d43bc:	2204      	movs	r2, #4
   d43be:	4621      	mov	r1, r4
   d43c0:	2016      	movs	r0, #22
   d43c2:	9501      	str	r5, [sp, #4]
   d43c4:	f001 fe0a 	bl	d5fdc <HAL_EEPROM_Put>
    initializeDoorIDFlag = INITIALIZE_DOOR_ID_FLAG;
   d43c8:	f8ad 6002 	strh.w	r6, [sp, #2]
    EEPROM.put(ADDR_INITIALIZE_DOOR_ID_FLAG, initializeDoorIDFlag);
   d43cc:	f005 f876 	bl	d94bc <_Z21__fetch_global_EEPROMv>
   d43d0:	2202      	movs	r2, #2
   d43d2:	eb0d 0102 	add.w	r1, sp, r2
   d43d6:	4610      	mov	r0, r2
   d43d8:	f001 fe00 	bl	d5fdc <HAL_EEPROM_Put>
    Log.info("Door ID was written to flash on bootup.");
   d43dc:	4910      	ldr	r1, [pc, #64]	; (d4420 <_Z16initializeDoorIDv+0xb8>)
   d43de:	e015      	b.n	d440c <_Z16initializeDoorIDv+0xa4>
  }
  else{
    EEPROM.get(ADDR_IM21_DOORID, globalDoorID.byte1);
   d43e0:	f005 f86c 	bl	d94bc <_Z21__fetch_global_EEPROMv>
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d43e4:	2201      	movs	r2, #1
   d43e6:	490f      	ldr	r1, [pc, #60]	; (d4424 <_Z16initializeDoorIDv+0xbc>)
   d43e8:	2014      	movs	r0, #20
   d43ea:	f001 fdef 	bl	d5fcc <HAL_EEPROM_Get>
    EEPROM.get((ADDR_IM21_DOORID+1), globalDoorID.byte2);
   d43ee:	f005 f865 	bl	d94bc <_Z21__fetch_global_EEPROMv>
   d43f2:	2201      	movs	r2, #1
   d43f4:	490c      	ldr	r1, [pc, #48]	; (d4428 <_Z16initializeDoorIDv+0xc0>)
   d43f6:	2015      	movs	r0, #21
   d43f8:	f001 fde8 	bl	d5fcc <HAL_EEPROM_Get>
    EEPROM.get((ADDR_IM21_DOORID+2), globalDoorID.byte3);
   d43fc:	f005 f85e 	bl	d94bc <_Z21__fetch_global_EEPROMv>
   d4400:	490a      	ldr	r1, [pc, #40]	; (d442c <_Z16initializeDoorIDv+0xc4>)
   d4402:	2201      	movs	r2, #1
   d4404:	2016      	movs	r0, #22
   d4406:	f001 fde1 	bl	d5fcc <HAL_EEPROM_Get>
    Log.info("Door ID was read from flash on bootup.");
   d440a:	4909      	ldr	r1, [pc, #36]	; (d4430 <_Z16initializeDoorIDv+0xc8>)
   d440c:	4803      	ldr	r0, [pc, #12]	; (d441c <_Z16initializeDoorIDv+0xb4>)
   d440e:	f7ff fe5b 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
  }
}
   d4412:	b002      	add	sp, #8
   d4414:	bd70      	pop	{r4, r5, r6, pc}
   d4416:	bf00      	nop
   d4418:	000d9f0d 	.word	0x000d9f0d
   d441c:	2003e4b8 	.word	0x2003e4b8
   d4420:	000d9f24 	.word	0x000d9f24
   d4424:	2003e1c8 	.word	0x2003e1c8
   d4428:	2003e1c9 	.word	0x2003e1c9
   d442c:	2003e1ca 	.word	0x2003e1ca
   d4430:	000d9f4c 	.word	0x000d9f4c

000d4434 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4434:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4436:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4438:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d443a:	b17c      	cbz	r4, d445c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d443c:	6863      	ldr	r3, [r4, #4]
   d443e:	3b01      	subs	r3, #1
   d4440:	6063      	str	r3, [r4, #4]
   d4442:	b95b      	cbnz	r3, d445c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d4444:	6823      	ldr	r3, [r4, #0]
   d4446:	4620      	mov	r0, r4
   d4448:	689b      	ldr	r3, [r3, #8]
   d444a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d444c:	68a3      	ldr	r3, [r4, #8]
   d444e:	3b01      	subs	r3, #1
   d4450:	60a3      	str	r3, [r4, #8]
   d4452:	b91b      	cbnz	r3, d445c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4454:	6823      	ldr	r3, [r4, #0]
   d4456:	4620      	mov	r0, r4
   d4458:	68db      	ldr	r3, [r3, #12]
   d445a:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d445c:	4628      	mov	r0, r5
   d445e:	bd38      	pop	{r3, r4, r5, pc}

000d4460 <_Z24logAndPublishDoorWarning8doorDataS_>:
  Particle.publish("IM21 Data", doorPublishBuffer, PRIVATE);
  Log.warn("published, 0x%02X", currentDoorData.controlByte);

}

void logAndPublishDoorWarning(doorData previousDoorData, doorData currentDoorData){
   d4460:	b530      	push	{r4, r5, lr}
   d4462:	b0ab      	sub	sp, #172	; 0xac
   d4464:	ac06      	add	r4, sp, #24
   d4466:	e884 0003 	stmia.w	r4, {r0, r1}
   d446a:	a904      	add	r1, sp, #16
   d446c:	e881 000c 	stmia.w	r1, {r2, r3}

  char doorPublishBuffer[128];

  sprintf(doorPublishBuffer, "{ \"deviceid\": \"%02X:%02X:%02X\", \"prev_control_byte\": \"%02X\", \"curr_control_byte\": \"%02X\" }", 
          globalDoorID.byte1, globalDoorID.byte2, globalDoorID.byte3, previousDoorData.controlByte, currentDoorData.controlByte);
   d4470:	4911      	ldr	r1, [pc, #68]	; (d44b8 <_Z24logAndPublishDoorWarning8doorDataS_+0x58>)

void logAndPublishDoorWarning(doorData previousDoorData, doorData currentDoorData){

  char doorPublishBuffer[128];

  sprintf(doorPublishBuffer, "{ \"deviceid\": \"%02X:%02X:%02X\", \"prev_control_byte\": \"%02X\", \"curr_control_byte\": \"%02X\" }", 
   d4472:	f89d 4019 	ldrb.w	r4, [sp, #25]
   d4476:	f89d 5011 	ldrb.w	r5, [sp, #17]
          globalDoorID.byte1, globalDoorID.byte2, globalDoorID.byte3, previousDoorData.controlByte, currentDoorData.controlByte);
   d447a:	784b      	ldrb	r3, [r1, #1]
   d447c:	780a      	ldrb	r2, [r1, #0]
   d447e:	9502      	str	r5, [sp, #8]
   d4480:	9401      	str	r4, [sp, #4]
   d4482:	7889      	ldrb	r1, [r1, #2]
   d4484:	9100      	str	r1, [sp, #0]
   d4486:	a80a      	add	r0, sp, #40	; 0x28
   d4488:	490c      	ldr	r1, [pc, #48]	; (d44bc <_Z24logAndPublishDoorWarning8doorDataS_+0x5c>)
   d448a:	f002 f831 	bl	d64f0 <sprintf>
   d448e:	4b0c      	ldr	r3, [pc, #48]	; (d44c0 <_Z24logAndPublishDoorWarning8doorDataS_+0x60>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4490:	490c      	ldr	r1, [pc, #48]	; (d44c4 <_Z24logAndPublishDoorWarning8doorDataS_+0x64>)
   d4492:	781b      	ldrb	r3, [r3, #0]
   d4494:	f88d 3000 	strb.w	r3, [sp]
   d4498:	aa0a      	add	r2, sp, #40	; 0x28
   d449a:	233c      	movs	r3, #60	; 0x3c
   d449c:	a808      	add	r0, sp, #32
   d449e:	f004 f843 	bl	d8528 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d44a2:	a809      	add	r0, sp, #36	; 0x24
   d44a4:	f7ff ffc6 	bl	d4434 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  Particle.publish("IM21 Warning", doorPublishBuffer, PRIVATE);
  Log.warn("published IM21 warning, prev door byte = 0x%02X, curr door byte = 0x%02X",previousDoorData.controlByte, currentDoorData.controlByte);
   d44a8:	462b      	mov	r3, r5
   d44aa:	4622      	mov	r2, r4
   d44ac:	4906      	ldr	r1, [pc, #24]	; (d44c8 <_Z24logAndPublishDoorWarning8doorDataS_+0x68>)
   d44ae:	4807      	ldr	r0, [pc, #28]	; (d44cc <_Z24logAndPublishDoorWarning8doorDataS_+0x6c>)
   d44b0:	f7ff fe21 	bl	d40f6 <_ZNK5spark6Logger4warnEPKcz>

}
   d44b4:	b02b      	add	sp, #172	; 0xac
   d44b6:	bd30      	pop	{r4, r5, pc}
   d44b8:	2003e1c8 	.word	0x2003e1c8
   d44bc:	000d9fd3 	.word	0x000d9fd3
   d44c0:	2003e275 	.word	0x2003e275
   d44c4:	000da02e 	.word	0x000da02e
   d44c8:	000da03b 	.word	0x000da03b
   d44cc:	2003e4b8 	.word	0x2003e4b8

000d44d0 <_Z9checkIM21v>:
    EEPROM.get((ADDR_IM21_DOORID+2), globalDoorID.byte3);
    Log.info("Door ID was read from flash on bootup.");
  }
}

doorData checkIM21(){
   d44d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d44d4:	4680      	mov	r8, r0
  static doorData currentDoorData = {0x00, 0x00, 0};
  static doorData returnDoorData = {0x99, 0x99, 0};

  //BLE scanner is set fast enough to load duplicate advertising data packets
  //each time IM21 transmits a door event. Filter out the duplicates and publish
  if (os_queue_take(bleQueue, &currentDoorData, 0, 0) == 0) {
   d44d6:	4c26      	ldr	r4, [pc, #152]	; (d4570 <_Z9checkIM21v+0xa0>)
   d44d8:	4826      	ldr	r0, [pc, #152]	; (d4574 <_Z9checkIM21v+0xa4>)
   d44da:	4d27      	ldr	r5, [pc, #156]	; (d4578 <_Z9checkIM21v+0xa8>)
   d44dc:	6800      	ldr	r0, [r0, #0]
   d44de:	2300      	movs	r3, #0
   d44e0:	461a      	mov	r2, r3
   d44e2:	4621      	mov	r1, r4
   d44e4:	f001 fe30 	bl	d6148 <os_queue_take>
   d44e8:	2800      	cmp	r0, #0
   d44ea:	d13a      	bne.n	d4562 <_Z9checkIM21v+0x92>
    //Log.warn("raw door sensor output - control:  prev, current: 0x%02X, 0x%02X", previousDoorData.controlByte, currentDoorData.controlByte);
    //Log.warn("raw door sensor output - data byte prev, current: 0x%02X, 0x%02X", previousDoorData.doorStatus, currentDoorData.doorStatus);
    
    // Checks if the 2nd bit (counting from 0) of doorStatus is 1
    // read as: doorLowBatteryFlag is true if doorStatus AND 0b0100 is not 0b0000
    doorLowBatteryFlag = (currentDoorData.doorStatus & (1 << 2)) != 0;
   d44ec:	7823      	ldrb	r3, [r4, #0]
   d44ee:	4a23      	ldr	r2, [pc, #140]	; (d457c <_Z9checkIM21v+0xac>)
   d44f0:	f3c3 0180 	ubfx	r1, r3, #2, #1

    // Checks if the 3rd bit of doorStatus is 1
    if ((currentDoorData.doorStatus & (1 << 3)) != 0){
   d44f4:	071b      	lsls	r3, r3, #28
    //Log.warn("raw door sensor output - control:  prev, current: 0x%02X, 0x%02X", previousDoorData.controlByte, currentDoorData.controlByte);
    //Log.warn("raw door sensor output - data byte prev, current: 0x%02X, 0x%02X", previousDoorData.doorStatus, currentDoorData.doorStatus);
    
    // Checks if the 2nd bit (counting from 0) of doorStatus is 1
    // read as: doorLowBatteryFlag is true if doorStatus AND 0b0100 is not 0b0000
    doorLowBatteryFlag = (currentDoorData.doorStatus & (1 << 2)) != 0;
   d44f6:	7011      	strb	r1, [r2, #0]

    // Checks if the 3rd bit of doorStatus is 1
    if ((currentDoorData.doorStatus & (1 << 3)) != 0){
   d44f8:	d503      	bpl.n	d4502 <_Z9checkIM21v+0x32>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d44fa:	f001 fd57 	bl	d5fac <HAL_Timer_Get_Milli_Seconds>
      doorHeartbeatReceived = millis();
   d44fe:	4b20      	ldr	r3, [pc, #128]	; (d4580 <_Z9checkIM21v+0xb0>)
   d4500:	6018      	str	r0, [r3, #0]
    }
    //if this is the first door event received after firmware bootup, publish
    if(initialDoorDataFlag){
   d4502:	4b20      	ldr	r3, [pc, #128]	; (d4584 <_Z9checkIM21v+0xb4>)
   d4504:	4e20      	ldr	r6, [pc, #128]	; (d4588 <_Z9checkIM21v+0xb8>)
   d4506:	681a      	ldr	r2, [r3, #0]
   d4508:	b112      	cbz	r2, d4510 <_Z9checkIM21v+0x40>

      initialDoorDataFlag = 0;
   d450a:	2200      	movs	r2, #0
   d450c:	601a      	str	r2, [r3, #0]
   d450e:	e005      	b.n	d451c <_Z9checkIM21v+0x4c>
      returnDoorData = currentDoorData;
      previousDoorData = currentDoorData;   
    }
    //if this curr = prev + 1, all is well, publish
    else if(currentDoorData.controlByte == (previousDoorData.controlByte+0x01)){
   d4510:	7873      	ldrb	r3, [r6, #1]
   d4512:	7862      	ldrb	r2, [r4, #1]
   d4514:	4f16      	ldr	r7, [pc, #88]	; (d4570 <_Z9checkIM21v+0xa0>)
   d4516:	1c59      	adds	r1, r3, #1
   d4518:	428a      	cmp	r2, r1
   d451a:	d102      	bne.n	d4522 <_Z9checkIM21v+0x52>

      returnDoorData = currentDoorData;
   d451c:	e894 0003 	ldmia.w	r4, {r0, r1}
   d4520:	e010      	b.n	d4544 <_Z9checkIM21v+0x74>
      previousDoorData = currentDoorData;  
    }
    //if curr > prev + 1, missed an event, publish warning
    else if(currentDoorData.controlByte > (previousDoorData.controlByte+0x01)){
   d4522:	dd14      	ble.n	d454e <_Z9checkIM21v+0x7e>

      Log.error("curr > prev + 1, WARNING WARNING WARNING, missed door event!");
   d4524:	4919      	ldr	r1, [pc, #100]	; (d458c <_Z9checkIM21v+0xbc>)
   d4526:	481a      	ldr	r0, [pc, #104]	; (d4590 <_Z9checkIM21v+0xc0>)
   d4528:	f7ff febb 	bl	d42a2 <_ZNK5spark6Logger5errorEPKcz>
      missedDoorEventCount++;
   d452c:	4a19      	ldr	r2, [pc, #100]	; (d4594 <_Z9checkIM21v+0xc4>)
   d452e:	6813      	ldr	r3, [r2, #0]
   d4530:	3301      	adds	r3, #1
   d4532:	6013      	str	r3, [r2, #0]
      logAndPublishDoorWarning(previousDoorData, currentDoorData);
   d4534:	e896 0003 	ldmia.w	r6, {r0, r1}
   d4538:	e897 000c 	ldmia.w	r7, {r2, r3}
   d453c:	f7ff ff90 	bl	d4460 <_Z24logAndPublishDoorWarning8doorDataS_>
      returnDoorData = currentDoorData;
   d4540:	e897 0003 	ldmia.w	r7, {r0, r1}
   d4544:	e885 0003 	stmia.w	r5, {r0, r1}
      previousDoorData = currentDoorData;  
   d4548:	e886 0003 	stmia.w	r6, {r0, r1}
   d454c:	e006      	b.n	d455c <_Z9checkIM21v+0x8c>
    }
    //special case for when control byte rolls over from FF to 00, don't want to lose event or publish missed door event warning
    else if ((currentDoorData.controlByte == 0x00) && (previousDoorData.controlByte == 0xFF)){
   d454e:	b90a      	cbnz	r2, d4554 <_Z9checkIM21v+0x84>
   d4550:	2bff      	cmp	r3, #255	; 0xff
   d4552:	d0e3      	beq.n	d451c <_Z9checkIM21v+0x4c>
      previousDoorData = currentDoorData;  

    }
    else {
      //no new data, do nothing
      Log.info("no new data");
   d4554:	4910      	ldr	r1, [pc, #64]	; (d4598 <_Z9checkIM21v+0xc8>)
   d4556:	480e      	ldr	r0, [pc, #56]	; (d4590 <_Z9checkIM21v+0xc0>)
   d4558:	f7ff fdb6 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
   d455c:	f001 fd26 	bl	d5fac <HAL_Timer_Get_Milli_Seconds>

    } //end publish if-else

    //record the time this value was pulled from the queue and control byte was checked
    returnDoorData.timestamp = millis();
   d4560:	6068      	str	r0, [r5, #4]

  }//end queue if

  return returnDoorData;
   d4562:	e895 0003 	ldmia.w	r5, {r0, r1}
   d4566:	e888 0003 	stmia.w	r8, {r0, r1}

} //end checkIM21()
   d456a:	4640      	mov	r0, r8
   d456c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4570:	2003e268 	.word	0x2003e268
   d4574:	2003e270 	.word	0x2003e270
   d4578:	2003e1cc 	.word	0x2003e1cc
   d457c:	2003e274 	.word	0x2003e274
   d4580:	2003e264 	.word	0x2003e264
   d4584:	2003e1c4 	.word	0x2003e1c4
   d4588:	2003e27c 	.word	0x2003e27c
   d458c:	000da084 	.word	0x000da084
   d4590:	2003e4b8 	.word	0x2003e4b8
   d4594:	2003e278 	.word	0x2003e278
   d4598:	000da0c1 	.word	0x000da0c1

000d459c <_GLOBAL__sub_I_globalDoorID>:

    os_thread_yield();

  }//endwhile

   d459c:	b508      	push	{r3, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d459e:	4b05      	ldr	r3, [pc, #20]	; (d45b4 <_GLOBAL__sub_I_globalDoorID+0x18>)
   d45a0:	2201      	movs	r2, #1
   d45a2:	701a      	strb	r2, [r3, #0]
   d45a4:	f001 fcba 	bl	d5f1c <HAL_Pin_Map>
   d45a8:	f001 fd00 	bl	d5fac <HAL_Timer_Get_Milli_Seconds>
//initialize door ID to agreed upon intial value
IM21DoorID globalDoorID = {0xAA, 0xAA, 0xAA};
os_queue_t bleQueue;
int missedDoorEventCount = 0;
bool doorLowBatteryFlag = false;
unsigned long doorHeartbeatReceived = millis();
   d45ac:	4b02      	ldr	r3, [pc, #8]	; (d45b8 <_GLOBAL__sub_I_globalDoorID+0x1c>)
   d45ae:	6018      	str	r0, [r3, #0]
   d45b0:	bd08      	pop	{r3, pc}
   d45b2:	bf00      	nop
   d45b4:	2003e275 	.word	0x2003e275
   d45b8:	2003e264 	.word	0x2003e264

000d45bc <_ZN5spark10LogHandler5writeEPKcj>:
    if (level >= filter_.level(category)) {
        write(data, size);
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
   d45bc:	4770      	bx	lr

000d45be <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   d45be:	6a00      	ldr	r0, [r0, #32]
   d45c0:	6803      	ldr	r3, [r0, #0]
   d45c2:	68db      	ldr	r3, [r3, #12]
   d45c4:	4718      	bx	r3
	...

000d45c8 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d45c8:	4b0a      	ldr	r3, [pc, #40]	; (d45f4 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   d45ca:	b510      	push	{r4, lr}
   d45cc:	4604      	mov	r4, r0
   d45ce:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d45d0:	f002 fef6 	bl	d73c0 <_ZN5spark10LogManager8instanceEv>
   d45d4:	4621      	mov	r1, r4
   d45d6:	f003 f8e3 	bl	d77a0 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   d45da:	f004 f9ff 	bl	d89dc <_Z16_fetch_usbserialv>
   d45de:	f004 f9f1 	bl	d89c4 <_ZN9USBSerial3endEv>
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d45e2:	4620      	mov	r0, r4
   d45e4:	4b04      	ldr	r3, [pc, #16]	; (d45f8 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   d45e6:	f840 3b04 	str.w	r3, [r0], #4
   d45ea:	f002 ffdf 	bl	d75ac <_ZN5spark6detail9LogFilterD1Ev>
    }
   d45ee:	4620      	mov	r0, r4
   d45f0:	bd10      	pop	{r4, pc}
   d45f2:	bf00      	nop
   d45f4:	000da0f0 	.word	0x000da0f0
   d45f8:	000da0d8 	.word	0x000da0d8

000d45fc <_ZN5spark16SerialLogHandlerD0Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d45fc:	b510      	push	{r4, lr}
   d45fe:	4604      	mov	r4, r0
        LogManager::instance()->removeHandler(this);
        Serial.end();
    }
   d4600:	f7ff ffe2 	bl	d45c8 <_ZN5spark16SerialLogHandlerD1Ev>
   d4604:	4620      	mov	r0, r4
   d4606:	2124      	movs	r1, #36	; 0x24
   d4608:	f004 ffba 	bl	d9580 <_ZdlPvj>
   d460c:	4620      	mov	r0, r4
   d460e:	bd10      	pop	{r4, pc}

000d4610 <setup>:
PRODUCT_ID(BRAVE_PRODUCT_ID); //you get this number off the particle console, see readme for instructions
PRODUCT_VERSION(BRAVE_FIRMWARE_VERSION); //must be an int, see versioning notes above
SYSTEM_THREAD(ENABLED);
SerialLogHandler logHandler(WARN_LEVEL);

void setup() {
   d4610:	b508      	push	{r3, lr}
        return HAL_Feature_Get(feature);
    }

    inline int enableFeature(HAL_Feature feature)
    {
        return HAL_Feature_Set(feature, true);
   d4612:	2101      	movs	r1, #1
   d4614:	2004      	movs	r0, #4
   d4616:	f001 fce9 	bl	d5fec <HAL_Feature_Set>
  // enable reset reason
  System.enableFeature(FEATURE_RESET_INFO);

  // use external antenna on Boron
  BLE.selectAntenna(BleAntennaType::EXTERNAL);
   d461a:	f002 fa21 	bl	d6a60 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d461e:	2102      	movs	r1, #2
   d4620:	f002 fa3c 	bl	d6a9c <_ZNK8particle14BleLocalDevice13selectAntennaENS_14BleAntennaTypeE>
  setupIM21();
   d4624:	f7ff fe4c 	bl	d42c0 <_Z9setupIM21v>
  setupINS3331();
   d4628:	f001 faa4 	bl	d5b74 <_Z12setupINS3331v>
  setupConsoleFunctions();
   d462c:	f000 fa86 	bl	d4b3c <_Z21setupConsoleFunctionsv>
  setupStateMachine();
   d4630:	f000 fad6 	bl	d4be0 <_Z17setupStateMachinev>
  setupWatchdog();
   d4634:	f7ff fd76 	bl	d4124 <_Z13setupWatchdogv>



  Particle.publishVitals(900);  //15 minutes
   d4638:	f44f 7161 	mov.w	r1, #900	; 0x384
   d463c:	4802      	ldr	r0, [pc, #8]	; (d4648 <setup+0x38>)
  
}
   d463e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  setupStateMachine();
  setupWatchdog();



  Particle.publishVitals(900);  //15 minutes
   d4642:	f003 be74 	b.w	d832e <_ZN10CloudClass13publishVitalsEm>
   d4646:	bf00      	nop
   d4648:	2003e731 	.word	0x2003e731

000d464c <loop>:
  
}

void loop() {
   d464c:	b510      	push	{r4, lr}
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d464e:	4b11      	ldr	r3, [pc, #68]	; (d4694 <loop+0x48>)
   d4650:	2200      	movs	r2, #0
   d4652:	4611      	mov	r1, r2
   d4654:	6858      	ldr	r0, [r3, #4]
   d4656:	f001 fed3 	bl	d6400 <network_ready>

  // service the watchdog if Particle is connected to wifi
  if(Cellular.ready()){
   d465a:	b108      	cbz	r0, d4660 <loop+0x14>
    serviceWatchdog();
   d465c:	f7ff fd7c 	bl	d4158 <_Z15serviceWatchdogv>
  //aka don't send commands to peripherals via UART in setup() because
  //particleOS may not have finished initializing its UART modules
  static bool initialized = false;

  //do once
  if(!initialized && Particle.connected()){ 
   d4660:	4c0d      	ldr	r4, [pc, #52]	; (d4698 <loop+0x4c>)
   d4662:	7823      	ldrb	r3, [r4, #0]
   d4664:	b133      	cbz	r3, d4674 <loop+0x28>
    initialized = true; 
  }

  //do every time loop() is called
  if (initialized) {
    stateHandler();
   d4666:	4b0d      	ldr	r3, [pc, #52]	; (d469c <loop+0x50>)
   d4668:	681b      	ldr	r3, [r3, #0]
   d466a:	4798      	blx	r3
    getHeartbeat();
  }


}
   d466c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  }

  //do every time loop() is called
  if (initialized) {
    stateHandler();
    getHeartbeat();
   d4670:	f000 bc60 	b.w	d4f34 <_Z12getHeartbeatv>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4674:	f001 ff04 	bl	d6480 <spark_cloud_flag_connected>
  //aka don't send commands to peripherals via UART in setup() because
  //particleOS may not have finished initializing its UART modules
  static bool initialized = false;

  //do once
  if(!initialized && Particle.connected()){ 
   d4678:	b918      	cbnz	r0, d4682 <loop+0x36>
    startINSSerial();
    initialized = true; 
  }

  //do every time loop() is called
  if (initialized) {
   d467a:	7823      	ldrb	r3, [r4, #0]
   d467c:	2b00      	cmp	r3, #0
   d467e:	d1f2      	bne.n	d4666 <loop+0x1a>
   d4680:	bd10      	pop	{r4, pc}

  //do once
  if(!initialized && Particle.connected()){ 
    // use external antenna on Boron
    //BLE.selectAntenna(BleAntennaType::EXTERNAL);  
    initializeStateMachineConsts();
   d4682:	f000 fac5 	bl	d4c10 <_Z28initializeStateMachineConstsv>
    initializeDoorID();
   d4686:	f7ff fe6f 	bl	d4368 <_Z16initializeDoorIDv>
    startINSSerial();
   d468a:	f001 fb1d 	bl	d5cc8 <_Z14startINSSerialv>
    initialized = true; 
   d468e:	2301      	movs	r3, #1
   d4690:	7023      	strb	r3, [r4, #0]
   d4692:	e7f2      	b.n	d467a <loop+0x2e>
   d4694:	2003e4f0 	.word	0x2003e4f0
   d4698:	2003e2a8 	.word	0x2003e2a8
   d469c:	2003e1e4 	.word	0x2003e1e4

000d46a0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d46a0:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d46a2:	6804      	ldr	r4, [r0, #0]
   d46a4:	6843      	ldr	r3, [r0, #4]
   d46a6:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d46a8:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d46aa:	fb06 4603 	mla	r6, r6, r3, r4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d46ae:	42a6      	cmp	r6, r4
   d46b0:	d004      	beq.n	d46bc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
    static int nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found);
};

} // namespace spark::detail

class LogCategoryFilter {
   d46b2:	4620      	mov	r0, r4
   d46b4:	f001 ffc8 	bl	d6648 <_ZN6StringD1Ev>
   d46b8:	3414      	adds	r4, #20
   d46ba:	e7f8      	b.n	d46ae <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d46bc:	6828      	ldr	r0, [r5, #0]
   d46be:	f001 ff07 	bl	d64d0 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d46c2:	4628      	mov	r0, r5
   d46c4:	bd70      	pop	{r4, r5, r6, pc}

000d46c6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d46c6:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d46c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d46ca:	4606      	mov	r6, r0
   d46cc:	460c      	mov	r4, r1
   d46ce:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d46d0:	d916      	bls.n	d4700 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   d46d2:	4290      	cmp	r0, r2
   d46d4:	d215      	bcs.n	d4702 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            // Move elements in reverse order
            --p;
            --end;
   d46d6:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
   d46da:	1a6c      	subs	r4, r5, r1
   d46dc:	f1a1 0714 	sub.w	r7, r1, #20
   d46e0:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d46e2:	42af      	cmp	r7, r5
   d46e4:	d01c      	beq.n	d4720 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   d46e6:	b12c      	cbz	r4, d46f4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   d46e8:	4629      	mov	r1, r5
   d46ea:	4620      	mov	r0, r4
   d46ec:	f001 ff9c 	bl	d6628 <_ZN6StringC1EOS_>
   d46f0:	7c2b      	ldrb	r3, [r5, #16]
   d46f2:	7423      	strb	r3, [r4, #16]
   d46f4:	4628      	mov	r0, r5
   d46f6:	f001 ffa7 	bl	d6648 <_ZN6StringD1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d46fa:	3d14      	subs	r5, #20
   d46fc:	3c14      	subs	r4, #20
   d46fe:	e7f0      	b.n	d46e2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d4700:	d00e      	beq.n	d4720 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   d4702:	42ac      	cmp	r4, r5
   d4704:	d00c      	beq.n	d4720 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   d4706:	b12e      	cbz	r6, d4714 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   d4708:	4621      	mov	r1, r4
   d470a:	4630      	mov	r0, r6
   d470c:	f001 ff8c 	bl	d6628 <_ZN6StringC1EOS_>
   d4710:	7c23      	ldrb	r3, [r4, #16]
   d4712:	7433      	strb	r3, [r6, #16]
   d4714:	4620      	mov	r0, r4
   d4716:	f001 ff97 	bl	d6648 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d471a:	3414      	adds	r4, #20
   d471c:	3614      	adds	r6, #20
   d471e:	e7f0      	b.n	d4702 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
   d4720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4722 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d4722:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d4726:	2300      	movs	r3, #0
   d4728:	6003      	str	r3, [r0, #0]
   d472a:	6043      	str	r3, [r0, #4]
   d472c:	6083      	str	r3, [r0, #8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d472e:	684e      	ldr	r6, [r1, #4]
   d4730:	429e      	cmp	r6, r3
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d4732:	4604      	mov	r4, r0
   d4734:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d4736:	dd24      	ble.n	d4782 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d4738:	f04f 0814 	mov.w	r8, #20
   d473c:	fb08 f006 	mul.w	r0, r8, r6
   d4740:	f001 febe 	bl	d64c0 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d4744:	4605      	mov	r5, r0
   d4746:	b1e0      	cbz	r0, d4782 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
                return false;
            }
            move(d, data_, data_ + size_);
   d4748:	e894 0006 	ldmia.w	r4, {r1, r2}
   d474c:	fb08 1202 	mla	r2, r8, r2, r1
   d4750:	f7ff ffb9 	bl	d46c6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d4754:	6820      	ldr	r0, [r4, #0]
   d4756:	f001 febb 	bl	d64d0 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d475a:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d475c:	60a6      	str	r6, [r4, #8]
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d475e:	683e      	ldr	r6, [r7, #0]
   d4760:	687b      	ldr	r3, [r7, #4]
   d4762:	fb08 6803 	mla	r8, r8, r3, r6
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d4766:	4546      	cmp	r6, r8
   d4768:	d009      	beq.n	d477e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
            new(dest) T(*it);
   d476a:	b12d      	cbz	r5, d4778 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x56>
   d476c:	4631      	mov	r1, r6
   d476e:	4628      	mov	r0, r5
   d4770:	f001 ffd3 	bl	d671a <_ZN6StringC1ERKS_>
   d4774:	7c33      	ldrb	r3, [r6, #16]
   d4776:	742b      	strb	r3, [r5, #16]
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d4778:	3614      	adds	r6, #20
   d477a:	3514      	adds	r5, #20
   d477c:	e7f3      	b.n	d4766 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
        size_ = vector.size_;
   d477e:	687b      	ldr	r3, [r7, #4]
   d4780:	6063      	str	r3, [r4, #4]
    }
}
   d4782:	4620      	mov	r0, r4
   d4784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4788 <_GLOBAL__sub_I___appProductID>:
    stateHandler();
    getHeartbeat();
  }


}
   d4788:	b570      	push	{r4, r5, r6, lr}
   d478a:	b08c      	sub	sp, #48	; 0x30
   d478c:	f001 fbc6 	bl	d5f1c <HAL_Pin_Map>
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   d4790:	f004 fe1c 	bl	d93cc <spark_protocol_instance>
   d4794:	2300      	movs	r3, #0
   d4796:	461a      	mov	r2, r3
   d4798:	f643 4177 	movw	r1, #15479	; 0x3c77
   d479c:	f004 fe1e 	bl	d93dc <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   d47a0:	f004 fe14 	bl	d93cc <spark_protocol_instance>
   d47a4:	2300      	movs	r3, #0
   d47a6:	461a      	mov	r2, r3
   d47a8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d47ac:	f004 fe1e 	bl	d93ec <spark_protocol_set_product_firmware_version>
#define BRAVE_FIRMWARE_VERSION 2000 //see versioning notes in the readme
#define BRAVE_PRODUCT_ID 15479 //14807 = beta units, 15054 = production units

PRODUCT_ID(BRAVE_PRODUCT_ID); //you get this number off the particle console, see readme for instructions
PRODUCT_VERSION(BRAVE_FIRMWARE_VERSION); //must be an int, see versioning notes above
SYSTEM_THREAD(ENABLED);
   d47b0:	2100      	movs	r1, #0
   d47b2:	2001      	movs	r0, #1
   d47b4:	f001 fde0 	bl	d6378 <system_thread_set_state>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d47b8:	2300      	movs	r3, #0
   d47ba:	9300      	str	r3, [sp, #0]
   d47bc:	9301      	str	r3, [sp, #4]
   d47be:	9302      	str	r3, [sp, #8]
namespace spark {

class SerialLogHandler: public StreamLogHandler {
public:
    explicit SerialLogHandler(LogLevel level = LOG_LEVEL_INFO, LogCategoryFilters filters = {}) :
            StreamLogHandler(Serial, level, filters) {
   d47c0:	f004 f90c 	bl	d89dc <_Z16_fetch_usbserialv>
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
        filter_(level, filters) {
   d47c4:	4c1c      	ldr	r4, [pc, #112]	; (d4838 <_GLOBAL__sub_I___appProductID+0xb0>)
   d47c6:	4606      	mov	r6, r0
   d47c8:	4669      	mov	r1, sp
   d47ca:	a803      	add	r0, sp, #12
   d47cc:	f7ff ffa9 	bl	d4722 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d47d0:	4625      	mov	r5, r4
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d47d2:	a903      	add	r1, sp, #12
   d47d4:	a806      	add	r0, sp, #24
   d47d6:	f7ff ffa4 	bl	d4722 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
        filter_(level, filters) {
   d47da:	4b18      	ldr	r3, [pc, #96]	; (d483c <_GLOBAL__sub_I___appProductID+0xb4>)
   d47dc:	f845 3b04 	str.w	r3, [r5], #4
   d47e0:	a906      	add	r1, sp, #24
   d47e2:	a809      	add	r0, sp, #36	; 0x24
   d47e4:	f7ff ff9d 	bl	d4722 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d47e8:	aa09      	add	r2, sp, #36	; 0x24
   d47ea:	2128      	movs	r1, #40	; 0x28
   d47ec:	4628      	mov	r0, r5
   d47ee:	f003 f93e 	bl	d7a6e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d47f2:	a809      	add	r0, sp, #36	; 0x24
   d47f4:	f7ff ff54 	bl	d46a0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d47f8:	a806      	add	r0, sp, #24
   d47fa:	f7ff ff51 	bl	d46a0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d47fe:	4b10      	ldr	r3, [pc, #64]	; (d4840 <_GLOBAL__sub_I___appProductID+0xb8>)
   d4800:	6023      	str	r3, [r4, #0]
   d4802:	a803      	add	r0, sp, #12
   d4804:	6226      	str	r6, [r4, #32]
   d4806:	f7ff ff4b 	bl	d46a0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d480a:	4b0e      	ldr	r3, [pc, #56]	; (d4844 <_GLOBAL__sub_I___appProductID+0xbc>)
   d480c:	6023      	str	r3, [r4, #0]
        Serial.begin();
   d480e:	f004 f8e5 	bl	d89dc <_Z16_fetch_usbserialv>
   d4812:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4816:	f004 f8d1 	bl	d89bc <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   d481a:	f002 fdd1 	bl	d73c0 <_ZN5spark10LogManager8instanceEv>
   d481e:	4621      	mov	r1, r4
   d4820:	f003 f8b8 	bl	d7994 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(WARN_LEVEL);
   d4824:	4668      	mov	r0, sp
   d4826:	f7ff ff3b 	bl	d46a0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d482a:	4a07      	ldr	r2, [pc, #28]	; (d4848 <_GLOBAL__sub_I___appProductID+0xc0>)
   d482c:	4907      	ldr	r1, [pc, #28]	; (d484c <_GLOBAL__sub_I___appProductID+0xc4>)
   d482e:	4620      	mov	r0, r4
   d4830:	f004 fe98 	bl	d9564 <__aeabi_atexit>
    stateHandler();
    getHeartbeat();
  }


}
   d4834:	b00c      	add	sp, #48	; 0x30
   d4836:	bd70      	pop	{r4, r5, r6, pc}
   d4838:	2003e284 	.word	0x2003e284
   d483c:	000da0d8 	.word	0x000da0d8
   d4840:	000dabd0 	.word	0x000dabd0
   d4844:	000da0f0 	.word	0x000da0f0
   d4848:	2003e25c 	.word	0x2003e25c
   d484c:	000d45c9 	.word	0x000d45c9

000d4850 <_Z26toggle_debugging_publishes6String>:
  Particle.function("Turn_Debugging_Publishes_On_Off", toggle_debugging_publishes);   
  Particle.function("Change_IM21_Door_ID", im21_door_id_set); 

}

int toggle_debugging_publishes(String command){
   d4850:	6803      	ldr	r3, [r0, #0]

  //string.toInt() returns 0 if it fails, so can't distinguish between user 
  //entering 0 vs entering bad input. So convert to char and use ascii table
  const char* holder = command.c_str();

  if(*(holder+1) != 0){
   d4852:	7858      	ldrb	r0, [r3, #1]
   d4854:	b940      	cbnz	r0, d4868 <_Z26toggle_debugging_publishes6String+0x18>
    //any string longer than 1 char is invalid input, so
    returnFlag = -1;
  }
  else if(*holder == '0'){
   d4856:	781b      	ldrb	r3, [r3, #0]
   d4858:	2b30      	cmp	r3, #48	; 0x30
   d485a:	d002      	beq.n	d4862 <_Z26toggle_debugging_publishes6String+0x12>
    stateMachineDebugFlag = false;
    returnFlag = 0;
  }
  else if(*holder == '1'){
   d485c:	2b31      	cmp	r3, #49	; 0x31
   d485e:	d103      	bne.n	d4868 <_Z26toggle_debugging_publishes6String+0x18>
    stateMachineDebugFlag = true;
   d4860:	2001      	movs	r0, #1
   d4862:	4b03      	ldr	r3, [pc, #12]	; (d4870 <_Z26toggle_debugging_publishes6String+0x20>)
   d4864:	7018      	strb	r0, [r3, #0]
   d4866:	4770      	bx	lr
  //entering 0 vs entering bad input. So convert to char and use ascii table
  const char* holder = command.c_str();

  if(*(holder+1) != 0){
    //any string longer than 1 char is invalid input, so
    returnFlag = -1;
   d4868:	f04f 30ff 	mov.w	r0, #4294967295
    returnFlag = -1;
  }

  return returnFlag;

}
   d486c:	4770      	bx	lr
   d486e:	bf00      	nop
   d4870:	2003e2dc 	.word	0x2003e2dc

000d4874 <_Z18duration_timer_set6String>:
  return returnFlag;

}

//returns duration if valid input is given, otherwise returns -1
int duration_timer_set(String input){
   d4874:	b513      	push	{r0, r1, r4, lr}
  int returnFlag = -1;

  const char* holder = input.c_str();

  //if e, echo the current threshold
  if(*holder == 'e'){
   d4876:	6803      	ldr	r3, [r0, #0]
   d4878:	781b      	ldrb	r3, [r3, #0]
   d487a:	2b65      	cmp	r3, #101	; 0x65
   d487c:	d10d      	bne.n	d489a <_Z18duration_timer_set6String+0x26>
   d487e:	4c13      	ldr	r4, [pc, #76]	; (d48cc <_Z18duration_timer_set6String+0x58>)
    EEPROM.get(ADDR_STATE2_MAX_DURATION, state2_max_duration);
   d4880:	f004 fe1c 	bl	d94bc <_Z21__fetch_global_EEPROMv>
   d4884:	200c      	movs	r0, #12
   d4886:	2204      	movs	r2, #4
   d4888:	4621      	mov	r1, r4
   d488a:	f001 fb9f 	bl	d5fcc <HAL_EEPROM_Get>
    returnFlag = state2_max_duration/1000;
   d488e:	6823      	ldr	r3, [r4, #0]
   d4890:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4894:	fbb3 f0f0 	udiv	r0, r3, r0
   d4898:	e016      	b.n	d48c8 <_Z18duration_timer_set6String+0x54>
  }
  //else parse new threshold
  else {
    int timeout = input.toInt();
   d489a:	f001 ff7b 	bl	d6794 <_ZNK6String5toIntEv>
    //increase timeout value to from seconds to ms
    timeout = timeout*1000;
   d489e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   d48a2:	4360      	muls	r0, r4
   d48a4:	9001      	str	r0, [sp, #4]

    if(timeout == 0){
   d48a6:	b168      	cbz	r0, d48c4 <_Z18duration_timer_set6String+0x50>
        //string.toInt() returns 0 if input not an int
        //and a threshold value of 0 makes no sense, so return -1
        returnFlag = -1;
    }
    else {
      EEPROM.put(ADDR_STATE2_MAX_DURATION, timeout);
   d48a8:	f004 fe08 	bl	d94bc <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d48ac:	2204      	movs	r2, #4
   d48ae:	200c      	movs	r0, #12
   d48b0:	eb0d 0102 	add.w	r1, sp, r2
   d48b4:	f001 fb92 	bl	d5fdc <HAL_EEPROM_Put>
      state2_max_duration = timeout;
   d48b8:	4b04      	ldr	r3, [pc, #16]	; (d48cc <_Z18duration_timer_set6String+0x58>)
   d48ba:	9801      	ldr	r0, [sp, #4]
   d48bc:	6018      	str	r0, [r3, #0]
      returnFlag = state2_max_duration/1000;
   d48be:	fbb0 f0f4 	udiv	r0, r0, r4
   d48c2:	e001      	b.n	d48c8 <_Z18duration_timer_set6String+0x54>
    timeout = timeout*1000;

    if(timeout == 0){
        //string.toInt() returns 0 if input not an int
        //and a threshold value of 0 makes no sense, so return -1
        returnFlag = -1;
   d48c4:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return returnFlag;

}
   d48c8:	b002      	add	sp, #8
   d48ca:	bd10      	pop	{r4, pc}
   d48cc:	2003e1d8 	.word	0x2003e1d8

000d48d0 <_Z17ins_threshold_set6String>:
  return returnFlag;

}

//returns threshold if valid input is given, otherwise returns -1
int ins_threshold_set(String input){
   d48d0:	b513      	push	{r0, r1, r4, lr}
  int returnFlag = -1;

  const char* holder = input.c_str();

  //if e, echo the current threshold
  if(*holder == 'e'){
   d48d2:	6803      	ldr	r3, [r0, #0]
   d48d4:	781b      	ldrb	r3, [r3, #0]
   d48d6:	2b65      	cmp	r3, #101	; 0x65
   d48d8:	d109      	bne.n	d48ee <_Z17ins_threshold_set6String+0x1e>
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d48da:	4c0f      	ldr	r4, [pc, #60]	; (d4918 <_Z17ins_threshold_set6String+0x48>)
    EEPROM.get(ADDR_INS_THRESHOLD, ins_threshold);
   d48dc:	f004 fdee 	bl	d94bc <_Z21__fetch_global_EEPROMv>
   d48e0:	2204      	movs	r2, #4
   d48e2:	4610      	mov	r0, r2
   d48e4:	4621      	mov	r1, r4
   d48e6:	f001 fb71 	bl	d5fcc <HAL_EEPROM_Get>
    returnFlag = ins_threshold;
   d48ea:	6820      	ldr	r0, [r4, #0]
   d48ec:	e011      	b.n	d4912 <_Z17ins_threshold_set6String+0x42>
  }
  //else parse new threshold
  else {
    int threshold = input.toInt();
   d48ee:	f001 ff51 	bl	d6794 <_ZNK6String5toIntEv>
   d48f2:	9001      	str	r0, [sp, #4]

    if(threshold == 0){
   d48f4:	b158      	cbz	r0, d490e <_Z17ins_threshold_set6String+0x3e>
        //string.toInt() returns 0 if input not an int
        //and a threshold value of 0 makes no sense, so return -1
        returnFlag = -1;
    }
    else {
      EEPROM.put(ADDR_INS_THRESHOLD, threshold);
   d48f6:	f004 fde1 	bl	d94bc <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d48fa:	2204      	movs	r2, #4
   d48fc:	4610      	mov	r0, r2
   d48fe:	eb0d 0102 	add.w	r1, sp, r2
   d4902:	f001 fb6b 	bl	d5fdc <HAL_EEPROM_Put>
      ins_threshold = threshold;
   d4906:	4b04      	ldr	r3, [pc, #16]	; (d4918 <_Z17ins_threshold_set6String+0x48>)
   d4908:	9801      	ldr	r0, [sp, #4]
   d490a:	6018      	str	r0, [r3, #0]
   d490c:	e001      	b.n	d4912 <_Z17ins_threshold_set6String+0x42>
    int threshold = input.toInt();

    if(threshold == 0){
        //string.toInt() returns 0 if input not an int
        //and a threshold value of 0 makes no sense, so return -1
        returnFlag = -1;
   d490e:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return returnFlag;

}
   d4912:	b002      	add	sp, #8
   d4914:	bd10      	pop	{r4, pc}
   d4916:	bf00      	nop
   d4918:	2003e1e0 	.word	0x2003e1e0

000d491c <_Z19stillness_timer_set6String>:
  return returnFlag;

}

//returns stillness timer length if valid input is given, otherwise returns -1
int stillness_timer_set(String input){
   d491c:	b513      	push	{r0, r1, r4, lr}
  int returnFlag = -1;

  const char* holder = input.c_str();

  //if e, echo the current threshold
  if(*holder == 'e'){
   d491e:	6803      	ldr	r3, [r0, #0]
   d4920:	781b      	ldrb	r3, [r3, #0]
   d4922:	2b65      	cmp	r3, #101	; 0x65
   d4924:	d10d      	bne.n	d4942 <_Z19stillness_timer_set6String+0x26>
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d4926:	4c13      	ldr	r4, [pc, #76]	; (d4974 <_Z19stillness_timer_set6String+0x58>)
    EEPROM.get(ADDR_STATE3_MAX_STILLNES_TIME, state3_max_stillness_time);
   d4928:	f004 fdc8 	bl	d94bc <_Z21__fetch_global_EEPROMv>
   d492c:	2010      	movs	r0, #16
   d492e:	2204      	movs	r2, #4
   d4930:	4621      	mov	r1, r4
   d4932:	f001 fb4b 	bl	d5fcc <HAL_EEPROM_Get>
    returnFlag = state3_max_stillness_time/1000;
   d4936:	6823      	ldr	r3, [r4, #0]
   d4938:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d493c:	fbb3 f0f0 	udiv	r0, r3, r0
   d4940:	e016      	b.n	d4970 <_Z19stillness_timer_set6String+0x54>
  }
  //else parse new threshold
  else {
    int timeout = input.toInt();
   d4942:	f001 ff27 	bl	d6794 <_ZNK6String5toIntEv>
    //increase timeout value to from seconds to ms
    timeout = timeout*1000;
   d4946:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   d494a:	4360      	muls	r0, r4
   d494c:	9001      	str	r0, [sp, #4]

    if(timeout == 0){
   d494e:	b168      	cbz	r0, d496c <_Z19stillness_timer_set6String+0x50>
        //string.toInt() returns 0 if input not an int
        //and a threshold value of 0 makes no sense, so return -1
        returnFlag = -1;
    }
    else {
      EEPROM.put(ADDR_STATE3_MAX_STILLNES_TIME, timeout);
   d4950:	f004 fdb4 	bl	d94bc <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d4954:	2204      	movs	r2, #4
   d4956:	2010      	movs	r0, #16
   d4958:	eb0d 0102 	add.w	r1, sp, r2
   d495c:	f001 fb3e 	bl	d5fdc <HAL_EEPROM_Put>
      state3_max_stillness_time = timeout;
   d4960:	4b04      	ldr	r3, [pc, #16]	; (d4974 <_Z19stillness_timer_set6String+0x58>)
   d4962:	9801      	ldr	r0, [sp, #4]
   d4964:	6018      	str	r0, [r3, #0]
      returnFlag = state3_max_stillness_time/1000;
   d4966:	fbb0 f0f4 	udiv	r0, r0, r4
   d496a:	e001      	b.n	d4970 <_Z19stillness_timer_set6String+0x54>
    timeout = timeout*1000;

    if(timeout == 0){
        //string.toInt() returns 0 if input not an int
        //and a threshold value of 0 makes no sense, so return -1
        returnFlag = -1;
   d496c:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return returnFlag;

}
   d4970:	b002      	add	sp, #8
   d4972:	bd10      	pop	{r4, pc}
   d4974:	2003e1dc 	.word	0x2003e1dc

000d4978 <_Z17initial_timer_set6String>:
  return returnFlag;

}

//returns initial timer length if valid input is given, otherwise returns -1
int initial_timer_set(String input){
   d4978:	b513      	push	{r0, r1, r4, lr}
  int returnFlag = -1;

  const char* holder = input.c_str();

  //if e, echo the current threshold
  if(*holder == 'e'){
   d497a:	6803      	ldr	r3, [r0, #0]
   d497c:	781b      	ldrb	r3, [r3, #0]
   d497e:	2b65      	cmp	r3, #101	; 0x65
   d4980:	d10d      	bne.n	d499e <_Z17initial_timer_set6String+0x26>
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d4982:	4c13      	ldr	r4, [pc, #76]	; (d49d0 <_Z17initial_timer_set6String+0x58>)
    EEPROM.get(ADDR_STATE1_MAX_TIME, state1_max_time);
   d4984:	f004 fd9a 	bl	d94bc <_Z21__fetch_global_EEPROMv>
   d4988:	2008      	movs	r0, #8
   d498a:	2204      	movs	r2, #4
   d498c:	4621      	mov	r1, r4
   d498e:	f001 fb1d 	bl	d5fcc <HAL_EEPROM_Get>
    returnFlag = state1_max_time/1000;
   d4992:	6823      	ldr	r3, [r4, #0]
   d4994:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4998:	fbb3 f0f0 	udiv	r0, r3, r0
   d499c:	e016      	b.n	d49cc <_Z17initial_timer_set6String+0x54>
  }
  //else parse new threshold
  else {
    int timeout = input.toInt();
   d499e:	f001 fef9 	bl	d6794 <_ZNK6String5toIntEv>
    //increase timeout value to from seconds to ms
    timeout = timeout*1000;
   d49a2:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   d49a6:	4360      	muls	r0, r4
   d49a8:	9001      	str	r0, [sp, #4]

    if(timeout == 0){
   d49aa:	b168      	cbz	r0, d49c8 <_Z17initial_timer_set6String+0x50>
        //string.toInt() returns 0 if input not an int
        //and a threshold value of 0 makes no sense, so return -1
        returnFlag = -1;
    }
    else {
      EEPROM.put(ADDR_STATE1_MAX_TIME, timeout);
   d49ac:	f004 fd86 	bl	d94bc <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d49b0:	2204      	movs	r2, #4
   d49b2:	2008      	movs	r0, #8
   d49b4:	eb0d 0102 	add.w	r1, sp, r2
   d49b8:	f001 fb10 	bl	d5fdc <HAL_EEPROM_Put>
      state1_max_time = timeout;
   d49bc:	4b04      	ldr	r3, [pc, #16]	; (d49d0 <_Z17initial_timer_set6String+0x58>)
   d49be:	9801      	ldr	r0, [sp, #4]
   d49c0:	6018      	str	r0, [r3, #0]
      returnFlag = state1_max_time/1000;
   d49c2:	fbb0 f0f4 	udiv	r0, r0, r4
   d49c6:	e001      	b.n	d49cc <_Z17initial_timer_set6String+0x54>
    timeout = timeout*1000;

    if(timeout == 0){
        //string.toInt() returns 0 if input not an int
        //and a threshold value of 0 makes no sense, so return -1
        returnFlag = -1;
   d49c8:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return returnFlag;

}
   d49cc:	b002      	add	sp, #8
   d49ce:	bd10      	pop	{r4, pc}
   d49d0:	2003e1d4 	.word	0x2003e1d4

000d49d4 <_Z16im21_door_id_set6String>:
}



//particle console function to get/set door sensor ID
int im21_door_id_set(String command) { // command is a long string with all the config values
   d49d4:	b5f0      	push	{r4, r5, r6, r7, lr}

  //get pointer to user-entered string
  const char* checkForEcho = command.c_str();

  //if echo, publish current door ID
  if(*checkForEcho == 'e'){
   d49d6:	6803      	ldr	r3, [r0, #0]
   d49d8:	781b      	ldrb	r3, [r3, #0]
   d49da:	2b65      	cmp	r3, #101	; 0x65
}



//particle console function to get/set door sensor ID
int im21_door_id_set(String command) { // command is a long string with all the config values
   d49dc:	b097      	sub	sp, #92	; 0x5c
   d49de:	4605      	mov	r5, r0

  //get pointer to user-entered string
  const char* checkForEcho = command.c_str();

  //if echo, publish current door ID
  if(*checkForEcho == 'e'){
   d49e0:	d143      	bne.n	d4a6a <_Z16im21_door_id_set6String+0x96>

    IM21DoorID holder;   
    EEPROM.get(ADDR_IM21_DOORID,holder.byte1);  
   d49e2:	f004 fd6b 	bl	d94bc <_Z21__fetch_global_EEPROMv>
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d49e6:	2201      	movs	r2, #1
   d49e8:	a903      	add	r1, sp, #12
   d49ea:	2014      	movs	r0, #20
   d49ec:	f001 faee 	bl	d5fcc <HAL_EEPROM_Get>
    EEPROM.get((ADDR_IM21_DOORID+1),holder.byte2);  
   d49f0:	f004 fd64 	bl	d94bc <_Z21__fetch_global_EEPROMv>
   d49f4:	2201      	movs	r2, #1
   d49f6:	f10d 010d 	add.w	r1, sp, #13
   d49fa:	2015      	movs	r0, #21
   d49fc:	f001 fae6 	bl	d5fcc <HAL_EEPROM_Get>
    EEPROM.get((ADDR_IM21_DOORID+2),holder.byte3);  
   d4a00:	f004 fd5c 	bl	d94bc <_Z21__fetch_global_EEPROMv>
   d4a04:	2201      	movs	r2, #1
   d4a06:	f10d 010e 	add.w	r1, sp, #14
   d4a0a:	2016      	movs	r0, #22
   d4a0c:	f001 fade 	bl	d5fcc <HAL_EEPROM_Get>

    char buffer[64];
    snprintf(buffer, sizeof(buffer), "{\"byte1\":\"%02X\", \"byte2\":\"%02X\", \"byte3\":\"%02X\"}", 
            holder.byte1,holder.byte2,holder.byte3); 
   d4a10:	f89d 200e 	ldrb.w	r2, [sp, #14]
   d4a14:	9201      	str	r2, [sp, #4]
   d4a16:	f89d 200d 	ldrb.w	r2, [sp, #13]
   d4a1a:	f89d 300c 	ldrb.w	r3, [sp, #12]
   d4a1e:	9200      	str	r2, [sp, #0]
   d4a20:	2140      	movs	r1, #64	; 0x40
   d4a22:	4a3f      	ldr	r2, [pc, #252]	; (d4b20 <_Z16im21_door_id_set6String+0x14c>)
   d4a24:	a806      	add	r0, sp, #24
   d4a26:	f001 fd6b 	bl	d6500 <snprintf>
   d4a2a:	4b3e      	ldr	r3, [pc, #248]	; (d4b24 <_Z16im21_door_id_set6String+0x150>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4a2c:	493e      	ldr	r1, [pc, #248]	; (d4b28 <_Z16im21_door_id_set6String+0x154>)
   d4a2e:	781b      	ldrb	r3, [r3, #0]
   d4a30:	f88d 3000 	strb.w	r3, [sp]
   d4a34:	aa06      	add	r2, sp, #24
   d4a36:	233c      	movs	r3, #60	; 0x3c
   d4a38:	a804      	add	r0, sp, #16
   d4a3a:	f003 fd75 	bl	d8528 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4a3e:	9c05      	ldr	r4, [sp, #20]
   d4a40:	2c00      	cmp	r4, #0
   d4a42:	d069      	beq.n	d4b18 <_Z16im21_door_id_set6String+0x144>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4a44:	6863      	ldr	r3, [r4, #4]
   d4a46:	3b01      	subs	r3, #1
   d4a48:	6063      	str	r3, [r4, #4]
   d4a4a:	2b00      	cmp	r3, #0
   d4a4c:	d164      	bne.n	d4b18 <_Z16im21_door_id_set6String+0x144>
        {
          _M_dispose();
   d4a4e:	6823      	ldr	r3, [r4, #0]
   d4a50:	4620      	mov	r0, r4
   d4a52:	689b      	ldr	r3, [r3, #8]
   d4a54:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4a56:	68a3      	ldr	r3, [r4, #8]
   d4a58:	3b01      	subs	r3, #1
   d4a5a:	60a3      	str	r3, [r4, #8]
   d4a5c:	2b00      	cmp	r3, #0
   d4a5e:	d15b      	bne.n	d4b18 <_Z16im21_door_id_set6String+0x144>
            _M_destroy();
   d4a60:	6823      	ldr	r3, [r4, #0]
   d4a62:	4620      	mov	r0, r4
   d4a64:	68db      	ldr	r3, [r3, #12]
   d4a66:	4798      	blx	r3
   d4a68:	e056      	b.n	d4b18 <_Z16im21_door_id_set6String+0x144>
  {
    //parse input string and update global door ID 
    const char* byteholder1;
    const char* byteholder2;
    const char* byteholder3;
    int split1 = command.indexOf(',');
   d4a6a:	212c      	movs	r1, #44	; 0x2c
   d4a6c:	f001 fe6e 	bl	d674c <_ZNK6String7indexOfEc>
    byteholder1 = command.substring(0,split1).c_str();
   d4a70:	4629      	mov	r1, r5
   d4a72:	4603      	mov	r3, r0
   d4a74:	2200      	movs	r2, #0
  {
    //parse input string and update global door ID 
    const char* byteholder1;
    const char* byteholder2;
    const char* byteholder3;
    int split1 = command.indexOf(',');
   d4a76:	4607      	mov	r7, r0
    byteholder1 = command.substring(0,split1).c_str();
   d4a78:	a806      	add	r0, sp, #24
   d4a7a:	f001 fe6b 	bl	d6754 <_ZNK6String9substringEjj>
   d4a7e:	9c06      	ldr	r4, [sp, #24]
   d4a80:	a806      	add	r0, sp, #24
   d4a82:	f001 fde1 	bl	d6648 <_ZN6StringD1Ev>
    globalDoorID.byte3 = (uint8_t)strtol(byteholder1,NULL,16);
   d4a86:	2210      	movs	r2, #16
   d4a88:	2100      	movs	r1, #0
   d4a8a:	4620      	mov	r0, r4
   d4a8c:	f005 f9fe 	bl	d9e8c <strtol>
   d4a90:	4c26      	ldr	r4, [pc, #152]	; (d4b2c <_Z16im21_door_id_set6String+0x158>)
    int split2 = command.indexOf(',', split1+1);
   d4a92:	3701      	adds	r7, #1
   d4a94:	463a      	mov	r2, r7
    const char* byteholder1;
    const char* byteholder2;
    const char* byteholder3;
    int split1 = command.indexOf(',');
    byteholder1 = command.substring(0,split1).c_str();
    globalDoorID.byte3 = (uint8_t)strtol(byteholder1,NULL,16);
   d4a96:	70a0      	strb	r0, [r4, #2]
    int split2 = command.indexOf(',', split1+1);
   d4a98:	212c      	movs	r1, #44	; 0x2c
   d4a9a:	4628      	mov	r0, r5
   d4a9c:	f001 fe48 	bl	d6730 <_ZNK6String7indexOfEcj>
    byteholder2 = command.substring(split1+1,split2).c_str();
   d4aa0:	463a      	mov	r2, r7
   d4aa2:	4603      	mov	r3, r0
   d4aa4:	4629      	mov	r1, r5
    const char* byteholder2;
    const char* byteholder3;
    int split1 = command.indexOf(',');
    byteholder1 = command.substring(0,split1).c_str();
    globalDoorID.byte3 = (uint8_t)strtol(byteholder1,NULL,16);
    int split2 = command.indexOf(',', split1+1);
   d4aa6:	4606      	mov	r6, r0
    byteholder2 = command.substring(split1+1,split2).c_str();
   d4aa8:	a806      	add	r0, sp, #24
   d4aaa:	f001 fe53 	bl	d6754 <_ZNK6String9substringEjj>
   d4aae:	9f06      	ldr	r7, [sp, #24]
   d4ab0:	a806      	add	r0, sp, #24
   d4ab2:	f001 fdc9 	bl	d6648 <_ZN6StringD1Ev>
    globalDoorID.byte2 = (uint8_t)strtol(byteholder2,NULL,16);
   d4ab6:	2210      	movs	r2, #16
   d4ab8:	2100      	movs	r1, #0
   d4aba:	4638      	mov	r0, r7
   d4abc:	f005 f9e6 	bl	d9e8c <strtol>
    int split3 = command.indexOf(',', split2+1);
   d4ac0:	3601      	adds	r6, #1
    int split1 = command.indexOf(',');
    byteholder1 = command.substring(0,split1).c_str();
    globalDoorID.byte3 = (uint8_t)strtol(byteholder1,NULL,16);
    int split2 = command.indexOf(',', split1+1);
    byteholder2 = command.substring(split1+1,split2).c_str();
    globalDoorID.byte2 = (uint8_t)strtol(byteholder2,NULL,16);
   d4ac2:	7060      	strb	r0, [r4, #1]
    int split3 = command.indexOf(',', split2+1);
   d4ac4:	4632      	mov	r2, r6
   d4ac6:	212c      	movs	r1, #44	; 0x2c
   d4ac8:	4628      	mov	r0, r5
   d4aca:	f001 fe31 	bl	d6730 <_ZNK6String7indexOfEcj>
    byteholder3 = command.substring(split2+1,split3).c_str();
   d4ace:	4629      	mov	r1, r5
   d4ad0:	4603      	mov	r3, r0
   d4ad2:	4632      	mov	r2, r6
   d4ad4:	a806      	add	r0, sp, #24
   d4ad6:	f001 fe3d 	bl	d6754 <_ZNK6String9substringEjj>
   d4ada:	9d06      	ldr	r5, [sp, #24]
   d4adc:	a806      	add	r0, sp, #24
   d4ade:	f001 fdb3 	bl	d6648 <_ZN6StringD1Ev>
    globalDoorID.byte1 = (uint8_t)strtol(byteholder3,NULL,16);
   d4ae2:	2210      	movs	r2, #16
   d4ae4:	2100      	movs	r1, #0
   d4ae6:	4628      	mov	r0, r5
   d4ae8:	f005 f9d0 	bl	d9e8c <strtol>
   d4aec:	7020      	strb	r0, [r4, #0]

    //write new global door ID to flash
    EEPROM.put(ADDR_IM21_DOORID,globalDoorID.byte1);  
   d4aee:	f004 fce5 	bl	d94bc <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d4af2:	2201      	movs	r2, #1
   d4af4:	4621      	mov	r1, r4
   d4af6:	2014      	movs	r0, #20
   d4af8:	f001 fa70 	bl	d5fdc <HAL_EEPROM_Put>
    EEPROM.put((ADDR_IM21_DOORID+1),globalDoorID.byte2);  
   d4afc:	f004 fcde 	bl	d94bc <_Z21__fetch_global_EEPROMv>
   d4b00:	2201      	movs	r2, #1
   d4b02:	18a1      	adds	r1, r4, r2
   d4b04:	2015      	movs	r0, #21
   d4b06:	f001 fa69 	bl	d5fdc <HAL_EEPROM_Put>
    EEPROM.put((ADDR_IM21_DOORID+2),globalDoorID.byte3);  
   d4b0a:	f004 fcd7 	bl	d94bc <_Z21__fetch_global_EEPROMv>
   d4b0e:	2201      	movs	r2, #1
   d4b10:	1ca1      	adds	r1, r4, #2
   d4b12:	2016      	movs	r0, #22
   d4b14:	f001 fa62 	bl	d5fdc <HAL_EEPROM_Put>
  
  } //end if-else

  return 1;

   d4b18:	2001      	movs	r0, #1
   d4b1a:	b017      	add	sp, #92	; 0x5c
   d4b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4b1e:	bf00      	nop
   d4b20:	000da100 	.word	0x000da100
   d4b24:	2003e2a9 	.word	0x2003e2a9
   d4b28:	000da131 	.word	0x000da131
   d4b2c:	2003e1c8 	.word	0x2003e1c8

000d4b30 <_ZN10CloudClass8functionIA20_cIPFi6StringEEEEbRKT_DpT0_>:
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d4b30:	4602      	mov	r2, r0
   d4b32:	4801      	ldr	r0, [pc, #4]	; (d4b38 <_ZN10CloudClass8functionIA20_cIPFi6StringEEEEbRKT_DpT0_+0x8>)
   d4b34:	f003 bbe4 	b.w	d8300 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d4b38:	000d82d5 	.word	0x000d82d5

000d4b3c <_Z21setupConsoleFunctionsv>:
#include "consoleFunctions.h"
#include "flashAddresses.h"
#include "stateMachine.h"
#include "im21door.h"

void setupConsoleFunctions(){
   d4b3c:	b508      	push	{r3, lr}

  //particle console function declarations, belongs in setup() as per docs
  Particle.function("Change_Initial_Timer", initial_timer_set); 
   d4b3e:	490c      	ldr	r1, [pc, #48]	; (d4b70 <_Z21setupConsoleFunctionsv+0x34>)
   d4b40:	480c      	ldr	r0, [pc, #48]	; (d4b74 <_Z21setupConsoleFunctionsv+0x38>)
   d4b42:	f7ff fff5 	bl	d4b30 <_ZN10CloudClass8functionIA20_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Change_Duration_Timer", duration_timer_set);     
   d4b46:	490c      	ldr	r1, [pc, #48]	; (d4b78 <_Z21setupConsoleFunctionsv+0x3c>)
   d4b48:	480c      	ldr	r0, [pc, #48]	; (d4b7c <_Z21setupConsoleFunctionsv+0x40>)
   d4b4a:	f7ff fff1 	bl	d4b30 <_ZN10CloudClass8functionIA20_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Change_Stillness_Timer", stillness_timer_set);  
   d4b4e:	490c      	ldr	r1, [pc, #48]	; (d4b80 <_Z21setupConsoleFunctionsv+0x44>)
   d4b50:	480c      	ldr	r0, [pc, #48]	; (d4b84 <_Z21setupConsoleFunctionsv+0x48>)
   d4b52:	f7ff ffed 	bl	d4b30 <_ZN10CloudClass8functionIA20_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Change_INS_Threshold", ins_threshold_set);
   d4b56:	490c      	ldr	r1, [pc, #48]	; (d4b88 <_Z21setupConsoleFunctionsv+0x4c>)
   d4b58:	480c      	ldr	r0, [pc, #48]	; (d4b8c <_Z21setupConsoleFunctionsv+0x50>)
   d4b5a:	f7ff ffe9 	bl	d4b30 <_ZN10CloudClass8functionIA20_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Turn_Debugging_Publishes_On_Off", toggle_debugging_publishes);   
   d4b5e:	490c      	ldr	r1, [pc, #48]	; (d4b90 <_Z21setupConsoleFunctionsv+0x54>)
   d4b60:	480c      	ldr	r0, [pc, #48]	; (d4b94 <_Z21setupConsoleFunctionsv+0x58>)
   d4b62:	f7ff ffe5 	bl	d4b30 <_ZN10CloudClass8functionIA20_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Change_IM21_Door_ID", im21_door_id_set); 
   d4b66:	490c      	ldr	r1, [pc, #48]	; (d4b98 <_Z21setupConsoleFunctionsv+0x5c>)
   d4b68:	480c      	ldr	r0, [pc, #48]	; (d4b9c <_Z21setupConsoleFunctionsv+0x60>)
   d4b6a:	f7ff ffe1 	bl	d4b30 <_ZN10CloudClass8functionIA20_cIPFi6StringEEEEbRKT_DpT0_>
   d4b6e:	bd08      	pop	{r3, pc}
   d4b70:	000d4979 	.word	0x000d4979
   d4b74:	000da14a 	.word	0x000da14a
   d4b78:	000d4875 	.word	0x000d4875
   d4b7c:	000da15f 	.word	0x000da15f
   d4b80:	000d491d 	.word	0x000d491d
   d4b84:	000da175 	.word	0x000da175
   d4b88:	000d48d1 	.word	0x000d48d1
   d4b8c:	000da18c 	.word	0x000da18c
   d4b90:	000d4851 	.word	0x000d4851
   d4b94:	000da1a1 	.word	0x000da1a1
   d4b98:	000d49d5 	.word	0x000d49d5
   d4b9c:	000da1c1 	.word	0x000da1c1

000d4ba0 <_GLOBAL__sub_I__Z21setupConsoleFunctionsv>:
   d4ba0:	4b02      	ldr	r3, [pc, #8]	; (d4bac <_GLOBAL__sub_I__Z21setupConsoleFunctionsv+0xc>)
   d4ba2:	2201      	movs	r2, #1
   d4ba4:	701a      	strb	r2, [r3, #0]
   d4ba6:	f001 b9b9 	b.w	d5f1c <HAL_Pin_Map>
   d4baa:	bf00      	nop
   d4bac:	2003e2a9 	.word	0x2003e2a9

000d4bb0 <_ZN9__gnu_cxx13new_allocatorIPiE8allocateEjPKv.isra.37>:
      // NB: __n is permitted to be 0.  The C++ standard says nothing
      // about what the return value is when __n == 0.
      pointer
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
   d4bb0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
      { return std::__addressof(__x); }

      // NB: __n is permitted to be 0.  The C++ standard says nothing
      // about what the return value is when __n == 0.
      pointer
      allocate(size_type __n, const void* = 0)
   d4bb4:	b508      	push	{r3, lr}
      { 
	if (__n > this->max_size())
   d4bb6:	d301      	bcc.n	d4bbc <_ZN9__gnu_cxx13new_allocatorIPiE8allocateEjPKv.isra.37+0xc>
	  std::__throw_bad_alloc();
   d4bb8:	f004 fcf5 	bl	d95a6 <_ZSt17__throw_bad_allocv>

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d4bbc:	0080      	lsls	r0, r0, #2
      }
   d4bbe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d4bc2:	f7ff ba68 	b.w	d4096 <_Znwj>

000d4bc6 <_ZN5spark10JSONWriter4nameEPKc>:
// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
}

inline spark::JSONWriter& spark::JSONWriter::name(const char *name) {
   d4bc6:	b538      	push	{r3, r4, r5, lr}
   d4bc8:	4605      	mov	r5, r0
    return this->name(name, strlen(name));
   d4bca:	4608      	mov	r0, r1
// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
}

inline spark::JSONWriter& spark::JSONWriter::name(const char *name) {
   d4bcc:	460c      	mov	r4, r1
    return this->name(name, strlen(name));
   d4bce:	f005 f8a6 	bl	d9d1e <strlen>
   d4bd2:	4621      	mov	r1, r4
   d4bd4:	4602      	mov	r2, r0
   d4bd6:	4628      	mov	r0, r5
}
   d4bd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
}

inline spark::JSONWriter& spark::JSONWriter::name(const char *name) {
    return this->name(name, strlen(name));
   d4bdc:	f004 bb84 	b.w	d92e8 <_ZN5spark10JSONWriter4nameEPKcj>

000d4be0 <_Z17setupStateMachinev>:
std::queue<int> stateQueue;
std::queue<int> reasonQueue;
std::queue<unsigned long> timeQueue;
unsigned long lastStateChange = millis();

void setupStateMachine(){
   d4be0:	b508      	push	{r3, lr}

  //set up debug pins
  pinMode(D2,OUTPUT);
   d4be2:	2101      	movs	r1, #1
   d4be4:	2002      	movs	r0, #2
   d4be6:	f004 fc3f 	bl	d9468 <pinMode>
  pinMode(D3,OUTPUT);
   d4bea:	2101      	movs	r1, #1
   d4bec:	2003      	movs	r0, #3
   d4bee:	f004 fc3b 	bl	d9468 <pinMode>
  pinMode(D4,OUTPUT);
   d4bf2:	2101      	movs	r1, #1
   d4bf4:	2004      	movs	r0, #4
   d4bf6:	f004 fc37 	bl	d9468 <pinMode>
  pinMode(D5,OUTPUT);
   d4bfa:	2101      	movs	r1, #1
   d4bfc:	2005      	movs	r0, #5
   d4bfe:	f004 fc33 	bl	d9468 <pinMode>

  //default to not publishing debug logs
  stateMachineDebugFlag = 0;
   d4c02:	4b02      	ldr	r3, [pc, #8]	; (d4c0c <_Z17setupStateMachinev+0x2c>)
   d4c04:	2200      	movs	r2, #0
   d4c06:	701a      	strb	r2, [r3, #0]
   d4c08:	bd08      	pop	{r3, pc}
   d4c0a:	bf00      	nop
   d4c0c:	2003e2dc 	.word	0x2003e2dc

000d4c10 <_Z28initializeStateMachineConstsv>:

}

void initializeStateMachineConsts(){
   d4c10:	b513      	push	{r0, r1, r4, lr}

  uint16_t initializeConstsFlag;

  //Argon flash memory is initialized to all F's (1's)
  EEPROM.get(ADDR_INITIALIZE_SM_CONSTS_FLAG, initializeConstsFlag);
   d4c12:	f004 fc53 	bl	d94bc <_Z21__fetch_global_EEPROMv>
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d4c16:	2202      	movs	r2, #2
   d4c18:	f10d 0106 	add.w	r1, sp, #6
   d4c1c:	2000      	movs	r0, #0
   d4c1e:	f001 f9d5 	bl	d5fcc <HAL_EEPROM_Get>
  Log.info("state machine constants flag is 0x%04X", initializeConstsFlag);
   d4c22:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   d4c26:	492a      	ldr	r1, [pc, #168]	; (d4cd0 <_Z28initializeStateMachineConstsv+0xc0>)
   d4c28:	482a      	ldr	r0, [pc, #168]	; (d4cd4 <_Z28initializeStateMachineConstsv+0xc4>)
   d4c2a:	f7ff fa4d 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>

  if(initializeConstsFlag != INITIALIZE_STATE_MACHINE_CONSTS_FLAG){
   d4c2e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   d4c32:	f648 0488 	movw	r4, #34952	; 0x8888
   d4c36:	42a3      	cmp	r3, r4
   d4c38:	d027      	beq.n	d4c8a <_Z28initializeStateMachineConstsv+0x7a>
    EEPROM.put(ADDR_INS_THRESHOLD, ins_threshold);
   d4c3a:	f004 fc3f 	bl	d94bc <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d4c3e:	2204      	movs	r2, #4
   d4c40:	4925      	ldr	r1, [pc, #148]	; (d4cd8 <_Z28initializeStateMachineConstsv+0xc8>)
   d4c42:	4610      	mov	r0, r2
   d4c44:	f001 f9ca 	bl	d5fdc <HAL_EEPROM_Put>
    EEPROM.put(ADDR_STATE1_MAX_TIME, state1_max_time);
   d4c48:	f004 fc38 	bl	d94bc <_Z21__fetch_global_EEPROMv>
   d4c4c:	2204      	movs	r2, #4
   d4c4e:	4923      	ldr	r1, [pc, #140]	; (d4cdc <_Z28initializeStateMachineConstsv+0xcc>)
   d4c50:	2008      	movs	r0, #8
   d4c52:	f001 f9c3 	bl	d5fdc <HAL_EEPROM_Put>
    EEPROM.put(ADDR_STATE2_MAX_DURATION, state2_max_duration);
   d4c56:	f004 fc31 	bl	d94bc <_Z21__fetch_global_EEPROMv>
   d4c5a:	2204      	movs	r2, #4
   d4c5c:	4920      	ldr	r1, [pc, #128]	; (d4ce0 <_Z28initializeStateMachineConstsv+0xd0>)
   d4c5e:	200c      	movs	r0, #12
   d4c60:	f001 f9bc 	bl	d5fdc <HAL_EEPROM_Put>
    EEPROM.put(ADDR_STATE3_MAX_STILLNES_TIME, state3_max_stillness_time);
   d4c64:	f004 fc2a 	bl	d94bc <_Z21__fetch_global_EEPROMv>
   d4c68:	2204      	movs	r2, #4
   d4c6a:	491e      	ldr	r1, [pc, #120]	; (d4ce4 <_Z28initializeStateMachineConstsv+0xd4>)
   d4c6c:	2010      	movs	r0, #16
   d4c6e:	f001 f9b5 	bl	d5fdc <HAL_EEPROM_Put>
    initializeConstsFlag = INITIALIZE_STATE_MACHINE_CONSTS_FLAG;
   d4c72:	f8ad 4006 	strh.w	r4, [sp, #6]
    EEPROM.put(ADDR_INITIALIZE_SM_CONSTS_FLAG, initializeConstsFlag);
   d4c76:	f004 fc21 	bl	d94bc <_Z21__fetch_global_EEPROMv>
   d4c7a:	f10d 0106 	add.w	r1, sp, #6
   d4c7e:	2202      	movs	r2, #2
   d4c80:	2000      	movs	r0, #0
   d4c82:	f001 f9ab 	bl	d5fdc <HAL_EEPROM_Put>
    Log.info("State machine constants were written to flash on bootup.");
   d4c86:	4918      	ldr	r1, [pc, #96]	; (d4ce8 <_Z28initializeStateMachineConstsv+0xd8>)
   d4c88:	e01c      	b.n	d4cc4 <_Z28initializeStateMachineConstsv+0xb4>
  }
  else{
    EEPROM.get(ADDR_INS_THRESHOLD, ins_threshold);
   d4c8a:	f004 fc17 	bl	d94bc <_Z21__fetch_global_EEPROMv>
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d4c8e:	2204      	movs	r2, #4
   d4c90:	4911      	ldr	r1, [pc, #68]	; (d4cd8 <_Z28initializeStateMachineConstsv+0xc8>)
   d4c92:	4610      	mov	r0, r2
   d4c94:	f001 f99a 	bl	d5fcc <HAL_EEPROM_Get>
    EEPROM.get(ADDR_STATE1_MAX_TIME, state1_max_time);
   d4c98:	f004 fc10 	bl	d94bc <_Z21__fetch_global_EEPROMv>
   d4c9c:	2204      	movs	r2, #4
   d4c9e:	490f      	ldr	r1, [pc, #60]	; (d4cdc <_Z28initializeStateMachineConstsv+0xcc>)
   d4ca0:	2008      	movs	r0, #8
   d4ca2:	f001 f993 	bl	d5fcc <HAL_EEPROM_Get>
    EEPROM.get(ADDR_STATE2_MAX_DURATION, state2_max_duration);
   d4ca6:	f004 fc09 	bl	d94bc <_Z21__fetch_global_EEPROMv>
   d4caa:	2204      	movs	r2, #4
   d4cac:	490c      	ldr	r1, [pc, #48]	; (d4ce0 <_Z28initializeStateMachineConstsv+0xd0>)
   d4cae:	200c      	movs	r0, #12
   d4cb0:	f001 f98c 	bl	d5fcc <HAL_EEPROM_Get>
    EEPROM.get(ADDR_STATE3_MAX_STILLNES_TIME, state3_max_stillness_time);
   d4cb4:	f004 fc02 	bl	d94bc <_Z21__fetch_global_EEPROMv>
   d4cb8:	490a      	ldr	r1, [pc, #40]	; (d4ce4 <_Z28initializeStateMachineConstsv+0xd4>)
   d4cba:	2204      	movs	r2, #4
   d4cbc:	2010      	movs	r0, #16
   d4cbe:	f001 f985 	bl	d5fcc <HAL_EEPROM_Get>
    Log.info("State machine constants were read from flash on bootup.");
   d4cc2:	490a      	ldr	r1, [pc, #40]	; (d4cec <_Z28initializeStateMachineConstsv+0xdc>)
   d4cc4:	4803      	ldr	r0, [pc, #12]	; (d4cd4 <_Z28initializeStateMachineConstsv+0xc4>)
   d4cc6:	f7ff f9ff 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
  }


}
   d4cca:	b002      	add	sp, #8
   d4ccc:	bd10      	pop	{r4, pc}
   d4cce:	bf00      	nop
   d4cd0:	000da1d5 	.word	0x000da1d5
   d4cd4:	2003e4b8 	.word	0x2003e4b8
   d4cd8:	2003e1e0 	.word	0x2003e1e0
   d4cdc:	2003e1d4 	.word	0x2003e1d4
   d4ce0:	2003e1d8 	.word	0x2003e1d8
   d4ce4:	2003e1dc 	.word	0x2003e1dc
   d4ce8:	000da1fc 	.word	0x000da1fc
   d4cec:	000da235 	.word	0x000da235

000d4cf0 <_Z17resetReasonStringi>:
    lastStateChange = millis();
}

const char *resetReasonString(int resetReason)
{
	switch(resetReason)
   d4cf0:	283c      	cmp	r0, #60	; 0x3c
   d4cf2:	d023      	beq.n	d4d3c <_Z17resetReasonStringi+0x4c>
   d4cf4:	dc0d      	bgt.n	d4d12 <_Z17resetReasonStringi+0x22>
   d4cf6:	281e      	cmp	r0, #30
   d4cf8:	d01c      	beq.n	d4d34 <_Z17resetReasonStringi+0x44>
   d4cfa:	dc04      	bgt.n	d4d06 <_Z17resetReasonStringi+0x16>
   d4cfc:	280a      	cmp	r0, #10
   d4cfe:	d027      	beq.n	d4d50 <_Z17resetReasonStringi+0x60>
   d4d00:	2814      	cmp	r0, #20
   d4d02:	d029      	beq.n	d4d58 <_Z17resetReasonStringi+0x68>
   d4d04:	e026      	b.n	d4d54 <_Z17resetReasonStringi+0x64>
   d4d06:	2828      	cmp	r0, #40	; 0x28
   d4d08:	d016      	beq.n	d4d38 <_Z17resetReasonStringi+0x48>
   d4d0a:	2832      	cmp	r0, #50	; 0x32
   d4d0c:	d122      	bne.n	d4d54 <_Z17resetReasonStringi+0x64>
	{
		case RESET_REASON_PIN_RESET:		    return "PIN_RESET";
		case RESET_REASON_POWER_MANAGEMENT:	return "POWER_MANAGEMENT";
		case RESET_REASON_POWER_DOWN:		    return "POWER_DOWN";
		case RESET_REASON_POWER_BROWNOUT:	  return "POWER_BROWNOUT";
   d4d0e:	4813      	ldr	r0, [pc, #76]	; (d4d5c <_Z17resetReasonStringi+0x6c>)
   d4d10:	4770      	bx	lr
    lastStateChange = millis();
}

const char *resetReasonString(int resetReason)
{
	switch(resetReason)
   d4d12:	2864      	cmp	r0, #100	; 0x64
   d4d14:	d016      	beq.n	d4d44 <_Z17resetReasonStringi+0x54>
   d4d16:	dc05      	bgt.n	d4d24 <_Z17resetReasonStringi+0x34>
   d4d18:	2846      	cmp	r0, #70	; 0x46
   d4d1a:	d011      	beq.n	d4d40 <_Z17resetReasonStringi+0x50>
   d4d1c:	285a      	cmp	r0, #90	; 0x5a
   d4d1e:	d119      	bne.n	d4d54 <_Z17resetReasonStringi+0x64>
		case RESET_REASON_POWER_MANAGEMENT:	return "POWER_MANAGEMENT";
		case RESET_REASON_POWER_DOWN:		    return "POWER_DOWN";
		case RESET_REASON_POWER_BROWNOUT:	  return "POWER_BROWNOUT";
		case RESET_REASON_WATCHDOG:		      return "WATCHDOG";
		case RESET_REASON_UPDATE:		        return "UPDATE";
		case RESET_REASON_UPDATE_TIMEOUT:	  return "UPDATE_TIMEOUT";
   d4d20:	480f      	ldr	r0, [pc, #60]	; (d4d60 <_Z17resetReasonStringi+0x70>)
   d4d22:	4770      	bx	lr
    lastStateChange = millis();
}

const char *resetReasonString(int resetReason)
{
	switch(resetReason)
   d4d24:	2882      	cmp	r0, #130	; 0x82
   d4d26:	d00f      	beq.n	d4d48 <_Z17resetReasonStringi+0x58>
   d4d28:	288c      	cmp	r0, #140	; 0x8c
   d4d2a:	d00f      	beq.n	d4d4c <_Z17resetReasonStringi+0x5c>
   d4d2c:	2878      	cmp	r0, #120	; 0x78
   d4d2e:	d111      	bne.n	d4d54 <_Z17resetReasonStringi+0x64>
		case RESET_REASON_POWER_BROWNOUT:	  return "POWER_BROWNOUT";
		case RESET_REASON_WATCHDOG:		      return "WATCHDOG";
		case RESET_REASON_UPDATE:		        return "UPDATE";
		case RESET_REASON_UPDATE_TIMEOUT:	  return "UPDATE_TIMEOUT";
		case RESET_REASON_FACTORY_RESET:	  return "FACTORY_RESET";
		case RESET_REASON_DFU_MODE:		      return "DFU_MODE";
   d4d30:	480c      	ldr	r0, [pc, #48]	; (d4d64 <_Z17resetReasonStringi+0x74>)
   d4d32:	4770      	bx	lr
const char *resetReasonString(int resetReason)
{
	switch(resetReason)
	{
		case RESET_REASON_PIN_RESET:		    return "PIN_RESET";
		case RESET_REASON_POWER_MANAGEMENT:	return "POWER_MANAGEMENT";
   d4d34:	480c      	ldr	r0, [pc, #48]	; (d4d68 <_Z17resetReasonStringi+0x78>)
   d4d36:	4770      	bx	lr
		case RESET_REASON_POWER_DOWN:		    return "POWER_DOWN";
   d4d38:	480c      	ldr	r0, [pc, #48]	; (d4d6c <_Z17resetReasonStringi+0x7c>)
   d4d3a:	4770      	bx	lr
		case RESET_REASON_POWER_BROWNOUT:	  return "POWER_BROWNOUT";
		case RESET_REASON_WATCHDOG:		      return "WATCHDOG";
   d4d3c:	480c      	ldr	r0, [pc, #48]	; (d4d70 <_Z17resetReasonStringi+0x80>)
   d4d3e:	4770      	bx	lr
		case RESET_REASON_UPDATE:		        return "UPDATE";
   d4d40:	480c      	ldr	r0, [pc, #48]	; (d4d74 <_Z17resetReasonStringi+0x84>)
   d4d42:	4770      	bx	lr
		case RESET_REASON_UPDATE_TIMEOUT:	  return "UPDATE_TIMEOUT";
		case RESET_REASON_FACTORY_RESET:	  return "FACTORY_RESET";
   d4d44:	480c      	ldr	r0, [pc, #48]	; (d4d78 <_Z17resetReasonStringi+0x88>)
   d4d46:	4770      	bx	lr
		case RESET_REASON_DFU_MODE:		      return "DFU_MODE";
		case RESET_REASON_PANIC:		        return "PANIC";
   d4d48:	480c      	ldr	r0, [pc, #48]	; (d4d7c <_Z17resetReasonStringi+0x8c>)
   d4d4a:	4770      	bx	lr
		case RESET_REASON_USER:			        return "USER";
   d4d4c:	480c      	ldr	r0, [pc, #48]	; (d4d80 <_Z17resetReasonStringi+0x90>)
   d4d4e:	4770      	bx	lr
		case RESET_REASON_UNKNOWN:		      return "UNKNOWN";
   d4d50:	480c      	ldr	r0, [pc, #48]	; (d4d84 <_Z17resetReasonStringi+0x94>)
   d4d52:	4770      	bx	lr
	  default:              		 	        return "NONE";
   d4d54:	480c      	ldr	r0, [pc, #48]	; (d4d88 <_Z17resetReasonStringi+0x98>)
   d4d56:	4770      	bx	lr

const char *resetReasonString(int resetReason)
{
	switch(resetReason)
	{
		case RESET_REASON_PIN_RESET:		    return "PIN_RESET";
   d4d58:	480c      	ldr	r0, [pc, #48]	; (d4d8c <_Z17resetReasonStringi+0x9c>)
		case RESET_REASON_PANIC:		        return "PANIC";
		case RESET_REASON_USER:			        return "USER";
		case RESET_REASON_UNKNOWN:		      return "UNKNOWN";
	  default:              		 	        return "NONE";
	}
}
   d4d5a:	4770      	bx	lr
   d4d5c:	000da293 	.word	0x000da293
   d4d60:	000da2b2 	.word	0x000da2b2
   d4d64:	000da2cf 	.word	0x000da2cf
   d4d68:	000da277 	.word	0x000da277
   d4d6c:	000da288 	.word	0x000da288
   d4d70:	000da2a2 	.word	0x000da2a2
   d4d74:	000da2ab 	.word	0x000da2ab
   d4d78:	000da2c1 	.word	0x000da2c1
   d4d7c:	000da2d8 	.word	0x000da2d8
   d4d80:	000da2de 	.word	0x000da2de
   d4d84:	000da2e3 	.word	0x000da2e3
   d4d88:	000da2eb 	.word	0x000da2eb
   d4d8c:	000da26d 	.word	0x000da26d

000d4d90 <_Z22publishStateTransitioniihf.part.10>:

  }

} //end state3_stillness

void publishStateTransition(int prevState, int nextState, unsigned char doorStatus, float INSValue){
   d4d90:	b570      	push	{r4, r5, r6, lr}
   d4d92:	4604      	mov	r4, r0
   d4d94:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
    if(stateMachineDebugFlag){

      //from particle docs, max length of publish is 622 chars, I am assuming this includes null char
      char stateTransition[622];
      snprintf(stateTransition, sizeof(stateTransition), 
              "{\"prev_state\":\"%d\", \"next_state\":\"%d\", \"door_status\":\"0x%02X\", \"INS_val\":\"%f\"}", prevState, nextState, doorStatus, INSValue); 
   d4d98:	ee10 0a10 	vmov	r0, s0

  }

} //end state3_stillness

void publishStateTransition(int prevState, int nextState, unsigned char doorStatus, float INSValue){
   d4d9c:	4616      	mov	r6, r2
   d4d9e:	460d      	mov	r5, r1
    if(stateMachineDebugFlag){

      //from particle docs, max length of publish is 622 chars, I am assuming this includes null char
      char stateTransition[622];
      snprintf(stateTransition, sizeof(stateTransition), 
              "{\"prev_state\":\"%d\", \"next_state\":\"%d\", \"door_status\":\"0x%02X\", \"INS_val\":\"%f\"}", prevState, nextState, doorStatus, INSValue); 
   d4da0:	f004 feb4 	bl	d9b0c <__aeabi_f2d>
   d4da4:	4623      	mov	r3, r4
   d4da6:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d4daa:	e88d 0060 	stmia.w	sp, {r5, r6}
   d4dae:	4a0b      	ldr	r2, [pc, #44]	; (d4ddc <_Z22publishStateTransitioniihf.part.10+0x4c>)
   d4db0:	f240 216e 	movw	r1, #622	; 0x26e
   d4db4:	a806      	add	r0, sp, #24
   d4db6:	f001 fba3 	bl	d6500 <snprintf>
   d4dba:	4b09      	ldr	r3, [pc, #36]	; (d4de0 <_Z22publishStateTransitioniihf.part.10+0x50>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4dbc:	4909      	ldr	r1, [pc, #36]	; (d4de4 <_Z22publishStateTransitioniihf.part.10+0x54>)
   d4dbe:	781b      	ldrb	r3, [r3, #0]
   d4dc0:	f88d 3000 	strb.w	r3, [sp]
   d4dc4:	aa06      	add	r2, sp, #24
   d4dc6:	233c      	movs	r3, #60	; 0x3c
   d4dc8:	a804      	add	r0, sp, #16
   d4dca:	f003 fbad 	bl	d8528 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4dce:	a805      	add	r0, sp, #20
   d4dd0:	f7ff fb30 	bl	d4434 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      Particle.publish("State Transition", stateTransition, PRIVATE);

    }

}
   d4dd4:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
   d4dd8:	bd70      	pop	{r4, r5, r6, pc}
   d4dda:	bf00      	nop
   d4ddc:	000da2f0 	.word	0x000da2f0
   d4de0:	2003e30c 	.word	0x2003e30c
   d4de4:	000da33f 	.word	0x000da33f

000d4de8 <_Z22publishStateTransitioniihf>:

} //end state3_stillness

void publishStateTransition(int prevState, int nextState, unsigned char doorStatus, float INSValue){

    if(stateMachineDebugFlag){
   d4de8:	4b02      	ldr	r3, [pc, #8]	; (d4df4 <_Z22publishStateTransitioniihf+0xc>)
   d4dea:	781b      	ldrb	r3, [r3, #0]
   d4dec:	b10b      	cbz	r3, d4df2 <_Z22publishStateTransitioniihf+0xa>
   d4dee:	f7ff bfcf 	b.w	d4d90 <_Z22publishStateTransitioniihf.part.10>
   d4df2:	4770      	bx	lr
   d4df4:	2003e2dc 	.word	0x2003e2dc

000d4df8 <_Z19publishDebugMessageihfm.part.11>:

    }

}

void publishDebugMessage(int state, unsigned char doorStatus, float INSValue, unsigned long timer){
   d4df8:	b530      	push	{r4, r5, lr}
   d4dfa:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
   d4dfe:	4604      	mov	r4, r0
    if(stateMachineDebugFlag && (millis()-lastDebugPublish) > DEBUG_PUBLISH_INTERVAL){

      //from particle docs, max length of publish is 622 chars, I am assuming this includes null char
      char debugMessage[622];
      snprintf(debugMessage, sizeof(debugMessage), 
              "{\"state\":\"%d\", \"door_status\":\"0x%02X\", \"INS_val\":\"%f\", \"timer_status\":\"%ld\"}", state, doorStatus, INSValue, timer); 
   d4e00:	ee10 0a10 	vmov	r0, s0

    }

}

void publishDebugMessage(int state, unsigned char doorStatus, float INSValue, unsigned long timer){
   d4e04:	460d      	mov	r5, r1
    if(stateMachineDebugFlag && (millis()-lastDebugPublish) > DEBUG_PUBLISH_INTERVAL){

      //from particle docs, max length of publish is 622 chars, I am assuming this includes null char
      char debugMessage[622];
      snprintf(debugMessage, sizeof(debugMessage), 
              "{\"state\":\"%d\", \"door_status\":\"0x%02X\", \"INS_val\":\"%f\", \"timer_status\":\"%ld\"}", state, doorStatus, INSValue, timer); 
   d4e06:	9204      	str	r2, [sp, #16]
   d4e08:	f004 fe80 	bl	d9b0c <__aeabi_f2d>
   d4e0c:	4623      	mov	r3, r4
   d4e0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d4e12:	9500      	str	r5, [sp, #0]
   d4e14:	4a0c      	ldr	r2, [pc, #48]	; (d4e48 <_Z19publishDebugMessageihfm.part.11+0x50>)
   d4e16:	f240 216e 	movw	r1, #622	; 0x26e
   d4e1a:	a808      	add	r0, sp, #32
   d4e1c:	f001 fb70 	bl	d6500 <snprintf>
   d4e20:	4b0a      	ldr	r3, [pc, #40]	; (d4e4c <_Z19publishDebugMessageihfm.part.11+0x54>)
   d4e22:	490b      	ldr	r1, [pc, #44]	; (d4e50 <_Z19publishDebugMessageihfm.part.11+0x58>)
   d4e24:	781b      	ldrb	r3, [r3, #0]
   d4e26:	f88d 3000 	strb.w	r3, [sp]
   d4e2a:	aa08      	add	r2, sp, #32
   d4e2c:	233c      	movs	r3, #60	; 0x3c
   d4e2e:	a806      	add	r0, sp, #24
   d4e30:	f003 fb7a 	bl	d8528 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d4e34:	a807      	add	r0, sp, #28
   d4e36:	f7ff fafd 	bl	d4434 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4e3a:	f001 f8b7 	bl	d5fac <HAL_Timer_Get_Milli_Seconds>
      Particle.publish("Debug Message", debugMessage, PRIVATE);
      lastDebugPublish = millis();
   d4e3e:	4b05      	ldr	r3, [pc, #20]	; (d4e54 <_Z19publishDebugMessageihfm.part.11+0x5c>)
   d4e40:	6018      	str	r0, [r3, #0]

    }

}
   d4e42:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
   d4e46:	bd30      	pop	{r4, r5, pc}
   d4e48:	000da350 	.word	0x000da350
   d4e4c:	2003e30c 	.word	0x2003e30c
   d4e50:	000da39d 	.word	0x000da39d
   d4e54:	2003e2ac 	.word	0x2003e2ac

000d4e58 <_Z19publishDebugMessageihfm>:

    }

}

void publishDebugMessage(int state, unsigned char doorStatus, float INSValue, unsigned long timer){
   d4e58:	b570      	push	{r4, r5, r6, lr}
   d4e5a:	ed2d 8b02 	vpush	{d8}

    static unsigned long lastDebugPublish = 0;

    if(stateMachineDebugFlag && (millis()-lastDebugPublish) > DEBUG_PUBLISH_INTERVAL){
   d4e5e:	4b0f      	ldr	r3, [pc, #60]	; (d4e9c <_Z19publishDebugMessageihfm+0x44>)
   d4e60:	781b      	ldrb	r3, [r3, #0]

    }

}

void publishDebugMessage(int state, unsigned char doorStatus, float INSValue, unsigned long timer){
   d4e62:	4604      	mov	r4, r0
   d4e64:	460d      	mov	r5, r1
   d4e66:	eeb0 8a40 	vmov.f32	s16, s0
   d4e6a:	4616      	mov	r6, r2

    static unsigned long lastDebugPublish = 0;

    if(stateMachineDebugFlag && (millis()-lastDebugPublish) > DEBUG_PUBLISH_INTERVAL){
   d4e6c:	b19b      	cbz	r3, d4e96 <_Z19publishDebugMessageihfm+0x3e>
   d4e6e:	f001 f89d 	bl	d5fac <HAL_Timer_Get_Milli_Seconds>
   d4e72:	4b0b      	ldr	r3, [pc, #44]	; (d4ea0 <_Z19publishDebugMessageihfm+0x48>)
   d4e74:	681b      	ldr	r3, [r3, #0]
   d4e76:	1ac0      	subs	r0, r0, r3
   d4e78:	f240 53dc 	movw	r3, #1500	; 0x5dc
   d4e7c:	4298      	cmp	r0, r3
   d4e7e:	d90a      	bls.n	d4e96 <_Z19publishDebugMessageihfm+0x3e>
   d4e80:	eeb0 0a48 	vmov.f32	s0, s16
      Particle.publish("Debug Message", debugMessage, PRIVATE);
      lastDebugPublish = millis();

    }

}
   d4e84:	ecbd 8b02 	vpop	{d8}
   d4e88:	4632      	mov	r2, r6
   d4e8a:	4629      	mov	r1, r5
   d4e8c:	4620      	mov	r0, r4
   d4e8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d4e92:	f7ff bfb1 	b.w	d4df8 <_Z19publishDebugMessageihfm.part.11>
   d4e96:	ecbd 8b02 	vpop	{d8}
   d4e9a:	bd70      	pop	{r4, r5, r6, pc}
   d4e9c:	2003e2dc 	.word	0x2003e2dc
   d4ea0:	2003e2ac 	.word	0x2003e2ac

000d4ea4 <_ZNSt5dequeIiSaIiEED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~deque()
   d4ea4:	b570      	push	{r4, r5, r6, lr}

  template<typename _Tp, typename _Alloc>
    _Deque_base<_Tp, _Alloc>::
    ~_Deque_base() _GLIBCXX_NOEXCEPT
    {
      if (this->_M_impl._M_map)
   d4ea6:	6803      	ldr	r3, [r0, #0]
      _Deque_iterator() _GLIBCXX_NOEXCEPT
      : _M_cur(), _M_first(), _M_last(), _M_node() { }

      _Deque_iterator(const iterator& __x) _GLIBCXX_NOEXCEPT
      : _M_cur(__x._M_cur), _M_first(__x._M_first),
        _M_last(__x._M_last), _M_node(__x._M_node) { }
   d4ea8:	6945      	ldr	r5, [r0, #20]
   d4eaa:	6a46      	ldr	r6, [r0, #36]	; 0x24
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~deque()
   d4eac:	4604      	mov	r4, r0

  template<typename _Tp, typename _Alloc>
    _Deque_base<_Tp, _Alloc>::
    ~_Deque_base() _GLIBCXX_NOEXCEPT
    {
      if (this->_M_impl._M_map)
   d4eae:	b153      	cbz	r3, d4ec6 <_ZNSt5dequeIiSaIiEED1Ev+0x22>
	{
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
   d4eb0:	3604      	adds	r6, #4
    void
    _Deque_base<_Tp, _Alloc>::
    _M_destroy_nodes(_Map_pointer __nstart,
		     _Map_pointer __nfinish) _GLIBCXX_NOEXCEPT
    {
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
   d4eb2:	42b5      	cmp	r5, r6
   d4eb4:	d204      	bcs.n	d4ec0 <_ZNSt5dequeIiSaIiEED1Ev+0x1c>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d4eb6:	f855 0b04 	ldr.w	r0, [r5], #4
   d4eba:	f7ff f8ee 	bl	d409a <_ZdlPv>
   d4ebe:	e7f8      	b.n	d4eb2 <_ZNSt5dequeIiSaIiEED1Ev+0xe>
   d4ec0:	6820      	ldr	r0, [r4, #0]
   d4ec2:	f7ff f8ea 	bl	d409a <_ZdlPv>
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~deque()
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
   d4ec6:	4620      	mov	r0, r4
   d4ec8:	bd70      	pop	{r4, r5, r6, pc}

000d4eca <_ZNSt5queueIiSt5dequeIiSaIiEEED1Ev>:
   *  Members not found in @a normal containers are @c container_type,
   *  which is a typedef for the second Sequence parameter, and @c push and
   *  @c pop, which are standard %queue/FIFO operations.
  */
  template<typename _Tp, typename _Sequence = deque<_Tp> >
    class queue
   d4eca:	b510      	push	{r4, lr}
   d4ecc:	4604      	mov	r4, r0
   d4ece:	f7ff ffe9 	bl	d4ea4 <_ZNSt5dequeIiSaIiEED1Ev>
   d4ed2:	4620      	mov	r0, r4
   d4ed4:	bd10      	pop	{r4, pc}

000d4ed6 <_ZNSt5dequeImSaImEED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~deque()
   d4ed6:	b570      	push	{r4, r5, r6, lr}

  template<typename _Tp, typename _Alloc>
    _Deque_base<_Tp, _Alloc>::
    ~_Deque_base() _GLIBCXX_NOEXCEPT
    {
      if (this->_M_impl._M_map)
   d4ed8:	6803      	ldr	r3, [r0, #0]
      _Deque_iterator() _GLIBCXX_NOEXCEPT
      : _M_cur(), _M_first(), _M_last(), _M_node() { }

      _Deque_iterator(const iterator& __x) _GLIBCXX_NOEXCEPT
      : _M_cur(__x._M_cur), _M_first(__x._M_first),
        _M_last(__x._M_last), _M_node(__x._M_node) { }
   d4eda:	6945      	ldr	r5, [r0, #20]
   d4edc:	6a46      	ldr	r6, [r0, #36]	; 0x24
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~deque()
   d4ede:	4604      	mov	r4, r0

  template<typename _Tp, typename _Alloc>
    _Deque_base<_Tp, _Alloc>::
    ~_Deque_base() _GLIBCXX_NOEXCEPT
    {
      if (this->_M_impl._M_map)
   d4ee0:	b153      	cbz	r3, d4ef8 <_ZNSt5dequeImSaImEED1Ev+0x22>
	{
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
   d4ee2:	3604      	adds	r6, #4
    void
    _Deque_base<_Tp, _Alloc>::
    _M_destroy_nodes(_Map_pointer __nstart,
		     _Map_pointer __nfinish) _GLIBCXX_NOEXCEPT
    {
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
   d4ee4:	42b5      	cmp	r5, r6
   d4ee6:	d204      	bcs.n	d4ef2 <_ZNSt5dequeImSaImEED1Ev+0x1c>
   d4ee8:	f855 0b04 	ldr.w	r0, [r5], #4
   d4eec:	f7ff f8d5 	bl	d409a <_ZdlPv>
   d4ef0:	e7f8      	b.n	d4ee4 <_ZNSt5dequeImSaImEED1Ev+0xe>
   d4ef2:	6820      	ldr	r0, [r4, #0]
   d4ef4:	f7ff f8d1 	bl	d409a <_ZdlPv>
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~deque()
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
   d4ef8:	4620      	mov	r0, r4
   d4efa:	bd70      	pop	{r4, r5, r6, pc}

000d4efc <_ZNSt5queueImSt5dequeImSaImEEED1Ev>:
   d4efc:	b510      	push	{r4, lr}
   d4efe:	4604      	mov	r4, r0
   d4f00:	f7ff ffe9 	bl	d4ed6 <_ZNSt5dequeImSaImEED1Ev>
   d4f04:	4620      	mov	r0, r4
   d4f06:	bd10      	pop	{r4, pc}

000d4f08 <_ZNSt5dequeIiSaIiEE9pop_frontEv>:
       *
       *  Note that no data is returned, and if the first element's data is
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
   d4f08:	b510      	push	{r4, lr}
      {
	if (this->_M_impl._M_start._M_cur
   d4f0a:	6902      	ldr	r2, [r0, #16]
	    != this->_M_impl._M_start._M_last - 1)
   d4f0c:	6883      	ldr	r3, [r0, #8]
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
      {
	if (this->_M_impl._M_start._M_cur
   d4f0e:	3a04      	subs	r2, #4
   d4f10:	4293      	cmp	r3, r2
       *
       *  Note that no data is returned, and if the first element's data is
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
   d4f12:	4604      	mov	r4, r0
      {
	if (this->_M_impl._M_start._M_cur
   d4f14:	d001      	beq.n	d4f1a <_ZNSt5dequeIiSaIiEE9pop_frontEv+0x12>
	    != this->_M_impl._M_start._M_last - 1)
	  {
	    _Alloc_traits::destroy(this->_M_impl,
	                           this->_M_impl._M_start._M_cur);
	    ++this->_M_impl._M_start._M_cur;
   d4f16:	3304      	adds	r3, #4
   d4f18:	e00a      	b.n	d4f30 <_ZNSt5dequeIiSaIiEE9pop_frontEv+0x28>
   d4f1a:	68c0      	ldr	r0, [r0, #12]
   d4f1c:	f7ff f8bd 	bl	d409a <_ZdlPv>
    _M_pop_front_aux()
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
   d4f20:	6963      	ldr	r3, [r4, #20]
       *  immediately afterwards, based on _M_first and _M_last.
       */
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
      {
	_M_node = __new_node;
   d4f22:	1d1a      	adds	r2, r3, #4
   d4f24:	6162      	str	r2, [r4, #20]
	_M_first = *__new_node;
   d4f26:	685b      	ldr	r3, [r3, #4]
   d4f28:	60e3      	str	r3, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   d4f2a:	f503 7200 	add.w	r2, r3, #512	; 0x200
   d4f2e:	6122      	str	r2, [r4, #16]
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
   d4f30:	60a3      	str	r3, [r4, #8]
   d4f32:	bd10      	pop	{r4, pc}

000d4f34 <_Z12getHeartbeatv>:
		case RESET_REASON_UNKNOWN:		      return "UNKNOWN";
	  default:              		 	        return "NONE";
	}
}

void getHeartbeat(){
   d4f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

    static unsigned long lastHeartbeatPublish = 0;
    if((millis()-lastHeartbeatPublish) > SM_HEARTBEAT_INTERVAL){
   d4f38:	4f62      	ldr	r7, [pc, #392]	; (d50c4 <_Z12getHeartbeatv+0x190>)
		case RESET_REASON_UNKNOWN:		      return "UNKNOWN";
	  default:              		 	        return "NONE";
	}
}

void getHeartbeat(){
   d4f3a:	f5ad 7d26 	sub.w	sp, sp, #664	; 0x298
   d4f3e:	f001 f835 	bl	d5fac <HAL_Timer_Get_Milli_Seconds>

    static unsigned long lastHeartbeatPublish = 0;
    if((millis()-lastHeartbeatPublish) > SM_HEARTBEAT_INTERVAL){
   d4f42:	683b      	ldr	r3, [r7, #0]
   d4f44:	1ac0      	subs	r0, r0, r3
   d4f46:	4b60      	ldr	r3, [pc, #384]	; (d50c8 <_Z12getHeartbeatv+0x194>)
   d4f48:	4298      	cmp	r0, r3
   d4f4a:	f240 80b6 	bls.w	d50ba <_Z12getHeartbeatv+0x186>
      
      //from particle docs, max length of publish is 622 chars, I am assuming this includes null char
      char heartbeatMessage[622] = {0};
   d4f4e:	f10d 0828 	add.w	r8, sp, #40	; 0x28
   d4f52:	f240 226e 	movw	r2, #622	; 0x26e
   d4f56:	2100      	movs	r1, #0
   d4f58:	4640      	mov	r0, r8
   d4f5a:	f004 fe72 	bl	d9c42 <memset>

// spark::JSONBufferWriter
inline spark::JSONBufferWriter::JSONBufferWriter(char *buf, size_t size) :
        buf_(buf),
        bufSize_(size),
        n_(0) {
   d4f5e:	4b5b      	ldr	r3, [pc, #364]	; (d50cc <_Z12getHeartbeatv+0x198>)
      JSONBufferWriter writer(heartbeatMessage, sizeof(heartbeatMessage)-1);
      writer.beginObject();
        //logs number of instances of missed door events since last heartbeat
        writer.name("doorMissedMsg").value(missedDoorEventCount);
   d4f60:	4d5b      	ldr	r5, [pc, #364]	; (d50d0 <_Z12getHeartbeatv+0x19c>)
   d4f62:	9305      	str	r3, [sp, #20]
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
   d4f64:	2400      	movs	r4, #0

// spark::JSONBufferWriter
inline spark::JSONBufferWriter::JSONBufferWriter(char *buf, size_t size) :
        buf_(buf),
        bufSize_(size),
        n_(0) {
   d4f66:	f240 236d 	movw	r3, #621	; 0x26d
    if((millis()-lastHeartbeatPublish) > SM_HEARTBEAT_INTERVAL){
      
      //from particle docs, max length of publish is 622 chars, I am assuming this includes null char
      char heartbeatMessage[622] = {0};
      JSONBufferWriter writer(heartbeatMessage, sizeof(heartbeatMessage)-1);
      writer.beginObject();
   d4f6a:	a805      	add	r0, sp, #20
   d4f6c:	9308      	str	r3, [sp, #32]
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
   d4f6e:	f88d 4018 	strb.w	r4, [sp, #24]

// spark::JSONBufferWriter
inline spark::JSONBufferWriter::JSONBufferWriter(char *buf, size_t size) :
        buf_(buf),
        bufSize_(size),
        n_(0) {
   d4f72:	9409      	str	r4, [sp, #36]	; 0x24
   d4f74:	f8cd 801c 	str.w	r8, [sp, #28]
   d4f78:	f004 f919 	bl	d91ae <_ZN5spark10JSONWriter11beginObjectEv>
        //logs number of instances of missed door events since last heartbeat
        writer.name("doorMissedMsg").value(missedDoorEventCount);
   d4f7c:	4955      	ldr	r1, [pc, #340]	; (d50d4 <_Z12getHeartbeatv+0x1a0>)
   d4f7e:	a805      	add	r0, sp, #20
   d4f80:	f7ff fe21 	bl	d4bc6 <_ZN5spark10JSONWriter4nameEPKc>
   d4f84:	6829      	ldr	r1, [r5, #0]
   d4f86:	f004 f937 	bl	d91f8 <_ZN5spark10JSONWriter5valueEi>
        missedDoorEventCount = 0;

        //logs whether door sensor is low battery
        writer.name("doorLowBatt").value(doorLowBatteryFlag);
   d4f8a:	4953      	ldr	r1, [pc, #332]	; (d50d8 <_Z12getHeartbeatv+0x1a4>)
      char heartbeatMessage[622] = {0};
      JSONBufferWriter writer(heartbeatMessage, sizeof(heartbeatMessage)-1);
      writer.beginObject();
        //logs number of instances of missed door events since last heartbeat
        writer.name("doorMissedMsg").value(missedDoorEventCount);
        missedDoorEventCount = 0;
   d4f8c:	602c      	str	r4, [r5, #0]

        //logs whether door sensor is low battery
        writer.name("doorLowBatt").value(doorLowBatteryFlag);
   d4f8e:	a805      	add	r0, sp, #20
   d4f90:	f7ff fe19 	bl	d4bc6 <_ZN5spark10JSONWriter4nameEPKc>
   d4f94:	4b51      	ldr	r3, [pc, #324]	; (d50dc <_Z12getHeartbeatv+0x1a8>)
   d4f96:	7819      	ldrb	r1, [r3, #0]
   d4f98:	f004 f916 	bl	d91c8 <_ZN5spark10JSONWriter5valueEb>
        
        //logs time in millis since last heartbeat was received
        writer.name("doorLastHeartbeat").value((unsigned int) (millis() - doorHeartbeatReceived));
   d4f9c:	4950      	ldr	r1, [pc, #320]	; (d50e0 <_Z12getHeartbeatv+0x1ac>)
   d4f9e:	a805      	add	r0, sp, #20
   d4fa0:	f7ff fe11 	bl	d4bc6 <_ZN5spark10JSONWriter4nameEPKc>
   d4fa4:	4605      	mov	r5, r0
   d4fa6:	f001 f801 	bl	d5fac <HAL_Timer_Get_Milli_Seconds>
   d4faa:	4b4e      	ldr	r3, [pc, #312]	; (d50e4 <_Z12getHeartbeatv+0x1b0>)
   d4fac:	6819      	ldr	r1, [r3, #0]
   d4fae:	1a41      	subs	r1, r0, r1
   d4fb0:	4628      	mov	r0, r5
   d4fb2:	f004 f933 	bl	d921c <_ZN5spark10JSONWriter5valueEj>

        //logs the reason of the last reset    
        writer.name("resetReason").value(resetReasonString(resetReason));
   d4fb6:	494c      	ldr	r1, [pc, #304]	; (d50e8 <_Z12getHeartbeatv+0x1b4>)
   d4fb8:	4d4c      	ldr	r5, [pc, #304]	; (d50ec <_Z12getHeartbeatv+0x1b8>)
   d4fba:	a805      	add	r0, sp, #20
   d4fbc:	f7ff fe03 	bl	d4bc6 <_ZN5spark10JSONWriter4nameEPKc>
   d4fc0:	4606      	mov	r6, r0
   d4fc2:	6828      	ldr	r0, [r5, #0]
   d4fc4:	f7ff fe94 	bl	d4cf0 <_Z17resetReasonStringi>
   d4fc8:	4681      	mov	r9, r0
inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
    return value(val, strlen(val));
   d4fca:	f004 fea8 	bl	d9d1e <strlen>
   d4fce:	4649      	mov	r1, r9
   d4fd0:	4602      	mov	r2, r0
   d4fd2:	4630      	mov	r0, r6
   d4fd4:	f004 f997 	bl	d9306 <_ZN5spark10JSONWriter5valueEPKcj>
        //subsequent heartbeats will not display reset reason
        resetReason = RESET_REASON_NONE;

        //logs each state, reason of transitioning away, and time spent in state (ms)
        writer.name("states").beginArray();
   d4fd8:	4945      	ldr	r1, [pc, #276]	; (d50f0 <_Z12getHeartbeatv+0x1bc>)
        writer.name("doorLastHeartbeat").value((unsigned int) (millis() - doorHeartbeatReceived));

        //logs the reason of the last reset    
        writer.name("resetReason").value(resetReasonString(resetReason));
        //subsequent heartbeats will not display reset reason
        resetReason = RESET_REASON_NONE;
   d4fda:	602c      	str	r4, [r5, #0]

        //logs each state, reason of transitioning away, and time spent in state (ms)
        writer.name("states").beginArray();
   d4fdc:	a805      	add	r0, sp, #20
   d4fde:	f7ff fdf2 	bl	d4bc6 <_ZN5spark10JSONWriter4nameEPKc>
   d4fe2:	f004 f8d8 	bl	d9196 <_ZN5spark10JSONWriter10beginArrayEv>
    operator-(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
	      const _Deque_iterator<_Tp, _Ref, _Ptr>& __y) _GLIBCXX_NOEXCEPT
    {
      return typename _Deque_iterator<_Tp, _Ref, _Ptr>::difference_type
	(_Deque_iterator<_Tp, _Ref, _Ptr>::_S_buffer_size())
	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
   d4fe6:	4b43      	ldr	r3, [pc, #268]	; (d50f4 <_Z12getHeartbeatv+0x1c0>)
      _Deque_iterator() _GLIBCXX_NOEXCEPT
      : _M_cur(), _M_first(), _M_last(), _M_node() { }

      _Deque_iterator(const iterator& __x) _GLIBCXX_NOEXCEPT
      : _M_cur(__x._M_cur), _M_first(__x._M_first),
        _M_last(__x._M_last), _M_node(__x._M_node) { }
   d4fe8:	f8df 9118 	ldr.w	r9, [pc, #280]	; d5104 <_Z12getHeartbeatv+0x1d0>
	      const _Deque_iterator<_Tp, _Ref, _Ptr>& __y) _GLIBCXX_NOEXCEPT
    {
      return typename _Deque_iterator<_Tp, _Ref, _Ptr>::difference_type
	(_Deque_iterator<_Tp, _Ref, _Ptr>::_S_buffer_size())
	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
	+ (__y._M_last - __y._M_cur);
   d4fec:	695d      	ldr	r5, [r3, #20]
   d4fee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   d4ff0:	69d9      	ldr	r1, [r3, #28]
   d4ff2:	1b52      	subs	r2, r2, r5
   d4ff4:	1092      	asrs	r2, r2, #2
   d4ff6:	1e55      	subs	r5, r2, #1
   d4ff8:	699a      	ldr	r2, [r3, #24]
   d4ffa:	1a52      	subs	r2, r2, r1
   d4ffc:	1092      	asrs	r2, r2, #2
   d4ffe:	eb02 12c5 	add.w	r2, r2, r5, lsl #7
   d5002:	6919      	ldr	r1, [r3, #16]
   d5004:	689d      	ldr	r5, [r3, #8]
        int numStates = stateQueue.size();
          for(int i = 0; i < numStates; i++){
   d5006:	46a2      	mov	sl, r4
   d5008:	1b4d      	subs	r5, r1, r5
      _Deque_iterator() _GLIBCXX_NOEXCEPT
      : _M_cur(), _M_first(), _M_last(), _M_node() { }

      _Deque_iterator(const iterator& __x) _GLIBCXX_NOEXCEPT
      : _M_cur(__x._M_cur), _M_first(__x._M_first),
        _M_last(__x._M_last), _M_node(__x._M_node) { }
   d500a:	4c3b      	ldr	r4, [pc, #236]	; (d50f8 <_Z12getHeartbeatv+0x1c4>)
	      const _Deque_iterator<_Tp, _Ref, _Ptr>& __y) _GLIBCXX_NOEXCEPT
    {
      return typename _Deque_iterator<_Tp, _Ref, _Ptr>::difference_type
	(_Deque_iterator<_Tp, _Ref, _Ptr>::_S_buffer_size())
	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
	+ (__y._M_last - __y._M_cur);
   d500c:	eb02 05a5 	add.w	r5, r2, r5, asr #2
   d5010:	461e      	mov	r6, r3
   d5012:	45aa      	cmp	sl, r5
   d5014:	da37      	bge.n	d5086 <_Z12getHeartbeatv+0x152>
            // If heartbeat message is near full, break, report rest of states in next heartbeat
            if(writer.dataSize() >= HEARTBEAT_STATES_CUTOFF) {
   d5016:	9a09      	ldr	r2, [sp, #36]	; 0x24
   d5018:	f240 235a 	movw	r3, #602	; 0x25a
   d501c:	429a      	cmp	r2, r3
   d501e:	d904      	bls.n	d502a <_Z12getHeartbeatv+0xf6>
              Log.warn("Heartbeat message full, remaining states will be reported next heartbeat");
   d5020:	4936      	ldr	r1, [pc, #216]	; (d50fc <_Z12getHeartbeatv+0x1c8>)
   d5022:	4837      	ldr	r0, [pc, #220]	; (d5100 <_Z12getHeartbeatv+0x1cc>)
   d5024:	f7ff f867 	bl	d40f6 <_ZNK5spark6Logger4warnEPKcz>
              break;
   d5028:	e02d      	b.n	d5086 <_Z12getHeartbeatv+0x152>
            }
            writer.beginArray()
   d502a:	a805      	add	r0, sp, #20
   d502c:	f004 f8b3 	bl	d9196 <_ZN5spark10JSONWriter10beginArrayEv>
              .value(stateQueue.front())
   d5030:	68b3      	ldr	r3, [r6, #8]
   d5032:	6819      	ldr	r1, [r3, #0]
   d5034:	f004 f8e0 	bl	d91f8 <_ZN5spark10JSONWriter5valueEi>
              .value(reasonQueue.front())
   d5038:	f8d9 3008 	ldr.w	r3, [r9, #8]
   d503c:	6819      	ldr	r1, [r3, #0]
   d503e:	f004 f8db 	bl	d91f8 <_ZN5spark10JSONWriter5valueEi>
              .value((unsigned int) timeQueue.front())
   d5042:	68a3      	ldr	r3, [r4, #8]
   d5044:	6819      	ldr	r1, [r3, #0]
   d5046:	f004 f8e9 	bl	d921c <_ZN5spark10JSONWriter5valueEj>
              .endArray();
   d504a:	f004 f885 	bl	d9158 <_ZN5spark10JSONWriter8endArrayEv>
       */
      void
      pop()
      {
	__glibcxx_requires_nonempty();
	c.pop_front();
   d504e:	4829      	ldr	r0, [pc, #164]	; (d50f4 <_Z12getHeartbeatv+0x1c0>)
   d5050:	f7ff ff5a 	bl	d4f08 <_ZNSt5dequeIiSaIiEE9pop_frontEv>
   d5054:	482b      	ldr	r0, [pc, #172]	; (d5104 <_Z12getHeartbeatv+0x1d0>)
   d5056:	f7ff ff57 	bl	d4f08 <_ZNSt5dequeIiSaIiEE9pop_frontEv>
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
      {
	if (this->_M_impl._M_start._M_cur
   d505a:	6922      	ldr	r2, [r4, #16]
	    != this->_M_impl._M_start._M_last - 1)
   d505c:	68a3      	ldr	r3, [r4, #8]
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
      {
	if (this->_M_impl._M_start._M_cur
   d505e:	3a04      	subs	r2, #4
   d5060:	4293      	cmp	r3, r2
   d5062:	d001      	beq.n	d5068 <_Z12getHeartbeatv+0x134>
	    != this->_M_impl._M_start._M_last - 1)
	  {
	    _Alloc_traits::destroy(this->_M_impl,
	                           this->_M_impl._M_start._M_cur);
	    ++this->_M_impl._M_start._M_cur;
   d5064:	3304      	adds	r3, #4
   d5066:	e00a      	b.n	d507e <_Z12getHeartbeatv+0x14a>
   d5068:	68e0      	ldr	r0, [r4, #12]
   d506a:	f7ff f816 	bl	d409a <_ZdlPv>
    _M_pop_front_aux()
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
   d506e:	6963      	ldr	r3, [r4, #20]
       *  immediately afterwards, based on _M_first and _M_last.
       */
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
      {
	_M_node = __new_node;
   d5070:	1d1a      	adds	r2, r3, #4
   d5072:	6162      	str	r2, [r4, #20]
	_M_first = *__new_node;
   d5074:	685b      	ldr	r3, [r3, #4]
   d5076:	60e3      	str	r3, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   d5078:	f503 7200 	add.w	r2, r3, #512	; 0x200
   d507c:	6122      	str	r2, [r4, #16]
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
   d507e:	60a3      	str	r3, [r4, #8]
        resetReason = RESET_REASON_NONE;

        //logs each state, reason of transitioning away, and time spent in state (ms)
        writer.name("states").beginArray();
        int numStates = stateQueue.size();
          for(int i = 0; i < numStates; i++){
   d5080:	f10a 0a01 	add.w	sl, sl, #1
   d5084:	e7c5      	b.n	d5012 <_Z12getHeartbeatv+0xde>
              .endArray();
            stateQueue.pop();
            reasonQueue.pop();
            timeQueue.pop();
          } // end states queue for
        writer.endArray(); // end states array
   d5086:	a805      	add	r0, sp, #20
   d5088:	f004 f866 	bl	d9158 <_ZN5spark10JSONWriter8endArrayEv>
      writer.endObject(); // end heartbeat message
   d508c:	a805      	add	r0, sp, #20
   d508e:	f004 f86c 	bl	d916a <_ZN5spark10JSONWriter9endObjectEv>
   d5092:	4b1d      	ldr	r3, [pc, #116]	; (d5108 <_Z12getHeartbeatv+0x1d4>)
   d5094:	491d      	ldr	r1, [pc, #116]	; (d510c <_Z12getHeartbeatv+0x1d8>)
   d5096:	781b      	ldrb	r3, [r3, #0]
   d5098:	f88d 3000 	strb.w	r3, [sp]
   d509c:	4642      	mov	r2, r8
   d509e:	233c      	movs	r3, #60	; 0x3c
   d50a0:	a803      	add	r0, sp, #12
   d50a2:	f003 fa41 	bl	d8528 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d50a6:	a804      	add	r0, sp, #16
   d50a8:	f7ff f9c4 	bl	d4434 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      Particle.publish("Heartbeat", heartbeatMessage, PRIVATE);
      Log.warn(heartbeatMessage);
   d50ac:	4641      	mov	r1, r8
   d50ae:	4814      	ldr	r0, [pc, #80]	; (d5100 <_Z12getHeartbeatv+0x1cc>)
   d50b0:	f7ff f821 	bl	d40f6 <_ZNK5spark6Logger4warnEPKcz>
   d50b4:	f000 ff7a 	bl	d5fac <HAL_Timer_Get_Milli_Seconds>
      lastHeartbeatPublish = millis();
   d50b8:	6038      	str	r0, [r7, #0]
    }

    

}
   d50ba:	f50d 7d26 	add.w	sp, sp, #664	; 0x298
   d50be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d50c2:	bf00      	nop
   d50c4:	2003e2e0 	.word	0x2003e2e0
   d50c8:	000927c0 	.word	0x000927c0
   d50cc:	000dad98 	.word	0x000dad98
   d50d0:	2003e278 	.word	0x2003e278
   d50d4:	000da3ab 	.word	0x000da3ab
   d50d8:	000da3b9 	.word	0x000da3b9
   d50dc:	2003e274 	.word	0x2003e274
   d50e0:	000da3c5 	.word	0x000da3c5
   d50e4:	2003e264 	.word	0x2003e264
   d50e8:	000da3d7 	.word	0x000da3d7
   d50ec:	2003e344 	.word	0x2003e344
   d50f0:	000da3e3 	.word	0x000da3e3
   d50f4:	2003e2e4 	.word	0x2003e2e4
   d50f8:	2003e31c 	.word	0x2003e31c
   d50fc:	000da3ea 	.word	0x000da3ea
   d5100:	2003e4b8 	.word	0x2003e4b8
   d5104:	2003e2b4 	.word	0x2003e2b4
   d5108:	2003e30c 	.word	0x2003e30c
   d510c:	000da3cd 	.word	0x000da3cd

000d5110 <_ZNSt11_Deque_baseIiSaIiEE17_M_initialize_mapEj>:
   *
   *  The initial underlying memory layout is a bit complicated...
  */
  template<typename _Tp, typename _Alloc>
    void
    _Deque_base<_Tp, _Alloc>::
   d5110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5114:	4604      	mov	r4, r0
    _M_initialize_map(size_t __num_elements)
    {
      const size_t __num_nodes = (__num_elements/ __deque_buf_size(sizeof(_Tp))
				  + 1);
   d5116:	09c8      	lsrs	r0, r1, #7
   d5118:	1c45      	adds	r5, r0, #1
   d511a:	3003      	adds	r0, #3
   d511c:	2808      	cmp	r0, #8
   d511e:	bf38      	it	cc
   d5120:	2008      	movcc	r0, #8

      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
   d5122:	6060      	str	r0, [r4, #4]
   *
   *  The initial underlying memory layout is a bit complicated...
  */
  template<typename _Tp, typename _Alloc>
    void
    _Deque_base<_Tp, _Alloc>::
   d5124:	460f      	mov	r7, r1
       *
       *  Calls @c a.allocate(n)
      */
      static pointer
      allocate(allocator_type& __a, size_type __n)
      { return __a.allocate(__n); }
   d5126:	f7ff fd43 	bl	d4bb0 <_ZN9__gnu_cxx13new_allocatorIPiE8allocateEjPKv.isra.37>
      // starts in the middle elements and grows outwards.  So nstart may be
      // the beginning of _M_map, but for small maps it may be as far in as
      // _M_map+3.

      _Map_pointer __nstart = (this->_M_impl._M_map
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   d512a:	6866      	ldr	r6, [r4, #4]
      const size_t __num_nodes = (__num_elements/ __deque_buf_size(sizeof(_Tp))
				  + 1);

      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
					   size_t(__num_nodes + 2));
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
   d512c:	6020      	str	r0, [r4, #0]
      // starts in the middle elements and grows outwards.  So nstart may be
      // the beginning of _M_map, but for small maps it may be as far in as
      // _M_map+3.

      _Map_pointer __nstart = (this->_M_impl._M_map
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   d512e:	1b76      	subs	r6, r6, r5
   d5130:	0876      	lsrs	r6, r6, #1
   d5132:	eb00 0986 	add.w	r9, r0, r6, lsl #2
   d5136:	4680      	mov	r8, r0
      _Map_pointer __nfinish = __nstart + __num_nodes;
   d5138:	eb09 0585 	add.w	r5, r9, r5, lsl #2
    _M_create_nodes(_Map_pointer __nstart, _Map_pointer __nfinish)
    {
      _Map_pointer __cur;
      __try
	{
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
   d513c:	46ca      	mov	sl, r9
   d513e:	4555      	cmp	r5, sl
   d5140:	d906      	bls.n	d5150 <_ZNSt11_Deque_baseIiSaIiEE17_M_initialize_mapEj+0x40>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5142:	f44f 7000 	mov.w	r0, #512	; 0x200
   d5146:	f7fe ffa6 	bl	d4096 <_Znwj>
	    *__cur = this->_M_allocate_node();
   d514a:	f84a 0b04 	str.w	r0, [sl], #4
   d514e:	e7f6      	b.n	d513e <_ZNSt11_Deque_baseIiSaIiEE17_M_initialize_mapEj+0x2e>
       *  immediately afterwards, based on _M_first and _M_last.
       */
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
      {
	_M_node = __new_node;
   d5150:	f8c4 9014 	str.w	r9, [r4, #20]
	_M_first = *__new_node;
   d5154:	f858 2026 	ldr.w	r2, [r8, r6, lsl #2]
   d5158:	60e2      	str	r2, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   d515a:	f502 7300 	add.w	r3, r2, #512	; 0x200
   d515e:	6123      	str	r3, [r4, #16]
       *  immediately afterwards, based on _M_first and _M_last.
       */
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
      {
	_M_node = __new_node;
   d5160:	1f2b      	subs	r3, r5, #4
   d5162:	6263      	str	r3, [r4, #36]	; 0x24
	_M_first = *__new_node;
   d5164:	f855 3c04 	ldr.w	r3, [r5, #-4]
   d5168:	61e3      	str	r3, [r4, #28]
	}

      this->_M_impl._M_start._M_set_node(__nstart);
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
   d516a:	f007 077f 	and.w	r7, r7, #127	; 0x7f
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
      {
	_M_node = __new_node;
	_M_first = *__new_node;
	_M_last = _M_first + difference_type(_S_buffer_size());
   d516e:	f503 7100 	add.w	r1, r3, #512	; 0x200
	}

      this->_M_impl._M_start._M_set_node(__nstart);
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
   d5172:	eb03 0387 	add.w	r3, r3, r7, lsl #2
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
      {
	_M_node = __new_node;
	_M_first = *__new_node;
	_M_last = _M_first + difference_type(_S_buffer_size());
   d5176:	6221      	str	r1, [r4, #32]
	  __throw_exception_again;
	}

      this->_M_impl._M_start._M_set_node(__nstart);
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
   d5178:	60a2      	str	r2, [r4, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
   d517a:	61a3      	str	r3, [r4, #24]
   d517c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d5180 <_ZNSt11_Deque_baseIiSaIiEEC1Ev>:
      { return allocator_type(_M_get_Tp_allocator()); }

      typedef _Deque_iterator<_Tp, _Tp&, _Ptr>          iterator;
      typedef _Deque_iterator<_Tp, const _Tp&, _Ptr_const>   const_iterator;

      _Deque_base()
   d5180:	b510      	push	{r4, lr}
	iterator _M_start;
	iterator _M_finish;

	_Deque_impl()
	: _Tp_alloc_type(), _M_map(), _M_map_size(0),
	  _M_start(), _M_finish()
   d5182:	2100      	movs	r1, #0
      { return allocator_type(_M_get_Tp_allocator()); }

      typedef _Deque_iterator<_Tp, _Tp&, _Ptr>          iterator;
      typedef _Deque_iterator<_Tp, const _Tp&, _Ptr_const>   const_iterator;

      _Deque_base()
   d5184:	4604      	mov	r4, r0
	iterator _M_start;
	iterator _M_finish;

	_Deque_impl()
	: _Tp_alloc_type(), _M_map(), _M_map_size(0),
	  _M_start(), _M_finish()
   d5186:	6001      	str	r1, [r0, #0]
   d5188:	6041      	str	r1, [r0, #4]
      _Deque_iterator(_Elt_pointer __x, _Map_pointer __y) _GLIBCXX_NOEXCEPT
      : _M_cur(__x), _M_first(*__y),
        _M_last(*__y + _S_buffer_size()), _M_node(__y) { }

      _Deque_iterator() _GLIBCXX_NOEXCEPT
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
   d518a:	6081      	str	r1, [r0, #8]
   d518c:	60c1      	str	r1, [r0, #12]
   d518e:	6101      	str	r1, [r0, #16]
   d5190:	6141      	str	r1, [r0, #20]
   d5192:	6181      	str	r1, [r0, #24]
   d5194:	61c1      	str	r1, [r0, #28]
   d5196:	6201      	str	r1, [r0, #32]
   d5198:	6241      	str	r1, [r0, #36]	; 0x24
      typedef _Deque_iterator<_Tp, _Tp&, _Ptr>          iterator;
      typedef _Deque_iterator<_Tp, const _Tp&, _Ptr_const>   const_iterator;

      _Deque_base()
      : _M_impl()
      { _M_initialize_map(0); }
   d519a:	f7ff ffb9 	bl	d5110 <_ZNSt11_Deque_baseIiSaIiEE17_M_initialize_mapEj>
   d519e:	4620      	mov	r0, r4
   d51a0:	bd10      	pop	{r4, pc}

000d51a2 <_ZNSt11_Deque_baseImSaImEE17_M_initialize_mapEj>:
   *
   *  The initial underlying memory layout is a bit complicated...
  */
  template<typename _Tp, typename _Alloc>
    void
    _Deque_base<_Tp, _Alloc>::
   d51a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d51a6:	4604      	mov	r4, r0
    _M_initialize_map(size_t __num_elements)
    {
      const size_t __num_nodes = (__num_elements/ __deque_buf_size(sizeof(_Tp))
				  + 1);
   d51a8:	09c8      	lsrs	r0, r1, #7
   d51aa:	1c45      	adds	r5, r0, #1
   d51ac:	3003      	adds	r0, #3
   d51ae:	2808      	cmp	r0, #8
   d51b0:	bf38      	it	cc
   d51b2:	2008      	movcc	r0, #8

      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
   d51b4:	6060      	str	r0, [r4, #4]
   *
   *  The initial underlying memory layout is a bit complicated...
  */
  template<typename _Tp, typename _Alloc>
    void
    _Deque_base<_Tp, _Alloc>::
   d51b6:	460f      	mov	r7, r1
   d51b8:	f7ff fcfa 	bl	d4bb0 <_ZN9__gnu_cxx13new_allocatorIPiE8allocateEjPKv.isra.37>
      // starts in the middle elements and grows outwards.  So nstart may be
      // the beginning of _M_map, but for small maps it may be as far in as
      // _M_map+3.

      _Map_pointer __nstart = (this->_M_impl._M_map
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   d51bc:	6866      	ldr	r6, [r4, #4]
      const size_t __num_nodes = (__num_elements/ __deque_buf_size(sizeof(_Tp))
				  + 1);

      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
					   size_t(__num_nodes + 2));
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
   d51be:	6020      	str	r0, [r4, #0]
      // starts in the middle elements and grows outwards.  So nstart may be
      // the beginning of _M_map, but for small maps it may be as far in as
      // _M_map+3.

      _Map_pointer __nstart = (this->_M_impl._M_map
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   d51c0:	1b76      	subs	r6, r6, r5
   d51c2:	0876      	lsrs	r6, r6, #1
   d51c4:	eb00 0986 	add.w	r9, r0, r6, lsl #2
   d51c8:	4680      	mov	r8, r0
      _Map_pointer __nfinish = __nstart + __num_nodes;
   d51ca:	eb09 0585 	add.w	r5, r9, r5, lsl #2
    _M_create_nodes(_Map_pointer __nstart, _Map_pointer __nfinish)
    {
      _Map_pointer __cur;
      __try
	{
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
   d51ce:	46ca      	mov	sl, r9
   d51d0:	4555      	cmp	r5, sl
   d51d2:	d906      	bls.n	d51e2 <_ZNSt11_Deque_baseImSaImEE17_M_initialize_mapEj+0x40>
   d51d4:	f44f 7000 	mov.w	r0, #512	; 0x200
   d51d8:	f7fe ff5d 	bl	d4096 <_Znwj>
	    *__cur = this->_M_allocate_node();
   d51dc:	f84a 0b04 	str.w	r0, [sl], #4
   d51e0:	e7f6      	b.n	d51d0 <_ZNSt11_Deque_baseImSaImEE17_M_initialize_mapEj+0x2e>
       *  immediately afterwards, based on _M_first and _M_last.
       */
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
      {
	_M_node = __new_node;
   d51e2:	f8c4 9014 	str.w	r9, [r4, #20]
	_M_first = *__new_node;
   d51e6:	f858 2026 	ldr.w	r2, [r8, r6, lsl #2]
   d51ea:	60e2      	str	r2, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   d51ec:	f502 7300 	add.w	r3, r2, #512	; 0x200
   d51f0:	6123      	str	r3, [r4, #16]
       *  immediately afterwards, based on _M_first and _M_last.
       */
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
      {
	_M_node = __new_node;
   d51f2:	1f2b      	subs	r3, r5, #4
   d51f4:	6263      	str	r3, [r4, #36]	; 0x24
	_M_first = *__new_node;
   d51f6:	f855 3c04 	ldr.w	r3, [r5, #-4]
   d51fa:	61e3      	str	r3, [r4, #28]
	}

      this->_M_impl._M_start._M_set_node(__nstart);
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
   d51fc:	f007 077f 	and.w	r7, r7, #127	; 0x7f
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
      {
	_M_node = __new_node;
	_M_first = *__new_node;
	_M_last = _M_first + difference_type(_S_buffer_size());
   d5200:	f503 7100 	add.w	r1, r3, #512	; 0x200
	}

      this->_M_impl._M_start._M_set_node(__nstart);
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
   d5204:	eb03 0387 	add.w	r3, r3, r7, lsl #2
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
      {
	_M_node = __new_node;
	_M_first = *__new_node;
	_M_last = _M_first + difference_type(_S_buffer_size());
   d5208:	6221      	str	r1, [r4, #32]
	  __throw_exception_again;
	}

      this->_M_impl._M_start._M_set_node(__nstart);
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
   d520a:	60a2      	str	r2, [r4, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
   d520c:	61a3      	str	r3, [r4, #24]
   d520e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d5212 <_ZSt4swapISt15_Deque_iteratorIiRiPiEEvRT_S5_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d5212:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5214:	460c      	mov	r4, r1
      _Deque_iterator() _GLIBCXX_NOEXCEPT
      : _M_cur(), _M_first(), _M_last(), _M_node() { }

      _Deque_iterator(const iterator& __x) _GLIBCXX_NOEXCEPT
      : _M_cur(__x._M_cur), _M_first(__x._M_first),
        _M_last(__x._M_last), _M_node(__x._M_node) { }
   d5216:	e890 5000 	ldmia.w	r0, {ip, lr}
   d521a:	6887      	ldr	r7, [r0, #8]
   d521c:	68c6      	ldr	r6, [r0, #12]
   d521e:	4605      	mov	r5, r0
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5220:	c90f      	ldmia	r1, {r0, r1, r2, r3}
   d5222:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
      __b = _GLIBCXX_MOVE(__tmp);
   d5226:	e884 5000 	stmia.w	r4, {ip, lr}
   d522a:	60a7      	str	r7, [r4, #8]
   d522c:	60e6      	str	r6, [r4, #12]
   d522e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5230 <_ZNSt11_Deque_baseIiSaIiEEC1EOS1_>:
	_M_initialize_map(0);
	if (__x._M_impl._M_map)
	  this->_M_impl._M_swap_data(__x._M_impl);
      }

      _Deque_base(_Deque_base&& __x)
   d5230:	b538      	push	{r3, r4, r5, lr}
   d5232:	460d      	mov	r5, r1
#if __cplusplus >= 201103L
	_Deque_impl(_Deque_impl&&) = default;

	_Deque_impl(_Tp_alloc_type&& __a) noexcept
	: _Tp_alloc_type(std::move(__a)), _M_map(), _M_map_size(0),
	  _M_start(), _M_finish()
   d5234:	2100      	movs	r1, #0
   d5236:	6001      	str	r1, [r0, #0]
   d5238:	6041      	str	r1, [r0, #4]
      _Deque_iterator(_Elt_pointer __x, _Map_pointer __y) _GLIBCXX_NOEXCEPT
      : _M_cur(__x), _M_first(*__y),
        _M_last(*__y + _S_buffer_size()), _M_node(__y) { }

      _Deque_iterator() _GLIBCXX_NOEXCEPT
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
   d523a:	6081      	str	r1, [r0, #8]
   d523c:	60c1      	str	r1, [r0, #12]
   d523e:	6101      	str	r1, [r0, #16]
   d5240:	6141      	str	r1, [r0, #20]
   d5242:	6181      	str	r1, [r0, #24]
   d5244:	61c1      	str	r1, [r0, #28]
   d5246:	6201      	str	r1, [r0, #32]
   d5248:	6241      	str	r1, [r0, #36]	; 0x24
	_M_initialize_map(0);
	if (__x._M_impl._M_map)
	  this->_M_impl._M_swap_data(__x._M_impl);
      }

      _Deque_base(_Deque_base&& __x)
   d524a:	4604      	mov	r4, r0
      { }

      _Deque_base(_Deque_base&& __x, true_type)
      : _M_impl(std::move(__x._M_get_Tp_allocator()))
      {
	_M_initialize_map(0);
   d524c:	f7ff ff60 	bl	d5110 <_ZNSt11_Deque_baseIiSaIiEE17_M_initialize_mapEj>
	if (__x._M_impl._M_map)
   d5250:	682b      	ldr	r3, [r5, #0]
   d5252:	b19b      	cbz	r3, d527c <_ZNSt11_Deque_baseIiSaIiEEC1EOS1_+0x4c>
#endif

	void _M_swap_data(_Deque_impl& __x) _GLIBCXX_NOEXCEPT
	{
	  using std::swap;
	  swap(this->_M_start, __x._M_start);
   d5254:	f105 0108 	add.w	r1, r5, #8
   d5258:	f104 0008 	add.w	r0, r4, #8
   d525c:	f7ff ffd9 	bl	d5212 <_ZSt4swapISt15_Deque_iteratorIiRiPiEEvRT_S5_>
	  swap(this->_M_finish, __x._M_finish);
   d5260:	f105 0118 	add.w	r1, r5, #24
   d5264:	f104 0018 	add.w	r0, r4, #24
   d5268:	f7ff ffd3 	bl	d5212 <_ZSt4swapISt15_Deque_iteratorIiRiPiEEvRT_S5_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d526c:	6823      	ldr	r3, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d526e:	682a      	ldr	r2, [r5, #0]
   d5270:	6022      	str	r2, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d5272:	602b      	str	r3, [r5, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5274:	6863      	ldr	r3, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   d5276:	686a      	ldr	r2, [r5, #4]
   d5278:	6062      	str	r2, [r4, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d527a:	606b      	str	r3, [r5, #4]
      }

      _Deque_base(_Deque_base&& __x)
      : _Deque_base(std::move(__x),
		    __gnu_cxx::__allocator_always_compares_equal<_Alloc>{})
      { }
   d527c:	4620      	mov	r0, r4
   d527e:	bd38      	pop	{r3, r4, r5, pc}

000d5280 <_ZSt4swapISt15_Deque_iteratorImRmPmEEvRT_S5_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d5280:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5282:	460c      	mov	r4, r1
      _Deque_iterator() _GLIBCXX_NOEXCEPT
      : _M_cur(), _M_first(), _M_last(), _M_node() { }

      _Deque_iterator(const iterator& __x) _GLIBCXX_NOEXCEPT
      : _M_cur(__x._M_cur), _M_first(__x._M_first),
        _M_last(__x._M_last), _M_node(__x._M_node) { }
   d5284:	e890 5000 	ldmia.w	r0, {ip, lr}
   d5288:	6887      	ldr	r7, [r0, #8]
   d528a:	68c6      	ldr	r6, [r0, #12]
   d528c:	4605      	mov	r5, r0
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d528e:	c90f      	ldmia	r1, {r0, r1, r2, r3}
   d5290:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
      __b = _GLIBCXX_MOVE(__tmp);
   d5294:	e884 5000 	stmia.w	r4, {ip, lr}
   d5298:	60a7      	str	r7, [r4, #8]
   d529a:	60e6      	str	r6, [r4, #12]
   d529c:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d529e <_ZSt4copyIPPmS1_ET0_T_S3_S2_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
   d529e:	b510      	push	{r4, lr}
#if __cplusplus >= 201103L
	  // trivial types can have deleted assignment
	  static_assert( is_copy_assignable<_Tp>::value,
	                 "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
   d52a0:	1a0c      	subs	r4, r1, r0
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
   d52a2:	4613      	mov	r3, r2
	  // trivial types can have deleted assignment
	  static_assert( is_copy_assignable<_Tp>::value,
	                 "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
   d52a4:	08a2      	lsrs	r2, r4, #2
   d52a6:	d005      	beq.n	d52b4 <_ZSt4copyIPPmS1_ET0_T_S3_S2_+0x16>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d52a8:	4601      	mov	r1, r0
   d52aa:	4622      	mov	r2, r4
   d52ac:	4618      	mov	r0, r3
   d52ae:	f004 fcad 	bl	d9c0c <memmove>
   d52b2:	4603      	mov	r3, r0
      __glibcxx_requires_valid_range(__first, __last);

      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
	      (std::__miter_base(__first), std::__miter_base(__last),
	       __result));
    }
   d52b4:	1918      	adds	r0, r3, r4
   d52b6:	bd10      	pop	{r4, pc}

000d52b8 <_ZSt13copy_backwardIPPmS1_ET0_T_S3_S2_>:
#if __cplusplus >= 201103L
	  // trivial types can have deleted assignment
	  static_assert( is_copy_assignable<_Tp>::value,
	                 "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
   d52b8:	1a09      	subs	r1, r1, r0
   *  Result may not be in the range (first,last].  Use copy instead.  Note
   *  that the start of the output range may overlap [first,last).
  */
  template<typename _BI1, typename _BI2>
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
   d52ba:	b508      	push	{r3, lr}
	  // trivial types can have deleted assignment
	  static_assert( is_copy_assignable<_Tp>::value,
	                 "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
   d52bc:	088b      	lsrs	r3, r1, #2
   d52be:	eba2 0301 	sub.w	r3, r2, r1
   d52c2:	d005      	beq.n	d52d0 <_ZSt13copy_backwardIPPmS1_ET0_T_S3_S2_+0x18>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   d52c4:	460a      	mov	r2, r1
   d52c6:	4601      	mov	r1, r0
   d52c8:	4618      	mov	r0, r3
   d52ca:	f004 fc9f 	bl	d9c0c <memmove>
   d52ce:	4603      	mov	r3, r0
      __glibcxx_requires_valid_range(__first, __last);

      return (std::__copy_move_backward_a2<__is_move_iterator<_BI1>::__value>
	      (std::__miter_base(__first), std::__miter_base(__last),
	       __result));
    }
   d52d0:	4618      	mov	r0, r3
   d52d2:	bd08      	pop	{r3, pc}

000d52d4 <_ZNSt5dequeImSaImEE16_M_push_back_auxIImEEEvDpOT_>:
  // Called only if _M_impl._M_finish._M_cur == _M_impl._M_finish._M_last - 1.
  template<typename _Tp, typename _Alloc>
#if __cplusplus >= 201103L
    template<typename... _Args>
      void
      deque<_Tp, _Alloc>::
   d52d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d52d8:	460e      	mov	r6, r1
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   d52da:	6805      	ldr	r5, [r0, #0]
   d52dc:	6a41      	ldr	r1, [r0, #36]	; 0x24
   d52de:	6843      	ldr	r3, [r0, #4]
       *  (And consequently, %deque iterators.)
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   d52e0:	1b4a      	subs	r2, r1, r5
   d52e2:	eba3 02a2 	sub.w	r2, r3, r2, asr #2
   d52e6:	2a01      	cmp	r2, #1
   d52e8:	4604      	mov	r4, r0
   d52ea:	d849      	bhi.n	d5380 <_ZNSt5dequeImSaImEE16_M_push_back_auxIImEEEvDpOT_+0xac>
    void
    deque<_Tp, _Alloc>::
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   d52ec:	6940      	ldr	r0, [r0, #20]
   d52ee:	1a0f      	subs	r7, r1, r0
   d52f0:	10bf      	asrs	r7, r7, #2
   d52f2:	3701      	adds	r7, #1
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
   d52f4:	f107 0801 	add.w	r8, r7, #1

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   d52f8:	ebb3 0f48 	cmp.w	r3, r8, lsl #1
   d52fc:	d911      	bls.n	d5322 <_ZNSt5dequeImSaImEE16_M_push_back_auxIImEEEvDpOT_+0x4e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   d52fe:	ebc8 0303 	rsb	r3, r8, r3
   d5302:	085b      	lsrs	r3, r3, #1
   d5304:	eb05 0583 	add.w	r5, r5, r3, lsl #2
					 - __new_num_nodes) / 2
	                 + (__add_at_front ? __nodes_to_add : 0);
	  if (__new_nstart < this->_M_impl._M_start._M_node)
   d5308:	42a8      	cmp	r0, r5
   d530a:	f101 0104 	add.w	r1, r1, #4
   d530e:	d903      	bls.n	d5318 <_ZNSt5dequeImSaImEE16_M_push_back_auxIImEEEvDpOT_+0x44>
	    std::copy(this->_M_impl._M_start._M_node,
   d5310:	462a      	mov	r2, r5
   d5312:	f7ff ffc4 	bl	d529e <_ZSt4copyIPPmS1_ET0_T_S3_S2_>
   d5316:	e021      	b.n	d535c <_ZNSt5dequeImSaImEE16_M_push_back_auxIImEEEvDpOT_+0x88>
		      this->_M_impl._M_finish._M_node + 1,
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
   d5318:	eb05 0287 	add.w	r2, r5, r7, lsl #2
   d531c:	f7ff ffcc 	bl	d52b8 <_ZSt13copy_backwardIPPmS1_ET0_T_S3_S2_>
   d5320:	e01c      	b.n	d535c <_ZNSt5dequeImSaImEE16_M_push_back_auxIImEEEvDpOT_+0x88>
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
	return __b;
   d5322:	2b00      	cmp	r3, #0
   d5324:	bf14      	ite	ne
   d5326:	4699      	movne	r9, r3
   d5328:	f04f 0901 	moveq.w	r9, #1
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
	                             + std::max(this->_M_impl._M_map_size,
						__nodes_to_add) + 2;
   d532c:	3302      	adds	r3, #2
   d532e:	4499      	add	r9, r3
   d5330:	4648      	mov	r0, r9
   d5332:	f7ff fc3d 	bl	d4bb0 <_ZN9__gnu_cxx13new_allocatorIPiE8allocateEjPKv.isra.37>

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   d5336:	ebc8 0509 	rsb	r5, r8, r9
	                 + (__add_at_front ? __nodes_to_add : 0);
	  std::copy(this->_M_impl._M_start._M_node,
   d533a:	6a61      	ldr	r1, [r4, #36]	; 0x24
	  size_type __new_map_size = this->_M_impl._M_map_size
	                             + std::max(this->_M_impl._M_map_size,
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   d533c:	086d      	lsrs	r5, r5, #1
   d533e:	eb00 0585 	add.w	r5, r0, r5, lsl #2
   d5342:	4682      	mov	sl, r0
	                 + (__add_at_front ? __nodes_to_add : 0);
	  std::copy(this->_M_impl._M_start._M_node,
   d5344:	462a      	mov	r2, r5
   d5346:	3104      	adds	r1, #4
   d5348:	6960      	ldr	r0, [r4, #20]
   d534a:	f7ff ffa8 	bl	d529e <_ZSt4copyIPPmS1_ET0_T_S3_S2_>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d534e:	6820      	ldr	r0, [r4, #0]
   d5350:	f7fe fea3 	bl	d409a <_ZdlPv>
		    this->_M_impl._M_finish._M_node + 1,
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);

	  this->_M_impl._M_map = __new_map;
   d5354:	f8c4 a000 	str.w	sl, [r4]
	  this->_M_impl._M_map_size = __new_map_size;
   d5358:	f8c4 9004 	str.w	r9, [r4, #4]
       *  immediately afterwards, based on _M_first and _M_last.
       */
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
      {
	_M_node = __new_node;
   d535c:	6165      	str	r5, [r4, #20]
	_M_first = *__new_node;
   d535e:	682b      	ldr	r3, [r5, #0]
   d5360:	60e3      	str	r3, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   d5362:	f503 7300 	add.w	r3, r3, #512	; 0x200
   d5366:	6123      	str	r3, [r4, #16]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
   d5368:	f107 4380 	add.w	r3, r7, #1073741824	; 0x40000000
   d536c:	3b01      	subs	r3, #1
   d536e:	eb05 0283 	add.w	r2, r5, r3, lsl #2
       *  immediately afterwards, based on _M_first and _M_last.
       */
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
      {
	_M_node = __new_node;
   d5372:	6262      	str	r2, [r4, #36]	; 0x24
	_M_first = *__new_node;
   d5374:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   d5378:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   d537a:	f503 7300 	add.w	r3, r3, #512	; 0x200
   d537e:	6223      	str	r3, [r4, #32]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5380:	f44f 7000 	mov.w	r0, #512	; 0x200
      deque<_Tp, _Alloc>::
      _M_push_back_aux(const value_type& __t)
#endif
      {
	_M_reserve_map_at_back();
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
   d5384:	6a65      	ldr	r5, [r4, #36]	; 0x24
   d5386:	f7fe fe86 	bl	d4096 <_Znwj>
   d538a:	6068      	str	r0, [r5, #4]
	__try
	  {
#if __cplusplus >= 201103L
	    _Alloc_traits::construct(this->_M_impl,
   d538c:	69a3      	ldr	r3, [r4, #24]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d538e:	6832      	ldr	r2, [r6, #0]
   d5390:	b103      	cbz	r3, d5394 <_ZNSt5dequeImSaImEE16_M_push_back_auxIImEEEvDpOT_+0xc0>
   d5392:	601a      	str	r2, [r3, #0]
			             std::forward<_Args>(__args)...);
#else
	    this->_M_impl.construct(this->_M_impl._M_finish._M_cur, __t);
#endif
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
						+ 1);
   d5394:	6a63      	ldr	r3, [r4, #36]	; 0x24
       *  immediately afterwards, based on _M_first and _M_last.
       */
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
      {
	_M_node = __new_node;
   d5396:	1d1a      	adds	r2, r3, #4
   d5398:	6262      	str	r2, [r4, #36]	; 0x24
	_M_first = *__new_node;
   d539a:	685b      	ldr	r3, [r3, #4]
   d539c:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   d539e:	f503 7200 	add.w	r2, r3, #512	; 0x200
   d53a2:	6222      	str	r2, [r4, #32]
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
   d53a4:	61a3      	str	r3, [r4, #24]
   d53a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d53aa <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIIRKiEEEvDpOT_>:
  // Called only if _M_impl._M_finish._M_cur == _M_impl._M_finish._M_last - 1.
  template<typename _Tp, typename _Alloc>
#if __cplusplus >= 201103L
    template<typename... _Args>
      void
      deque<_Tp, _Alloc>::
   d53aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d53ae:	460e      	mov	r6, r1
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   d53b0:	6805      	ldr	r5, [r0, #0]
   d53b2:	6a41      	ldr	r1, [r0, #36]	; 0x24
   d53b4:	6843      	ldr	r3, [r0, #4]
       *  (And consequently, %deque iterators.)
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   d53b6:	1b4a      	subs	r2, r1, r5
   d53b8:	eba3 02a2 	sub.w	r2, r3, r2, asr #2
   d53bc:	2a01      	cmp	r2, #1
   d53be:	4604      	mov	r4, r0
   d53c0:	d849      	bhi.n	d5456 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIIRKiEEEvDpOT_+0xac>
    void
    deque<_Tp, _Alloc>::
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   d53c2:	6940      	ldr	r0, [r0, #20]
   d53c4:	1a0f      	subs	r7, r1, r0
   d53c6:	10bf      	asrs	r7, r7, #2
   d53c8:	3701      	adds	r7, #1
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
   d53ca:	f107 0801 	add.w	r8, r7, #1

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   d53ce:	ebb3 0f48 	cmp.w	r3, r8, lsl #1
   d53d2:	d911      	bls.n	d53f8 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIIRKiEEEvDpOT_+0x4e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   d53d4:	ebc8 0303 	rsb	r3, r8, r3
   d53d8:	085b      	lsrs	r3, r3, #1
   d53da:	eb05 0583 	add.w	r5, r5, r3, lsl #2
					 - __new_num_nodes) / 2
	                 + (__add_at_front ? __nodes_to_add : 0);
	  if (__new_nstart < this->_M_impl._M_start._M_node)
   d53de:	42a8      	cmp	r0, r5
   d53e0:	f101 0104 	add.w	r1, r1, #4
   d53e4:	d903      	bls.n	d53ee <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIIRKiEEEvDpOT_+0x44>
	    std::copy(this->_M_impl._M_start._M_node,
   d53e6:	462a      	mov	r2, r5
   d53e8:	f7ff ff59 	bl	d529e <_ZSt4copyIPPmS1_ET0_T_S3_S2_>
   d53ec:	e021      	b.n	d5432 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIIRKiEEEvDpOT_+0x88>
		      this->_M_impl._M_finish._M_node + 1,
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
   d53ee:	eb05 0287 	add.w	r2, r5, r7, lsl #2
   d53f2:	f7ff ff61 	bl	d52b8 <_ZSt13copy_backwardIPPmS1_ET0_T_S3_S2_>
   d53f6:	e01c      	b.n	d5432 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIIRKiEEEvDpOT_+0x88>
   d53f8:	2b00      	cmp	r3, #0
   d53fa:	bf14      	ite	ne
   d53fc:	4699      	movne	r9, r3
   d53fe:	f04f 0901 	moveq.w	r9, #1
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
	                             + std::max(this->_M_impl._M_map_size,
						__nodes_to_add) + 2;
   d5402:	3302      	adds	r3, #2
   d5404:	4499      	add	r9, r3
   d5406:	4648      	mov	r0, r9
   d5408:	f7ff fbd2 	bl	d4bb0 <_ZN9__gnu_cxx13new_allocatorIPiE8allocateEjPKv.isra.37>

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   d540c:	ebc8 0509 	rsb	r5, r8, r9
	                 + (__add_at_front ? __nodes_to_add : 0);
	  std::copy(this->_M_impl._M_start._M_node,
   d5410:	6a61      	ldr	r1, [r4, #36]	; 0x24
	  size_type __new_map_size = this->_M_impl._M_map_size
	                             + std::max(this->_M_impl._M_map_size,
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   d5412:	086d      	lsrs	r5, r5, #1
   d5414:	eb00 0585 	add.w	r5, r0, r5, lsl #2
   d5418:	4682      	mov	sl, r0
	                 + (__add_at_front ? __nodes_to_add : 0);
	  std::copy(this->_M_impl._M_start._M_node,
   d541a:	462a      	mov	r2, r5
   d541c:	3104      	adds	r1, #4
   d541e:	6960      	ldr	r0, [r4, #20]
   d5420:	f7ff ff3d 	bl	d529e <_ZSt4copyIPPmS1_ET0_T_S3_S2_>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d5424:	6820      	ldr	r0, [r4, #0]
   d5426:	f7fe fe38 	bl	d409a <_ZdlPv>
		    this->_M_impl._M_finish._M_node + 1,
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);

	  this->_M_impl._M_map = __new_map;
   d542a:	f8c4 a000 	str.w	sl, [r4]
	  this->_M_impl._M_map_size = __new_map_size;
   d542e:	f8c4 9004 	str.w	r9, [r4, #4]
       *  immediately afterwards, based on _M_first and _M_last.
       */
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
      {
	_M_node = __new_node;
   d5432:	6165      	str	r5, [r4, #20]
	_M_first = *__new_node;
   d5434:	682b      	ldr	r3, [r5, #0]
   d5436:	60e3      	str	r3, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   d5438:	f503 7300 	add.w	r3, r3, #512	; 0x200
   d543c:	6123      	str	r3, [r4, #16]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
   d543e:	f107 4380 	add.w	r3, r7, #1073741824	; 0x40000000
   d5442:	3b01      	subs	r3, #1
   d5444:	eb05 0283 	add.w	r2, r5, r3, lsl #2
       *  immediately afterwards, based on _M_first and _M_last.
       */
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
      {
	_M_node = __new_node;
   d5448:	6262      	str	r2, [r4, #36]	; 0x24
	_M_first = *__new_node;
   d544a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   d544e:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   d5450:	f503 7300 	add.w	r3, r3, #512	; 0x200
   d5454:	6223      	str	r3, [r4, #32]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5456:	f44f 7000 	mov.w	r0, #512	; 0x200
      deque<_Tp, _Alloc>::
      _M_push_back_aux(const value_type& __t)
#endif
      {
	_M_reserve_map_at_back();
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
   d545a:	6a65      	ldr	r5, [r4, #36]	; 0x24
   d545c:	f7fe fe1b 	bl	d4096 <_Znwj>
   d5460:	6068      	str	r0, [r5, #4]
	__try
	  {
#if __cplusplus >= 201103L
	    _Alloc_traits::construct(this->_M_impl,
   d5462:	69a3      	ldr	r3, [r4, #24]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d5464:	6832      	ldr	r2, [r6, #0]
   d5466:	b103      	cbz	r3, d546a <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIIRKiEEEvDpOT_+0xc0>
   d5468:	601a      	str	r2, [r3, #0]
			             std::forward<_Args>(__args)...);
#else
	    this->_M_impl.construct(this->_M_impl._M_finish._M_cur, __t);
#endif
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
						+ 1);
   d546a:	6a63      	ldr	r3, [r4, #36]	; 0x24
       *  immediately afterwards, based on _M_first and _M_last.
       */
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
      {
	_M_node = __new_node;
   d546c:	1d1a      	adds	r2, r3, #4
   d546e:	6262      	str	r2, [r4, #36]	; 0x24
	_M_first = *__new_node;
   d5470:	685b      	ldr	r3, [r3, #4]
   d5472:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   d5474:	f503 7200 	add.w	r2, r3, #512	; 0x200
   d5478:	6222      	str	r2, [r4, #32]
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
   d547a:	61a3      	str	r3, [r4, #24]
   d547c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d5480 <_ZNSt5dequeIiSaIiEE9push_backERKi>:
       *  element at the end of the %deque and assigns the given data
       *  to it.  Due to the nature of a %deque this operation can be
       *  done in constant time.
       */
      void
      push_back(const value_type& __x)
   d5480:	b538      	push	{r3, r4, r5, lr}
      {
	if (this->_M_impl._M_finish._M_cur
   d5482:	6a04      	ldr	r4, [r0, #32]
	    != this->_M_impl._M_finish._M_last - 1)
   d5484:	6982      	ldr	r2, [r0, #24]
       *  done in constant time.
       */
      void
      push_back(const value_type& __x)
      {
	if (this->_M_impl._M_finish._M_cur
   d5486:	3c04      	subs	r4, #4
   d5488:	42a2      	cmp	r2, r4
       *  element at the end of the %deque and assigns the given data
       *  to it.  Due to the nature of a %deque this operation can be
       *  done in constant time.
       */
      void
      push_back(const value_type& __x)
   d548a:	4603      	mov	r3, r0
      {
	if (this->_M_impl._M_finish._M_cur
   d548c:	d006      	beq.n	d549c <_ZNSt5dequeIiSaIiEE9push_backERKi+0x1c>
   d548e:	6809      	ldr	r1, [r1, #0]
   d5490:	b102      	cbz	r2, d5494 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x14>
   d5492:	6011      	str	r1, [r2, #0]
	    != this->_M_impl._M_finish._M_last - 1)
	  {
	    _Alloc_traits::construct(this->_M_impl,
	                             this->_M_impl._M_finish._M_cur, __x);
	    ++this->_M_impl._M_finish._M_cur;
   d5494:	699a      	ldr	r2, [r3, #24]
   d5496:	3204      	adds	r2, #4
   d5498:	619a      	str	r2, [r3, #24]
   d549a:	bd38      	pop	{r3, r4, r5, pc}
	  }
	else
	  _M_push_back_aux(__x);
   d549c:	f7ff ff85 	bl	d53aa <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIIRKiEEEvDpOT_>
   d54a0:	bd38      	pop	{r3, r4, r5, pc}
	...

000d54a4 <_Z15saveStateChangeii>:
 * 2           | Door opened
 * 3           | Initial timer surpassed
 * 4           | Duration alert
 * 5           | Stillness alert
 **/
void saveStateChange(int state, int reason){
   d54a4:	b530      	push	{r4, r5, lr}
   d54a6:	b085      	sub	sp, #20
   d54a8:	9001      	str	r0, [sp, #4]
   d54aa:	9100      	str	r1, [sp, #0]
       *  to it.  The time complexity of the operation depends on the
       *  underlying sequence.
       */
      void
      push(const value_type& __x)
      { c.push_back(__x); }
   d54ac:	4811      	ldr	r0, [pc, #68]	; (d54f4 <_Z15saveStateChangeii+0x50>)
   d54ae:	a901      	add	r1, sp, #4
   d54b0:	f7ff ffe6 	bl	d5480 <_ZNSt5dequeIiSaIiEE9push_backERKi>
   d54b4:	4669      	mov	r1, sp
   d54b6:	4810      	ldr	r0, [pc, #64]	; (d54f8 <_Z15saveStateChangeii+0x54>)
   d54b8:	f7ff ffe2 	bl	d5480 <_ZNSt5dequeIiSaIiEE9push_backERKi>
   d54bc:	f000 fd76 	bl	d5fac <HAL_Timer_Get_Milli_Seconds>
    
    stateQueue.push(state);
    reasonQueue.push(reason);
    timeQueue.push(millis() - lastStateChange);
   d54c0:	4b0e      	ldr	r3, [pc, #56]	; (d54fc <_Z15saveStateChangeii+0x58>)
   d54c2:	681a      	ldr	r2, [r3, #0]
   d54c4:	1a82      	subs	r2, r0, r2
      void
      deque<_Tp, _Alloc>::
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish._M_cur
	    != this->_M_impl._M_finish._M_last - 1)
   d54c6:	480e      	ldr	r0, [pc, #56]	; (d5500 <_Z15saveStateChangeii+0x5c>)
   d54c8:	9203      	str	r2, [sp, #12]
    template<typename... _Args>
      void
      deque<_Tp, _Alloc>::
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish._M_cur
   d54ca:	6a04      	ldr	r4, [r0, #32]
	    != this->_M_impl._M_finish._M_last - 1)
   d54cc:	6981      	ldr	r1, [r0, #24]
    template<typename... _Args>
      void
      deque<_Tp, _Alloc>::
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish._M_cur
   d54ce:	3c04      	subs	r4, #4
   d54d0:	42a1      	cmp	r1, r4
   d54d2:	4605      	mov	r5, r0
   d54d4:	461c      	mov	r4, r3
   d54d6:	d005      	beq.n	d54e4 <_Z15saveStateChangeii+0x40>
   d54d8:	b101      	cbz	r1, d54dc <_Z15saveStateChangeii+0x38>
   d54da:	600a      	str	r2, [r1, #0]
	    != this->_M_impl._M_finish._M_last - 1)
	  {
	    _Alloc_traits::construct(this->_M_impl,
	                             this->_M_impl._M_finish._M_cur,
			             std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish._M_cur;
   d54dc:	69ab      	ldr	r3, [r5, #24]
   d54de:	3304      	adds	r3, #4
   d54e0:	61ab      	str	r3, [r5, #24]
   d54e2:	e002      	b.n	d54ea <_Z15saveStateChangeii+0x46>
	  }
	else
	  _M_push_back_aux(std::forward<_Args>(__args)...);
   d54e4:	a903      	add	r1, sp, #12
   d54e6:	f7ff fef5 	bl	d52d4 <_ZNSt5dequeImSaImEE16_M_push_back_auxIImEEEvDpOT_>
   d54ea:	f000 fd5f 	bl	d5fac <HAL_Timer_Get_Milli_Seconds>
    lastStateChange = millis();
   d54ee:	6020      	str	r0, [r4, #0]
}
   d54f0:	b005      	add	sp, #20
   d54f2:	bd30      	pop	{r4, r5, pc}
   d54f4:	2003e2e4 	.word	0x2003e2e4
   d54f8:	2003e2b4 	.word	0x2003e2b4
   d54fc:	2003e310 	.word	0x2003e310
   d5500:	2003e31c 	.word	0x2003e31c

000d5504 <_Z11state0_idlev>:
}




void state0_idle(){
   d5504:	b530      	push	{r4, r5, lr}
   d5506:	ed2d 8b02 	vpush	{d8}
   d550a:	b089      	sub	sp, #36	; 0x24
  //scan inputs
  doorData checkDoor;
  filteredINSData checkINS;
  //this returns the previous door event value until a new door event is received
  //on code boot up it initializes to returning 0x99
  checkDoor = checkIM21();
   d550c:	a803      	add	r0, sp, #12
   d550e:	f7fe ffdf 	bl	d44d0 <_Z9checkIM21v>
  //this returns 0.0 if the INS has no new data to transmit
  checkINS = checkINS3331();
   d5512:	a805      	add	r0, sp, #20
  //scan inputs
  doorData checkDoor;
  filteredINSData checkINS;
  //this returns the previous door event value until a new door event is received
  //on code boot up it initializes to returning 0x99
  checkDoor = checkIM21();
   d5514:	f89d 400c 	ldrb.w	r4, [sp, #12]
  //this returns 0.0 if the INS has no new data to transmit
  checkINS = checkINS3331();
   d5518:	f000 fc1c 	bl	d5d54 <_Z12checkINS3331v>

  //do stuff in the state
  digitalWrite(D2,LOW);
   d551c:	2100      	movs	r1, #0
   d551e:	2002      	movs	r0, #2
  filteredINSData checkINS;
  //this returns the previous door event value until a new door event is received
  //on code boot up it initializes to returning 0x99
  checkDoor = checkIM21();
  //this returns 0.0 if the INS has no new data to transmit
  checkINS = checkINS3331();
   d5520:	ed9d 8a05 	vldr	s16, [sp, #20]

  //do stuff in the state
  digitalWrite(D2,LOW);
   d5524:	f003 ffb1 	bl	d948a <digitalWrite>
  digitalWrite(D3,LOW);
   d5528:	2100      	movs	r1, #0
   d552a:	2003      	movs	r0, #3
   d552c:	f003 ffad 	bl	d948a <digitalWrite>
  digitalWrite(D4,LOW);
   d5530:	2100      	movs	r1, #0
   d5532:	2004      	movs	r0, #4
   d5534:	f003 ffa9 	bl	d948a <digitalWrite>
  digitalWrite(D5,LOW);
   d5538:	2100      	movs	r1, #0
   d553a:	2005      	movs	r0, #5
   d553c:	f003 ffa5 	bl	d948a <digitalWrite>


  Log.info("You are in state 0, idle: Door status, iAverage = 0x%02X, %f",checkDoor.doorStatus, checkINS.iAverage);
   d5540:	ee18 0a10 	vmov	r0, s16
   d5544:	f004 fae2 	bl	d9b0c <__aeabi_f2d>
   d5548:	4622      	mov	r2, r4
   d554a:	e9cd 0100 	strd	r0, r1, [sp]
   d554e:	4918      	ldr	r1, [pc, #96]	; (d55b0 <_Z11state0_idlev+0xac>)
   d5550:	4818      	ldr	r0, [pc, #96]	; (d55b4 <_Z11state0_idlev+0xb0>)
   d5552:	f7fe fdb9 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
  //default timer to 0 when state doesn't have a timer
  publishDebugMessage(0, checkDoor.doorStatus, checkINS.iAverage, 0); 
   d5556:	2200      	movs	r2, #0
   d5558:	4610      	mov	r0, r2
   d555a:	eeb0 0a48 	vmov.f32	s0, s16
   d555e:	4621      	mov	r1, r4
   d5560:	f7ff fc7a 	bl	d4e58 <_Z19publishDebugMessageihfm>

  //fix outputs and state exit conditions accordingly
  if(((unsigned long)checkINS.iAverage > ins_threshold) && isDoorClosed(checkDoor.doorStatus)){
   d5564:	eefc 7ac8 	vcvt.u32.f32	s15, s16
   d5568:	4b13      	ldr	r3, [pc, #76]	; (d55b8 <_Z11state0_idlev+0xb4>)
   d556a:	ee17 2a90 	vmov	r2, s15
   d556e:	681b      	ldr	r3, [r3, #0]
   d5570:	429a      	cmp	r2, r3
   d5572:	d918      	bls.n	d55a6 <_Z11state0_idlev+0xa2>
   d5574:	f014 05f3 	ands.w	r5, r4, #243	; 0xf3
   d5578:	d115      	bne.n	d55a6 <_Z11state0_idlev+0xa2>

    Log.warn("In state 0, door closed and seeing movement, heading to state 1");
   d557a:	4910      	ldr	r1, [pc, #64]	; (d55bc <_Z11state0_idlev+0xb8>)
   d557c:	480d      	ldr	r0, [pc, #52]	; (d55b4 <_Z11state0_idlev+0xb0>)
   d557e:	f7fe fdba 	bl	d40f6 <_ZNK5spark6Logger4warnEPKcz>
    publishStateTransition(0, 1, checkDoor.doorStatus, checkINS.iAverage);
   d5582:	4622      	mov	r2, r4
   d5584:	eeb0 0a48 	vmov.f32	s0, s16
   d5588:	2101      	movs	r1, #1
   d558a:	4628      	mov	r0, r5
   d558c:	f7ff fc2c 	bl	d4de8 <_Z22publishStateTransitioniihf>
    saveStateChange(0, 0);
   d5590:	4629      	mov	r1, r5
   d5592:	4628      	mov	r0, r5
   d5594:	f7ff ff86 	bl	d54a4 <_Z15saveStateChangeii>
   d5598:	f000 fd08 	bl	d5fac <HAL_Timer_Get_Milli_Seconds>
    //zero the state 1 timer
    state1_timer = millis();
   d559c:	4b08      	ldr	r3, [pc, #32]	; (d55c0 <_Z11state0_idlev+0xbc>)
    //head to state 1
    stateHandler = state1_15sCountdown;
   d559e:	4a09      	ldr	r2, [pc, #36]	; (d55c4 <_Z11state0_idlev+0xc0>)

    Log.warn("In state 0, door closed and seeing movement, heading to state 1");
    publishStateTransition(0, 1, checkDoor.doorStatus, checkINS.iAverage);
    saveStateChange(0, 0);
    //zero the state 1 timer
    state1_timer = millis();
   d55a0:	6018      	str	r0, [r3, #0]
    //head to state 1
    stateHandler = state1_15sCountdown;
   d55a2:	4b09      	ldr	r3, [pc, #36]	; (d55c8 <_Z11state0_idlev+0xc4>)
   d55a4:	601a      	str	r2, [r3, #0]
  else {
    //if we don't meet the exit conditions above, we remain here
    //stateHandler = state0_idle;
  }

}
   d55a6:	b009      	add	sp, #36	; 0x24
   d55a8:	ecbd 8b02 	vpop	{d8}
   d55ac:	bd30      	pop	{r4, r5, pc}
   d55ae:	bf00      	nop
   d55b0:	000da433 	.word	0x000da433
   d55b4:	2003e4b8 	.word	0x2003e4b8
   d55b8:	2003e1e0 	.word	0x2003e1e0
   d55bc:	000da470 	.word	0x000da470
   d55c0:	2003e2b0 	.word	0x2003e2b0
   d55c4:	000d55cd 	.word	0x000d55cd
   d55c8:	2003e1e4 	.word	0x2003e1e4

000d55cc <_Z19state1_15sCountdownv>:

void state1_15sCountdown(){
   d55cc:	b570      	push	{r4, r5, r6, lr}
   d55ce:	ed2d 8b02 	vpush	{d8}
   d55d2:	b08a      	sub	sp, #40	; 0x28
  //scan inputs
  doorData checkDoor;
  filteredINSData checkINS;
  //this returns the previous door event value until a new door event is received
  //on code boot up it initializes to returning 0x99
  checkDoor = checkIM21();
   d55d4:	a805      	add	r0, sp, #20
   d55d6:	f7fe ff7b 	bl	d44d0 <_Z9checkIM21v>
  //this returns 0.0 if the INS has no new data to transmit
  checkINS = checkINS3331();
   d55da:	a807      	add	r0, sp, #28
  //scan inputs
  doorData checkDoor;
  filteredINSData checkINS;
  //this returns the previous door event value until a new door event is received
  //on code boot up it initializes to returning 0x99
  checkDoor = checkIM21();
   d55dc:	f89d 4014 	ldrb.w	r4, [sp, #20]
  //this returns 0.0 if the INS has no new data to transmit
  checkINS = checkINS3331();

  //do stuff in the state
  digitalWrite(D2,HIGH);
  Log.info("You are in state 1, 15s countdown: Door status, iAverage, timer = 0x%02X, %f, %ld",checkDoor.doorStatus, checkINS.iAverage, (millis() - state1_timer));
   d55e0:	4d38      	ldr	r5, [pc, #224]	; (d56c4 <_Z19state1_15sCountdownv+0xf8>)
  filteredINSData checkINS;
  //this returns the previous door event value until a new door event is received
  //on code boot up it initializes to returning 0x99
  checkDoor = checkIM21();
  //this returns 0.0 if the INS has no new data to transmit
  checkINS = checkINS3331();
   d55e2:	f000 fbb7 	bl	d5d54 <_Z12checkINS3331v>

  //do stuff in the state
  digitalWrite(D2,HIGH);
   d55e6:	2101      	movs	r1, #1
   d55e8:	2002      	movs	r0, #2
  filteredINSData checkINS;
  //this returns the previous door event value until a new door event is received
  //on code boot up it initializes to returning 0x99
  checkDoor = checkIM21();
  //this returns 0.0 if the INS has no new data to transmit
  checkINS = checkINS3331();
   d55ea:	ed9d 8a07 	vldr	s16, [sp, #28]

  //do stuff in the state
  digitalWrite(D2,HIGH);
   d55ee:	f003 ff4c 	bl	d948a <digitalWrite>
   d55f2:	f000 fcdb 	bl	d5fac <HAL_Timer_Get_Milli_Seconds>
  Log.info("You are in state 1, 15s countdown: Door status, iAverage, timer = 0x%02X, %f, %ld",checkDoor.doorStatus, checkINS.iAverage, (millis() - state1_timer));
   d55f6:	682b      	ldr	r3, [r5, #0]
   d55f8:	1ac0      	subs	r0, r0, r3
   d55fa:	9002      	str	r0, [sp, #8]
   d55fc:	ee18 0a10 	vmov	r0, s16
   d5600:	f004 fa84 	bl	d9b0c <__aeabi_f2d>
   d5604:	4622      	mov	r2, r4
   d5606:	e9cd 0100 	strd	r0, r1, [sp]
   d560a:	492f      	ldr	r1, [pc, #188]	; (d56c8 <_Z19state1_15sCountdownv+0xfc>)
   d560c:	482f      	ldr	r0, [pc, #188]	; (d56cc <_Z19state1_15sCountdownv+0x100>)
   d560e:	f7fe fd5b 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
   d5612:	f000 fccb 	bl	d5fac <HAL_Timer_Get_Milli_Seconds>
  publishDebugMessage(1, checkDoor.doorStatus, checkINS.iAverage, (millis()-state1_timer));  
   d5616:	682a      	ldr	r2, [r5, #0]
   d5618:	eeb0 0a48 	vmov.f32	s0, s16
   d561c:	1a82      	subs	r2, r0, r2
   d561e:	4621      	mov	r1, r4
   d5620:	2001      	movs	r0, #1
   d5622:	f7ff fc19 	bl	d4e58 <_Z19publishDebugMessageihfm>


  //fix outputs and state exit conditions accordingly
  if((unsigned long)checkINS.iAverage > 0 && (unsigned long)checkINS.iAverage < ins_threshold){
   d5626:	eefc 7ac8 	vcvt.u32.f32	s15, s16
   d562a:	ee17 3a90 	vmov	r3, s15
   d562e:	b18b      	cbz	r3, d5654 <_Z19state1_15sCountdownv+0x88>
   d5630:	4a27      	ldr	r2, [pc, #156]	; (d56d0 <_Z19state1_15sCountdownv+0x104>)
   d5632:	6812      	ldr	r2, [r2, #0]
   d5634:	4293      	cmp	r3, r2
   d5636:	d20d      	bcs.n	d5654 <_Z19state1_15sCountdownv+0x88>

    Log.warn("no movement, you're going back to state 0 from state 1");
   d5638:	4926      	ldr	r1, [pc, #152]	; (d56d4 <_Z19state1_15sCountdownv+0x108>)
   d563a:	4824      	ldr	r0, [pc, #144]	; (d56cc <_Z19state1_15sCountdownv+0x100>)
   d563c:	f7fe fd5b 	bl	d40f6 <_ZNK5spark6Logger4warnEPKcz>
    publishStateTransition(1, 0, checkDoor.doorStatus, checkINS.iAverage);
   d5640:	2100      	movs	r1, #0
   d5642:	2001      	movs	r0, #1
   d5644:	eeb0 0a48 	vmov.f32	s0, s16
   d5648:	4622      	mov	r2, r4
   d564a:	f7ff fbcd 	bl	d4de8 <_Z22publishStateTransitioniihf>
    saveStateChange(1, 1);
   d564e:	2101      	movs	r1, #1
   d5650:	4608      	mov	r0, r1
   d5652:	e010      	b.n	d5676 <_Z19state1_15sCountdownv+0xaa>
    stateHandler = state0_idle;

  }
  else if(isDoorOpen(checkDoor.doorStatus)){
   d5654:	f004 06f3 	and.w	r6, r4, #243	; 0xf3
   d5658:	2e02      	cmp	r6, #2
   d565a:	d110      	bne.n	d567e <_Z19state1_15sCountdownv+0xb2>

    Log.warn("door was opened, you're going back to state 0 from state 1");
   d565c:	491e      	ldr	r1, [pc, #120]	; (d56d8 <_Z19state1_15sCountdownv+0x10c>)
   d565e:	481b      	ldr	r0, [pc, #108]	; (d56cc <_Z19state1_15sCountdownv+0x100>)
   d5660:	f7fe fd49 	bl	d40f6 <_ZNK5spark6Logger4warnEPKcz>
    publishStateTransition(1, 0, checkDoor.doorStatus, checkINS.iAverage);
   d5664:	2100      	movs	r1, #0
   d5666:	2001      	movs	r0, #1
   d5668:	eeb0 0a48 	vmov.f32	s0, s16
   d566c:	4622      	mov	r2, r4
   d566e:	f7ff fbbb 	bl	d4de8 <_Z22publishStateTransitioniihf>
    saveStateChange(1, 2);
   d5672:	4631      	mov	r1, r6
   d5674:	2001      	movs	r0, #1
   d5676:	f7ff ff15 	bl	d54a4 <_Z15saveStateChangeii>
    stateHandler = state0_idle;
   d567a:	4a18      	ldr	r2, [pc, #96]	; (d56dc <_Z19state1_15sCountdownv+0x110>)
   d567c:	e01b      	b.n	d56b6 <_Z19state1_15sCountdownv+0xea>
   d567e:	f000 fc95 	bl	d5fac <HAL_Timer_Get_Milli_Seconds>

  }
  else if( millis() - state1_timer >= state1_max_time){
   d5682:	682b      	ldr	r3, [r5, #0]
   d5684:	1ac0      	subs	r0, r0, r3
   d5686:	4b16      	ldr	r3, [pc, #88]	; (d56e0 <_Z19state1_15sCountdownv+0x114>)
   d5688:	681b      	ldr	r3, [r3, #0]
   d568a:	4298      	cmp	r0, r3
   d568c:	d315      	bcc.n	d56ba <_Z19state1_15sCountdownv+0xee>

    Log.warn("door closed && motion for > Xs, going to state 2 from state1");
   d568e:	4915      	ldr	r1, [pc, #84]	; (d56e4 <_Z19state1_15sCountdownv+0x118>)
   d5690:	480e      	ldr	r0, [pc, #56]	; (d56cc <_Z19state1_15sCountdownv+0x100>)
   d5692:	f7fe fd30 	bl	d40f6 <_ZNK5spark6Logger4warnEPKcz>
    publishStateTransition(1, 2, checkDoor.doorStatus, checkINS.iAverage);
   d5696:	4622      	mov	r2, r4
   d5698:	eeb0 0a48 	vmov.f32	s0, s16
   d569c:	2102      	movs	r1, #2
   d569e:	2001      	movs	r0, #1
   d56a0:	f7ff fba2 	bl	d4de8 <_Z22publishStateTransitioniihf>
    saveStateChange(1, 3);
   d56a4:	2103      	movs	r1, #3
   d56a6:	2001      	movs	r0, #1
   d56a8:	f7ff fefc 	bl	d54a4 <_Z15saveStateChangeii>
   d56ac:	f000 fc7e 	bl	d5fac <HAL_Timer_Get_Milli_Seconds>
    //zero the duration timer
    state2_duration_timer = millis();
   d56b0:	4b0d      	ldr	r3, [pc, #52]	; (d56e8 <_Z19state1_15sCountdownv+0x11c>)
    //head to duration state
    stateHandler = state2_duration;
   d56b2:	4a0e      	ldr	r2, [pc, #56]	; (d56ec <_Z19state1_15sCountdownv+0x120>)

    Log.warn("door closed && motion for > Xs, going to state 2 from state1");
    publishStateTransition(1, 2, checkDoor.doorStatus, checkINS.iAverage);
    saveStateChange(1, 3);
    //zero the duration timer
    state2_duration_timer = millis();
   d56b4:	6018      	str	r0, [r3, #0]
    //head to duration state
    stateHandler = state2_duration;
   d56b6:	4b0e      	ldr	r3, [pc, #56]	; (d56f0 <_Z19state1_15sCountdownv+0x124>)
   d56b8:	601a      	str	r2, [r3, #0]
    //if we don't meet the exit conditions above, we remain here
    //stateHandler = state1_15sCountdown;
  
  }

}
   d56ba:	b00a      	add	sp, #40	; 0x28
   d56bc:	ecbd 8b02 	vpop	{d8}
   d56c0:	bd70      	pop	{r4, r5, r6, pc}
   d56c2:	bf00      	nop
   d56c4:	2003e2b0 	.word	0x2003e2b0
   d56c8:	000da4b0 	.word	0x000da4b0
   d56cc:	2003e4b8 	.word	0x2003e4b8
   d56d0:	2003e1e0 	.word	0x2003e1e0
   d56d4:	000da502 	.word	0x000da502
   d56d8:	000da539 	.word	0x000da539
   d56dc:	000d5505 	.word	0x000d5505
   d56e0:	2003e1d4 	.word	0x2003e1d4
   d56e4:	000da574 	.word	0x000da574
   d56e8:	2003e318 	.word	0x2003e318
   d56ec:	000d56f5 	.word	0x000d56f5
   d56f0:	2003e1e4 	.word	0x2003e1e4

000d56f4 <_Z15state2_durationv>:


void state2_duration(){
   d56f4:	b570      	push	{r4, r5, r6, lr}
   d56f6:	ed2d 8b02 	vpush	{d8}
   d56fa:	b08c      	sub	sp, #48	; 0x30
  //scan inputs
  doorData checkDoor;
  filteredINSData checkINS;
  //this returns the previous door event value until a new door event is received
  //on code boot up it initializes to returning 0x99
  checkDoor = checkIM21();
   d56fc:	a805      	add	r0, sp, #20
   d56fe:	f7fe fee7 	bl	d44d0 <_Z9checkIM21v>
  //this returns 0.0 if the INS has no new data to transmit
  checkINS = checkINS3331();
   d5702:	a809      	add	r0, sp, #36	; 0x24
  //scan inputs
  doorData checkDoor;
  filteredINSData checkINS;
  //this returns the previous door event value until a new door event is received
  //on code boot up it initializes to returning 0x99
  checkDoor = checkIM21();
   d5704:	f89d 4014 	ldrb.w	r4, [sp, #20]
  //this returns 0.0 if the INS has no new data to transmit
  checkINS = checkINS3331();

  //do stuff in the state
  digitalWrite(D3,HIGH);
  Log.info("You are in state 2, duration: Door status, iAverage, timer = 0x%02X, %f, %ld",checkDoor.doorStatus, checkINS.iAverage, (millis() - state2_duration_timer)); 
   d5708:	4d41      	ldr	r5, [pc, #260]	; (d5810 <_Z15state2_durationv+0x11c>)
  filteredINSData checkINS;
  //this returns the previous door event value until a new door event is received
  //on code boot up it initializes to returning 0x99
  checkDoor = checkIM21();
  //this returns 0.0 if the INS has no new data to transmit
  checkINS = checkINS3331();
   d570a:	f000 fb23 	bl	d5d54 <_Z12checkINS3331v>

  //do stuff in the state
  digitalWrite(D3,HIGH);
   d570e:	2101      	movs	r1, #1
   d5710:	2003      	movs	r0, #3
  filteredINSData checkINS;
  //this returns the previous door event value until a new door event is received
  //on code boot up it initializes to returning 0x99
  checkDoor = checkIM21();
  //this returns 0.0 if the INS has no new data to transmit
  checkINS = checkINS3331();
   d5712:	ed9d 8a09 	vldr	s16, [sp, #36]	; 0x24

  //do stuff in the state
  digitalWrite(D3,HIGH);
   d5716:	f003 feb8 	bl	d948a <digitalWrite>
   d571a:	f000 fc47 	bl	d5fac <HAL_Timer_Get_Milli_Seconds>
  Log.info("You are in state 2, duration: Door status, iAverage, timer = 0x%02X, %f, %ld",checkDoor.doorStatus, checkINS.iAverage, (millis() - state2_duration_timer)); 
   d571e:	682b      	ldr	r3, [r5, #0]
   d5720:	1ac0      	subs	r0, r0, r3
   d5722:	9002      	str	r0, [sp, #8]
   d5724:	ee18 0a10 	vmov	r0, s16
   d5728:	f004 f9f0 	bl	d9b0c <__aeabi_f2d>
   d572c:	4622      	mov	r2, r4
   d572e:	e9cd 0100 	strd	r0, r1, [sp]
   d5732:	4938      	ldr	r1, [pc, #224]	; (d5814 <_Z15state2_durationv+0x120>)
   d5734:	4838      	ldr	r0, [pc, #224]	; (d5818 <_Z15state2_durationv+0x124>)
   d5736:	f7fe fcc7 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
   d573a:	f000 fc37 	bl	d5fac <HAL_Timer_Get_Milli_Seconds>
  publishDebugMessage(2, checkDoor.doorStatus, checkINS.iAverage, (millis()-state2_duration_timer));  
   d573e:	682a      	ldr	r2, [r5, #0]
   d5740:	eeb0 0a48 	vmov.f32	s0, s16
   d5744:	1a82      	subs	r2, r0, r2
   d5746:	4621      	mov	r1, r4
   d5748:	2002      	movs	r0, #2
   d574a:	f7ff fb85 	bl	d4e58 <_Z19publishDebugMessageihfm>

  //fix outputs and state exit conditions accordingly
  if((unsigned long)checkINS.iAverage > 0 && (unsigned long)checkINS.iAverage < ins_threshold){
   d574e:	eefc 7ac8 	vcvt.u32.f32	s15, s16
   d5752:	ee17 3a90 	vmov	r3, s15
   d5756:	b1c3      	cbz	r3, d578a <_Z15state2_durationv+0x96>
   d5758:	4a30      	ldr	r2, [pc, #192]	; (d581c <_Z15state2_durationv+0x128>)
   d575a:	6812      	ldr	r2, [r2, #0]
   d575c:	4293      	cmp	r3, r2
   d575e:	d214      	bcs.n	d578a <_Z15state2_durationv+0x96>

    Log.warn("Seeing stillness, going to state3_stillness from state2_duration");
   d5760:	492f      	ldr	r1, [pc, #188]	; (d5820 <_Z15state2_durationv+0x12c>)
   d5762:	482d      	ldr	r0, [pc, #180]	; (d5818 <_Z15state2_durationv+0x124>)
   d5764:	f7fe fcc7 	bl	d40f6 <_ZNK5spark6Logger4warnEPKcz>
    publishStateTransition(2, 3, checkDoor.doorStatus, checkINS.iAverage);
   d5768:	4622      	mov	r2, r4
   d576a:	eeb0 0a48 	vmov.f32	s0, s16
   d576e:	2103      	movs	r1, #3
   d5770:	2002      	movs	r0, #2
   d5772:	f7ff fb39 	bl	d4de8 <_Z22publishStateTransitioniihf>
    saveStateChange(2, 1);
   d5776:	2101      	movs	r1, #1
   d5778:	2002      	movs	r0, #2
   d577a:	f7ff fe93 	bl	d54a4 <_Z15saveStateChangeii>
   d577e:	f000 fc15 	bl	d5fac <HAL_Timer_Get_Milli_Seconds>
    //zero the stillness timer
    state3_stillness_timer = millis();
   d5782:	4b28      	ldr	r3, [pc, #160]	; (d5824 <_Z15state2_durationv+0x130>)
    //go to stillness state
    stateHandler = state3_stillness;
   d5784:	4a28      	ldr	r2, [pc, #160]	; (d5828 <_Z15state2_durationv+0x134>)

    Log.warn("Seeing stillness, going to state3_stillness from state2_duration");
    publishStateTransition(2, 3, checkDoor.doorStatus, checkINS.iAverage);
    saveStateChange(2, 1);
    //zero the stillness timer
    state3_stillness_timer = millis();
   d5786:	6018      	str	r0, [r3, #0]
   d5788:	e03c      	b.n	d5804 <_Z15state2_durationv+0x110>
    //go to stillness state
    stateHandler = state3_stillness;

  }
  else if(isDoorOpen(checkDoor.doorStatus)){
   d578a:	f004 06f3 	and.w	r6, r4, #243	; 0xf3
   d578e:	2e02      	cmp	r6, #2
   d5790:	d10f      	bne.n	d57b2 <_Z15state2_durationv+0xbe>

    Log.warn("Door opened, session over, going to idle from state2_duration");
   d5792:	4926      	ldr	r1, [pc, #152]	; (d582c <_Z15state2_durationv+0x138>)
   d5794:	4820      	ldr	r0, [pc, #128]	; (d5818 <_Z15state2_durationv+0x124>)
   d5796:	f7fe fcae 	bl	d40f6 <_ZNK5spark6Logger4warnEPKcz>
    publishStateTransition(2, 0, checkDoor.doorStatus, checkINS.iAverage);
   d579a:	4630      	mov	r0, r6
   d579c:	eeb0 0a48 	vmov.f32	s0, s16
   d57a0:	4622      	mov	r2, r4
   d57a2:	2100      	movs	r1, #0
   d57a4:	f7ff fb20 	bl	d4de8 <_Z22publishStateTransitioniihf>
    saveStateChange(2, 2);
   d57a8:	4631      	mov	r1, r6
   d57aa:	4630      	mov	r0, r6
   d57ac:	f7ff fe7a 	bl	d54a4 <_Z15saveStateChangeii>
   d57b0:	e027      	b.n	d5802 <_Z15state2_durationv+0x10e>
   d57b2:	f000 fbfb 	bl	d5fac <HAL_Timer_Get_Milli_Seconds>
    stateHandler = state0_idle;

  }
  else if(millis() - state2_duration_timer >= state2_max_duration){
   d57b6:	682b      	ldr	r3, [r5, #0]
   d57b8:	1ac0      	subs	r0, r0, r3
   d57ba:	4b1d      	ldr	r3, [pc, #116]	; (d5830 <_Z15state2_durationv+0x13c>)
   d57bc:	681b      	ldr	r3, [r3, #0]
   d57be:	4298      	cmp	r0, r3
   d57c0:	d322      	bcc.n	d5808 <_Z15state2_durationv+0x114>

    Log.warn("See duration alert, going from state2_duration to idle after alert publish");
   d57c2:	491c      	ldr	r1, [pc, #112]	; (d5834 <_Z15state2_durationv+0x140>)
   d57c4:	4814      	ldr	r0, [pc, #80]	; (d5818 <_Z15state2_durationv+0x124>)
   d57c6:	f7fe fc96 	bl	d40f6 <_ZNK5spark6Logger4warnEPKcz>
    publishStateTransition(2, 0, checkDoor.doorStatus, checkINS.iAverage);
   d57ca:	eeb0 0a48 	vmov.f32	s0, s16
   d57ce:	4622      	mov	r2, r4
   d57d0:	2100      	movs	r1, #0
   d57d2:	2002      	movs	r0, #2
   d57d4:	f7ff fb08 	bl	d4de8 <_Z22publishStateTransitioniihf>
    saveStateChange(2, 4);
   d57d8:	2104      	movs	r1, #4
   d57da:	2002      	movs	r0, #2
   d57dc:	f7ff fe62 	bl	d54a4 <_Z15saveStateChangeii>
    Log.error("Duration Alert!!");
   d57e0:	4915      	ldr	r1, [pc, #84]	; (d5838 <_Z15state2_durationv+0x144>)
   d57e2:	480d      	ldr	r0, [pc, #52]	; (d5818 <_Z15state2_durationv+0x124>)
   d57e4:	f7fe fd5d 	bl	d42a2 <_ZNK5spark6Logger5errorEPKcz>
   d57e8:	4b14      	ldr	r3, [pc, #80]	; (d583c <_Z15state2_durationv+0x148>)
   d57ea:	4a15      	ldr	r2, [pc, #84]	; (d5840 <_Z15state2_durationv+0x14c>)
   d57ec:	781b      	ldrb	r3, [r3, #0]
   d57ee:	f88d 3000 	strb.w	r3, [sp]
   d57f2:	a807      	add	r0, sp, #28
   d57f4:	233c      	movs	r3, #60	; 0x3c
   d57f6:	4913      	ldr	r1, [pc, #76]	; (d5844 <_Z15state2_durationv+0x150>)
   d57f8:	f002 fe96 	bl	d8528 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d57fc:	a808      	add	r0, sp, #32
   d57fe:	f7fe fe19 	bl	d4434 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    Particle.publish("Duration Alert", "duration alert", PRIVATE);
    stateHandler = state0_idle;
   d5802:	4a11      	ldr	r2, [pc, #68]	; (d5848 <_Z15state2_durationv+0x154>)
   d5804:	4b11      	ldr	r3, [pc, #68]	; (d584c <_Z15state2_durationv+0x158>)
   d5806:	601a      	str	r2, [r3, #0]
    //stateHandler = state2_duration;

  }


} //end state2_duration
   d5808:	b00c      	add	sp, #48	; 0x30
   d580a:	ecbd 8b02 	vpop	{d8}
   d580e:	bd70      	pop	{r4, r5, r6, pc}
   d5810:	2003e318 	.word	0x2003e318
   d5814:	000da5b1 	.word	0x000da5b1
   d5818:	2003e4b8 	.word	0x2003e4b8
   d581c:	2003e1e0 	.word	0x2003e1e0
   d5820:	000da5fe 	.word	0x000da5fe
   d5824:	2003e314 	.word	0x2003e314
   d5828:	000d5851 	.word	0x000d5851
   d582c:	000da63f 	.word	0x000da63f
   d5830:	2003e1d8 	.word	0x2003e1d8
   d5834:	000da67d 	.word	0x000da67d
   d5838:	000da6c8 	.word	0x000da6c8
   d583c:	2003e30c 	.word	0x2003e30c
   d5840:	000da6d9 	.word	0x000da6d9
   d5844:	000da6e8 	.word	0x000da6e8
   d5848:	000d5505 	.word	0x000d5505
   d584c:	2003e1e4 	.word	0x2003e1e4

000d5850 <_Z16state3_stillnessv>:

void state3_stillness(){
   d5850:	b570      	push	{r4, r5, r6, lr}
   d5852:	ed2d 8b02 	vpush	{d8}
   d5856:	b08c      	sub	sp, #48	; 0x30
  //scan inputs
  doorData checkDoor;
  filteredINSData checkINS;
  //this returns the previous door event value until a new door event is received
  //on code boot up it initializes to returning 0x99
  checkDoor = checkIM21();
   d5858:	a805      	add	r0, sp, #20
   d585a:	f7fe fe39 	bl	d44d0 <_Z9checkIM21v>
  //this returns 0.0 if the INS has no new data to transmit
  checkINS = checkINS3331();
   d585e:	a809      	add	r0, sp, #36	; 0x24
  //scan inputs
  doorData checkDoor;
  filteredINSData checkINS;
  //this returns the previous door event value until a new door event is received
  //on code boot up it initializes to returning 0x99
  checkDoor = checkIM21();
   d5860:	f89d 4014 	ldrb.w	r4, [sp, #20]
  //this returns 0.0 if the INS has no new data to transmit
  checkINS = checkINS3331();

  //do stuff in the state
  digitalWrite(D4,HIGH);
  Log.info("You are in state 3, stillness: Door status, iAverage, timer = 0x%02X, %f, %ld",checkDoor.doorStatus, checkINS.iAverage, (millis() - state3_stillness_timer));
   d5864:	4d51      	ldr	r5, [pc, #324]	; (d59ac <_Z16state3_stillnessv+0x15c>)
  filteredINSData checkINS;
  //this returns the previous door event value until a new door event is received
  //on code boot up it initializes to returning 0x99
  checkDoor = checkIM21();
  //this returns 0.0 if the INS has no new data to transmit
  checkINS = checkINS3331();
   d5866:	f000 fa75 	bl	d5d54 <_Z12checkINS3331v>

  //do stuff in the state
  digitalWrite(D4,HIGH);
   d586a:	2101      	movs	r1, #1
   d586c:	2004      	movs	r0, #4
  filteredINSData checkINS;
  //this returns the previous door event value until a new door event is received
  //on code boot up it initializes to returning 0x99
  checkDoor = checkIM21();
  //this returns 0.0 if the INS has no new data to transmit
  checkINS = checkINS3331();
   d586e:	ed9d 8a09 	vldr	s16, [sp, #36]	; 0x24

  //do stuff in the state
  digitalWrite(D4,HIGH);
   d5872:	f003 fe0a 	bl	d948a <digitalWrite>
   d5876:	f000 fb99 	bl	d5fac <HAL_Timer_Get_Milli_Seconds>
  Log.info("You are in state 3, stillness: Door status, iAverage, timer = 0x%02X, %f, %ld",checkDoor.doorStatus, checkINS.iAverage, (millis() - state3_stillness_timer));
   d587a:	682b      	ldr	r3, [r5, #0]
   d587c:	1ac0      	subs	r0, r0, r3
   d587e:	9002      	str	r0, [sp, #8]
   d5880:	ee18 0a10 	vmov	r0, s16
   d5884:	f004 f942 	bl	d9b0c <__aeabi_f2d>
   d5888:	4622      	mov	r2, r4
   d588a:	e9cd 0100 	strd	r0, r1, [sp]
   d588e:	4948      	ldr	r1, [pc, #288]	; (d59b0 <_Z16state3_stillnessv+0x160>)
   d5890:	4848      	ldr	r0, [pc, #288]	; (d59b4 <_Z16state3_stillnessv+0x164>)
   d5892:	f7fe fc19 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
   d5896:	f000 fb89 	bl	d5fac <HAL_Timer_Get_Milli_Seconds>
  publishDebugMessage(3, checkDoor.doorStatus, checkINS.iAverage, (millis()-state3_stillness_timer));   
   d589a:	682a      	ldr	r2, [r5, #0]
   d589c:	eeb0 0a48 	vmov.f32	s0, s16
   d58a0:	1a82      	subs	r2, r0, r2
   d58a2:	4621      	mov	r1, r4
   d58a4:	2003      	movs	r0, #3
   d58a6:	f7ff fad7 	bl	d4e58 <_Z19publishDebugMessageihfm>

  //fix outputs and state exit conditions accordingly
  if((unsigned long)checkINS.iAverage > ins_threshold){
   d58aa:	eefc 7ac8 	vcvt.u32.f32	s15, s16
   d58ae:	4b42      	ldr	r3, [pc, #264]	; (d59b8 <_Z16state3_stillnessv+0x168>)
   d58b0:	ee17 2a90 	vmov	r2, s15
   d58b4:	681b      	ldr	r3, [r3, #0]
   d58b6:	429a      	cmp	r2, r3
   d58b8:	d910      	bls.n	d58dc <_Z16state3_stillnessv+0x8c>

    Log.warn("motion spotted again, going from state3_stillness to state2_duration");
   d58ba:	4940      	ldr	r1, [pc, #256]	; (d59bc <_Z16state3_stillnessv+0x16c>)
   d58bc:	483d      	ldr	r0, [pc, #244]	; (d59b4 <_Z16state3_stillnessv+0x164>)
   d58be:	f7fe fc1a 	bl	d40f6 <_ZNK5spark6Logger4warnEPKcz>
    publishStateTransition(3, 2, checkDoor.doorStatus, checkINS.iAverage);
   d58c2:	4622      	mov	r2, r4
   d58c4:	eeb0 0a48 	vmov.f32	s0, s16
   d58c8:	2102      	movs	r1, #2
   d58ca:	2003      	movs	r0, #3
   d58cc:	f7ff fa8c 	bl	d4de8 <_Z22publishStateTransitioniihf>
    saveStateChange(3, 0);
   d58d0:	2100      	movs	r1, #0
   d58d2:	2003      	movs	r0, #3
   d58d4:	f7ff fde6 	bl	d54a4 <_Z15saveStateChangeii>
    //go back to state 2, duration
    stateHandler = state2_duration;
   d58d8:	4a39      	ldr	r2, [pc, #228]	; (d59c0 <_Z16state3_stillnessv+0x170>)
   d58da:	e060      	b.n	d599e <_Z16state3_stillnessv+0x14e>

  }
  else if(isDoorOpen(checkDoor.doorStatus)){
   d58dc:	f004 06f3 	and.w	r6, r4, #243	; 0xf3
   d58e0:	2e02      	cmp	r6, #2
   d58e2:	d10f      	bne.n	d5904 <_Z16state3_stillnessv+0xb4>

    Log.warn("door opened, session over, going from state3_stillness to idle");
   d58e4:	4937      	ldr	r1, [pc, #220]	; (d59c4 <_Z16state3_stillnessv+0x174>)
   d58e6:	4833      	ldr	r0, [pc, #204]	; (d59b4 <_Z16state3_stillnessv+0x164>)
   d58e8:	f7fe fc05 	bl	d40f6 <_ZNK5spark6Logger4warnEPKcz>
    publishStateTransition(3, 0, checkDoor.doorStatus, checkINS.iAverage);
   d58ec:	eeb0 0a48 	vmov.f32	s0, s16
   d58f0:	4622      	mov	r2, r4
   d58f2:	2100      	movs	r1, #0
   d58f4:	2003      	movs	r0, #3
   d58f6:	f7ff fa77 	bl	d4de8 <_Z22publishStateTransitioniihf>
    saveStateChange(3, 2);
   d58fa:	4631      	mov	r1, r6
   d58fc:	2003      	movs	r0, #3
   d58fe:	f7ff fdd1 	bl	d54a4 <_Z15saveStateChangeii>
   d5902:	e04b      	b.n	d599c <_Z16state3_stillnessv+0x14c>
   d5904:	f000 fb52 	bl	d5fac <HAL_Timer_Get_Milli_Seconds>
    stateHandler = state0_idle;

  }
  else if(millis() - state2_duration_timer >= state2_max_duration){
   d5908:	4b2f      	ldr	r3, [pc, #188]	; (d59c8 <_Z16state3_stillnessv+0x178>)
   d590a:	681b      	ldr	r3, [r3, #0]
   d590c:	1ac0      	subs	r0, r0, r3
   d590e:	4b2f      	ldr	r3, [pc, #188]	; (d59cc <_Z16state3_stillnessv+0x17c>)
   d5910:	681b      	ldr	r3, [r3, #0]
   d5912:	4298      	cmp	r0, r3
   d5914:	d31a      	bcc.n	d594c <_Z16state3_stillnessv+0xfc>

    Log.warn("See duration alert, going from state3 to idle after alert publish");
   d5916:	492e      	ldr	r1, [pc, #184]	; (d59d0 <_Z16state3_stillnessv+0x180>)
   d5918:	4826      	ldr	r0, [pc, #152]	; (d59b4 <_Z16state3_stillnessv+0x164>)
   d591a:	f7fe fbec 	bl	d40f6 <_ZNK5spark6Logger4warnEPKcz>
    publishStateTransition(3, 0, checkDoor.doorStatus, checkINS.iAverage);
   d591e:	4622      	mov	r2, r4
   d5920:	eeb0 0a48 	vmov.f32	s0, s16
   d5924:	2100      	movs	r1, #0
   d5926:	2003      	movs	r0, #3
   d5928:	f7ff fa5e 	bl	d4de8 <_Z22publishStateTransitioniihf>
    saveStateChange(3, 4);
   d592c:	2104      	movs	r1, #4
   d592e:	2003      	movs	r0, #3
   d5930:	f7ff fdb8 	bl	d54a4 <_Z15saveStateChangeii>
    Log.error("Duration Alert!!");
   d5934:	4927      	ldr	r1, [pc, #156]	; (d59d4 <_Z16state3_stillnessv+0x184>)
   d5936:	481f      	ldr	r0, [pc, #124]	; (d59b4 <_Z16state3_stillnessv+0x164>)
   d5938:	f7fe fcb3 	bl	d42a2 <_ZNK5spark6Logger5errorEPKcz>
   d593c:	4b26      	ldr	r3, [pc, #152]	; (d59d8 <_Z16state3_stillnessv+0x188>)
   d593e:	4a27      	ldr	r2, [pc, #156]	; (d59dc <_Z16state3_stillnessv+0x18c>)
   d5940:	781b      	ldrb	r3, [r3, #0]
   d5942:	f88d 3000 	strb.w	r3, [sp]
   d5946:	4926      	ldr	r1, [pc, #152]	; (d59e0 <_Z16state3_stillnessv+0x190>)
   d5948:	233c      	movs	r3, #60	; 0x3c
   d594a:	e021      	b.n	d5990 <_Z16state3_stillnessv+0x140>
   d594c:	f000 fb2e 	bl	d5fac <HAL_Timer_Get_Milli_Seconds>
    Particle.publish("Duration Alert", "duration alert", PRIVATE);
    stateHandler = state0_idle;
  }
  else if(millis() - state3_stillness_timer >= state3_max_stillness_time){
   d5950:	682b      	ldr	r3, [r5, #0]
   d5952:	1ac0      	subs	r0, r0, r3
   d5954:	4b23      	ldr	r3, [pc, #140]	; (d59e4 <_Z16state3_stillnessv+0x194>)
   d5956:	681b      	ldr	r3, [r3, #0]
   d5958:	4298      	cmp	r0, r3
   d595a:	d322      	bcc.n	d59a2 <_Z16state3_stillnessv+0x152>

    Log.warn("stillness alert, going from state3 to idle after publish");
   d595c:	4922      	ldr	r1, [pc, #136]	; (d59e8 <_Z16state3_stillnessv+0x198>)
   d595e:	4815      	ldr	r0, [pc, #84]	; (d59b4 <_Z16state3_stillnessv+0x164>)
   d5960:	f7fe fbc9 	bl	d40f6 <_ZNK5spark6Logger4warnEPKcz>
    publishStateTransition(3, 0, checkDoor.doorStatus, checkINS.iAverage);
   d5964:	4622      	mov	r2, r4
   d5966:	eeb0 0a48 	vmov.f32	s0, s16
   d596a:	2100      	movs	r1, #0
   d596c:	2003      	movs	r0, #3
   d596e:	f7ff fa3b 	bl	d4de8 <_Z22publishStateTransitioniihf>
    saveStateChange(3, 5);
   d5972:	2105      	movs	r1, #5
   d5974:	2003      	movs	r0, #3
   d5976:	f7ff fd95 	bl	d54a4 <_Z15saveStateChangeii>
    Log.error("Stillness Alert!!");
   d597a:	491c      	ldr	r1, [pc, #112]	; (d59ec <_Z16state3_stillnessv+0x19c>)
   d597c:	480d      	ldr	r0, [pc, #52]	; (d59b4 <_Z16state3_stillnessv+0x164>)
   d597e:	f7fe fc90 	bl	d42a2 <_ZNK5spark6Logger5errorEPKcz>
   d5982:	4b15      	ldr	r3, [pc, #84]	; (d59d8 <_Z16state3_stillnessv+0x188>)
   d5984:	4a1a      	ldr	r2, [pc, #104]	; (d59f0 <_Z16state3_stillnessv+0x1a0>)
   d5986:	781b      	ldrb	r3, [r3, #0]
   d5988:	491a      	ldr	r1, [pc, #104]	; (d59f4 <_Z16state3_stillnessv+0x1a4>)
   d598a:	f88d 3000 	strb.w	r3, [sp]
   d598e:	233c      	movs	r3, #60	; 0x3c
   d5990:	a807      	add	r0, sp, #28
   d5992:	f002 fdc9 	bl	d8528 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d5996:	a808      	add	r0, sp, #32
   d5998:	f7fe fd4c 	bl	d4434 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    Particle.publish("Stillness Alert", "stillness alert!!!", PRIVATE);
    stateHandler = state0_idle;
   d599c:	4a16      	ldr	r2, [pc, #88]	; (d59f8 <_Z16state3_stillnessv+0x1a8>)
   d599e:	4b17      	ldr	r3, [pc, #92]	; (d59fc <_Z16state3_stillnessv+0x1ac>)
   d59a0:	601a      	str	r2, [r3, #0]
    //if we don't meet the exit conditions above, we remain here
    //stateHandler = state3_stillness;

  }

} //end state3_stillness
   d59a2:	b00c      	add	sp, #48	; 0x30
   d59a4:	ecbd 8b02 	vpop	{d8}
   d59a8:	bd70      	pop	{r4, r5, r6, pc}
   d59aa:	bf00      	nop
   d59ac:	2003e314 	.word	0x2003e314
   d59b0:	000da6f7 	.word	0x000da6f7
   d59b4:	2003e4b8 	.word	0x2003e4b8
   d59b8:	2003e1e0 	.word	0x2003e1e0
   d59bc:	000da745 	.word	0x000da745
   d59c0:	000d56f5 	.word	0x000d56f5
   d59c4:	000da78a 	.word	0x000da78a
   d59c8:	2003e318 	.word	0x2003e318
   d59cc:	2003e1d8 	.word	0x2003e1d8
   d59d0:	000da7c9 	.word	0x000da7c9
   d59d4:	000da6c8 	.word	0x000da6c8
   d59d8:	2003e30c 	.word	0x2003e30c
   d59dc:	000da6d9 	.word	0x000da6d9
   d59e0:	000da6e8 	.word	0x000da6e8
   d59e4:	2003e1dc 	.word	0x2003e1dc
   d59e8:	000da80b 	.word	0x000da80b
   d59ec:	000da844 	.word	0x000da844
   d59f0:	000da856 	.word	0x000da856
   d59f4:	000da869 	.word	0x000da869
   d59f8:	000d5505 	.word	0x000d5505
   d59fc:	2003e1e4 	.word	0x2003e1e4

000d5a00 <_GLOBAL__sub_I_stateHandler>:
      lastHeartbeatPublish = millis();
    }

    

}
   d5a00:	b570      	push	{r4, r5, r6, lr}
   d5a02:	b08a      	sub	sp, #40	; 0x28
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
   d5a04:	ae0a      	add	r6, sp, #40	; 0x28
   d5a06:	4b36      	ldr	r3, [pc, #216]	; (d5ae0 <_GLOBAL__sub_I_stateHandler+0xe0>)
#if __cplusplus >= 201103L
	_Deque_impl(_Deque_impl&&) = default;

	_Deque_impl(_Tp_alloc_type&& __a) noexcept
	: _Tp_alloc_type(std::move(__a)), _M_map(), _M_map_size(0),
	  _M_start(), _M_finish()
   d5a08:	4d36      	ldr	r5, [pc, #216]	; (d5ae4 <_GLOBAL__sub_I_stateHandler+0xe4>)
   d5a0a:	2400      	movs	r4, #0
   d5a0c:	2201      	movs	r2, #1
   d5a0e:	701a      	strb	r2, [r3, #0]
   d5a10:	f000 fa84 	bl	d5f1c <HAL_Pin_Map>
   d5a14:	f846 4d28 	str.w	r4, [r6, #-40]!
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d5a18:	4621      	mov	r1, r4
   d5a1a:	4622      	mov	r2, r4
   d5a1c:	4630      	mov	r0, r6
   d5a1e:	f000 faed 	bl	d5ffc <HAL_Core_Get_Last_Reset_Info>
unsigned long state2_max_duration = STATE2_MAX_DURATION;
unsigned long state3_max_stillness_time = STATE3_MAX_STILLNESS_TIME;
//except this one, we don't want to take the chance that random memory
//contents will initialize this to "on"
bool stateMachineDebugFlag = false;
int resetReason = System.resetReason();;
   d5a22:	4b31      	ldr	r3, [pc, #196]	; (d5ae8 <_GLOBAL__sub_I_stateHandler+0xe8>)
   d5a24:	9a00      	ldr	r2, [sp, #0]
   d5a26:	601a      	str	r2, [r3, #0]
      // (assign() and get_allocator() are also listed in this section)

      /**
       *  @brief  Creates a %deque with no elements.
       */
      deque() : _Base() { }
   d5a28:	4630      	mov	r0, r6
   d5a2a:	f7ff fba9 	bl	d5180 <_ZNSt11_Deque_baseIiSaIiEEC1Ev>
       *
       *  The newly-created %deque contains the exact contents of @a __x.
       *  The contents of @a __x are a valid, but unspecified %deque.
       */
      deque(deque&& __x)
      : _Base(std::move(__x)) { }
   d5a2e:	4631      	mov	r1, r6
   d5a30:	482e      	ldr	r0, [pc, #184]	; (d5aec <_GLOBAL__sub_I_stateHandler+0xec>)
   d5a32:	f7ff fbfd 	bl	d5230 <_ZNSt11_Deque_baseIiSaIiEEC1EOS1_>

std::queue<int> stateQueue;
   d5a36:	4630      	mov	r0, r6
   d5a38:	f7ff fa34 	bl	d4ea4 <_ZNSt5dequeIiSaIiEED1Ev>
   d5a3c:	4a2c      	ldr	r2, [pc, #176]	; (d5af0 <_GLOBAL__sub_I_stateHandler+0xf0>)
   d5a3e:	492d      	ldr	r1, [pc, #180]	; (d5af4 <_GLOBAL__sub_I_stateHandler+0xf4>)
   d5a40:	482a      	ldr	r0, [pc, #168]	; (d5aec <_GLOBAL__sub_I_stateHandler+0xec>)
   d5a42:	f003 fd8f 	bl	d9564 <__aeabi_atexit>
      // (assign() and get_allocator() are also listed in this section)

      /**
       *  @brief  Creates a %deque with no elements.
       */
      deque() : _Base() { }
   d5a46:	4630      	mov	r0, r6
   d5a48:	f7ff fb9a 	bl	d5180 <_ZNSt11_Deque_baseIiSaIiEEC1Ev>
       *
       *  The newly-created %deque contains the exact contents of @a __x.
       *  The contents of @a __x are a valid, but unspecified %deque.
       */
      deque(deque&& __x)
      : _Base(std::move(__x)) { }
   d5a4c:	4631      	mov	r1, r6
   d5a4e:	482a      	ldr	r0, [pc, #168]	; (d5af8 <_GLOBAL__sub_I_stateHandler+0xf8>)
   d5a50:	f7ff fbee 	bl	d5230 <_ZNSt11_Deque_baseIiSaIiEEC1EOS1_>
std::queue<int> reasonQueue;
   d5a54:	4630      	mov	r0, r6
   d5a56:	f7ff fa25 	bl	d4ea4 <_ZNSt5dequeIiSaIiEED1Ev>
   d5a5a:	4a25      	ldr	r2, [pc, #148]	; (d5af0 <_GLOBAL__sub_I_stateHandler+0xf0>)
   d5a5c:	4925      	ldr	r1, [pc, #148]	; (d5af4 <_GLOBAL__sub_I_stateHandler+0xf4>)
   d5a5e:	4826      	ldr	r0, [pc, #152]	; (d5af8 <_GLOBAL__sub_I_stateHandler+0xf8>)
   d5a60:	f003 fd80 	bl	d9564 <__aeabi_atexit>
      typedef _Deque_iterator<_Tp, _Tp&, _Ptr>          iterator;
      typedef _Deque_iterator<_Tp, const _Tp&, _Ptr_const>   const_iterator;

      _Deque_base()
      : _M_impl()
      { _M_initialize_map(0); }
   d5a64:	4621      	mov	r1, r4
   d5a66:	4630      	mov	r0, r6
	iterator _M_start;
	iterator _M_finish;

	_Deque_impl()
	: _Tp_alloc_type(), _M_map(), _M_map_size(0),
	  _M_start(), _M_finish()
   d5a68:	9400      	str	r4, [sp, #0]
   d5a6a:	9401      	str	r4, [sp, #4]
      _Deque_iterator(_Elt_pointer __x, _Map_pointer __y) _GLIBCXX_NOEXCEPT
      : _M_cur(__x), _M_first(*__y),
        _M_last(*__y + _S_buffer_size()), _M_node(__y) { }

      _Deque_iterator() _GLIBCXX_NOEXCEPT
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
   d5a6c:	9402      	str	r4, [sp, #8]
   d5a6e:	9403      	str	r4, [sp, #12]
   d5a70:	9404      	str	r4, [sp, #16]
   d5a72:	9405      	str	r4, [sp, #20]
   d5a74:	9406      	str	r4, [sp, #24]
   d5a76:	9407      	str	r4, [sp, #28]
   d5a78:	9408      	str	r4, [sp, #32]
   d5a7a:	9409      	str	r4, [sp, #36]	; 0x24
      typedef _Deque_iterator<_Tp, _Tp&, _Ptr>          iterator;
      typedef _Deque_iterator<_Tp, const _Tp&, _Ptr_const>   const_iterator;

      _Deque_base()
      : _M_impl()
      { _M_initialize_map(0); }
   d5a7c:	f7ff fb91 	bl	d51a2 <_ZNSt11_Deque_baseImSaImEE17_M_initialize_mapEj>
      { }

      _Deque_base(_Deque_base&& __x, true_type)
      : _M_impl(std::move(__x._M_get_Tp_allocator()))
      {
	_M_initialize_map(0);
   d5a80:	4621      	mov	r1, r4
   d5a82:	4628      	mov	r0, r5
#if __cplusplus >= 201103L
	_Deque_impl(_Deque_impl&&) = default;

	_Deque_impl(_Tp_alloc_type&& __a) noexcept
	: _Tp_alloc_type(std::move(__a)), _M_map(), _M_map_size(0),
	  _M_start(), _M_finish()
   d5a84:	602c      	str	r4, [r5, #0]
   d5a86:	606c      	str	r4, [r5, #4]
      _Deque_iterator(_Elt_pointer __x, _Map_pointer __y) _GLIBCXX_NOEXCEPT
      : _M_cur(__x), _M_first(*__y),
        _M_last(*__y + _S_buffer_size()), _M_node(__y) { }

      _Deque_iterator() _GLIBCXX_NOEXCEPT
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
   d5a88:	60ac      	str	r4, [r5, #8]
   d5a8a:	60ec      	str	r4, [r5, #12]
   d5a8c:	612c      	str	r4, [r5, #16]
   d5a8e:	616c      	str	r4, [r5, #20]
   d5a90:	61ac      	str	r4, [r5, #24]
   d5a92:	61ec      	str	r4, [r5, #28]
   d5a94:	622c      	str	r4, [r5, #32]
   d5a96:	626c      	str	r4, [r5, #36]	; 0x24
      { }

      _Deque_base(_Deque_base&& __x, true_type)
      : _M_impl(std::move(__x._M_get_Tp_allocator()))
      {
	_M_initialize_map(0);
   d5a98:	f7ff fb83 	bl	d51a2 <_ZNSt11_Deque_baseImSaImEE17_M_initialize_mapEj>
	if (__x._M_impl._M_map)
   d5a9c:	9b00      	ldr	r3, [sp, #0]
   d5a9e:	b18b      	cbz	r3, d5ac4 <_GLOBAL__sub_I_stateHandler+0xc4>
#endif

	void _M_swap_data(_Deque_impl& __x) _GLIBCXX_NOEXCEPT
	{
	  using std::swap;
	  swap(this->_M_start, __x._M_start);
   d5aa0:	a902      	add	r1, sp, #8
   d5aa2:	f105 0008 	add.w	r0, r5, #8
   d5aa6:	f7ff fbeb 	bl	d5280 <_ZSt4swapISt15_Deque_iteratorImRmPmEEvRT_S5_>
	  swap(this->_M_finish, __x._M_finish);
   d5aaa:	a906      	add	r1, sp, #24
   d5aac:	f105 0018 	add.w	r0, r5, #24
   d5ab0:	f7ff fbe6 	bl	d5280 <_ZSt4swapISt15_Deque_iteratorImRmPmEEvRT_S5_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5ab4:	682b      	ldr	r3, [r5, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5ab6:	9a00      	ldr	r2, [sp, #0]
   d5ab8:	602a      	str	r2, [r5, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d5aba:	9300      	str	r3, [sp, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5abc:	9a01      	ldr	r2, [sp, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5abe:	686b      	ldr	r3, [r5, #4]
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
   d5ac0:	9301      	str	r3, [sp, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5ac2:	606a      	str	r2, [r5, #4]
std::queue<unsigned long> timeQueue;
   d5ac4:	4630      	mov	r0, r6
   d5ac6:	f7ff fa06 	bl	d4ed6 <_ZNSt5dequeImSaImEED1Ev>
   d5aca:	4a09      	ldr	r2, [pc, #36]	; (d5af0 <_GLOBAL__sub_I_stateHandler+0xf0>)
   d5acc:	490b      	ldr	r1, [pc, #44]	; (d5afc <_GLOBAL__sub_I_stateHandler+0xfc>)
   d5ace:	4805      	ldr	r0, [pc, #20]	; (d5ae4 <_GLOBAL__sub_I_stateHandler+0xe4>)
   d5ad0:	f003 fd48 	bl	d9564 <__aeabi_atexit>
   d5ad4:	f000 fa6a 	bl	d5fac <HAL_Timer_Get_Milli_Seconds>
unsigned long lastStateChange = millis();
   d5ad8:	4b09      	ldr	r3, [pc, #36]	; (d5b00 <_GLOBAL__sub_I_stateHandler+0x100>)
   d5ada:	6018      	str	r0, [r3, #0]
      lastHeartbeatPublish = millis();
    }

    

}
   d5adc:	b00a      	add	sp, #40	; 0x28
   d5ade:	bd70      	pop	{r4, r5, r6, pc}
   d5ae0:	2003e30c 	.word	0x2003e30c
   d5ae4:	2003e31c 	.word	0x2003e31c
   d5ae8:	2003e344 	.word	0x2003e344
   d5aec:	2003e2e4 	.word	0x2003e2e4
   d5af0:	2003e25c 	.word	0x2003e25c
   d5af4:	000d4ecb 	.word	0x000d4ecb
   d5af8:	2003e2b4 	.word	0x2003e2b4
   d5afc:	000d4efd 	.word	0x000d4efd
   d5b00:	2003e310 	.word	0x2003e310

000d5b04 <_Z15threadINSReaderPv>:

} //end checkINS3331()


//*********************************threads***************************************
void threadINSReader(void *param) {
   d5b04:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5b06:	4d18      	ldr	r5, [pc, #96]	; (d5b68 <_Z15threadINSReaderPv+0x64>)

      unsigned char c = SerialRadar.read();

      if(c == START_DELIMITER) receiveBufferIndex = 0;

      receiveBuffer[receiveBufferIndex] = c;
   d5b08:	4c18      	ldr	r4, [pc, #96]	; (d5b6c <_Z15threadINSReaderPv+0x68>)
*/
        //convert bytes to signed integer
        rawData.inPhase = (int)(iHighByte << 8 | iLowByte);
        rawData.quadrature = (int)(qHighByte << 8 | qLowByte);
        
        os_queue_put(insQueue, (void *)&rawData, 0, 0);
   d5b0a:	4e19      	ldr	r6, [pc, #100]	; (d5b70 <_Z15threadINSReaderPv+0x6c>)

  rawINSData rawData;

  while(true){

    if(SerialRadar.available())
   d5b0c:	f003 f83e 	bl	d8b8c <_Z22__fetch_global_Serial1v>
   d5b10:	6803      	ldr	r3, [r0, #0]
   d5b12:	691b      	ldr	r3, [r3, #16]
   d5b14:	4798      	blx	r3
   d5b16:	b320      	cbz	r0, d5b62 <_Z15threadINSReaderPv+0x5e>
    {

      unsigned char c = SerialRadar.read();
   d5b18:	f003 f838 	bl	d8b8c <_Z22__fetch_global_Serial1v>
   d5b1c:	6803      	ldr	r3, [r0, #0]
   d5b1e:	695b      	ldr	r3, [r3, #20]
   d5b20:	4798      	blx	r3
   d5b22:	b2c2      	uxtb	r2, r0

      if(c == START_DELIMITER) receiveBufferIndex = 0;
   d5b24:	2aa2      	cmp	r2, #162	; 0xa2
   d5b26:	bf04      	itt	eq
   d5b28:	2300      	moveq	r3, #0
   d5b2a:	602b      	streq	r3, [r5, #0]

      receiveBuffer[receiveBufferIndex] = c;
   d5b2c:	682b      	ldr	r3, [r5, #0]

      //Log.info("receiveBufferIndex = %d", receiveBufferIndex);

      //if c = frame end deliminator = 0x16, frame has completed transmission 
      //so break and put the raw I and Q bytes in a queue
      if(c == END_DELIMITER) {
   d5b2e:	2a16      	cmp	r2, #22

      unsigned char c = SerialRadar.read();

      if(c == START_DELIMITER) receiveBufferIndex = 0;

      receiveBuffer[receiveBufferIndex] = c;
   d5b30:	54e0      	strb	r0, [r4, r3]

      receiveBufferIndex++;
   d5b32:	f103 0301 	add.w	r3, r3, #1
   d5b36:	602b      	str	r3, [r5, #0]

      //Log.info("receiveBufferIndex = %d", receiveBufferIndex);

      //if c = frame end deliminator = 0x16, frame has completed transmission 
      //so break and put the raw I and Q bytes in a queue
      if(c == END_DELIMITER) {
   d5b38:	d113      	bne.n	d5b62 <_Z15threadINSReaderPv+0x5e>

        //extract i and q in byte form
        iHighByte = receiveBuffer[7];
        iLowByte = receiveBuffer[8];
        qHighByte = receiveBuffer[9];
   d5b3a:	f994 1009 	ldrsb.w	r1, [r4, #9]
        qLowByte = receiveBuffer[10];
   d5b3e:	f994 300a 	ldrsb.w	r3, [r4, #10]
        Log.info("iLow = 0x%02X", receiveBuffer[8]);
        Log.info("qHigh = 0x%02X", receiveBuffer[9]);
        Log.info("qLow = 0x%02X", receiveBuffer[10]);
*/
        //convert bytes to signed integer
        rawData.inPhase = (int)(iHighByte << 8 | iLowByte);
   d5b42:	f994 0007 	ldrsb.w	r0, [r4, #7]
   d5b46:	f994 2008 	ldrsb.w	r2, [r4, #8]
        rawData.quadrature = (int)(qHighByte << 8 | qLowByte);
   d5b4a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
        Log.info("iLow = 0x%02X", receiveBuffer[8]);
        Log.info("qHigh = 0x%02X", receiveBuffer[9]);
        Log.info("qLow = 0x%02X", receiveBuffer[10]);
*/
        //convert bytes to signed integer
        rawData.inPhase = (int)(iHighByte << 8 | iLowByte);
   d5b4e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
        rawData.quadrature = (int)(qHighByte << 8 | qLowByte);
   d5b52:	9301      	str	r3, [sp, #4]
        
        os_queue_put(insQueue, (void *)&rawData, 0, 0);
   d5b54:	2300      	movs	r3, #0
        Log.info("iLow = 0x%02X", receiveBuffer[8]);
        Log.info("qHigh = 0x%02X", receiveBuffer[9]);
        Log.info("qLow = 0x%02X", receiveBuffer[10]);
*/
        //convert bytes to signed integer
        rawData.inPhase = (int)(iHighByte << 8 | iLowByte);
   d5b56:	9200      	str	r2, [sp, #0]
        rawData.quadrature = (int)(qHighByte << 8 | qLowByte);
        
        os_queue_put(insQueue, (void *)&rawData, 0, 0);
   d5b58:	4669      	mov	r1, sp
   d5b5a:	461a      	mov	r2, r3
   d5b5c:	6830      	ldr	r0, [r6, #0]
   d5b5e:	f000 faeb 	bl	d6138 <os_queue_put>

      }//end frame delimter if

    } //end radar available if

    os_thread_yield();
   d5b62:	f000 faa9 	bl	d60b8 <os_thread_yield>
  signed char qHighByte;
  signed char qLowByte;

  rawINSData rawData;

  while(true){
   d5b66:	e7d1      	b.n	d5b0c <_Z15threadINSReaderPv+0x8>
   d5b68:	2003e3cc 	.word	0x2003e3cc
   d5b6c:	2003e450 	.word	0x2003e450
   d5b70:	2003e460 	.word	0x2003e460

000d5b74 <_Z12setupINS3331v>:
#include <CircularBuffer.h>

os_queue_t insQueue;

//setup function & subfunctions
void setupINS3331(){
   d5b74:	b537      	push	{r0, r1, r2, r4, r5, lr}

	// Create a queue. Each element is an unsigned char, there are 25 elements. Last parameter is always 0.
	os_queue_create(&insQueue, sizeof(rawINSData), 128, 0);
   d5b76:	2300      	movs	r3, #0
   d5b78:	2280      	movs	r2, #128	; 0x80
   d5b7a:	2108      	movs	r1, #8
   d5b7c:	4822      	ldr	r0, [pc, #136]	; (d5c08 <_Z12setupINS3331v+0x94>)
   d5b7e:	f000 fad3 	bl	d6128 <os_queue_create>
	// Create the thread
	new Thread("readINSThread", threadINSReader);  
   d5b82:	2004      	movs	r0, #4
   d5b84:	f7fe fa87 	bl	d4096 <_Znwj>
   d5b88:	4605      	mov	r5, r0
   d5b8a:	2800      	cmp	r0, #0
   d5b8c:	d039      	beq.n	d5c02 <_Z12setupINS3331v+0x8e>
    {
    }

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
   d5b8e:	491f      	ldr	r1, [pc, #124]	; (d5c0c <_Z12setupINS3331v+0x98>)
   d5b90:	2014      	movs	r0, #20
   d5b92:	f003 fcf9 	bl	d9588 <_ZnwjRKSt9nothrow_t>
   d5b96:	4604      	mov	r4, r0
   d5b98:	b130      	cbz	r0, d5ba8 <_Z12setupINS3331v+0x34>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5b9a:	2300      	movs	r3, #0
        Data() :
            handle(OS_THREAD_INVALID_HANDLE),
            func(nullptr),
            func_param(nullptr),
            started(false),
            exited(false) {
   d5b9c:	7403      	strb	r3, [r0, #16]
   d5b9e:	6003      	str	r3, [r0, #0]
   d5ba0:	6043      	str	r3, [r0, #4]
   d5ba2:	6083      	str	r3, [r0, #8]
   d5ba4:	60c3      	str	r3, [r0, #12]
   d5ba6:	7443      	strb	r3, [r0, #17]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5ba8:	602c      	str	r4, [r5, #0]

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
    {
        if (!d_) {
   d5baa:	b1a4      	cbz	r4, d5bd6 <_Z12setupINS3331v+0x62>
            goto error;
        }
        d_->func = function;
   d5bac:	4b18      	ldr	r3, [pc, #96]	; (d5c10 <_Z12setupINS3331v+0x9c>)
   d5bae:	60a3      	str	r3, [r4, #8]
        d_->func_param = function_param;
   d5bb0:	2300      	movs	r3, #0
   d5bb2:	60e3      	str	r3, [r4, #12]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d5bb4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   d5bb8:	9301      	str	r3, [sp, #4]
   d5bba:	9400      	str	r4, [sp, #0]
   d5bbc:	4b15      	ldr	r3, [pc, #84]	; (d5c14 <_Z12setupINS3331v+0xa0>)
   d5bbe:	4916      	ldr	r1, [pc, #88]	; (d5c18 <_Z12setupINS3331v+0xa4>)
   d5bc0:	2202      	movs	r2, #2
   d5bc2:	1d20      	adds	r0, r4, #4
   d5bc4:	f000 fa68 	bl	d6098 <os_thread_create>
   d5bc8:	b928      	cbnz	r0, d5bd6 <_Z12setupINS3331v+0x62>
            goto error;
        }
        while (!d_->started) {
   d5bca:	7c23      	ldrb	r3, [r4, #16]
   d5bcc:	b9cb      	cbnz	r3, d5c02 <_Z12setupINS3331v+0x8e>
            // FIXME: This used to be os_thread_yield() but for some unknown reasons sometimes
            // it doesn't let the new thread to run.
            HAL_Delay_Milliseconds(1);
   d5bce:	2001      	movs	r0, #1
   d5bd0:	f000 f9dc 	bl	d5f8c <HAL_Delay_Milliseconds>
   d5bd4:	e7f9      	b.n	d5bca <_Z12setupINS3331v+0x56>
   d5bd6:	2300      	movs	r3, #0
   d5bd8:	602b      	str	r3, [r5, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5bda:	b194      	cbz	r4, d5c02 <_Z12setupINS3331v+0x8e>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5bdc:	6825      	ldr	r5, [r4, #0]
   d5bde:	b14d      	cbz	r5, d5bf4 <_Z12setupINS3331v+0x80>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5be0:	68ab      	ldr	r3, [r5, #8]
   d5be2:	b11b      	cbz	r3, d5bec <_Z12setupINS3331v+0x78>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5be4:	2203      	movs	r2, #3
   d5be6:	4629      	mov	r1, r5
   d5be8:	4628      	mov	r0, r5
   d5bea:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5bec:	2110      	movs	r1, #16
   d5bee:	4628      	mov	r0, r5
   d5bf0:	f003 fcc6 	bl	d9580 <_ZdlPvj>
   d5bf4:	2114      	movs	r1, #20
   d5bf6:	4620      	mov	r0, r4

}
   d5bf8:	b003      	add	sp, #12
   d5bfa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   d5bfe:	f003 bcbf 	b.w	d9580 <_ZdlPvj>
   d5c02:	b003      	add	sp, #12
   d5c04:	bd30      	pop	{r4, r5, pc}
   d5c06:	bf00      	nop
   d5c08:	2003e460 	.word	0x2003e460
   d5c0c:	000dadce 	.word	0x000dadce
   d5c10:	000d5b05 	.word	0x000d5b05
   d5c14:	000d41a9 	.word	0x000d41a9
   d5c18:	000da888 	.word	0x000da888

000d5c1c <_Z17calculateChecksumPhi>:

unsigned char calculateChecksum(unsigned char myArray[], int arrayLength){

  unsigned char checksum = 0x00;

  switch(arrayLength){
   d5c1c:	290e      	cmp	r1, #14
  //write!
  SerialRadar.write(ins3331_send_buf, 15);  

}

unsigned char calculateChecksum(unsigned char myArray[], int arrayLength){
   d5c1e:	b510      	push	{r4, lr}

  unsigned char checksum = 0x00;

  switch(arrayLength){
   d5c20:	d006      	beq.n	d5c30 <_Z17calculateChecksumPhi+0x14>
   d5c22:	290f      	cmp	r1, #15

}

unsigned char calculateChecksum(unsigned char myArray[], int arrayLength){

  unsigned char checksum = 0x00;
   d5c24:	f04f 0300 	mov.w	r3, #0

  switch(arrayLength){
   d5c28:	d113      	bne.n	d5c52 <_Z17calculateChecksumPhi+0x36>
   d5c2a:	1c42      	adds	r2, r0, #1
   d5c2c:	300c      	adds	r0, #12
   d5c2e:	e00a      	b.n	d5c46 <_Z17calculateChecksumPhi+0x2a>
   d5c30:	4602      	mov	r2, r0
   d5c32:	f100 010b 	add.w	r1, r0, #11
   d5c36:	2300      	movs	r3, #0
    case 14:
      for(int i = 1; i <= 11; i++){
        checksum = checksum + myArray[i];
   d5c38:	f812 4f01 	ldrb.w	r4, [r2, #1]!
   d5c3c:	4423      	add	r3, r4

  unsigned char checksum = 0x00;

  switch(arrayLength){
    case 14:
      for(int i = 1; i <= 11; i++){
   d5c3e:	428a      	cmp	r2, r1
        checksum = checksum + myArray[i];
   d5c40:	b2db      	uxtb	r3, r3

  unsigned char checksum = 0x00;

  switch(arrayLength){
    case 14:
      for(int i = 1; i <= 11; i++){
   d5c42:	d1f9      	bne.n	d5c38 <_Z17calculateChecksumPhi+0x1c>
   d5c44:	e7f1      	b.n	d5c2a <_Z17calculateChecksumPhi+0xe>
        checksum = checksum + myArray[i];
      }
    case 15:
      for(int i = 2; i <= 12; i++){
        checksum = checksum + myArray[i];
   d5c46:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   d5c4a:	440b      	add	r3, r1
    case 14:
      for(int i = 1; i <= 11; i++){
        checksum = checksum + myArray[i];
      }
    case 15:
      for(int i = 2; i <= 12; i++){
   d5c4c:	4282      	cmp	r2, r0
        checksum = checksum + myArray[i];
   d5c4e:	b2db      	uxtb	r3, r3
    case 14:
      for(int i = 1; i <= 11; i++){
        checksum = checksum + myArray[i];
      }
    case 15:
      for(int i = 2; i <= 12; i++){
   d5c50:	d1f9      	bne.n	d5c46 <_Z17calculateChecksumPhi+0x2a>
      }
  } //end switch

  return checksum;

   d5c52:	4618      	mov	r0, r3
   d5c54:	bd10      	pop	{r4, pc}
	...

000d5c58 <_Z14writeToINS3331h>:
  writeToINS3331(APPLICATION_START);

}


void writeToINS3331(unsigned char function_code){
   d5c58:	b5f0      	push	{r4, r5, r6, r7, lr}

  unsigned char ins3331_send_buf[15] = {WAKEUP_BYTE, START_DELIMITER, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, END_DELIMITER};
   d5c5a:	4b18      	ldr	r3, [pc, #96]	; (d5cbc <_Z14writeToINS3331h+0x64>)
  writeToINS3331(APPLICATION_START);

}


void writeToINS3331(unsigned char function_code){
   d5c5c:	b085      	sub	sp, #20
   d5c5e:	4606      	mov	r6, r0

  unsigned char ins3331_send_buf[15] = {WAKEUP_BYTE, START_DELIMITER, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, END_DELIMITER};
   d5c60:	466a      	mov	r2, sp
   d5c62:	f103 0708 	add.w	r7, r3, #8
   d5c66:	466d      	mov	r5, sp
   d5c68:	6818      	ldr	r0, [r3, #0]
   d5c6a:	6859      	ldr	r1, [r3, #4]
   d5c6c:	4614      	mov	r4, r2
   d5c6e:	c403      	stmia	r4!, {r0, r1}
   d5c70:	3308      	adds	r3, #8
   d5c72:	42bb      	cmp	r3, r7
   d5c74:	4622      	mov	r2, r4
   d5c76:	d1f7      	bne.n	d5c68 <_Z14writeToINS3331h+0x10>
   d5c78:	6818      	ldr	r0, [r3, #0]
   d5c7a:	8899      	ldrh	r1, [r3, #4]
   d5c7c:	799b      	ldrb	r3, [r3, #6]
   d5c7e:	6020      	str	r0, [r4, #0]
   d5c80:	80a1      	strh	r1, [r4, #4]
   d5c82:	71a3      	strb	r3, [r4, #6]
  ins3331_send_buf[4] = function_code;

  //calculate checksum for a 15-byte array (writing to INS always requires 15 byte array)
  unsigned char checksum = calculateChecksum(ins3331_send_buf, 15); 
   d5c84:	210f      	movs	r1, #15
   d5c86:	4628      	mov	r0, r5


void writeToINS3331(unsigned char function_code){

  unsigned char ins3331_send_buf[15] = {WAKEUP_BYTE, START_DELIMITER, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, END_DELIMITER};
  ins3331_send_buf[4] = function_code;
   d5c88:	f88d 6004 	strb.w	r6, [sp, #4]

  //calculate checksum for a 15-byte array (writing to INS always requires 15 byte array)
  unsigned char checksum = calculateChecksum(ins3331_send_buf, 15); 
   d5c8c:	f7ff ffc6 	bl	d5c1c <_Z17calculateChecksumPhi>
  //load checksum into array for writing
  ins3331_send_buf[13] = checksum;

  for(int i = 0; i < 15; i++){
   d5c90:	2400      	movs	r4, #0
  ins3331_send_buf[4] = function_code;

  //calculate checksum for a 15-byte array (writing to INS always requires 15 byte array)
  unsigned char checksum = calculateChecksum(ins3331_send_buf, 15); 
  //load checksum into array for writing
  ins3331_send_buf[13] = checksum;
   d5c92:	f88d 000d 	strb.w	r0, [sp, #13]

  for(int i = 0; i < 15; i++){
    Log.info("frame written to INS3331: send_buf[%d] = 0x%02X", i, ins3331_send_buf[i]);
   d5c96:	5d2b      	ldrb	r3, [r5, r4]
   d5c98:	4909      	ldr	r1, [pc, #36]	; (d5cc0 <_Z14writeToINS3331h+0x68>)
   d5c9a:	480a      	ldr	r0, [pc, #40]	; (d5cc4 <_Z14writeToINS3331h+0x6c>)
   d5c9c:	4622      	mov	r2, r4
  //calculate checksum for a 15-byte array (writing to INS always requires 15 byte array)
  unsigned char checksum = calculateChecksum(ins3331_send_buf, 15); 
  //load checksum into array for writing
  ins3331_send_buf[13] = checksum;

  for(int i = 0; i < 15; i++){
   d5c9e:	3401      	adds	r4, #1
    Log.info("frame written to INS3331: send_buf[%d] = 0x%02X", i, ins3331_send_buf[i]);
   d5ca0:	f7fe fa12 	bl	d40c8 <_ZNK5spark6Logger4infoEPKcz>
  //calculate checksum for a 15-byte array (writing to INS always requires 15 byte array)
  unsigned char checksum = calculateChecksum(ins3331_send_buf, 15); 
  //load checksum into array for writing
  ins3331_send_buf[13] = checksum;

  for(int i = 0; i < 15; i++){
   d5ca4:	2c0f      	cmp	r4, #15
   d5ca6:	d1f6      	bne.n	d5c96 <_Z14writeToINS3331h+0x3e>
    Log.info("frame written to INS3331: send_buf[%d] = 0x%02X", i, ins3331_send_buf[i]);
  }
  //write!
  SerialRadar.write(ins3331_send_buf, 15);  
   d5ca8:	f002 ff70 	bl	d8b8c <_Z22__fetch_global_Serial1v>
   d5cac:	6803      	ldr	r3, [r0, #0]
   d5cae:	4622      	mov	r2, r4
   d5cb0:	68db      	ldr	r3, [r3, #12]
   d5cb2:	4629      	mov	r1, r5
   d5cb4:	4798      	blx	r3

}
   d5cb6:	b005      	add	sp, #20
   d5cb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5cba:	bf00      	nop
   d5cbc:	000da879 	.word	0x000da879
   d5cc0:	000da896 	.word	0x000da896
   d5cc4:	2003e4b8 	.word	0x2003e4b8

000d5cc8 <_Z14startINSSerialv>:

} //end threadINSReader


//loop() functions and sub-functions 
void startINSSerial(){
   d5cc8:	b508      	push	{r3, lr}

	SerialRadar.begin(38400, SERIAL_8N1);
   d5cca:	f002 ff5f 	bl	d8b8c <_Z22__fetch_global_Serial1v>
   d5cce:	2200      	movs	r2, #0
   d5cd0:	f44f 4116 	mov.w	r1, #38400	; 0x9600
   d5cd4:	f002 ff4c 	bl	d8b70 <_ZN11USARTSerial5beginEmm>
  writeToINS3331(APPLICATION_STOP);
   d5cd8:	20e4      	movs	r0, #228	; 0xe4
   d5cda:	f7ff ffbd 	bl	d5c58 <_Z14writeToINS3331h>
  //give module time to stop sending data
  delay(100);
   d5cde:	2064      	movs	r0, #100	; 0x64
   d5ce0:	f002 f9f8 	bl	d80d4 <delay>
  writeToINS3331(APPLICATION_START);
   d5ce4:	20eb      	movs	r0, #235	; 0xeb

}
   d5ce6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

	SerialRadar.begin(38400, SERIAL_8N1);
  writeToINS3331(APPLICATION_STOP);
  //give module time to stop sending data
  delay(100);
  writeToINS3331(APPLICATION_START);
   d5cea:	f7ff bfb5 	b.w	d5c58 <_Z14writeToINS3331h>

000d5cee <_ZN14CircularBufferIiLj26EhE4pushEi>:
	}
}

template<typename T, size_t S, typename IT>
bool CircularBuffer<T,S,IT>::push(T value) {
	if (++tail == buffer + capacity) {
   d5cee:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   d5cf0:	f100 0268 	add.w	r2, r0, #104	; 0x68
   d5cf4:	3304      	adds	r3, #4
   d5cf6:	4293      	cmp	r3, r2
   d5cf8:	66c3      	str	r3, [r0, #108]	; 0x6c
		tail = buffer;
   d5cfa:	bf08      	it	eq
   d5cfc:	66c0      	streq	r0, [r0, #108]	; 0x6c
	}
	*tail = value;
   d5cfe:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   d5d00:	6019      	str	r1, [r3, #0]
	if (count == capacity) {
   d5d02:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
   d5d06:	2b1a      	cmp	r3, #26
   d5d08:	d106      	bne.n	d5d18 <_ZN14CircularBufferIiLj26EhE4pushEi+0x2a>
		if (++head == buffer + capacity) {
   d5d0a:	6e83      	ldr	r3, [r0, #104]	; 0x68
   d5d0c:	3304      	adds	r3, #4
   d5d0e:	429a      	cmp	r2, r3
   d5d10:	6683      	str	r3, [r0, #104]	; 0x68
   d5d12:	d108      	bne.n	d5d26 <_ZN14CircularBufferIiLj26EhE4pushEi+0x38>
			head = buffer;
   d5d14:	6680      	str	r0, [r0, #104]	; 0x68
   d5d16:	e006      	b.n	d5d26 <_ZN14CircularBufferIiLj26EhE4pushEi+0x38>
		}
		return false;
	} else {
		if (count++ == 0) {
   d5d18:	1c5a      	adds	r2, r3, #1
   d5d1a:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
   d5d1e:	b923      	cbnz	r3, d5d2a <_ZN14CircularBufferIiLj26EhE4pushEi+0x3c>
			head = tail;
   d5d20:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   d5d22:	6683      	str	r3, [r0, #104]	; 0x68
   d5d24:	e001      	b.n	d5d2a <_ZN14CircularBufferIiLj26EhE4pushEi+0x3c>
	*tail = value;
	if (count == capacity) {
		if (++head == buffer + capacity) {
			head = buffer;
		}
		return false;
   d5d26:	2000      	movs	r0, #0
   d5d28:	4770      	bx	lr
	} else {
		if (count++ == 0) {
			head = tail;
		}
		return true;
   d5d2a:	2001      	movs	r0, #1
	}
}
   d5d2c:	4770      	bx	lr

000d5d2e <_ZNK14CircularBufferIiLj26EhEixEh>:
	return *tail;
}

template<typename T, size_t S, typename IT>
T CircularBuffer<T,S,IT>::operator [](IT index) const {
	if (index >= count) return *tail;
   d5d2e:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
   d5d32:	428b      	cmp	r3, r1
   d5d34:	d802      	bhi.n	d5d3c <_ZNK14CircularBufferIiLj26EhEixEh+0xe>
   d5d36:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   d5d38:	6818      	ldr	r0, [r3, #0]
   d5d3a:	4770      	bx	lr
	return *(buffer + ((head - buffer + index) % capacity));
   d5d3c:	6e83      	ldr	r3, [r0, #104]	; 0x68
   d5d3e:	1a1b      	subs	r3, r3, r0
   d5d40:	221a      	movs	r2, #26
   d5d42:	eb01 01a3 	add.w	r1, r1, r3, asr #2
   d5d46:	fb91 f3f2 	sdiv	r3, r1, r2
   d5d4a:	fb02 1113 	mls	r1, r2, r3, r1
   d5d4e:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
}
   d5d52:	4770      	bx	lr

000d5d54 <_Z12checkINS3331v>:
	new Thread("readINSThread", threadINSReader);  

}

//in the future, checkINS3331() will become a thread
filteredINSData checkINS3331(){
   d5d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5d58:	ed2d 8b02 	vpush	{d8}

  rawINSData dataToParse;
  static CircularBuffer<int,MOVING_AVERAGE_BUFFER_SIZE> iBuffer, qBuffer;
   d5d5c:	4e5e      	ldr	r6, [pc, #376]	; (d5ed8 <_Z12checkINS3331v+0x184>)
   d5d5e:	6833      	ldr	r3, [r6, #0]
   d5d60:	f013 0401 	ands.w	r4, r3, #1
	new Thread("readINSThread", threadINSReader);  

}

//in the future, checkINS3331() will become a thread
filteredINSData checkINS3331(){
   d5d64:	b082      	sub	sp, #8
   d5d66:	4605      	mov	r5, r0

  rawINSData dataToParse;
  static CircularBuffer<int,MOVING_AVERAGE_BUFFER_SIZE> iBuffer, qBuffer;
   d5d68:	d10b      	bne.n	d5d82 <_Z12checkINS3331v+0x2e>
   d5d6a:	4630      	mov	r0, r6
   d5d6c:	f7fe f9a4 	bl	d40b8 <__cxa_guard_acquire>
   d5d70:	b138      	cbz	r0, d5d82 <_Z12checkINS3331v+0x2e>
 along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

template<typename T, size_t S, typename IT>
constexpr CircularBuffer<T,S,IT>::CircularBuffer() :
		head(buffer), tail(buffer), count(0) {
   d5d72:	4b5a      	ldr	r3, [pc, #360]	; (d5edc <_Z12checkINS3331v+0x188>)
   d5d74:	4630      	mov	r0, r6
   d5d76:	669b      	str	r3, [r3, #104]	; 0x68
   d5d78:	66db      	str	r3, [r3, #108]	; 0x6c
   d5d7a:	f883 4070 	strb.w	r4, [r3, #112]	; 0x70
   d5d7e:	f7fe f9a0 	bl	d40c2 <__cxa_guard_release>
   d5d82:	4e57      	ldr	r6, [pc, #348]	; (d5ee0 <_Z12checkINS3331v+0x18c>)
   d5d84:	6833      	ldr	r3, [r6, #0]
   d5d86:	f013 0401 	ands.w	r4, r3, #1
   d5d8a:	d10b      	bne.n	d5da4 <_Z12checkINS3331v+0x50>
   d5d8c:	4630      	mov	r0, r6
   d5d8e:	f7fe f993 	bl	d40b8 <__cxa_guard_acquire>
   d5d92:	b138      	cbz	r0, d5da4 <_Z12checkINS3331v+0x50>
   d5d94:	4b53      	ldr	r3, [pc, #332]	; (d5ee4 <_Z12checkINS3331v+0x190>)
   d5d96:	4630      	mov	r0, r6
   d5d98:	669b      	str	r3, [r3, #104]	; 0x68
   d5d9a:	66db      	str	r3, [r3, #108]	; 0x6c
   d5d9c:	f883 4070 	strb.w	r4, [r3, #112]	; 0x70
   d5da0:	f7fe f98f 	bl	d40c2 <__cxa_guard_release>
  static float iSum = 0;
  static float qSum = 0;
  static filteredINSData returnINSData = {0,0,0};

  //os_queue_take returns 0 on success, so if we get a value, dump it to circular buffer
  if (os_queue_take(insQueue, &dataToParse, 0, 0) == 0) {
   d5da4:	4850      	ldr	r0, [pc, #320]	; (d5ee8 <_Z12checkINS3331v+0x194>)
   d5da6:	2300      	movs	r3, #0
   d5da8:	461a      	mov	r2, r3
   d5daa:	4669      	mov	r1, sp
   d5dac:	6800      	ldr	r0, [r0, #0]
   d5dae:	f000 f9cb 	bl	d6148 <os_queue_take>
   d5db2:	4604      	mov	r4, r0
   d5db4:	2800      	cmp	r0, #0
   d5db6:	f040 8084 	bne.w	d5ec2 <_Z12checkINS3331v+0x16e>

    //add absolute values to circular buffer for the rolling average
    //since push() adds to the tail, adding beyond capacity causes the element at head to be overwritten and lost
    iBuffer.push(abs(dataToParse.inPhase));
   d5dba:	9900      	ldr	r1, [sp, #0]
   d5dbc:	4e47      	ldr	r6, [pc, #284]	; (d5edc <_Z12checkINS3331v+0x188>)
   d5dbe:	2900      	cmp	r1, #0
   d5dc0:	bfb8      	it	lt
   d5dc2:	4249      	neglt	r1, r1
   d5dc4:	4630      	mov	r0, r6
   d5dc6:	f7ff ff92 	bl	d5cee <_ZN14CircularBufferIiLj26EhE4pushEi>
    qBuffer.push(abs(dataToParse.quadrature));
   d5dca:	9901      	ldr	r1, [sp, #4]
   d5dcc:	4845      	ldr	r0, [pc, #276]	; (d5ee4 <_Z12checkINS3331v+0x190>)
   d5dce:	2900      	cmp	r1, #0
   d5dd0:	bfb8      	it	lt
   d5dd2:	4249      	neglt	r1, r1
   d5dd4:	f7ff ff8b 	bl	d5cee <_ZN14CircularBufferIiLj26EhE4pushEi>
   d5dd8:	f896 3070 	ldrb.w	r3, [r6, #112]	; 0x70

    //compute average of the first n data points by computing the full sum
    if(iBuffer.size() == MOVING_AVERAGE_SAMPLE_SIZE){
   d5ddc:	2b19      	cmp	r3, #25
   d5dde:	d12e      	bne.n	d5e3e <_Z12checkINS3331v+0xea>

      for (int i = 0; i < MOVING_AVERAGE_SAMPLE_SIZE; i++) {
        iSum += iBuffer[i];
   d5de0:	f8df 8110 	ldr.w	r8, [pc, #272]	; d5ef4 <_Z12checkINS3331v+0x1a0>
        qSum += qBuffer[i];
   d5de4:	4e41      	ldr	r6, [pc, #260]	; (d5eec <_Z12checkINS3331v+0x198>)

    //compute average of the first n data points by computing the full sum
    if(iBuffer.size() == MOVING_AVERAGE_SAMPLE_SIZE){

      for (int i = 0; i < MOVING_AVERAGE_SAMPLE_SIZE; i++) {
        iSum += iBuffer[i];
   d5de6:	483d      	ldr	r0, [pc, #244]	; (d5edc <_Z12checkINS3331v+0x188>)
   d5de8:	b2e7      	uxtb	r7, r4
   d5dea:	4639      	mov	r1, r7
   d5dec:	f7ff ff9f 	bl	d5d2e <_ZNK14CircularBufferIiLj26EhEixEh>
   d5df0:	ee07 0a90 	vmov	s15, r0
   d5df4:	ed98 8a00 	vldr	s16, [r8]
        qSum += qBuffer[i];
   d5df8:	483a      	ldr	r0, [pc, #232]	; (d5ee4 <_Z12checkINS3331v+0x190>)

    //compute average of the first n data points by computing the full sum
    if(iBuffer.size() == MOVING_AVERAGE_SAMPLE_SIZE){

      for (int i = 0; i < MOVING_AVERAGE_SAMPLE_SIZE; i++) {
        iSum += iBuffer[i];
   d5dfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        qSum += qBuffer[i];
   d5dfe:	4639      	mov	r1, r7

    //compute average of the first n data points by computing the full sum
    if(iBuffer.size() == MOVING_AVERAGE_SAMPLE_SIZE){

      for (int i = 0; i < MOVING_AVERAGE_SAMPLE_SIZE; i++) {
        iSum += iBuffer[i];
   d5e00:	ee37 8a88 	vadd.f32	s16, s15, s16
    qBuffer.push(abs(dataToParse.quadrature));

    //compute average of the first n data points by computing the full sum
    if(iBuffer.size() == MOVING_AVERAGE_SAMPLE_SIZE){

      for (int i = 0; i < MOVING_AVERAGE_SAMPLE_SIZE; i++) {
   d5e04:	3401      	adds	r4, #1
        iSum += iBuffer[i];
   d5e06:	ed88 8a00 	vstr	s16, [r8]
        qSum += qBuffer[i];
   d5e0a:	f7ff ff90 	bl	d5d2e <_ZNK14CircularBufferIiLj26EhEixEh>
   d5e0e:	ee07 0a90 	vmov	s15, r0
   d5e12:	ed96 7a00 	vldr	s14, [r6]
   d5e16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    qBuffer.push(abs(dataToParse.quadrature));

    //compute average of the first n data points by computing the full sum
    if(iBuffer.size() == MOVING_AVERAGE_SAMPLE_SIZE){

      for (int i = 0; i < MOVING_AVERAGE_SAMPLE_SIZE; i++) {
   d5e1a:	2c19      	cmp	r4, #25
        iSum += iBuffer[i];
        qSum += qBuffer[i];
   d5e1c:	ee77 7a87 	vadd.f32	s15, s15, s14
   d5e20:	edc6 7a00 	vstr	s15, [r6]
    qBuffer.push(abs(dataToParse.quadrature));

    //compute average of the first n data points by computing the full sum
    if(iBuffer.size() == MOVING_AVERAGE_SAMPLE_SIZE){

      for (int i = 0; i < MOVING_AVERAGE_SAMPLE_SIZE; i++) {
   d5e24:	d1df      	bne.n	d5de6 <_Z12checkINS3331v+0x92>
        iSum += iBuffer[i];
        qSum += qBuffer[i];
      }
      returnINSData.iAverage = iSum/MOVING_AVERAGE_SAMPLE_SIZE;
   d5e26:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
   d5e2a:	eec8 6a07 	vdiv.f32	s13, s16, s14
   d5e2e:	4b30      	ldr	r3, [pc, #192]	; (d5ef0 <_Z12checkINS3331v+0x19c>)
   d5e30:	edc3 6a00 	vstr	s13, [r3]
      returnINSData.qAverage = qSum/MOVING_AVERAGE_SAMPLE_SIZE;
   d5e34:	eec7 6a87 	vdiv.f32	s13, s15, s14
   d5e38:	edc3 6a01 	vstr	s13, [r3, #4]
   d5e3c:	e041      	b.n	d5ec2 <_Z12checkINS3331v+0x16e>
  
    }

    //compute subsequent averages by using sum = sum - oldVal + newVal
    //note buffer size must be at least one greater than sample size to retain oldVal
    if(iBuffer.size() == MOVING_AVERAGE_BUFFER_SIZE){
   d5e3e:	2b1a      	cmp	r3, #26
   d5e40:	d13f      	bne.n	d5ec2 <_Z12checkINS3331v+0x16e>

      /*for (int i = 0; i < MOVING_AVERAGE_BUFFER_SIZE; i++) {
        Log.info("iBuf[%d], qBuf[%d]: %d,   %d", i,i,iBuffer[i],qBuffer[i]);
      }
      */
      iSum = iSum - iBuffer[0] + iBuffer[MOVING_AVERAGE_BUFFER_SIZE-1];
   d5e42:	4621      	mov	r1, r4
   d5e44:	4630      	mov	r0, r6
   d5e46:	f7ff ff72 	bl	d5d2e <_ZNK14CircularBufferIiLj26EhEixEh>
   d5e4a:	4f2a      	ldr	r7, [pc, #168]	; (d5ef4 <_Z12checkINS3331v+0x1a0>)
   d5e4c:	ee07 0a90 	vmov	s15, r0
   d5e50:	ed97 8a00 	vldr	s16, [r7]
   d5e54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d5e58:	2119      	movs	r1, #25
   d5e5a:	4630      	mov	r0, r6
   d5e5c:	ee38 8a67 	vsub.f32	s16, s16, s15
   d5e60:	f7ff ff65 	bl	d5d2e <_ZNK14CircularBufferIiLj26EhEixEh>
   d5e64:	ee07 0a90 	vmov	s15, r0
   d5e68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      qSum = qSum - qBuffer[0] + qBuffer[MOVING_AVERAGE_BUFFER_SIZE-1];
   d5e6c:	4621      	mov	r1, r4

      /*for (int i = 0; i < MOVING_AVERAGE_BUFFER_SIZE; i++) {
        Log.info("iBuf[%d], qBuf[%d]: %d,   %d", i,i,iBuffer[i],qBuffer[i]);
      }
      */
      iSum = iSum - iBuffer[0] + iBuffer[MOVING_AVERAGE_BUFFER_SIZE-1];
   d5e6e:	ee37 8a88 	vadd.f32	s16, s15, s16
      qSum = qSum - qBuffer[0] + qBuffer[MOVING_AVERAGE_BUFFER_SIZE-1];
   d5e72:	481c      	ldr	r0, [pc, #112]	; (d5ee4 <_Z12checkINS3331v+0x190>)

      /*for (int i = 0; i < MOVING_AVERAGE_BUFFER_SIZE; i++) {
        Log.info("iBuf[%d], qBuf[%d]: %d,   %d", i,i,iBuffer[i],qBuffer[i]);
      }
      */
      iSum = iSum - iBuffer[0] + iBuffer[MOVING_AVERAGE_BUFFER_SIZE-1];
   d5e74:	ed87 8a00 	vstr	s16, [r7]
      qSum = qSum - qBuffer[0] + qBuffer[MOVING_AVERAGE_BUFFER_SIZE-1];
   d5e78:	f7ff ff59 	bl	d5d2e <_ZNK14CircularBufferIiLj26EhEixEh>
   d5e7c:	4e1b      	ldr	r6, [pc, #108]	; (d5eec <_Z12checkINS3331v+0x198>)
      returnINSData.iAverage = iSum/MOVING_AVERAGE_SAMPLE_SIZE;
   d5e7e:	4c1c      	ldr	r4, [pc, #112]	; (d5ef0 <_Z12checkINS3331v+0x19c>)
      /*for (int i = 0; i < MOVING_AVERAGE_BUFFER_SIZE; i++) {
        Log.info("iBuf[%d], qBuf[%d]: %d,   %d", i,i,iBuffer[i],qBuffer[i]);
      }
      */
      iSum = iSum - iBuffer[0] + iBuffer[MOVING_AVERAGE_BUFFER_SIZE-1];
      qSum = qSum - qBuffer[0] + qBuffer[MOVING_AVERAGE_BUFFER_SIZE-1];
   d5e80:	edd6 8a00 	vldr	s17, [r6]
   d5e84:	ee07 0a90 	vmov	s15, r0
   d5e88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d5e8c:	2119      	movs	r1, #25
   d5e8e:	4815      	ldr	r0, [pc, #84]	; (d5ee4 <_Z12checkINS3331v+0x190>)
   d5e90:	ee78 8ae7 	vsub.f32	s17, s17, s15
   d5e94:	f7ff ff4b 	bl	d5d2e <_ZNK14CircularBufferIiLj26EhEixEh>
      returnINSData.iAverage = iSum/MOVING_AVERAGE_SAMPLE_SIZE;
   d5e98:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
   d5e9c:	eec8 6a07 	vdiv.f32	s13, s16, s14
      /*for (int i = 0; i < MOVING_AVERAGE_BUFFER_SIZE; i++) {
        Log.info("iBuf[%d], qBuf[%d]: %d,   %d", i,i,iBuffer[i],qBuffer[i]);
      }
      */
      iSum = iSum - iBuffer[0] + iBuffer[MOVING_AVERAGE_BUFFER_SIZE-1];
      qSum = qSum - qBuffer[0] + qBuffer[MOVING_AVERAGE_BUFFER_SIZE-1];
   d5ea0:	ee07 0a90 	vmov	s15, r0
   d5ea4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      returnINSData.iAverage = iSum/MOVING_AVERAGE_SAMPLE_SIZE;
   d5ea8:	edc4 6a00 	vstr	s13, [r4]
      /*for (int i = 0; i < MOVING_AVERAGE_BUFFER_SIZE; i++) {
        Log.info("iBuf[%d], qBuf[%d]: %d,   %d", i,i,iBuffer[i],qBuffer[i]);
      }
      */
      iSum = iSum - iBuffer[0] + iBuffer[MOVING_AVERAGE_BUFFER_SIZE-1];
      qSum = qSum - qBuffer[0] + qBuffer[MOVING_AVERAGE_BUFFER_SIZE-1];
   d5eac:	ee77 7aa8 	vadd.f32	s15, s15, s17
      returnINSData.iAverage = iSum/MOVING_AVERAGE_SAMPLE_SIZE;
      returnINSData.qAverage = qSum/MOVING_AVERAGE_SAMPLE_SIZE;
   d5eb0:	eec7 6a87 	vdiv.f32	s13, s15, s14
      /*for (int i = 0; i < MOVING_AVERAGE_BUFFER_SIZE; i++) {
        Log.info("iBuf[%d], qBuf[%d]: %d,   %d", i,i,iBuffer[i],qBuffer[i]);
      }
      */
      iSum = iSum - iBuffer[0] + iBuffer[MOVING_AVERAGE_BUFFER_SIZE-1];
      qSum = qSum - qBuffer[0] + qBuffer[MOVING_AVERAGE_BUFFER_SIZE-1];
   d5eb4:	edc6 7a00 	vstr	s15, [r6]
      returnINSData.iAverage = iSum/MOVING_AVERAGE_SAMPLE_SIZE;
      returnINSData.qAverage = qSum/MOVING_AVERAGE_SAMPLE_SIZE;
   d5eb8:	edc4 6a01 	vstr	s13, [r4, #4]
   d5ebc:	f000 f876 	bl	d5fac <HAL_Timer_Get_Milli_Seconds>
      //record the time this value was removed from the queue and calculated
      returnINSData.timestamp = millis();
   d5ec0:	60a0      	str	r0, [r4, #8]
      //Log.info("iAverage = %f, qAverage = %f", returnINSData.iAverage, returnINSData.qAverage); 
    } 

  } //end queue if

  return returnINSData;
   d5ec2:	4b0b      	ldr	r3, [pc, #44]	; (d5ef0 <_Z12checkINS3331v+0x19c>)
   d5ec4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   d5ec8:	e885 0007 	stmia.w	r5, {r0, r1, r2}

} //end checkINS3331()
   d5ecc:	4628      	mov	r0, r5
   d5ece:	b002      	add	sp, #8
   d5ed0:	ecbd 8b02 	vpop	{d8}
   d5ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5ed8:	2003e3bc 	.word	0x2003e3bc
   d5edc:	2003e3d4 	.word	0x2003e3d4
   d5ee0:	2003e448 	.word	0x2003e448
   d5ee4:	2003e348 	.word	0x2003e348
   d5ee8:	2003e460 	.word	0x2003e460
   d5eec:	2003e44c 	.word	0x2003e44c
   d5ef0:	2003e3c0 	.word	0x2003e3c0
   d5ef4:	2003e3d0 	.word	0x2003e3d0

000d5ef8 <_GLOBAL__sub_I_insQueue>:
   d5ef8:	f000 b810 	b.w	d5f1c <HAL_Pin_Map>

000d5efc <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5efc:	b508      	push	{r3, lr}
   d5efe:	4b02      	ldr	r3, [pc, #8]	; (d5f08 <netdb_freeaddrinfo+0xc>)
   d5f00:	681b      	ldr	r3, [r3, #0]
   d5f02:	689b      	ldr	r3, [r3, #8]
   d5f04:	9301      	str	r3, [sp, #4]
   d5f06:	bd08      	pop	{r3, pc}
   d5f08:	00030268 	.word	0x00030268

000d5f0c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5f0c:	b508      	push	{r3, lr}
   d5f0e:	4b02      	ldr	r3, [pc, #8]	; (d5f18 <netdb_getaddrinfo+0xc>)
   d5f10:	681b      	ldr	r3, [r3, #0]
   d5f12:	68db      	ldr	r3, [r3, #12]
   d5f14:	9301      	str	r3, [sp, #4]
   d5f16:	bd08      	pop	{r3, pc}
   d5f18:	00030268 	.word	0x00030268

000d5f1c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d5f1c:	b508      	push	{r3, lr}
   d5f1e:	4b02      	ldr	r3, [pc, #8]	; (d5f28 <HAL_Pin_Map+0xc>)
   d5f20:	681b      	ldr	r3, [r3, #0]
   d5f22:	681b      	ldr	r3, [r3, #0]
   d5f24:	9301      	str	r3, [sp, #4]
   d5f26:	bd08      	pop	{r3, pc}
   d5f28:	0003022c 	.word	0x0003022c

000d5f2c <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5f2c:	b508      	push	{r3, lr}
   d5f2e:	4b02      	ldr	r3, [pc, #8]	; (d5f38 <HAL_Pin_Mode+0xc>)
   d5f30:	681b      	ldr	r3, [r3, #0]
   d5f32:	689b      	ldr	r3, [r3, #8]
   d5f34:	9301      	str	r3, [sp, #4]
   d5f36:	bd08      	pop	{r3, pc}
   d5f38:	0003022c 	.word	0x0003022c

000d5f3c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5f3c:	b508      	push	{r3, lr}
   d5f3e:	4b02      	ldr	r3, [pc, #8]	; (d5f48 <HAL_Get_Pin_Mode+0xc>)
   d5f40:	681b      	ldr	r3, [r3, #0]
   d5f42:	68db      	ldr	r3, [r3, #12]
   d5f44:	9301      	str	r3, [sp, #4]
   d5f46:	bd08      	pop	{r3, pc}
   d5f48:	0003022c 	.word	0x0003022c

000d5f4c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d5f4c:	b508      	push	{r3, lr}
   d5f4e:	4b02      	ldr	r3, [pc, #8]	; (d5f58 <HAL_GPIO_Write+0xc>)
   d5f50:	681b      	ldr	r3, [r3, #0]
   d5f52:	691b      	ldr	r3, [r3, #16]
   d5f54:	9301      	str	r3, [sp, #4]
   d5f56:	bd08      	pop	{r3, pc}
   d5f58:	0003022c 	.word	0x0003022c

000d5f5c <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d5f5c:	b508      	push	{r3, lr}
   d5f5e:	4b02      	ldr	r3, [pc, #8]	; (d5f68 <HAL_SPI_Init+0xc>)
   d5f60:	681b      	ldr	r3, [r3, #0]
   d5f62:	69db      	ldr	r3, [r3, #28]
   d5f64:	9301      	str	r3, [sp, #4]
   d5f66:	bd08      	pop	{r3, pc}
   d5f68:	00030230 	.word	0x00030230

000d5f6c <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d5f6c:	b508      	push	{r3, lr}
   d5f6e:	4b02      	ldr	r3, [pc, #8]	; (d5f78 <HAL_SPI_Is_Enabled+0xc>)
   d5f70:	681b      	ldr	r3, [r3, #0]
   d5f72:	6a1b      	ldr	r3, [r3, #32]
   d5f74:	9301      	str	r3, [sp, #4]
   d5f76:	bd08      	pop	{r3, pc}
   d5f78:	00030230 	.word	0x00030230

000d5f7c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5f7c:	b508      	push	{r3, lr}
   d5f7e:	4b02      	ldr	r3, [pc, #8]	; (d5f88 <HAL_RNG_GetRandomNumber+0xc>)
   d5f80:	681b      	ldr	r3, [r3, #0]
   d5f82:	685b      	ldr	r3, [r3, #4]
   d5f84:	9301      	str	r3, [sp, #4]
   d5f86:	bd08      	pop	{r3, pc}
   d5f88:	00030218 	.word	0x00030218

000d5f8c <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   d5f8c:	b508      	push	{r3, lr}
   d5f8e:	4b02      	ldr	r3, [pc, #8]	; (d5f98 <HAL_Delay_Milliseconds+0xc>)
   d5f90:	681b      	ldr	r3, [r3, #0]
   d5f92:	689b      	ldr	r3, [r3, #8]
   d5f94:	9301      	str	r3, [sp, #4]
   d5f96:	bd08      	pop	{r3, pc}
   d5f98:	00030218 	.word	0x00030218

000d5f9c <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d5f9c:	b508      	push	{r3, lr}
   d5f9e:	4b02      	ldr	r3, [pc, #8]	; (d5fa8 <HAL_Delay_Microseconds+0xc>)
   d5fa0:	681b      	ldr	r3, [r3, #0]
   d5fa2:	68db      	ldr	r3, [r3, #12]
   d5fa4:	9301      	str	r3, [sp, #4]
   d5fa6:	bd08      	pop	{r3, pc}
   d5fa8:	00030218 	.word	0x00030218

000d5fac <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5fac:	b508      	push	{r3, lr}
   d5fae:	4b02      	ldr	r3, [pc, #8]	; (d5fb8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5fb0:	681b      	ldr	r3, [r3, #0]
   d5fb2:	695b      	ldr	r3, [r3, #20]
   d5fb4:	9301      	str	r3, [sp, #4]
   d5fb6:	bd08      	pop	{r3, pc}
   d5fb8:	00030218 	.word	0x00030218

000d5fbc <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
DYNALIB_FN(BASE_IDX + 7, hal, HAL_RTC_Set_UnixAlarm, void(time_t))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   d5fbc:	b508      	push	{r3, lr}
   d5fbe:	4b02      	ldr	r3, [pc, #8]	; (d5fc8 <HAL_EEPROM_Init+0xc>)
   d5fc0:	681b      	ldr	r3, [r3, #0]
   d5fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5fc4:	9301      	str	r3, [sp, #4]
   d5fc6:	bd08      	pop	{r3, pc}
   d5fc8:	00030218 	.word	0x00030218

000d5fcc <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, HAL_RTC_Cancel_UnixAlarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
   d5fcc:	b508      	push	{r3, lr}
   d5fce:	4b02      	ldr	r3, [pc, #8]	; (d5fd8 <HAL_EEPROM_Get+0xc>)
   d5fd0:	681b      	ldr	r3, [r3, #0]
   d5fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5fd4:	9301      	str	r3, [sp, #4]
   d5fd6:	bd08      	pop	{r3, pc}
   d5fd8:	00030218 	.word	0x00030218

000d5fdc <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   d5fdc:	b508      	push	{r3, lr}
   d5fde:	4b02      	ldr	r3, [pc, #8]	; (d5fe8 <HAL_EEPROM_Put+0xc>)
   d5fe0:	681b      	ldr	r3, [r3, #0]
   d5fe2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5fe4:	9301      	str	r3, [sp, #4]
   d5fe6:	bd08      	pop	{r3, pc}
   d5fe8:	00030218 	.word	0x00030218

000d5fec <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   d5fec:	b508      	push	{r3, lr}
   d5fee:	4b02      	ldr	r3, [pc, #8]	; (d5ff8 <HAL_Feature_Set+0xc>)
   d5ff0:	681b      	ldr	r3, [r3, #0]
   d5ff2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d5ff4:	9301      	str	r3, [sp, #4]
   d5ff6:	bd08      	pop	{r3, pc}
   d5ff8:	00030234 	.word	0x00030234

000d5ffc <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
   d5ffc:	b508      	push	{r3, lr}
   d5ffe:	4b02      	ldr	r3, [pc, #8]	; (d6008 <HAL_Core_Get_Last_Reset_Info+0xc>)
   d6000:	681b      	ldr	r3, [r3, #0]
   d6002:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d6004:	9301      	str	r3, [sp, #4]
   d6006:	bd08      	pop	{r3, pc}
   d6008:	00030234 	.word	0x00030234

000d600c <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d600c:	b508      	push	{r3, lr}
   d600e:	4b02      	ldr	r3, [pc, #8]	; (d6018 <hal_ble_stack_init+0xc>)
   d6010:	681b      	ldr	r3, [r3, #0]
   d6012:	689b      	ldr	r3, [r3, #8]
   d6014:	9301      	str	r3, [sp, #4]
   d6016:	bd08      	pop	{r3, pc}
   d6018:	00030278 	.word	0x00030278

000d601c <hal_ble_select_antenna>:
DYNALIB_FN(3, hal_ble, hal_ble_stack_deinit, int(void*))
DYNALIB_FN(4, hal_ble, hal_ble_select_antenna, int(hal_ble_ant_type_t, void*))
   d601c:	b508      	push	{r3, lr}
   d601e:	4b02      	ldr	r3, [pc, #8]	; (d6028 <hal_ble_select_antenna+0xc>)
   d6020:	681b      	ldr	r3, [r3, #0]
   d6022:	691b      	ldr	r3, [r3, #16]
   d6024:	9301      	str	r3, [sp, #4]
   d6026:	bd08      	pop	{r3, pc}
   d6028:	00030278 	.word	0x00030278

000d602c <hal_ble_gap_set_scan_parameters>:
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
DYNALIB_FN(25, hal_ble, hal_ble_gap_set_auto_advertise, int(hal_ble_auto_adv_cfg_t, void*))
DYNALIB_FN(26, hal_ble, hal_ble_gap_get_auto_advertise, int(hal_ble_auto_adv_cfg_t*, void*))
DYNALIB_FN(27, hal_ble, hal_ble_gap_stop_advertising, int(void*))
DYNALIB_FN(28, hal_ble, hal_ble_gap_is_advertising, bool(void*))
DYNALIB_FN(29, hal_ble, hal_ble_gap_set_scan_parameters, int(const hal_ble_scan_params_t*, void*))
   d602c:	b508      	push	{r3, lr}
   d602e:	4b02      	ldr	r3, [pc, #8]	; (d6038 <hal_ble_gap_set_scan_parameters+0xc>)
   d6030:	681b      	ldr	r3, [r3, #0]
   d6032:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   d6034:	9301      	str	r3, [sp, #4]
   d6036:	bd08      	pop	{r3, pc}
   d6038:	00030278 	.word	0x00030278

000d603c <hal_ble_gap_get_scan_parameters>:
DYNALIB_FN(30, hal_ble, hal_ble_gap_get_scan_parameters, int(hal_ble_scan_params_t*, void*))
   d603c:	b508      	push	{r3, lr}
   d603e:	4b02      	ldr	r3, [pc, #8]	; (d6048 <hal_ble_gap_get_scan_parameters+0xc>)
   d6040:	681b      	ldr	r3, [r3, #0]
   d6042:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d6044:	9301      	str	r3, [sp, #4]
   d6046:	bd08      	pop	{r3, pc}
   d6048:	00030278 	.word	0x00030278

000d604c <hal_ble_gap_start_scan>:
DYNALIB_FN(31, hal_ble, hal_ble_gap_start_scan, int(hal_ble_on_scan_result_cb_t, void*, void*))
   d604c:	b508      	push	{r3, lr}
   d604e:	4b02      	ldr	r3, [pc, #8]	; (d6058 <hal_ble_gap_start_scan+0xc>)
   d6050:	681b      	ldr	r3, [r3, #0]
   d6052:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d6054:	9301      	str	r3, [sp, #4]
   d6056:	bd08      	pop	{r3, pc}
   d6058:	00030278 	.word	0x00030278

000d605c <hal_ble_gap_stop_scan>:
DYNALIB_FN(32, hal_ble, hal_ble_gap_is_scanning, bool(void*))
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
   d605c:	b508      	push	{r3, lr}
   d605e:	4b03      	ldr	r3, [pc, #12]	; (d606c <hal_ble_gap_stop_scan+0x10>)
   d6060:	681b      	ldr	r3, [r3, #0]
   d6062:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   d6066:	9301      	str	r3, [sp, #4]
   d6068:	bd08      	pop	{r3, pc}
   d606a:	0000      	.short	0x0000
   d606c:	00030278 	.word	0x00030278

000d6070 <hal_ble_gap_disconnect>:
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   d6070:	b508      	push	{r3, lr}
   d6072:	4b03      	ldr	r3, [pc, #12]	; (d6080 <hal_ble_gap_disconnect+0x10>)
   d6074:	681b      	ldr	r3, [r3, #0]
   d6076:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d607a:	9301      	str	r3, [sp, #4]
   d607c:	bd08      	pop	{r3, pc}
   d607e:	0000      	.short	0x0000
   d6080:	00030278 	.word	0x00030278

000d6084 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   d6084:	b508      	push	{r3, lr}
   d6086:	4b03      	ldr	r3, [pc, #12]	; (d6094 <hal_ble_set_callback_on_periph_link_events+0x10>)
   d6088:	681b      	ldr	r3, [r3, #0]
   d608a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   d608e:	9301      	str	r3, [sp, #4]
   d6090:	bd08      	pop	{r3, pc}
   d6092:	0000      	.short	0x0000
   d6094:	00030278 	.word	0x00030278

000d6098 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   d6098:	b508      	push	{r3, lr}
   d609a:	4b02      	ldr	r3, [pc, #8]	; (d60a4 <os_thread_create+0xc>)
   d609c:	681b      	ldr	r3, [r3, #0]
   d609e:	685b      	ldr	r3, [r3, #4]
   d60a0:	9301      	str	r3, [sp, #4]
   d60a2:	bd08      	pop	{r3, pc}
   d60a4:	00030248 	.word	0x00030248

000d60a8 <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d60a8:	b508      	push	{r3, lr}
   d60aa:	4b02      	ldr	r3, [pc, #8]	; (d60b4 <os_thread_is_current+0xc>)
   d60ac:	681b      	ldr	r3, [r3, #0]
   d60ae:	689b      	ldr	r3, [r3, #8]
   d60b0:	9301      	str	r3, [sp, #4]
   d60b2:	bd08      	pop	{r3, pc}
   d60b4:	00030248 	.word	0x00030248

000d60b8 <os_thread_yield>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d60b8:	b508      	push	{r3, lr}
   d60ba:	4b02      	ldr	r3, [pc, #8]	; (d60c4 <os_thread_yield+0xc>)
   d60bc:	681b      	ldr	r3, [r3, #0]
   d60be:	68db      	ldr	r3, [r3, #12]
   d60c0:	9301      	str	r3, [sp, #4]
   d60c2:	bd08      	pop	{r3, pc}
   d60c4:	00030248 	.word	0x00030248

000d60c8 <os_thread_join>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d60c8:	b508      	push	{r3, lr}
   d60ca:	4b02      	ldr	r3, [pc, #8]	; (d60d4 <os_thread_join+0xc>)
   d60cc:	681b      	ldr	r3, [r3, #0]
   d60ce:	691b      	ldr	r3, [r3, #16]
   d60d0:	9301      	str	r3, [sp, #4]
   d60d2:	bd08      	pop	{r3, pc}
   d60d4:	00030248 	.word	0x00030248

000d60d8 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d60d8:	b508      	push	{r3, lr}
   d60da:	4b02      	ldr	r3, [pc, #8]	; (d60e4 <os_thread_cleanup+0xc>)
   d60dc:	681b      	ldr	r3, [r3, #0]
   d60de:	695b      	ldr	r3, [r3, #20]
   d60e0:	9301      	str	r3, [sp, #4]
   d60e2:	bd08      	pop	{r3, pc}
   d60e4:	00030248 	.word	0x00030248

000d60e8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d60e8:	b508      	push	{r3, lr}
   d60ea:	4b02      	ldr	r3, [pc, #8]	; (d60f4 <os_mutex_recursive_create+0xc>)
   d60ec:	681b      	ldr	r3, [r3, #0]
   d60ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d60f0:	9301      	str	r3, [sp, #4]
   d60f2:	bd08      	pop	{r3, pc}
   d60f4:	00030248 	.word	0x00030248

000d60f8 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d60f8:	b508      	push	{r3, lr}
   d60fa:	4b02      	ldr	r3, [pc, #8]	; (d6104 <os_mutex_recursive_destroy+0xc>)
   d60fc:	681b      	ldr	r3, [r3, #0]
   d60fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6100:	9301      	str	r3, [sp, #4]
   d6102:	bd08      	pop	{r3, pc}
   d6104:	00030248 	.word	0x00030248

000d6108 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d6108:	b508      	push	{r3, lr}
   d610a:	4b02      	ldr	r3, [pc, #8]	; (d6114 <os_mutex_recursive_lock+0xc>)
   d610c:	681b      	ldr	r3, [r3, #0]
   d610e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d6110:	9301      	str	r3, [sp, #4]
   d6112:	bd08      	pop	{r3, pc}
   d6114:	00030248 	.word	0x00030248

000d6118 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d6118:	b508      	push	{r3, lr}
   d611a:	4b02      	ldr	r3, [pc, #8]	; (d6124 <os_mutex_recursive_unlock+0xc>)
   d611c:	681b      	ldr	r3, [r3, #0]
   d611e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d6120:	9301      	str	r3, [sp, #4]
   d6122:	bd08      	pop	{r3, pc}
   d6124:	00030248 	.word	0x00030248

000d6128 <os_queue_create>:

DYNALIB_FN(22, hal_concurrent, os_timer_is_active, int(os_timer_t, void*))

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
   d6128:	b508      	push	{r3, lr}
   d612a:	4b02      	ldr	r3, [pc, #8]	; (d6134 <os_queue_create+0xc>)
   d612c:	681b      	ldr	r3, [r3, #0]
   d612e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d6130:	9301      	str	r3, [sp, #4]
   d6132:	bd08      	pop	{r3, pc}
   d6134:	00030248 	.word	0x00030248

000d6138 <os_queue_put>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
   d6138:	b508      	push	{r3, lr}
   d613a:	4b02      	ldr	r3, [pc, #8]	; (d6144 <os_queue_put+0xc>)
   d613c:	681b      	ldr	r3, [r3, #0]
   d613e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d6140:	9301      	str	r3, [sp, #4]
   d6142:	bd08      	pop	{r3, pc}
   d6144:	00030248 	.word	0x00030248

000d6148 <os_queue_take>:
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
   d6148:	b508      	push	{r3, lr}
   d614a:	4b02      	ldr	r3, [pc, #8]	; (d6154 <os_queue_take+0xc>)
   d614c:	681b      	ldr	r3, [r3, #0]
   d614e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d6150:	9301      	str	r3, [sp, #4]
   d6152:	bd08      	pop	{r3, pc}
   d6154:	00030248 	.word	0x00030248

000d6158 <os_thread_exit>:
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   d6158:	b508      	push	{r3, lr}
   d615a:	4b02      	ldr	r3, [pc, #8]	; (d6164 <os_thread_exit+0xc>)
   d615c:	681b      	ldr	r3, [r3, #0]
   d615e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d6160:	9301      	str	r3, [sp, #4]
   d6162:	bd08      	pop	{r3, pc}
   d6164:	00030248 	.word	0x00030248

000d6168 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d6168:	b508      	push	{r3, lr}
   d616a:	4b02      	ldr	r3, [pc, #8]	; (d6174 <inet_inet_ntop+0xc>)
   d616c:	681b      	ldr	r3, [r3, #0]
   d616e:	695b      	ldr	r3, [r3, #20]
   d6170:	9301      	str	r3, [sp, #4]
   d6172:	bd08      	pop	{r3, pc}
   d6174:	00030264 	.word	0x00030264

000d6178 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d6178:	b508      	push	{r3, lr}
   d617a:	4b02      	ldr	r3, [pc, #8]	; (d6184 <HAL_USART_Init+0xc>)
   d617c:	681b      	ldr	r3, [r3, #0]
   d617e:	681b      	ldr	r3, [r3, #0]
   d6180:	9301      	str	r3, [sp, #4]
   d6182:	bd08      	pop	{r3, pc}
   d6184:	0003023c 	.word	0x0003023c

000d6188 <HAL_USART_End>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
   d6188:	b508      	push	{r3, lr}
   d618a:	4b02      	ldr	r3, [pc, #8]	; (d6194 <HAL_USART_End+0xc>)
   d618c:	681b      	ldr	r3, [r3, #0]
   d618e:	689b      	ldr	r3, [r3, #8]
   d6190:	9301      	str	r3, [sp, #4]
   d6192:	bd08      	pop	{r3, pc}
   d6194:	0003023c 	.word	0x0003023c

000d6198 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d6198:	b508      	push	{r3, lr}
   d619a:	4b02      	ldr	r3, [pc, #8]	; (d61a4 <HAL_USART_Write_Data+0xc>)
   d619c:	681b      	ldr	r3, [r3, #0]
   d619e:	68db      	ldr	r3, [r3, #12]
   d61a0:	9301      	str	r3, [sp, #4]
   d61a2:	bd08      	pop	{r3, pc}
   d61a4:	0003023c 	.word	0x0003023c

000d61a8 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d61a8:	b508      	push	{r3, lr}
   d61aa:	4b02      	ldr	r3, [pc, #8]	; (d61b4 <HAL_USART_Available_Data+0xc>)
   d61ac:	681b      	ldr	r3, [r3, #0]
   d61ae:	691b      	ldr	r3, [r3, #16]
   d61b0:	9301      	str	r3, [sp, #4]
   d61b2:	bd08      	pop	{r3, pc}
   d61b4:	0003023c 	.word	0x0003023c

000d61b8 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d61b8:	b508      	push	{r3, lr}
   d61ba:	4b02      	ldr	r3, [pc, #8]	; (d61c4 <HAL_USART_Read_Data+0xc>)
   d61bc:	681b      	ldr	r3, [r3, #0]
   d61be:	695b      	ldr	r3, [r3, #20]
   d61c0:	9301      	str	r3, [sp, #4]
   d61c2:	bd08      	pop	{r3, pc}
   d61c4:	0003023c 	.word	0x0003023c

000d61c8 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d61c8:	b508      	push	{r3, lr}
   d61ca:	4b02      	ldr	r3, [pc, #8]	; (d61d4 <HAL_USART_Peek_Data+0xc>)
   d61cc:	681b      	ldr	r3, [r3, #0]
   d61ce:	699b      	ldr	r3, [r3, #24]
   d61d0:	9301      	str	r3, [sp, #4]
   d61d2:	bd08      	pop	{r3, pc}
   d61d4:	0003023c 	.word	0x0003023c

000d61d8 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d61d8:	b508      	push	{r3, lr}
   d61da:	4b02      	ldr	r3, [pc, #8]	; (d61e4 <HAL_USART_Flush_Data+0xc>)
   d61dc:	681b      	ldr	r3, [r3, #0]
   d61de:	69db      	ldr	r3, [r3, #28]
   d61e0:	9301      	str	r3, [sp, #4]
   d61e2:	bd08      	pop	{r3, pc}
   d61e4:	0003023c 	.word	0x0003023c

000d61e8 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d61e8:	b508      	push	{r3, lr}
   d61ea:	4b02      	ldr	r3, [pc, #8]	; (d61f4 <HAL_USART_Is_Enabled+0xc>)
   d61ec:	681b      	ldr	r3, [r3, #0]
   d61ee:	6a1b      	ldr	r3, [r3, #32]
   d61f0:	9301      	str	r3, [sp, #4]
   d61f2:	bd08      	pop	{r3, pc}
   d61f4:	0003023c 	.word	0x0003023c

000d61f8 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d61f8:	b508      	push	{r3, lr}
   d61fa:	4b02      	ldr	r3, [pc, #8]	; (d6204 <HAL_USART_Available_Data_For_Write+0xc>)
   d61fc:	681b      	ldr	r3, [r3, #0]
   d61fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6200:	9301      	str	r3, [sp, #4]
   d6202:	bd08      	pop	{r3, pc}
   d6204:	0003023c 	.word	0x0003023c

000d6208 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   d6208:	b508      	push	{r3, lr}
   d620a:	4b02      	ldr	r3, [pc, #8]	; (d6214 <HAL_USART_BeginConfig+0xc>)
   d620c:	681b      	ldr	r3, [r3, #0]
   d620e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6210:	9301      	str	r3, [sp, #4]
   d6212:	bd08      	pop	{r3, pc}
   d6214:	0003023c 	.word	0x0003023c

000d6218 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d6218:	b508      	push	{r3, lr}
   d621a:	4b02      	ldr	r3, [pc, #8]	; (d6224 <HAL_I2C_Write_Data+0xc>)
   d621c:	681b      	ldr	r3, [r3, #0]
   d621e:	6a1b      	ldr	r3, [r3, #32]
   d6220:	9301      	str	r3, [sp, #4]
   d6222:	bd08      	pop	{r3, pc}
   d6224:	00030228 	.word	0x00030228

000d6228 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d6228:	b508      	push	{r3, lr}
   d622a:	4b02      	ldr	r3, [pc, #8]	; (d6234 <HAL_I2C_Available_Data+0xc>)
   d622c:	681b      	ldr	r3, [r3, #0]
   d622e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6230:	9301      	str	r3, [sp, #4]
   d6232:	bd08      	pop	{r3, pc}
   d6234:	00030228 	.word	0x00030228

000d6238 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d6238:	b508      	push	{r3, lr}
   d623a:	4b02      	ldr	r3, [pc, #8]	; (d6244 <HAL_I2C_Read_Data+0xc>)
   d623c:	681b      	ldr	r3, [r3, #0]
   d623e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6240:	9301      	str	r3, [sp, #4]
   d6242:	bd08      	pop	{r3, pc}
   d6244:	00030228 	.word	0x00030228

000d6248 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d6248:	b508      	push	{r3, lr}
   d624a:	4b02      	ldr	r3, [pc, #8]	; (d6254 <HAL_I2C_Peek_Data+0xc>)
   d624c:	681b      	ldr	r3, [r3, #0]
   d624e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6250:	9301      	str	r3, [sp, #4]
   d6252:	bd08      	pop	{r3, pc}
   d6254:	00030228 	.word	0x00030228

000d6258 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d6258:	b508      	push	{r3, lr}
   d625a:	4b02      	ldr	r3, [pc, #8]	; (d6264 <HAL_I2C_Flush_Data+0xc>)
   d625c:	681b      	ldr	r3, [r3, #0]
   d625e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6260:	9301      	str	r3, [sp, #4]
   d6262:	bd08      	pop	{r3, pc}
   d6264:	00030228 	.word	0x00030228

000d6268 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d6268:	b508      	push	{r3, lr}
   d626a:	4b02      	ldr	r3, [pc, #8]	; (d6274 <HAL_I2C_Is_Enabled+0xc>)
   d626c:	681b      	ldr	r3, [r3, #0]
   d626e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6270:	9301      	str	r3, [sp, #4]
   d6272:	bd08      	pop	{r3, pc}
   d6274:	00030228 	.word	0x00030228

000d6278 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d6278:	b508      	push	{r3, lr}
   d627a:	4b02      	ldr	r3, [pc, #8]	; (d6284 <HAL_I2C_Init+0xc>)
   d627c:	681b      	ldr	r3, [r3, #0]
   d627e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6280:	9301      	str	r3, [sp, #4]
   d6282:	bd08      	pop	{r3, pc}
   d6284:	00030228 	.word	0x00030228

000d6288 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d6288:	b508      	push	{r3, lr}
   d628a:	4b02      	ldr	r3, [pc, #8]	; (d6294 <HAL_USB_USART_Init+0xc>)
   d628c:	681b      	ldr	r3, [r3, #0]
   d628e:	681b      	ldr	r3, [r3, #0]
   d6290:	9301      	str	r3, [sp, #4]
   d6292:	bd08      	pop	{r3, pc}
   d6294:	0003024c 	.word	0x0003024c

000d6298 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d6298:	b508      	push	{r3, lr}
   d629a:	4b02      	ldr	r3, [pc, #8]	; (d62a4 <HAL_USB_USART_Begin+0xc>)
   d629c:	681b      	ldr	r3, [r3, #0]
   d629e:	685b      	ldr	r3, [r3, #4]
   d62a0:	9301      	str	r3, [sp, #4]
   d62a2:	bd08      	pop	{r3, pc}
   d62a4:	0003024c 	.word	0x0003024c

000d62a8 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   d62a8:	b508      	push	{r3, lr}
   d62aa:	4b02      	ldr	r3, [pc, #8]	; (d62b4 <HAL_USB_USART_End+0xc>)
   d62ac:	681b      	ldr	r3, [r3, #0]
   d62ae:	689b      	ldr	r3, [r3, #8]
   d62b0:	9301      	str	r3, [sp, #4]
   d62b2:	bd08      	pop	{r3, pc}
   d62b4:	0003024c 	.word	0x0003024c

000d62b8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d62b8:	b508      	push	{r3, lr}
   d62ba:	4b02      	ldr	r3, [pc, #8]	; (d62c4 <HAL_USB_USART_Available_Data+0xc>)
   d62bc:	681b      	ldr	r3, [r3, #0]
   d62be:	691b      	ldr	r3, [r3, #16]
   d62c0:	9301      	str	r3, [sp, #4]
   d62c2:	bd08      	pop	{r3, pc}
   d62c4:	0003024c 	.word	0x0003024c

000d62c8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d62c8:	b508      	push	{r3, lr}
   d62ca:	4b02      	ldr	r3, [pc, #8]	; (d62d4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d62cc:	681b      	ldr	r3, [r3, #0]
   d62ce:	695b      	ldr	r3, [r3, #20]
   d62d0:	9301      	str	r3, [sp, #4]
   d62d2:	bd08      	pop	{r3, pc}
   d62d4:	0003024c 	.word	0x0003024c

000d62d8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d62d8:	b508      	push	{r3, lr}
   d62da:	4b02      	ldr	r3, [pc, #8]	; (d62e4 <HAL_USB_USART_Receive_Data+0xc>)
   d62dc:	681b      	ldr	r3, [r3, #0]
   d62de:	699b      	ldr	r3, [r3, #24]
   d62e0:	9301      	str	r3, [sp, #4]
   d62e2:	bd08      	pop	{r3, pc}
   d62e4:	0003024c 	.word	0x0003024c

000d62e8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d62e8:	b508      	push	{r3, lr}
   d62ea:	4b02      	ldr	r3, [pc, #8]	; (d62f4 <HAL_USB_USART_Send_Data+0xc>)
   d62ec:	681b      	ldr	r3, [r3, #0]
   d62ee:	69db      	ldr	r3, [r3, #28]
   d62f0:	9301      	str	r3, [sp, #4]
   d62f2:	bd08      	pop	{r3, pc}
   d62f4:	0003024c 	.word	0x0003024c

000d62f8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d62f8:	b508      	push	{r3, lr}
   d62fa:	4b02      	ldr	r3, [pc, #8]	; (d6304 <HAL_USB_USART_Flush_Data+0xc>)
   d62fc:	681b      	ldr	r3, [r3, #0]
   d62fe:	6a1b      	ldr	r3, [r3, #32]
   d6300:	9301      	str	r3, [sp, #4]
   d6302:	bd08      	pop	{r3, pc}
   d6304:	0003024c 	.word	0x0003024c

000d6308 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d6308:	b508      	push	{r3, lr}
   d630a:	4b02      	ldr	r3, [pc, #8]	; (d6314 <panic_+0xc>)
   d630c:	681b      	ldr	r3, [r3, #0]
   d630e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6310:	9301      	str	r3, [sp, #4]
   d6312:	bd08      	pop	{r3, pc}
   d6314:	00030260 	.word	0x00030260

000d6318 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d6318:	b508      	push	{r3, lr}
   d631a:	4b02      	ldr	r3, [pc, #8]	; (d6324 <log_message+0xc>)
   d631c:	681b      	ldr	r3, [r3, #0]
   d631e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d6320:	9301      	str	r3, [sp, #4]
   d6322:	bd08      	pop	{r3, pc}
   d6324:	00030260 	.word	0x00030260

000d6328 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d6328:	b508      	push	{r3, lr}
   d632a:	4b02      	ldr	r3, [pc, #8]	; (d6334 <log_message_v+0xc>)
   d632c:	681b      	ldr	r3, [r3, #0]
   d632e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d6330:	9301      	str	r3, [sp, #4]
   d6332:	bd08      	pop	{r3, pc}
   d6334:	00030260 	.word	0x00030260

000d6338 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   d6338:	b508      	push	{r3, lr}
   d633a:	4b02      	ldr	r3, [pc, #8]	; (d6344 <log_level_name+0xc>)
   d633c:	681b      	ldr	r3, [r3, #0]
   d633e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d6340:	9301      	str	r3, [sp, #4]
   d6342:	bd08      	pop	{r3, pc}
   d6344:	00030260 	.word	0x00030260

000d6348 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   d6348:	b508      	push	{r3, lr}
   d634a:	4b02      	ldr	r3, [pc, #8]	; (d6354 <log_set_callbacks+0xc>)
   d634c:	681b      	ldr	r3, [r3, #0]
   d634e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d6350:	9301      	str	r3, [sp, #4]
   d6352:	bd08      	pop	{r3, pc}
   d6354:	00030260 	.word	0x00030260

000d6358 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d6358:	b508      	push	{r3, lr}
   d635a:	4b02      	ldr	r3, [pc, #8]	; (d6364 <set_system_mode+0xc>)
   d635c:	681b      	ldr	r3, [r3, #0]
   d635e:	685b      	ldr	r3, [r3, #4]
   d6360:	9301      	str	r3, [sp, #4]
   d6362:	bd08      	pop	{r3, pc}
   d6364:	00030220 	.word	0x00030220

000d6368 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d6368:	b508      	push	{r3, lr}
   d636a:	4b02      	ldr	r3, [pc, #8]	; (d6374 <system_delay_ms+0xc>)
   d636c:	681b      	ldr	r3, [r3, #0]
   d636e:	695b      	ldr	r3, [r3, #20]
   d6370:	9301      	str	r3, [sp, #4]
   d6372:	bd08      	pop	{r3, pc}
   d6374:	00030220 	.word	0x00030220

000d6378 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d6378:	b508      	push	{r3, lr}
   d637a:	4b02      	ldr	r3, [pc, #8]	; (d6384 <system_thread_set_state+0xc>)
   d637c:	681b      	ldr	r3, [r3, #0]
   d637e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6380:	9301      	str	r3, [sp, #4]
   d6382:	bd08      	pop	{r3, pc}
   d6384:	00030220 	.word	0x00030220

000d6388 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d6388:	b508      	push	{r3, lr}
   d638a:	4b02      	ldr	r3, [pc, #8]	; (d6394 <application_thread_current+0xc>)
   d638c:	681b      	ldr	r3, [r3, #0]
   d638e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d6390:	9301      	str	r3, [sp, #4]
   d6392:	bd08      	pop	{r3, pc}
   d6394:	00030220 	.word	0x00030220

000d6398 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d6398:	b508      	push	{r3, lr}
   d639a:	4b02      	ldr	r3, [pc, #8]	; (d63a4 <application_thread_invoke+0xc>)
   d639c:	681b      	ldr	r3, [r3, #0]
   d639e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d63a0:	9301      	str	r3, [sp, #4]
   d63a2:	bd08      	pop	{r3, pc}
   d63a4:	00030220 	.word	0x00030220

000d63a8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d63a8:	b508      	push	{r3, lr}
   d63aa:	4b03      	ldr	r3, [pc, #12]	; (d63b8 <system_ctrl_set_app_request_handler+0x10>)
   d63ac:	681b      	ldr	r3, [r3, #0]
   d63ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d63b2:	9301      	str	r3, [sp, #4]
   d63b4:	bd08      	pop	{r3, pc}
   d63b6:	0000      	.short	0x0000
   d63b8:	00030220 	.word	0x00030220

000d63bc <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d63bc:	b508      	push	{r3, lr}
   d63be:	4b03      	ldr	r3, [pc, #12]	; (d63cc <system_ctrl_set_result+0x10>)
   d63c0:	681b      	ldr	r3, [r3, #0]
   d63c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d63c6:	9301      	str	r3, [sp, #4]
   d63c8:	bd08      	pop	{r3, pc}
   d63ca:	0000      	.short	0x0000
   d63cc:	00030220 	.word	0x00030220

000d63d0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d63d0:	b508      	push	{r3, lr}
   d63d2:	4b02      	ldr	r3, [pc, #8]	; (d63dc <network_connect+0xc>)
   d63d4:	681b      	ldr	r3, [r3, #0]
   d63d6:	685b      	ldr	r3, [r3, #4]
   d63d8:	9301      	str	r3, [sp, #4]
   d63da:	bd08      	pop	{r3, pc}
   d63dc:	00030240 	.word	0x00030240

000d63e0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d63e0:	b508      	push	{r3, lr}
   d63e2:	4b02      	ldr	r3, [pc, #8]	; (d63ec <network_connecting+0xc>)
   d63e4:	681b      	ldr	r3, [r3, #0]
   d63e6:	689b      	ldr	r3, [r3, #8]
   d63e8:	9301      	str	r3, [sp, #4]
   d63ea:	bd08      	pop	{r3, pc}
   d63ec:	00030240 	.word	0x00030240

000d63f0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d63f0:	b508      	push	{r3, lr}
   d63f2:	4b02      	ldr	r3, [pc, #8]	; (d63fc <network_disconnect+0xc>)
   d63f4:	681b      	ldr	r3, [r3, #0]
   d63f6:	68db      	ldr	r3, [r3, #12]
   d63f8:	9301      	str	r3, [sp, #4]
   d63fa:	bd08      	pop	{r3, pc}
   d63fc:	00030240 	.word	0x00030240

000d6400 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d6400:	b508      	push	{r3, lr}
   d6402:	4b02      	ldr	r3, [pc, #8]	; (d640c <network_ready+0xc>)
   d6404:	681b      	ldr	r3, [r3, #0]
   d6406:	691b      	ldr	r3, [r3, #16]
   d6408:	9301      	str	r3, [sp, #4]
   d640a:	bd08      	pop	{r3, pc}
   d640c:	00030240 	.word	0x00030240

000d6410 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d6410:	b508      	push	{r3, lr}
   d6412:	4b02      	ldr	r3, [pc, #8]	; (d641c <network_on+0xc>)
   d6414:	681b      	ldr	r3, [r3, #0]
   d6416:	695b      	ldr	r3, [r3, #20]
   d6418:	9301      	str	r3, [sp, #4]
   d641a:	bd08      	pop	{r3, pc}
   d641c:	00030240 	.word	0x00030240

000d6420 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d6420:	b508      	push	{r3, lr}
   d6422:	4b02      	ldr	r3, [pc, #8]	; (d642c <network_off+0xc>)
   d6424:	681b      	ldr	r3, [r3, #0]
   d6426:	699b      	ldr	r3, [r3, #24]
   d6428:	9301      	str	r3, [sp, #4]
   d642a:	bd08      	pop	{r3, pc}
   d642c:	00030240 	.word	0x00030240

000d6430 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d6430:	b508      	push	{r3, lr}
   d6432:	4b02      	ldr	r3, [pc, #8]	; (d643c <network_listen+0xc>)
   d6434:	681b      	ldr	r3, [r3, #0]
   d6436:	69db      	ldr	r3, [r3, #28]
   d6438:	9301      	str	r3, [sp, #4]
   d643a:	bd08      	pop	{r3, pc}
   d643c:	00030240 	.word	0x00030240

000d6440 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d6440:	b508      	push	{r3, lr}
   d6442:	4b02      	ldr	r3, [pc, #8]	; (d644c <network_listening+0xc>)
   d6444:	681b      	ldr	r3, [r3, #0]
   d6446:	6a1b      	ldr	r3, [r3, #32]
   d6448:	9301      	str	r3, [sp, #4]
   d644a:	bd08      	pop	{r3, pc}
   d644c:	00030240 	.word	0x00030240

000d6450 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d6450:	b508      	push	{r3, lr}
   d6452:	4b02      	ldr	r3, [pc, #8]	; (d645c <network_set_listen_timeout+0xc>)
   d6454:	681b      	ldr	r3, [r3, #0]
   d6456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6458:	9301      	str	r3, [sp, #4]
   d645a:	bd08      	pop	{r3, pc}
   d645c:	00030240 	.word	0x00030240

000d6460 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d6460:	b508      	push	{r3, lr}
   d6462:	4b02      	ldr	r3, [pc, #8]	; (d646c <network_get_listen_timeout+0xc>)
   d6464:	681b      	ldr	r3, [r3, #0]
   d6466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6468:	9301      	str	r3, [sp, #4]
   d646a:	bd08      	pop	{r3, pc}
   d646c:	00030240 	.word	0x00030240

000d6470 <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d6470:	b508      	push	{r3, lr}
   d6472:	4b02      	ldr	r3, [pc, #8]	; (d647c <spark_function+0xc>)
   d6474:	681b      	ldr	r3, [r3, #0]
   d6476:	685b      	ldr	r3, [r3, #4]
   d6478:	9301      	str	r3, [sp, #4]
   d647a:	bd08      	pop	{r3, pc}
   d647c:	00030244 	.word	0x00030244

000d6480 <spark_cloud_flag_connected>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d6480:	b508      	push	{r3, lr}
   d6482:	4b02      	ldr	r3, [pc, #8]	; (d648c <spark_cloud_flag_connected+0xc>)
   d6484:	681b      	ldr	r3, [r3, #0]
   d6486:	695b      	ldr	r3, [r3, #20]
   d6488:	9301      	str	r3, [sp, #4]
   d648a:	bd08      	pop	{r3, pc}
   d648c:	00030244 	.word	0x00030244

000d6490 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d6490:	b508      	push	{r3, lr}
   d6492:	4b02      	ldr	r3, [pc, #8]	; (d649c <spark_send_event+0xc>)
   d6494:	681b      	ldr	r3, [r3, #0]
   d6496:	6a1b      	ldr	r3, [r3, #32]
   d6498:	9301      	str	r3, [sp, #4]
   d649a:	bd08      	pop	{r3, pc}
   d649c:	00030244 	.word	0x00030244

000d64a0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d64a0:	b508      	push	{r3, lr}
   d64a2:	4b02      	ldr	r3, [pc, #8]	; (d64ac <spark_set_random_seed_from_cloud_handler+0xc>)
   d64a4:	681b      	ldr	r3, [r3, #0]
   d64a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d64a8:	9301      	str	r3, [sp, #4]
   d64aa:	bd08      	pop	{r3, pc}
   d64ac:	00030244 	.word	0x00030244

000d64b0 <spark_publish_vitals>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
   d64b0:	b508      	push	{r3, lr}
   d64b2:	4b02      	ldr	r3, [pc, #8]	; (d64bc <spark_publish_vitals+0xc>)
   d64b4:	681b      	ldr	r3, [r3, #0]
   d64b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d64b8:	9301      	str	r3, [sp, #4]
   d64ba:	bd08      	pop	{r3, pc}
   d64bc:	00030244 	.word	0x00030244

000d64c0 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d64c0:	b508      	push	{r3, lr}
   d64c2:	4b02      	ldr	r3, [pc, #8]	; (d64cc <malloc+0xc>)
   d64c4:	681b      	ldr	r3, [r3, #0]
   d64c6:	681b      	ldr	r3, [r3, #0]
   d64c8:	9301      	str	r3, [sp, #4]
   d64ca:	bd08      	pop	{r3, pc}
   d64cc:	0003021c 	.word	0x0003021c

000d64d0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d64d0:	b508      	push	{r3, lr}
   d64d2:	4b02      	ldr	r3, [pc, #8]	; (d64dc <free+0xc>)
   d64d4:	681b      	ldr	r3, [r3, #0]
   d64d6:	685b      	ldr	r3, [r3, #4]
   d64d8:	9301      	str	r3, [sp, #4]
   d64da:	bd08      	pop	{r3, pc}
   d64dc:	0003021c 	.word	0x0003021c

000d64e0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d64e0:	b508      	push	{r3, lr}
   d64e2:	4b02      	ldr	r3, [pc, #8]	; (d64ec <realloc+0xc>)
   d64e4:	681b      	ldr	r3, [r3, #0]
   d64e6:	689b      	ldr	r3, [r3, #8]
   d64e8:	9301      	str	r3, [sp, #4]
   d64ea:	bd08      	pop	{r3, pc}
   d64ec:	0003021c 	.word	0x0003021c

000d64f0 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d64f0:	b508      	push	{r3, lr}
   d64f2:	4b02      	ldr	r3, [pc, #8]	; (d64fc <sprintf+0xc>)
   d64f4:	681b      	ldr	r3, [r3, #0]
   d64f6:	68db      	ldr	r3, [r3, #12]
   d64f8:	9301      	str	r3, [sp, #4]
   d64fa:	bd08      	pop	{r3, pc}
   d64fc:	0003021c 	.word	0x0003021c

000d6500 <snprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d6500:	b508      	push	{r3, lr}
   d6502:	4b02      	ldr	r3, [pc, #8]	; (d650c <snprintf+0xc>)
   d6504:	681b      	ldr	r3, [r3, #0]
   d6506:	69db      	ldr	r3, [r3, #28]
   d6508:	9301      	str	r3, [sp, #4]
   d650a:	bd08      	pop	{r3, pc}
   d650c:	0003021c 	.word	0x0003021c

000d6510 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d6510:	b508      	push	{r3, lr}
   d6512:	4b02      	ldr	r3, [pc, #8]	; (d651c <vsnprintf+0xc>)
   d6514:	681b      	ldr	r3, [r3, #0]
   d6516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6518:	9301      	str	r3, [sp, #4]
   d651a:	bd08      	pop	{r3, pc}
   d651c:	0003021c 	.word	0x0003021c

000d6520 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d6520:	b508      	push	{r3, lr}
   d6522:	4b02      	ldr	r3, [pc, #8]	; (d652c <abort+0xc>)
   d6524:	681b      	ldr	r3, [r3, #0]
   d6526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6528:	9301      	str	r3, [sp, #4]
   d652a:	bd08      	pop	{r3, pc}
   d652c:	0003021c 	.word	0x0003021c

000d6530 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d6530:	b508      	push	{r3, lr}
   d6532:	4b02      	ldr	r3, [pc, #8]	; (d653c <_malloc_r+0xc>)
   d6534:	681b      	ldr	r3, [r3, #0]
   d6536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6538:	9301      	str	r3, [sp, #4]
   d653a:	bd08      	pop	{r3, pc}
   d653c:	0003021c 	.word	0x0003021c

000d6540 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6540:	2200      	movs	r2, #0
   d6542:	4611      	mov	r1, r2
   d6544:	6840      	ldr	r0, [r0, #4]
   d6546:	f7ff bf7b 	b.w	d6440 <network_listening>

000d654a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d654a:	2200      	movs	r2, #0
   d654c:	4611      	mov	r1, r2
   d654e:	6840      	ldr	r0, [r0, #4]
   d6550:	f7ff bf86 	b.w	d6460 <network_get_listen_timeout>

000d6554 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6554:	2200      	movs	r2, #0
   d6556:	6840      	ldr	r0, [r0, #4]
   d6558:	f7ff bf7a 	b.w	d6450 <network_set_listen_timeout>

000d655c <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d655c:	2200      	movs	r2, #0
   d655e:	f081 0101 	eor.w	r1, r1, #1
   d6562:	6840      	ldr	r0, [r0, #4]
   d6564:	f7ff bf64 	b.w	d6430 <network_listen>

000d6568 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d6568:	2300      	movs	r3, #0
   d656a:	461a      	mov	r2, r3
   d656c:	4619      	mov	r1, r3
   d656e:	6840      	ldr	r0, [r0, #4]
   d6570:	f7ff bf56 	b.w	d6420 <network_off>

000d6574 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6574:	2300      	movs	r3, #0
   d6576:	461a      	mov	r2, r3
   d6578:	4619      	mov	r1, r3
   d657a:	6840      	ldr	r0, [r0, #4]
   d657c:	f7ff bf48 	b.w	d6410 <network_on>

000d6580 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6580:	2200      	movs	r2, #0
   d6582:	4611      	mov	r1, r2
   d6584:	6840      	ldr	r0, [r0, #4]
   d6586:	f7ff bf3b 	b.w	d6400 <network_ready>

000d658a <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d658a:	2200      	movs	r2, #0
   d658c:	4611      	mov	r1, r2
   d658e:	6840      	ldr	r0, [r0, #4]
   d6590:	f7ff bf26 	b.w	d63e0 <network_connecting>

000d6594 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6594:	2200      	movs	r2, #0
   d6596:	2102      	movs	r1, #2
   d6598:	6840      	ldr	r0, [r0, #4]
   d659a:	f7ff bf29 	b.w	d63f0 <network_disconnect>

000d659e <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d659e:	2300      	movs	r3, #0
   d65a0:	461a      	mov	r2, r3
   d65a2:	6840      	ldr	r0, [r0, #4]
   d65a4:	f7ff bf14 	b.w	d63d0 <network_connect>

000d65a8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d65a8:	4b02      	ldr	r3, [pc, #8]	; (d65b4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d65aa:	2203      	movs	r2, #3
   d65ac:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d65ae:	4a02      	ldr	r2, [pc, #8]	; (d65b8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d65b0:	601a      	str	r2, [r3, #0]
   d65b2:	4770      	bx	lr
   d65b4:	2003e464 	.word	0x2003e464
   d65b8:	000da8d0 	.word	0x000da8d0

000d65bc <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d65bc:	b510      	push	{r4, lr}
   d65be:	4604      	mov	r4, r0
{
    _spi = spi;
   d65c0:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d65c2:	4608      	mov	r0, r1
   d65c4:	f7ff fcca 	bl	d5f5c <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d65c8:	2300      	movs	r3, #0
   d65ca:	6063      	str	r3, [r4, #4]
}
   d65cc:	4620      	mov	r0, r4
   d65ce:	bd10      	pop	{r4, pc}

000d65d0 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d65d0:	7800      	ldrb	r0, [r0, #0]
   d65d2:	f7ff bccb 	b.w	d5f6c <HAL_SPI_Is_Enabled>

000d65d6 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d65d6:	b510      	push	{r4, lr}
   d65d8:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d65da:	6800      	ldr	r0, [r0, #0]
   d65dc:	b118      	cbz	r0, d65e6 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d65de:	f7ff ff77 	bl	d64d0 <free>
            wakeupSource_ = nullptr;
   d65e2:	2300      	movs	r3, #0
   d65e4:	6023      	str	r3, [r4, #0]
   d65e6:	bd10      	pop	{r4, pc}

000d65e8 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d65e8:	b510      	push	{r4, lr}
   d65ea:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d65ec:	f7ff fff3 	bl	d65d6 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d65f0:	4620      	mov	r0, r4
   d65f2:	bd10      	pop	{r4, pc}

000d65f4 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d65f4:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d65f6:	4c09      	ldr	r4, [pc, #36]	; (d661c <_GLOBAL__sub_I_System+0x28>)
   d65f8:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d65fa:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d65fe:	6020      	str	r0, [r4, #0]
   d6600:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d6602:	71a0      	strb	r0, [r4, #6]
   d6604:	8120      	strh	r0, [r4, #8]
   d6606:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d6608:	f7ff fea6 	bl	d6358 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d660c:	4620      	mov	r0, r4
   d660e:	4a04      	ldr	r2, [pc, #16]	; (d6620 <_GLOBAL__sub_I_System+0x2c>)
   d6610:	4904      	ldr	r1, [pc, #16]	; (d6624 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d6612:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d6616:	f002 bfa5 	b.w	d9564 <__aeabi_atexit>
   d661a:	bf00      	nop
   d661c:	2003e46c 	.word	0x2003e46c
   d6620:	2003e25c 	.word	0x2003e25c
   d6624:	000d65e9 	.word	0x000d65e9

000d6628 <_ZN6StringC1EOS_>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6628:	2300      	movs	r3, #0
   d662a:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d662c:	6043      	str	r3, [r0, #4]
	len = 0;
   d662e:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6630:	7303      	strb	r3, [r0, #12]
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
   d6632:	b510      	push	{r4, lr}
			return;
		} else {
			free(buffer);
		}
	}
	buffer = rhs.buffer;
   d6634:	680c      	ldr	r4, [r1, #0]
   d6636:	6004      	str	r4, [r0, #0]
	capacity = rhs.capacity;
   d6638:	684c      	ldr	r4, [r1, #4]
   d663a:	6044      	str	r4, [r0, #4]
	len = rhs.len;
   d663c:	688c      	ldr	r4, [r1, #8]
   d663e:	6084      	str	r4, [r0, #8]
	rhs.buffer = NULL;
   d6640:	600b      	str	r3, [r1, #0]
	rhs.capacity = 0;
   d6642:	604b      	str	r3, [r1, #4]
	rhs.len = 0;
   d6644:	608b      	str	r3, [r1, #8]
#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
{
	init();
	move(rval);
}
   d6646:	bd10      	pop	{r4, pc}

000d6648 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d6648:	b510      	push	{r4, lr}
   d664a:	4604      	mov	r4, r0
{
	free(buffer);
   d664c:	6800      	ldr	r0, [r0, #0]
   d664e:	f7ff ff3f 	bl	d64d0 <free>
}
   d6652:	4620      	mov	r0, r4
   d6654:	bd10      	pop	{r4, pc}

000d6656 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d6656:	b510      	push	{r4, lr}
   d6658:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d665a:	6800      	ldr	r0, [r0, #0]
   d665c:	b108      	cbz	r0, d6662 <_ZN6String10invalidateEv+0xc>
   d665e:	f7ff ff37 	bl	d64d0 <free>
	buffer = NULL;
   d6662:	2300      	movs	r3, #0
   d6664:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d6666:	60a3      	str	r3, [r4, #8]
   d6668:	6063      	str	r3, [r4, #4]
   d666a:	bd10      	pop	{r4, pc}

000d666c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d666c:	b538      	push	{r3, r4, r5, lr}
   d666e:	4604      	mov	r4, r0
   d6670:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d6672:	6800      	ldr	r0, [r0, #0]
   d6674:	3101      	adds	r1, #1
   d6676:	f7ff ff33 	bl	d64e0 <realloc>
	if (newbuffer) {
   d667a:	b110      	cbz	r0, d6682 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d667c:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d6680:	2001      	movs	r0, #1
	}
	return 0;
}
   d6682:	bd38      	pop	{r3, r4, r5, pc}

000d6684 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d6684:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d6686:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d6688:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d668a:	b113      	cbz	r3, d6692 <_ZN6String7reserveEj+0xe>
   d668c:	6843      	ldr	r3, [r0, #4]
   d668e:	428b      	cmp	r3, r1
   d6690:	d207      	bcs.n	d66a2 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d6692:	4620      	mov	r0, r4
   d6694:	f7ff ffea 	bl	d666c <_ZN6String12changeBufferEj>
   d6698:	b120      	cbz	r0, d66a4 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d669a:	68a3      	ldr	r3, [r4, #8]
   d669c:	b90b      	cbnz	r3, d66a2 <_ZN6String7reserveEj+0x1e>
   d669e:	6822      	ldr	r2, [r4, #0]
   d66a0:	7013      	strb	r3, [r2, #0]
   d66a2:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d66a4:	bd10      	pop	{r4, pc}

000d66a6 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d66a6:	b570      	push	{r4, r5, r6, lr}
   d66a8:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d66aa:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d66ac:	4604      	mov	r4, r0
   d66ae:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d66b0:	f7ff ffe8 	bl	d6684 <_ZN6String7reserveEj>
   d66b4:	b918      	cbnz	r0, d66be <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d66b6:	4620      	mov	r0, r4
   d66b8:	f7ff ffcd 	bl	d6656 <_ZN6String10invalidateEv>
		return *this;
   d66bc:	e009      	b.n	d66d2 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d66be:	462a      	mov	r2, r5
   d66c0:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d66c2:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d66c4:	6820      	ldr	r0, [r4, #0]
   d66c6:	f003 fa96 	bl	d9bf6 <memcpy>
	buffer[len] = 0;
   d66ca:	6822      	ldr	r2, [r4, #0]
   d66cc:	68a3      	ldr	r3, [r4, #8]
   d66ce:	2100      	movs	r1, #0
   d66d0:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d66d2:	4620      	mov	r0, r4
   d66d4:	bd70      	pop	{r4, r5, r6, pc}

000d66d6 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d66d6:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d66d8:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d66da:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d66dc:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d66de:	6043      	str	r3, [r0, #4]
	len = 0;
   d66e0:	6083      	str	r3, [r0, #8]
	flags = 0;
   d66e2:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d66e4:	460d      	mov	r5, r1
   d66e6:	b139      	cbz	r1, d66f8 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d66e8:	4608      	mov	r0, r1
   d66ea:	f003 fb18 	bl	d9d1e <strlen>
   d66ee:	4629      	mov	r1, r5
   d66f0:	4602      	mov	r2, r0
   d66f2:	4620      	mov	r0, r4
   d66f4:	f7ff ffd7 	bl	d66a6 <_ZN6String4copyEPKcj>
}
   d66f8:	4620      	mov	r0, r4
   d66fa:	bd38      	pop	{r3, r4, r5, pc}

000d66fc <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d66fc:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d66fe:	b510      	push	{r4, lr}
   d6700:	460b      	mov	r3, r1
   d6702:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d6704:	d007      	beq.n	d6716 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d6706:	6809      	ldr	r1, [r1, #0]
   d6708:	b119      	cbz	r1, d6712 <_ZN6StringaSERKS_+0x16>
   d670a:	689a      	ldr	r2, [r3, #8]
   d670c:	f7ff ffcb 	bl	d66a6 <_ZN6String4copyEPKcj>
   d6710:	e001      	b.n	d6716 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d6712:	f7ff ffa0 	bl	d6656 <_ZN6String10invalidateEv>

	return *this;
}
   d6716:	4620      	mov	r0, r4
   d6718:	bd10      	pop	{r4, pc}

000d671a <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d671a:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d671c:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d671e:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6720:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d6722:	6043      	str	r3, [r0, #4]
	len = 0;
   d6724:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6726:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d6728:	f7ff ffe8 	bl	d66fc <_ZN6StringaSERKS_>
}
   d672c:	4620      	mov	r0, r4
   d672e:	bd10      	pop	{r4, pc}

000d6730 <_ZNK6String7indexOfEcj>:
{
	return indexOf(c, 0);
}

int String::indexOf( char ch, unsigned int fromIndex ) const
{
   d6730:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
   d6732:	6883      	ldr	r3, [r0, #8]
   d6734:	4293      	cmp	r3, r2
   d6736:	d906      	bls.n	d6746 <_ZNK6String7indexOfEcj+0x16>
	const char* temp = strchr(buffer + fromIndex, ch);
   d6738:	6804      	ldr	r4, [r0, #0]
   d673a:	18a0      	adds	r0, r4, r2
   d673c:	f003 fab2 	bl	d9ca4 <strchr>
	if (temp == NULL) return -1;
   d6740:	b108      	cbz	r0, d6746 <_ZNK6String7indexOfEcj+0x16>
	return temp - buffer;
   d6742:	1b00      	subs	r0, r0, r4
   d6744:	bd10      	pop	{r4, pc}
	return indexOf(c, 0);
}

int String::indexOf( char ch, unsigned int fromIndex ) const
{
	if (fromIndex >= len) return -1;
   d6746:	f04f 30ff 	mov.w	r0, #4294967295
	const char* temp = strchr(buffer + fromIndex, ch);
	if (temp == NULL) return -1;
	return temp - buffer;
}
   d674a:	bd10      	pop	{r4, pc}

000d674c <_ZNK6String7indexOfEc>:
/*  Search                                   */
/*********************************************/

int String::indexOf(char c) const
{
	return indexOf(c, 0);
   d674c:	2200      	movs	r2, #0
   d674e:	f7ff bfef 	b.w	d6730 <_ZNK6String7indexOfEcj>
	...

000d6754 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d6754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   d6756:	429a      	cmp	r2, r3
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d6758:	460f      	mov	r7, r1
   d675a:	461d      	mov	r5, r3
	if (left > right) {
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   d675c:	490c      	ldr	r1, [pc, #48]	; (d6790 <_ZNK6String9substringEjj+0x3c>)
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
   d675e:	bf88      	it	hi
   d6760:	4613      	movhi	r3, r2
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d6762:	4614      	mov	r4, r2
   d6764:	4606      	mov	r6, r0
	if (left > right) {
   d6766:	bf84      	itt	hi
   d6768:	462c      	movhi	r4, r5
   d676a:	461d      	movhi	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   d676c:	f7ff ffb3 	bl	d66d6 <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   d6770:	68ba      	ldr	r2, [r7, #8]
   d6772:	4294      	cmp	r4, r2
   d6774:	d80a      	bhi.n	d678c <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   d6776:	6839      	ldr	r1, [r7, #0]
   d6778:	4295      	cmp	r5, r2
   d677a:	bf94      	ite	ls
   d677c:	ebc4 0205 	rsbls	r2, r4, r5
   d6780:	ebc4 0202 	rsbhi	r2, r4, r2
   d6784:	4421      	add	r1, r4
   d6786:	4630      	mov	r0, r6
   d6788:	f7ff ff8d 	bl	d66a6 <_ZN6String4copyEPKcj>
	return out;
}
   d678c:	4630      	mov	r0, r6
   d678e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d6790:	000dab8f 	.word	0x000dab8f

000d6794 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   d6794:	6800      	ldr	r0, [r0, #0]
   d6796:	b108      	cbz	r0, d679c <_ZNK6String5toIntEv+0x8>
   d6798:	f003 ba0c 	b.w	d9bb4 <atol>
	return 0;
}
   d679c:	4770      	bx	lr

000d679e <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d679e:	4770      	bx	lr

000d67a0 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d67a0:	2000      	movs	r0, #0
   d67a2:	4770      	bx	lr

000d67a4 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d67a4:	b510      	push	{r4, lr}
   d67a6:	2114      	movs	r1, #20
   d67a8:	4604      	mov	r4, r0
   d67aa:	f002 fee9 	bl	d9580 <_ZdlPvj>
   d67ae:	4620      	mov	r0, r4
   d67b0:	bd10      	pop	{r4, pc}

000d67b2 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d67b2:	f7fd bc72 	b.w	d409a <_ZdlPv>

000d67b6 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d67b6:	b510      	push	{r4, lr}
   d67b8:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d67ba:	6800      	ldr	r0, [r0, #0]
   d67bc:	b108      	cbz	r0, d67c2 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d67be:	f7ff fc9b 	bl	d60f8 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d67c2:	4620      	mov	r0, r4
   d67c4:	bd10      	pop	{r4, pc}
	...

000d67c8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d67c8:	b508      	push	{r3, lr}
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
   d67ca:	200a      	movs	r0, #10
   d67cc:	4a02      	ldr	r2, [pc, #8]	; (d67d8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102+0x10>)
   d67ce:	2100      	movs	r1, #0
   d67d0:	f7ff fd9a 	bl	d6308 <panic_>
    }
}
   d67d4:	bd08      	pop	{r3, pc}
   d67d6:	bf00      	nop
   d67d8:	000d5f9d 	.word	0x000d5f9d

000d67dc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d67dc:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d67de:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d67e0:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d67e2:	689b      	ldr	r3, [r3, #8]
   d67e4:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d67e6:	68a3      	ldr	r3, [r4, #8]
   d67e8:	3b01      	subs	r3, #1
   d67ea:	60a3      	str	r3, [r4, #8]
   d67ec:	b92b      	cbnz	r3, d67fa <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112+0x1e>
            _M_destroy();
   d67ee:	6823      	ldr	r3, [r4, #0]
   d67f0:	4620      	mov	r0, r4
   d67f2:	68db      	ldr	r3, [r3, #12]
        }
    }
   d67f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d67f8:	4718      	bx	r3
   d67fa:	bd10      	pop	{r4, pc}

000d67fc <_ZN8particle3ble13WiringBleLockC1Ev>:

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d67fc:	b510      	push	{r4, lr}
            locked_(false) {
   d67fe:	2300      	movs	r3, #0
   d6800:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d6802:	4b04      	ldr	r3, [pc, #16]	; (d6814 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d6804:	4604      	mov	r4, r0
   d6806:	6818      	ldr	r0, [r3, #0]
   d6808:	f7ff fc7e 	bl	d6108 <os_mutex_recursive_lock>
        lock.locked_ = false;
    }

    void lock() {
        mutex_.lock();
        locked_ = true;
   d680c:	2301      	movs	r3, #1
   d680e:	7023      	strb	r3, [r4, #0]
class WiringBleLock {
public:
    WiringBleLock() :
            locked_(false) {
        lock();
    }
   d6810:	4620      	mov	r0, r4
   d6812:	bd10      	pop	{r4, pc}
   d6814:	2003e480 	.word	0x2003e480

000d6818 <_ZN8particle3ble13WiringBleLockD1Ev>:

    ~WiringBleLock() {
   d6818:	b510      	push	{r4, lr}
        if (locked_) {
   d681a:	7803      	ldrb	r3, [r0, #0]
    WiringBleLock() :
            locked_(false) {
        lock();
    }

    ~WiringBleLock() {
   d681c:	4604      	mov	r4, r0
        if (locked_) {
   d681e:	b11b      	cbz	r3, d6828 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d6820:	4b02      	ldr	r3, [pc, #8]	; (d682c <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   d6822:	6818      	ldr	r0, [r3, #0]
   d6824:	f7ff fc78 	bl	d6118 <os_mutex_recursive_unlock>
            unlock();
        }
    }
   d6828:	4620      	mov	r0, r4
   d682a:	bd10      	pop	{r4, pc}
   d682c:	2003e480 	.word	0x2003e480

000d6830 <_ZN8particle10BleAddressC1Ev>:

/*******************************************************
 * BleAddress class
 */
BleAddress::BleAddress()
        : address_{} {
   d6830:	2200      	movs	r2, #0
   d6832:	6002      	str	r2, [r0, #0]
   d6834:	6042      	str	r2, [r0, #4]
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
}
   d6836:	4770      	bx	lr

000d6838 <_ZNK8particle10BleAddresseqERKS0_>:
BleAddress& BleAddress::operator=(const uint8_t addr[BLE_SIG_ADDR_LEN]) {
    memcpy(address_.addr, addr, BLE_SIG_ADDR_LEN);
    return *this;
}

bool BleAddress::operator==(const BleAddress& addr) const {
   d6838:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   d683a:	7982      	ldrb	r2, [r0, #6]
   d683c:	798b      	ldrb	r3, [r1, #6]
   d683e:	429a      	cmp	r2, r3
   d6840:	d106      	bne.n	d6850 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d6842:	2206      	movs	r2, #6
   d6844:	f003 f9c8 	bl	d9bd8 <memcmp>
   d6848:	fab0 f080 	clz	r0, r0
   d684c:	0940      	lsrs	r0, r0, #5
   d684e:	bd08      	pop	{r3, pc}
        return true;
    }
    return false;
   d6850:	2000      	movs	r0, #0
}
   d6852:	bd08      	pop	{r3, pc}

000d6854 <_ZN8particle18BleAdvertisingData3setEPKhj>:
BleAdvertisingData::BleAdvertisingData(const iBeacon& beacon)
        : BleAdvertisingData() {
    set(beacon);
}

size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   d6854:	b538      	push	{r3, r4, r5, lr}
   d6856:	4605      	mov	r5, r0
    if (buf == nullptr || len == 0) {
   d6858:	b101      	cbz	r1, d685c <_ZN8particle18BleAdvertisingData3setEPKhj+0x8>
   d685a:	b912      	cbnz	r2, d6862 <_ZN8particle18BleAdvertisingData3setEPKhj+0xe>
        selfLen_ = 0;
   d685c:	2000      	movs	r0, #0
   d685e:	6228      	str	r0, [r5, #32]
        return selfLen_;
   d6860:	bd38      	pop	{r3, r4, r5, pc}
   d6862:	2a1f      	cmp	r2, #31
   d6864:	bf28      	it	cs
   d6866:	221f      	movcs	r2, #31
   d6868:	4614      	mov	r4, r2
    }
    len = std::min(len, (size_t)BLE_MAX_ADV_DATA_LEN);
    memcpy(selfData_, buf, len);
   d686a:	f003 f9c4 	bl	d9bf6 <memcpy>
    selfLen_ = len;
   d686e:	622c      	str	r4, [r5, #32]
    return selfLen_;
   d6870:	4620      	mov	r0, r4
}
   d6872:	bd38      	pop	{r3, r4, r5, pc}

000d6874 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>:
        break;
    }
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   d6874:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
   d6876:	b18b      	cbz	r3, d689c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x28>
   d6878:	2400      	movs	r4, #0
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d687a:	1ce5      	adds	r5, r4, #3
   d687c:	428d      	cmp	r5, r1
   d687e:	d80f      	bhi.n	d68a0 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   d6880:	1c66      	adds	r6, r4, #1
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
        adsLen = buf[i];
   d6882:	5d05      	ldrb	r5, [r0, r4]
        if (buf[i + 1] == adsType) {
   d6884:	5d87      	ldrb	r7, [r0, r6]
   d6886:	4297      	cmp	r7, r2
   d6888:	d105      	bne.n	d6896 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x22>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   d688a:	442e      	add	r6, r5
   d688c:	42b1      	cmp	r1, r6
   d688e:	d307      	bcc.n	d68a0 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
                *offset = i;
   d6890:	601c      	str	r4, [r3, #0]
                adsLen += 1;
   d6892:	1c68      	adds	r0, r5, #1
                return adsLen;
   d6894:	bdf0      	pop	{r4, r5, r6, r7, pc}
            } else {
                return 0;
            }
        } else {
            // Navigate to the next AD structure.
            i += (adsLen + 1);
   d6896:	3501      	adds	r5, #1
   d6898:	442c      	add	r4, r5
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d689a:	e7ee      	b.n	d687a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x6>
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
    if (offset == nullptr) {
        return 0;
   d689c:	4618      	mov	r0, r3
   d689e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d68a0:	2000      	movs	r0, #0
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   d68a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d68a4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
    selfData_[selfLen_++] = beacon.measurePower;

    return selfLen_;
}

size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d68a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d68a8:	4604      	mov	r4, r0
   d68aa:	460e      	mov	r6, r1
   d68ac:	461d      	mov	r5, r3
    if (buf == nullptr) {
   d68ae:	4617      	mov	r7, r2
   d68b0:	2a00      	cmp	r2, #0
   d68b2:	d03a      	beq.n	d692a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        return selfLen_;
    }
    size_t offset;
    size_t adsLen = locate(selfData_, selfLen_, type, &offset);
   d68b4:	460a      	mov	r2, r1
   d68b6:	ab01      	add	r3, sp, #4
   d68b8:	6a01      	ldr	r1, [r0, #32]
   d68ba:	f7ff ffdb 	bl	d6874 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (!force && adsLen > 0) {
   d68be:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   d68c2:	6a22      	ldr	r2, [r4, #32]
   d68c4:	bb03      	cbnz	r3, d6908 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
   d68c6:	b1f8      	cbz	r0, d6908 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
        // Update the existing AD structure.
        size_t staLen = selfLen_ - adsLen;
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d68c8:	1c96      	adds	r6, r2, #2
   d68ca:	442e      	add	r6, r5
   d68cc:	1a36      	subs	r6, r6, r0
   d68ce:	2e1f      	cmp	r6, #31
   d68d0:	d82b      	bhi.n	d692a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
            // Firstly, move the last consistent block.
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d68d2:	f8dd 8004 	ldr.w	r8, [sp, #4]
   d68d6:	f108 0902 	add.w	r9, r8, #2
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d68da:	ebc8 0202 	rsb	r2, r8, r2
   d68de:	1a12      	subs	r2, r2, r0
   d68e0:	eb00 0108 	add.w	r1, r0, r8
   d68e4:	eb05 0009 	add.w	r0, r5, r9
   d68e8:	b292      	uxth	r2, r2
   d68ea:	4421      	add	r1, r4
   d68ec:	4420      	add	r0, r4
   d68ee:	f003 f98d 	bl	d9c0c <memmove>
            // Secondly, Update the AD structure.
            // The Length field is the total length of Type field and Data field.
            selfData_[offset] = len + 1;
   d68f2:	1c6b      	adds	r3, r5, #1
   d68f4:	f804 3008 	strb.w	r3, [r4, r8]
            memcpy(&selfData_[offset + 2], buf, len);
   d68f8:	462a      	mov	r2, r5
   d68fa:	4639      	mov	r1, r7
   d68fc:	eb04 0009 	add.w	r0, r4, r9
   d6900:	f003 f979 	bl	d9bf6 <memcpy>
            // An AD structure is composed of one byte length field, one byte Type field and Data field.
            selfLen_ = staLen + len + 2;
   d6904:	6226      	str	r6, [r4, #32]
   d6906:	e010      	b.n	d692a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
   d6908:	1c90      	adds	r0, r2, #2
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d690a:	182b      	adds	r3, r5, r0
   d690c:	2b1f      	cmp	r3, #31
   d690e:	d80c      	bhi.n	d692a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
   d6910:	1c6b      	adds	r3, r5, #1
   d6912:	54a3      	strb	r3, [r4, r2]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d6914:	4422      	add	r2, r4
   d6916:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   d6918:	4639      	mov	r1, r7
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d691a:	7056      	strb	r6, [r2, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   d691c:	4420      	add	r0, r4
   d691e:	462a      	mov	r2, r5
   d6920:	f003 f969 	bl	d9bf6 <memcpy>
        selfLen_ += len;
   d6924:	6a22      	ldr	r2, [r4, #32]
   d6926:	442a      	add	r2, r5
   d6928:	6222      	str	r2, [r4, #32]
    }
    return selfLen_;
   d692a:	6a20      	ldr	r0, [r4, #32]
}
   d692c:	b003      	add	sp, #12
   d692e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d6932 <_ZN8particle18BleAdvertisingDataC1Ev>:


/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
   d6932:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d6934:	4604      	mov	r4, r0
        : selfData_(),
          selfLen_(0) {
   d6936:	4603      	mov	r3, r0
   d6938:	f100 021f 	add.w	r2, r0, #31
   d693c:	2000      	movs	r0, #0
   d693e:	f803 0b01 	strb.w	r0, [r3], #1
   d6942:	4293      	cmp	r3, r2
   d6944:	f04f 0100 	mov.w	r1, #0
   d6948:	d1f9      	bne.n	d693e <_ZN8particle18BleAdvertisingDataC1Ev+0xc>
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d694a:	aa04      	add	r2, sp, #16
   d694c:	2306      	movs	r3, #6
   d694e:	f802 3d01 	strb.w	r3, [r2, #-1]!
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d6952:	2301      	movs	r3, #1
/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
        : selfData_(),
          selfLen_(0) {
   d6954:	6221      	str	r1, [r4, #32]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d6956:	9100      	str	r1, [sp, #0]
   d6958:	4620      	mov	r0, r4
   d695a:	4619      	mov	r1, r3
   d695c:	f7ff ffa2 	bl	d68a4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d6960:	4620      	mov	r0, r4
   d6962:	b004      	add	sp, #16
   d6964:	bd10      	pop	{r4, pc}

000d6966 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>:
        return len;
    }
    return selfLen_;
}

size_t BleAdvertisingData::get(BleAdvertisingDataType type, uint8_t* buf, size_t len) const {
   d6966:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6968:	4615      	mov	r5, r2
   d696a:	461c      	mov	r4, r3
    size_t offset;
    size_t adsLen = locate(selfData_, selfLen_, type, &offset);
   d696c:	460a      	mov	r2, r1
   d696e:	ab01      	add	r3, sp, #4
   d6970:	6a01      	ldr	r1, [r0, #32]
        return len;
    }
    return selfLen_;
}

size_t BleAdvertisingData::get(BleAdvertisingDataType type, uint8_t* buf, size_t len) const {
   d6972:	4606      	mov	r6, r0
    size_t offset;
    size_t adsLen = locate(selfData_, selfLen_, type, &offset);
   d6974:	f7ff ff7e 	bl	d6874 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
   d6978:	4603      	mov	r3, r0
    if (adsLen > 0) {
   d697a:	f030 0002 	bics.w	r0, r0, #2
   d697e:	d00c      	beq.n	d699a <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
   d6980:	1e98      	subs	r0, r3, #2
   d6982:	4284      	cmp	r4, r0
   d6984:	bf28      	it	cs
   d6986:	4604      	movcs	r4, r0
        if ((adsLen - 2) > 0) {
            adsLen -= 2;
            len = std::min(len, adsLen);
            if (buf != nullptr) {
   d6988:	b135      	cbz	r5, d6998 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x32>
                memcpy(buf, &selfData_[offset + 2], len);
   d698a:	9901      	ldr	r1, [sp, #4]
   d698c:	3102      	adds	r1, #2
   d698e:	4622      	mov	r2, r4
   d6990:	4431      	add	r1, r6
   d6992:	4628      	mov	r0, r5
   d6994:	f003 f92f 	bl	d9bf6 <memcpy>
            }
            return len;
   d6998:	4620      	mov	r0, r4
        }
    }
    return 0;
}
   d699a:	b002      	add	sp, #8
   d699c:	bd70      	pop	{r4, r5, r6, pc}

000d699e <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    void onDisconnectedCallback(BleOnDisconnectedCallback callback, void* context) {
        disconnectedCb_ = callback;
        disconnectedContext_ = context;
    }

    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   d699e:	b510      	push	{r4, lr}
   d69a0:	6983      	ldr	r3, [r0, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d69a2:	69c2      	ldr	r2, [r0, #28]
   d69a4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   d69a8:	4293      	cmp	r3, r2
   d69aa:	4618      	mov	r0, r3
   d69ac:	d006      	beq.n	d69bc <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   d69ae:	6804      	ldr	r4, [r0, #0]
   d69b0:	8824      	ldrh	r4, [r4, #0]
   d69b2:	428c      	cmp	r4, r1
   d69b4:	f103 0308 	add.w	r3, r3, #8
   d69b8:	d1f6      	bne.n	d69a8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
   d69ba:	bd10      	pop	{r4, pc}
                return &peer;
            }
        }
        return nullptr;
   d69bc:	2000      	movs	r0, #0
    }
   d69be:	bd10      	pop	{r4, pc}

000d69c0 <_ZNK8particle13BlePeerDevice7addressEv>:

void BlePeerDevice::bind(const BleAddress& address) const {
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   d69c0:	b510      	push	{r4, lr}
    return impl()->address();
   d69c2:	680a      	ldr	r2, [r1, #0]
   d69c4:	f852 3f02 	ldr.w	r3, [r2, #2]!
   d69c8:	6003      	str	r3, [r0, #0]
   d69ca:	6853      	ldr	r3, [r2, #4]
   d69cc:	6043      	str	r3, [r0, #4]
}
   d69ce:	bd10      	pop	{r4, pc}

000d69d0 <_ZNK8particle13BlePeerDeviceeqERKS0_>:

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d69d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d69d2:	6802      	ldr	r2, [r0, #0]
   d69d4:	680b      	ldr	r3, [r1, #0]
   d69d6:	8812      	ldrh	r2, [r2, #0]
   d69d8:	881b      	ldrh	r3, [r3, #0]
   d69da:	429a      	cmp	r2, r3

BleAddress BlePeerDevice::address() const {
    return impl()->address();
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d69dc:	460c      	mov	r4, r1
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d69de:	d10c      	bne.n	d69fa <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2a>
   d69e0:	4601      	mov	r1, r0
   d69e2:	4668      	mov	r0, sp
   d69e4:	f7ff ffec 	bl	d69c0 <_ZNK8particle13BlePeerDevice7addressEv>
   d69e8:	4621      	mov	r1, r4
   d69ea:	a802      	add	r0, sp, #8
   d69ec:	f7ff ffe8 	bl	d69c0 <_ZNK8particle13BlePeerDevice7addressEv>
   d69f0:	a902      	add	r1, sp, #8
   d69f2:	4668      	mov	r0, sp
   d69f4:	f7ff ff20 	bl	d6838 <_ZNK8particle10BleAddresseqERKS0_>
   d69f8:	b900      	cbnz	r0, d69fc <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2c>
        return true;
    }
    return false;
   d69fa:	2000      	movs	r0, #0
}
   d69fc:	b004      	add	sp, #16
   d69fe:	bd10      	pop	{r4, pc}

000d6a00 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d6a00:	b510      	push	{r4, lr}
   d6a02:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d6a04:	2034      	movs	r0, #52	; 0x34
   d6a06:	f7fd fb46 	bl	d4096 <_Znwj>
   d6a0a:	4601      	mov	r1, r0
   d6a0c:	b168      	cbz	r0, d6a2a <_ZN8particle14BleLocalDeviceC1Ev+0x2a>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6a0e:	2300      	movs	r3, #0
   d6a10:	6003      	str	r3, [r0, #0]
   d6a12:	6043      	str	r3, [r0, #4]
   d6a14:	6083      	str	r3, [r0, #8]
   d6a16:	60c3      	str	r3, [r0, #12]
   d6a18:	6103      	str	r3, [r0, #16]
   d6a1a:	6143      	str	r3, [r0, #20]
   d6a1c:	6183      	str	r3, [r0, #24]
   d6a1e:	61c3      	str	r3, [r0, #28]
   d6a20:	6203      	str	r3, [r0, #32]
public:
    BleLocalDeviceImpl()
            : connectedCb_(nullptr),
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
   d6a22:	6243      	str	r3, [r0, #36]	; 0x24
   d6a24:	6283      	str	r3, [r0, #40]	; 0x28
   d6a26:	62c3      	str	r3, [r0, #44]	; 0x2c
   d6a28:	6303      	str	r3, [r0, #48]	; 0x30
   d6a2a:	6021      	str	r1, [r4, #0]
/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   d6a2c:	b919      	cbnz	r1, d6a36 <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   d6a2e:	4a0a      	ldr	r2, [pc, #40]	; (d6a58 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d6a30:	200a      	movs	r0, #10
   d6a32:	f7ff fc69 	bl	d6308 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d6a36:	2000      	movs	r0, #0
   d6a38:	f7ff fae8 	bl	d600c <hal_ble_stack_init>
   d6a3c:	b120      	cbz	r0, d6a48 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   d6a3e:	4a06      	ldr	r2, [pc, #24]	; (d6a58 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d6a40:	2100      	movs	r1, #0
   d6a42:	200a      	movs	r0, #10
   d6a44:	f7ff fc60 	bl	d6308 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   d6a48:	2200      	movs	r2, #0
   d6a4a:	6821      	ldr	r1, [r4, #0]
   d6a4c:	4803      	ldr	r0, [pc, #12]	; (d6a5c <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   d6a4e:	f7ff fb19 	bl	d6084 <hal_ble_set_callback_on_periph_link_events>
}
   d6a52:	4620      	mov	r0, r4
   d6a54:	bd10      	pop	{r4, pc}
   d6a56:	bf00      	nop
   d6a58:	000d5f9d 	.word	0x000d5f9d
   d6a5c:	000d6dc1 	.word	0x000d6dc1

000d6a60 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d6a60:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d6a62:	4c0a      	ldr	r4, [pc, #40]	; (d6a8c <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   d6a64:	6823      	ldr	r3, [r4, #0]
   d6a66:	07db      	lsls	r3, r3, #31
   d6a68:	d40e      	bmi.n	d6a88 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d6a6a:	4620      	mov	r0, r4
   d6a6c:	f7fd fb24 	bl	d40b8 <__cxa_guard_acquire>
   d6a70:	b150      	cbz	r0, d6a88 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d6a72:	4807      	ldr	r0, [pc, #28]	; (d6a90 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d6a74:	f7ff ffc4 	bl	d6a00 <_ZN8particle14BleLocalDeviceC1Ev>
   d6a78:	4620      	mov	r0, r4
   d6a7a:	f7fd fb22 	bl	d40c2 <__cxa_guard_release>
   d6a7e:	4a05      	ldr	r2, [pc, #20]	; (d6a94 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d6a80:	4905      	ldr	r1, [pc, #20]	; (d6a98 <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d6a82:	4803      	ldr	r0, [pc, #12]	; (d6a90 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d6a84:	f002 fd6e 	bl	d9564 <__aeabi_atexit>
    return instance;
}
   d6a88:	4801      	ldr	r0, [pc, #4]	; (d6a90 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d6a8a:	bd10      	pop	{r4, pc}
   d6a8c:	2003e47c 	.word	0x2003e47c
   d6a90:	2003e478 	.word	0x2003e478
   d6a94:	2003e25c 	.word	0x2003e25c
   d6a98:	000d6ba9 	.word	0x000d6ba9

000d6a9c <_ZNK8particle14BleLocalDevice13selectAntennaENS_14BleAntennaTypeE>:
int BleLocalDevice::txPower(int8_t* txPower) const {
    WiringBleLock lk;
    return hal_ble_gap_get_tx_power(txPower, nullptr);
}

int BleLocalDevice::selectAntenna(BleAntennaType antenna) const {
   d6a9c:	4608      	mov	r0, r1
    return hal_ble_select_antenna(static_cast<hal_ble_ant_type_t>(antenna), nullptr);
   d6a9e:	2100      	movs	r1, #0
   d6aa0:	f7ff babc 	b.w	d601c <hal_ble_select_antenna>

000d6aa4 <_ZNK8particle14BleLocalDevice14setScanTimeoutEt>:
    size_t foundCount_;
    BleOnScanResultCallback callback_;
    void* context_;
};

int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
   d6aa4:	b530      	push	{r4, r5, lr}
   d6aa6:	b085      	sub	sp, #20
    WiringBleLock lk;
    hal_ble_scan_params_t scanParams = {};
   d6aa8:	2400      	movs	r4, #0
    BleOnScanResultCallback callback_;
    void* context_;
};

int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
    WiringBleLock lk;
   d6aaa:	4668      	mov	r0, sp
    size_t foundCount_;
    BleOnScanResultCallback callback_;
    void* context_;
};

int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
   d6aac:	460d      	mov	r5, r1
    WiringBleLock lk;
   d6aae:	f7ff fea5 	bl	d67fc <_ZN8particle3ble13WiringBleLockC1Ev>
    hal_ble_scan_params_t scanParams = {};
    scanParams.size = sizeof(hal_ble_scan_params_t);
   d6ab2:	230c      	movs	r3, #12
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
   d6ab4:	4621      	mov	r1, r4
   d6ab6:	a801      	add	r0, sp, #4
    void* context_;
};

int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
    WiringBleLock lk;
    hal_ble_scan_params_t scanParams = {};
   d6ab8:	9401      	str	r4, [sp, #4]
   d6aba:	9402      	str	r4, [sp, #8]
    scanParams.size = sizeof(hal_ble_scan_params_t);
   d6abc:	f8ad 3006 	strh.w	r3, [sp, #6]
    void* context_;
};

int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
    WiringBleLock lk;
    hal_ble_scan_params_t scanParams = {};
   d6ac0:	9403      	str	r4, [sp, #12]
    scanParams.size = sizeof(hal_ble_scan_params_t);
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
   d6ac2:	f7ff fabb 	bl	d603c <hal_ble_gap_get_scan_parameters>
    scanParams.timeout = timeout;
    return hal_ble_gap_set_scan_parameters(&scanParams, nullptr);
   d6ac6:	4621      	mov	r1, r4
   d6ac8:	a801      	add	r0, sp, #4
int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
    WiringBleLock lk;
    hal_ble_scan_params_t scanParams = {};
    scanParams.size = sizeof(hal_ble_scan_params_t);
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
    scanParams.timeout = timeout;
   d6aca:	f8ad 500c 	strh.w	r5, [sp, #12]
    return hal_ble_gap_set_scan_parameters(&scanParams, nullptr);
   d6ace:	f7ff faad 	bl	d602c <hal_ble_gap_set_scan_parameters>
   d6ad2:	4604      	mov	r4, r0
    BleOnScanResultCallback callback_;
    void* context_;
};

int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
    WiringBleLock lk;
   d6ad4:	4668      	mov	r0, sp
   d6ad6:	f7ff fe9f 	bl	d6818 <_ZN8particle3ble13WiringBleLockD1Ev>
    hal_ble_scan_params_t scanParams = {};
    scanParams.size = sizeof(hal_ble_scan_params_t);
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
    scanParams.timeout = timeout;
    return hal_ble_gap_set_scan_parameters(&scanParams, nullptr);
}
   d6ada:	4620      	mov	r0, r4
   d6adc:	b005      	add	sp, #20
   d6ade:	bd30      	pop	{r4, r5, pc}

000d6ae0 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>:
    WiringBleLock lk;
    BleScanDelegator scanner;
    return scanner.start(callback, context);
}

int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
   d6ae0:	b530      	push	{r4, r5, lr}
   d6ae2:	b08b      	sub	sp, #44	; 0x2c
   d6ae4:	460d      	mov	r5, r1
    WiringBleLock lk;
   d6ae6:	a801      	add	r0, sp, #4
    WiringBleLock lk;
    BleScanDelegator scanner;
    return scanner.start(callback, context);
}

int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
   d6ae8:	4614      	mov	r4, r2
    WiringBleLock lk;
   d6aea:	f7ff fe87 	bl	d67fc <_ZN8particle3ble13WiringBleLockC1Ev>
    if (results == nullptr || resultCount == 0) {
   d6aee:	b1b5      	cbz	r5, d6b1e <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x3e>
   d6af0:	b1ac      	cbz	r4, d6b1e <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x3e>
   d6af2:	2200      	movs	r2, #0
    }

    int start(BleScanResult* results, size_t resultCount) {
        resultsPtr_ = results;
        targetCount_ = resultCount;
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
   d6af4:	a902      	add	r1, sp, #8
   d6af6:	480d      	ldr	r0, [pc, #52]	; (d6b2c <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x4c>)
        return foundCount_;
    }

    int start(BleScanResult* results, size_t resultCount) {
        resultsPtr_ = results;
        targetCount_ = resultCount;
   d6af8:	9406      	str	r4, [sp, #24]
   d6afa:	9202      	str	r2, [sp, #8]
   d6afc:	9203      	str	r2, [sp, #12]
   d6afe:	9204      	str	r2, [sp, #16]
    BleScanDelegator()
            : resultsPtr_(nullptr),
              targetCount_(0),
              foundCount_(0),
              callback_(nullptr),
              context_(nullptr) {
   d6b00:	9207      	str	r2, [sp, #28]
   d6b02:	9208      	str	r2, [sp, #32]
   d6b04:	9209      	str	r2, [sp, #36]	; 0x24
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
        return foundCount_;
    }

    int start(BleScanResult* results, size_t resultCount) {
        resultsPtr_ = results;
   d6b06:	9505      	str	r5, [sp, #20]
        targetCount_ = resultCount;
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
   d6b08:	f7ff faa0 	bl	d604c <hal_ble_gap_start_scan>
   d6b0c:	2800      	cmp	r0, #0
   d6b0e:	bfb8      	it	lt
   d6b10:	4604      	movlt	r4, r0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6b12:	9802      	ldr	r0, [sp, #8]
        return foundCount_;
   d6b14:	bfa8      	it	ge
   d6b16:	9c07      	ldrge	r4, [sp, #28]
   d6b18:	f7ff fcda 	bl	d64d0 <free>
   d6b1c:	e000      	b.n	d6b20 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x40>
}

int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
    WiringBleLock lk;
    if (results == nullptr || resultCount == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   d6b1e:	4c04      	ldr	r4, [pc, #16]	; (d6b30 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x50>)
    BleScanDelegator scanner;
    return scanner.start(callback, context);
}

int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
    WiringBleLock lk;
   d6b20:	a801      	add	r0, sp, #4
   d6b22:	f7ff fe79 	bl	d6818 <_ZN8particle3ble13WiringBleLockD1Ev>
    if (results == nullptr || resultCount == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    BleScanDelegator scanner;
    return scanner.start(results, resultCount);
}
   d6b26:	4620      	mov	r0, r4
   d6b28:	b00b      	add	sp, #44	; 0x2c
   d6b2a:	bd30      	pop	{r4, r5, pc}
   d6b2c:	000d6f2f 	.word	0x000d6f2f
   d6b30:	fffffef2 	.word	0xfffffef2

000d6b34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d6b34:	680b      	ldr	r3, [r1, #0]
   d6b36:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d6b38:	b113      	cbz	r3, d6b40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d6b3a:	685a      	ldr	r2, [r3, #4]
   d6b3c:	3201      	adds	r2, #1
   d6b3e:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d6b40:	4770      	bx	lr

000d6b42 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6b42:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d6b44:	6804      	ldr	r4, [r0, #0]
   d6b46:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6b48:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d6b4a:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d6b4e:	42a6      	cmp	r6, r4
   d6b50:	d004      	beq.n	d6b5c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6b52:	1d20      	adds	r0, r4, #4
   d6b54:	f7fd fc6e 	bl	d4434 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6b58:	3408      	adds	r4, #8
   d6b5a:	e7f8      	b.n	d6b4e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6b5c:	6828      	ldr	r0, [r5, #0]
   d6b5e:	f7ff fcb7 	bl	d64d0 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d6b62:	4628      	mov	r0, r5
   d6b64:	bd70      	pop	{r4, r5, r6, pc}

000d6b66 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6b66:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d6b68:	6804      	ldr	r4, [r0, #0]
   d6b6a:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6b6c:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d6b6e:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d6b72:	42a6      	cmp	r6, r4
   d6b74:	d004      	beq.n	d6b80 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   d6b76:	1d20      	adds	r0, r4, #4
   d6b78:	f7fd fc5c 	bl	d4434 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6b7c:	3408      	adds	r4, #8
   d6b7e:	e7f8      	b.n	d6b72 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6b80:	6828      	ldr	r0, [r5, #0]
   d6b82:	f7ff fca5 	bl	d64d0 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d6b86:	4628      	mov	r0, r5
   d6b88:	bd70      	pop	{r4, r5, r6, pc}

000d6b8a <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d6b8a:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d6b8c:	6904      	ldr	r4, [r0, #16]
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
    }

    ~BlePeerDeviceImpl() = default;
   d6b8e:	f104 0018 	add.w	r0, r4, #24
   d6b92:	f7ff ffe8 	bl	d6b66 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d6b96:	f104 000c 	add.w	r0, r4, #12
   d6b9a:	f7ff ffd2 	bl	d6b42 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
   d6b9e:	4620      	mov	r0, r4
   d6ba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d6ba4:	f7fd ba79 	b.w	d409a <_ZdlPv>

000d6ba8 <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   d6ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6baa:	6804      	ldr	r4, [r0, #0]
   d6bac:	4607      	mov	r7, r0
   d6bae:	b1c4      	cbz	r4, d6be2 <_ZN8particle14BleLocalDeviceD1Ev+0x3a>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d6bb0:	69a5      	ldr	r5, [r4, #24]
   d6bb2:	69e3      	ldr	r3, [r4, #28]
   d6bb4:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d6bb8:	42ae      	cmp	r6, r5
   d6bba:	d004      	beq.n	d6bc6 <_ZN8particle14BleLocalDeviceD1Ev+0x1e>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6bbc:	1d28      	adds	r0, r5, #4
   d6bbe:	f7fd fc39 	bl	d4434 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6bc2:	3508      	adds	r5, #8
   d6bc4:	e7f8      	b.n	d6bb8 <_ZN8particle14BleLocalDeviceD1Ev+0x10>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6bc6:	69a0      	ldr	r0, [r4, #24]
   d6bc8:	f7ff fc82 	bl	d64d0 <free>
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
    }

    ~BleLocalDeviceImpl() = default;
   d6bcc:	f104 000c 	add.w	r0, r4, #12
   d6bd0:	f7ff ffc9 	bl	d6b66 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d6bd4:	4620      	mov	r0, r4
   d6bd6:	f7ff ffb4 	bl	d6b42 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6bda:	2134      	movs	r1, #52	; 0x34
   d6bdc:	4620      	mov	r0, r4
   d6bde:	f002 fccf 	bl	d9580 <_ZdlPvj>
   d6be2:	4638      	mov	r0, r7
   d6be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d6be8 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d6be8:	b573      	push	{r0, r1, r4, r5, r6, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d6bea:	2500      	movs	r5, #0
   d6bec:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d6bee:	6045      	str	r5, [r0, #4]
   d6bf0:	4606      	mov	r6, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6bf2:	2024      	movs	r0, #36	; 0x24
   d6bf4:	f7fd fa4f 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d6bf8:	4604      	mov	r4, r0
   d6bfa:	b178      	cbz	r0, d6c1c <_ZN8particle13BlePeerDeviceC1Ev+0x34>
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d6bfc:	4603      	mov	r3, r0
   d6bfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d6c02:	f823 2b02 	strh.w	r2, [r3], #2

/*******************************************************
 * BleAddress class
 */
BleAddress::BleAddress()
        : address_{} {
   d6c06:	f8c0 5002 	str.w	r5, [r0, #2]
   d6c0a:	605d      	str	r5, [r3, #4]
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d6c0c:	7285      	strb	r5, [r0, #10]
   d6c0e:	72c5      	strb	r5, [r0, #11]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6c10:	60c5      	str	r5, [r0, #12]
   d6c12:	6105      	str	r5, [r0, #16]
   d6c14:	6145      	str	r5, [r0, #20]
   d6c16:	6185      	str	r5, [r0, #24]
   d6c18:	61c5      	str	r5, [r0, #28]
   d6c1a:	6205      	str	r5, [r0, #32]
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d6c1c:	2300      	movs	r3, #0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6c1e:	2014      	movs	r0, #20
   d6c20:	9301      	str	r3, [sp, #4]
   d6c22:	f7fd fa38 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d6c26:	4603      	mov	r3, r0
   d6c28:	b128      	cbz	r0, d6c36 <_ZN8particle13BlePeerDeviceC1Ev+0x4e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d6c2a:	2201      	movs	r2, #1
   d6c2c:	6042      	str	r2, [r0, #4]
   d6c2e:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d6c30:	4a08      	ldr	r2, [pc, #32]	; (d6c54 <_ZN8particle13BlePeerDeviceC1Ev+0x6c>)
   d6c32:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d6c34:	6104      	str	r4, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d6c36:	a802      	add	r0, sp, #8
   d6c38:	6872      	ldr	r2, [r6, #4]
   d6c3a:	f840 2d04 	str.w	r2, [r0, #-4]!
	_M_pi = __tmp;
   d6c3e:	6073      	str	r3, [r6, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d6c40:	6034      	str	r4, [r6, #0]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d6c42:	f7fd fbf7 	bl	d4434 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
   d6c46:	6833      	ldr	r3, [r6, #0]
   d6c48:	b90b      	cbnz	r3, d6c4e <_ZN8particle13BlePeerDeviceC1Ev+0x66>
   d6c4a:	f7ff fdbd 	bl	d67c8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
}
   d6c4e:	4630      	mov	r0, r6
   d6c50:	b002      	add	sp, #8
   d6c52:	bd70      	pop	{r4, r5, r6, pc}
   d6c54:	000da904 	.word	0x000da904

000d6c58 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>:
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
   d6c58:	b538      	push	{r3, r4, r5, lr}
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6c5a:	680c      	ldr	r4, [r1, #0]
	if (__tmp != _M_pi)
   d6c5c:	6803      	ldr	r3, [r0, #0]
   d6c5e:	429c      	cmp	r4, r3
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
   d6c60:	4605      	mov	r5, r0
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
   d6c62:	d00c      	beq.n	d6c7e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x26>
	  {
	    if (__tmp != 0)
   d6c64:	b114      	cbz	r4, d6c6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x14>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d6c66:	6863      	ldr	r3, [r4, #4]
   d6c68:	3301      	adds	r3, #1
   d6c6a:	6063      	str	r3, [r4, #4]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
   d6c6c:	6828      	ldr	r0, [r5, #0]
   d6c6e:	b128      	cbz	r0, d6c7c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d6c70:	6843      	ldr	r3, [r0, #4]
   d6c72:	3b01      	subs	r3, #1
   d6c74:	6043      	str	r3, [r0, #4]
   d6c76:	b90b      	cbnz	r3, d6c7c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>
   d6c78:	f7ff fdb0 	bl	d67dc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
	      _M_pi->_M_release();
	    _M_pi = __tmp;
   d6c7c:	602c      	str	r4, [r5, #0]
	  }
	return *this;
      }
   d6c7e:	4628      	mov	r0, r5
   d6c80:	bd38      	pop	{r3, r4, r5, pc}

000d6c82 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d6c82:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d6c84:	b570      	push	{r4, r5, r6, lr}
   d6c86:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d6c88:	d91a      	bls.n	d6cc0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x3e>
   d6c8a:	4290      	cmp	r0, r2
   d6c8c:	d219      	bcs.n	d6cc2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x40>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d6c8e:	f1a1 0608 	sub.w	r6, r1, #8
   d6c92:	1a51      	subs	r1, r2, r1
   d6c94:	3904      	subs	r1, #4
   d6c96:	1f15      	subs	r5, r2, #4
   d6c98:	1844      	adds	r4, r0, r1
            for (; end != p; --end, --dest) {
   d6c9a:	1f2b      	subs	r3, r5, #4
   d6c9c:	429e      	cmp	r6, r3
   d6c9e:	d025      	beq.n	d6cec <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*end));
   d6ca0:	2c04      	cmp	r4, #4
   d6ca2:	d007      	beq.n	d6cb4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x32>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6ca4:	f855 3c04 	ldr.w	r3, [r5, #-4]
   d6ca8:	f844 3c04 	str.w	r3, [r4, #-4]
   d6cac:	4629      	mov	r1, r5
   d6cae:	4620      	mov	r0, r4
   d6cb0:	f7ff ff40 	bl	d6b34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6cb4:	4628      	mov	r0, r5
   d6cb6:	f7fd fbbd 	bl	d4434 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6cba:	3d08      	subs	r5, #8
   d6cbc:	3c08      	subs	r4, #8
   d6cbe:	e7ec      	b.n	d6c9a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x18>
                end->~T();
            }
        } else if (dest != p) {
   d6cc0:	d014      	beq.n	d6cec <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
   d6cc2:	1d0c      	adds	r4, r1, #4
   d6cc4:	1d06      	adds	r6, r0, #4
            for (; p != end; ++p, ++dest) {
   d6cc6:	1f23      	subs	r3, r4, #4
   d6cc8:	429d      	cmp	r5, r3
   d6cca:	d00f      	beq.n	d6cec <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*p));
   d6ccc:	2e04      	cmp	r6, #4
   d6cce:	d007      	beq.n	d6ce0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x5e>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6cd0:	f854 3c04 	ldr.w	r3, [r4, #-4]
   d6cd4:	f846 3c04 	str.w	r3, [r6, #-4]
   d6cd8:	4621      	mov	r1, r4
   d6cda:	4630      	mov	r0, r6
   d6cdc:	f7ff ff2a 	bl	d6b34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6ce0:	4620      	mov	r0, r4
   d6ce2:	f7fd fba7 	bl	d4434 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6ce6:	3408      	adds	r4, #8
   d6ce8:	3608      	adds	r6, #8
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d6cea:	e7ec      	b.n	d6cc6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x44>
   d6cec:	bd70      	pop	{r4, r5, r6, pc}

000d6cee <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d6cee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    T* const p = find(data_, data_ + size_, value);
   d6cf2:	6804      	ldr	r4, [r0, #0]
   d6cf4:	6843      	ldr	r3, [r0, #4]
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d6cf6:	4605      	mov	r5, r0
   d6cf8:	4688      	mov	r8, r1
    T* const p = find(data_, data_ + size_, value);
   d6cfa:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d6cfe:	42a7      	cmp	r7, r4
   d6d00:	d018      	beq.n	d6d34 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x46>
            if (*p == value) {
   d6d02:	4641      	mov	r1, r8
   d6d04:	4620      	mov	r0, r4
   d6d06:	f7ff fe63 	bl	d69d0 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   d6d0a:	4606      	mov	r6, r0
   d6d0c:	b908      	cbnz	r0, d6d12 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d6d0e:	3408      	adds	r4, #8
   d6d10:	e7f5      	b.n	d6cfe <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x10>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
   d6d12:	b18c      	cbz	r4, d6d38 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4a>
   d6d14:	1d20      	adds	r0, r4, #4
   d6d16:	f7fd fb8d 	bl	d4434 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d6d1a:	682b      	ldr	r3, [r5, #0]
   d6d1c:	686a      	ldr	r2, [r5, #4]
   d6d1e:	f104 0108 	add.w	r1, r4, #8
   d6d22:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d6d26:	4620      	mov	r0, r4
   d6d28:	f7ff ffab 	bl	d6c82 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   d6d2c:	686b      	ldr	r3, [r5, #4]
   d6d2e:	3b01      	subs	r3, #1
   d6d30:	606b      	str	r3, [r5, #4]
    return true;
   d6d32:	e002      	b.n	d6d3a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
   d6d34:	2600      	movs	r6, #0
   d6d36:	e000      	b.n	d6d3a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>
   d6d38:	4626      	mov	r6, r4
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
    return true;
}
   d6d3a:	4630      	mov	r0, r6
   d6d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6d40 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d6d40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d6d42:	4604      	mov	r4, r0
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6d44:	f851 3b04 	ldr.w	r3, [r1], #4
    return insert(size_, std::move(value));
   d6d48:	6847      	ldr	r7, [r0, #4]
   d6d4a:	9300      	str	r3, [sp, #0]
   d6d4c:	a801      	add	r0, sp, #4
   d6d4e:	f7ff fef1 	bl	d6b34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6d52:	6866      	ldr	r6, [r4, #4]
   d6d54:	68a3      	ldr	r3, [r4, #8]
   d6d56:	429e      	cmp	r6, r3
   d6d58:	db14      	blt.n	d6d84 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x44>
   d6d5a:	3601      	adds	r6, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d6d5c:	2e00      	cmp	r6, #0
   d6d5e:	dd0b      	ble.n	d6d78 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x38>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d6d60:	00f0      	lsls	r0, r6, #3
   d6d62:	f7ff fbad 	bl	d64c0 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d6d66:	4605      	mov	r5, r0
   d6d68:	b318      	cbz	r0, d6db2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x72>
                return false;
            }
            move(d, data_, data_ + size_);
   d6d6a:	e894 0006 	ldmia.w	r4, {r1, r2}
   d6d6e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d6d72:	f7ff ff86 	bl	d6c82 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d6d76:	e000      	b.n	d6d7a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d6d78:	2500      	movs	r5, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6d7a:	6820      	ldr	r0, [r4, #0]
   d6d7c:	f7ff fba8 	bl	d64d0 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d6d80:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d6d82:	60a6      	str	r6, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6d84:	6826      	ldr	r6, [r4, #0]
    move(p + 1, p, data_ + size_);
   d6d86:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6d88:	eb06 05c7 	add.w	r5, r6, r7, lsl #3
    move(p + 1, p, data_ + size_);
   d6d8c:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
   d6d90:	4629      	mov	r1, r5
   d6d92:	f105 0008 	add.w	r0, r5, #8
   d6d96:	f7ff ff74 	bl	d6c82 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d6d9a:	b135      	cbz	r5, d6daa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6a>
   d6d9c:	9b00      	ldr	r3, [sp, #0]
   d6d9e:	f846 3037 	str.w	r3, [r6, r7, lsl #3]
   d6da2:	a901      	add	r1, sp, #4
   d6da4:	1d28      	adds	r0, r5, #4
   d6da6:	f7ff fec5 	bl	d6b34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    ++size_;
   d6daa:	6863      	ldr	r3, [r4, #4]
   d6dac:	3301      	adds	r3, #1
   d6dae:	6063      	str	r3, [r4, #4]
   d6db0:	2501      	movs	r5, #1
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6db2:	a801      	add	r0, sp, #4
   d6db4:	f7fd fb3e 	bl	d4434 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d6db8:	4628      	mov	r0, r5
   d6dba:	b003      	add	sp, #12
   d6dbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d6dc0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d6dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6dc4:	4604      	mov	r4, r0
   d6dc6:	b08e      	sub	sp, #56	; 0x38
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d6dc8:	a803      	add	r0, sp, #12
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d6dca:	460d      	mov	r5, r1
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d6dcc:	f7ff fd16 	bl	d67fc <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   d6dd0:	6823      	ldr	r3, [r4, #0]
   d6dd2:	2b03      	cmp	r3, #3
   d6dd4:	d002      	beq.n	d6ddc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
   d6dd6:	2b04      	cmp	r3, #4
   d6dd8:	d042      	beq.n	d6e60 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xa0>
   d6dda:	e087      	b.n	d6eec <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
   d6ddc:	a804      	add	r0, sp, #16
   d6dde:	f7ff ff03 	bl	d6be8 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   d6de2:	9b04      	ldr	r3, [sp, #16]
   d6de4:	8922      	ldrh	r2, [r4, #8]
   d6de6:	801a      	strh	r2, [r3, #0]
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d6de8:	6862      	ldr	r2, [r4, #4]
   d6dea:	9904      	ldr	r1, [sp, #16]
   d6dec:	f852 3f08 	ldr.w	r3, [r2, #8]!
   d6df0:	f8c1 3002 	str.w	r3, [r1, #2]
   d6df4:	6853      	ldr	r3, [r2, #4]
   d6df6:	f8c1 3006 	str.w	r3, [r1, #6]
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6dfa:	a807      	add	r0, sp, #28
   d6dfc:	9b04      	ldr	r3, [sp, #16]
   d6dfe:	9306      	str	r3, [sp, #24]
   d6e00:	a905      	add	r1, sp, #20
   d6e02:	f7ff fe97 	bl	d6b34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d6e06:	a906      	add	r1, sp, #24
   d6e08:	f105 0018 	add.w	r0, r5, #24
   d6e0c:	f7ff ff98 	bl	d6d40 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d6e10:	4604      	mov	r4, r0
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6e12:	a807      	add	r0, sp, #28
   d6e14:	f7fd fb0e 	bl	d4434 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6e18:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   d6e1a:	9306      	str	r3, [sp, #24]
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d6e1c:	b974      	cbnz	r4, d6e3c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x7c>
                    LOG(ERROR, "Failed to append peer Central device.");
   d6e1e:	4b36      	ldr	r3, [pc, #216]	; (d6ef8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x138>)
   d6e20:	9300      	str	r3, [sp, #0]
   d6e22:	aa06      	add	r2, sp, #24
   d6e24:	4623      	mov	r3, r4
   d6e26:	4935      	ldr	r1, [pc, #212]	; (d6efc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d6e28:	9407      	str	r4, [sp, #28]
   d6e2a:	2032      	movs	r0, #50	; 0x32
   d6e2c:	f7ff fa74 	bl	d6318 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   d6e30:	9b04      	ldr	r3, [sp, #16]
   d6e32:	4621      	mov	r1, r4
   d6e34:	8818      	ldrh	r0, [r3, #0]
   d6e36:	f7ff f91b 	bl	d6070 <hal_ble_gap_disconnect>
   d6e3a:	e00d      	b.n	d6e58 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    return;
                }
                LOG(TRACE, "Connected by Central device.");
   d6e3c:	4a30      	ldr	r2, [pc, #192]	; (d6f00 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x140>)
   d6e3e:	9200      	str	r2, [sp, #0]
   d6e40:	2300      	movs	r3, #0
   d6e42:	aa06      	add	r2, sp, #24
   d6e44:	492d      	ldr	r1, [pc, #180]	; (d6efc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d6e46:	9307      	str	r3, [sp, #28]
   d6e48:	2001      	movs	r0, #1
   d6e4a:	f7ff fa65 	bl	d6318 <log_message>
                if (impl->connectedCb_) {
   d6e4e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d6e50:	b113      	cbz	r3, d6e58 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    impl->connectedCb_(peer, impl->connectedContext_);
   d6e52:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   d6e54:	a804      	add	r0, sp, #16
   d6e56:	4798      	blx	r3
   d6e58:	a805      	add	r0, sp, #20
   d6e5a:	f7fd faeb 	bl	d4434 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6e5e:	e045      	b.n	d6eec <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
                }
                break;
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d6e60:	8921      	ldrh	r1, [r4, #8]
   d6e62:	4628      	mov	r0, r5
   d6e64:	f7ff fd9b 	bl	d699e <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d6e68:	4607      	mov	r7, r0
   d6e6a:	2800      	cmp	r0, #0
   d6e6c:	d03e      	beq.n	d6eec <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
   d6e6e:	6804      	ldr	r4, [r0, #0]
   d6e70:	69a3      	ldr	r3, [r4, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d6e72:	69e1      	ldr	r1, [r4, #28]
    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
    }

    void onDisconnected() {
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   d6e74:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d6e78:	8022      	strh	r2, [r4, #0]
   d6e7a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
        for (auto& characteristic : characteristics_) {
   d6e7e:	4299      	cmp	r1, r3
   d6e80:	d003      	beq.n	d6e8a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xca>
   d6e82:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d6e86:	8042      	strh	r2, [r0, #2]
   d6e88:	e7f9      	b.n	d6e7e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xbe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d6e8a:	68e6      	ldr	r6, [r4, #12]
   d6e8c:	6923      	ldr	r3, [r4, #16]
   d6e8e:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d6e92:	45b0      	cmp	r8, r6
   d6e94:	d004      	beq.n	d6ea0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
   d6e96:	1d30      	adds	r0, r6, #4
   d6e98:	f7fd facc 	bl	d4434 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6e9c:	3608      	adds	r6, #8
   d6e9e:	e7f8      	b.n	d6e92 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xd2>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d6ea0:	2300      	movs	r3, #0
   d6ea2:	6123      	str	r3, [r4, #16]
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d6ea4:	69a6      	ldr	r6, [r4, #24]
   d6ea6:	69e3      	ldr	r3, [r4, #28]
   d6ea8:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d6eac:	45b0      	cmp	r8, r6
   d6eae:	d004      	beq.n	d6eba <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xfa>
   d6eb0:	1d30      	adds	r0, r6, #4
   d6eb2:	f7fd fabf 	bl	d4434 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6eb6:	3608      	adds	r6, #8
   d6eb8:	e7f8      	b.n	d6eac <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d6eba:	2300      	movs	r3, #0
   d6ebc:	61e3      	str	r3, [r4, #28]
        }
        services_.clear();
        characteristics_.clear();
        servicesDiscovered_ = false;
   d6ebe:	72a3      	strb	r3, [r4, #10]
        characteristicsDiscovered_ = false;
   d6ec0:	72e3      	strb	r3, [r4, #11]
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
                if (peer) {
                    peer->impl()->onDisconnected();
                    if (impl->disconnectedCb_) {
   d6ec2:	6aab      	ldr	r3, [r5, #40]	; 0x28
   d6ec4:	b113      	cbz	r3, d6ecc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10c>
                        impl->disconnectedCb_(*peer, impl->disconnectedContext_);
   d6ec6:	6b29      	ldr	r1, [r5, #48]	; 0x30
   d6ec8:	4638      	mov	r0, r7
   d6eca:	4798      	blx	r3
                    }
                    LOG(TRACE, "Disconnected by remote device.");
   d6ecc:	2320      	movs	r3, #32
   d6ece:	4a0d      	ldr	r2, [pc, #52]	; (d6f04 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x144>)
   d6ed0:	9306      	str	r3, [sp, #24]
   d6ed2:	9200      	str	r2, [sp, #0]
   d6ed4:	2300      	movs	r3, #0
   d6ed6:	4909      	ldr	r1, [pc, #36]	; (d6efc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d6ed8:	9307      	str	r3, [sp, #28]
   d6eda:	2001      	movs	r0, #1
   d6edc:	aa06      	add	r2, sp, #24
   d6ede:	f7ff fa1b 	bl	d6318 <log_message>
                    impl->peers_.removeOne(*peer);
   d6ee2:	4639      	mov	r1, r7
   d6ee4:	f105 0018 	add.w	r0, r5, #24
   d6ee8:	f7ff ff01 	bl	d6cee <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d6eec:	a803      	add	r0, sp, #12
   d6eee:	f7ff fc93 	bl	d6818 <_ZN8particle3ble13WiringBleLockD1Ev>
            }
            default: {
                break;
            }
        }
    }
   d6ef2:	b00e      	add	sp, #56	; 0x38
   d6ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6ef8:	000da97a 	.word	0x000da97a
   d6efc:	000da918 	.word	0x000da918
   d6f00:	000da9a0 	.word	0x000da9a0
   d6f04:	000da9bd 	.word	0x000da9bd

000d6f08 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
private:
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d6f08:	b538      	push	{r3, r4, r5, lr}
        T* d = nullptr;
        if (n > 0) {
   d6f0a:	1e0d      	subs	r5, r1, #0
private:
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d6f0c:	4604      	mov	r4, r0
        T* d = nullptr;
        if (n > 0) {
   d6f0e:	dd06      	ble.n	d6f1e <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x16>
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
}

inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
   d6f10:	2154      	movs	r1, #84	; 0x54
   d6f12:	4369      	muls	r1, r5
   d6f14:	6800      	ldr	r0, [r0, #0]
   d6f16:	f7ff fae3 	bl	d64e0 <realloc>
    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
            if (!d) {
   d6f1a:	b920      	cbnz	r0, d6f26 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>
   d6f1c:	bd38      	pop	{r3, r4, r5, pc}
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6f1e:	6800      	ldr	r0, [r0, #0]
   d6f20:	f7ff fad6 	bl	d64d0 <free>
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d6f24:	2000      	movs	r0, #0
                return false;
            }
        } else {
            AllocatorT::free(data_);
        }
        data_ = d;
   d6f26:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d6f28:	60a5      	str	r5, [r4, #8]
        return true;
   d6f2a:	2001      	movs	r0, #1
    }
   d6f2c:	bd38      	pop	{r3, r4, r5, pc}

000d6f2e <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv>:
     * WARN: This is executed from HAL ble thread. The current thread which starts the scanning procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   d6f2e:	b570      	push	{r4, r5, r6, lr}
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
   d6f30:	2654      	movs	r6, #84	; 0x54
     * WARN: This is executed from HAL ble thread. The current thread which starts the scanning procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   d6f32:	b0c0      	sub	sp, #256	; 0x100
   d6f34:	4605      	mov	r5, r0
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
   d6f36:	4632      	mov	r2, r6
     * WARN: This is executed from HAL ble thread. The current thread which starts the scanning procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   d6f38:	460c      	mov	r4, r1
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
   d6f3a:	a801      	add	r0, sp, #4
   d6f3c:	2100      	movs	r1, #0
   d6f3e:	f002 fe80 	bl	d9c42 <memset>
   d6f42:	a803      	add	r0, sp, #12
   d6f44:	f7ff fcf5 	bl	d6932 <_ZN8particle18BleAdvertisingDataC1Ev>
   d6f48:	a80c      	add	r0, sp, #48	; 0x30
   d6f4a:	f7ff fcf2 	bl	d6932 <_ZN8particle18BleAdvertisingDataC1Ev>
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d6f4e:	462a      	mov	r2, r5
   d6f50:	ab01      	add	r3, sp, #4
   d6f52:	f852 0f10 	ldr.w	r0, [r2, #16]!
   d6f56:	6851      	ldr	r1, [r2, #4]
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
        result.address = event->peer_addr;
        result.rssi = event->rssi;
        result.scanResponse.set(event->sr_data, event->sr_data_len);
   d6f58:	89ea      	ldrh	r2, [r5, #14]
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d6f5a:	c303      	stmia	r3!, {r0, r1}
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
        result.address = event->peer_addr;
        result.rssi = event->rssi;
   d6f5c:	782b      	ldrb	r3, [r5, #0]
        result.scanResponse.set(event->sr_data, event->sr_data_len);
   d6f5e:	68a9      	ldr	r1, [r5, #8]
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
        result.address = event->peer_addr;
        result.rssi = event->rssi;
   d6f60:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
        result.scanResponse.set(event->sr_data, event->sr_data_len);
   d6f64:	a80c      	add	r0, sp, #48	; 0x30
   d6f66:	f7ff fc75 	bl	d6854 <_ZN8particle18BleAdvertisingData3setEPKhj>
        result.advertisingData.set(event->adv_data, event->adv_data_len);
   d6f6a:	89aa      	ldrh	r2, [r5, #12]
   d6f6c:	6869      	ldr	r1, [r5, #4]
   d6f6e:	a803      	add	r0, sp, #12
   d6f70:	f7ff fc70 	bl	d6854 <_ZN8particle18BleAdvertisingData3setEPKhj>
        if (delegator->callback_) {
   d6f74:	69a5      	ldr	r5, [r4, #24]
   d6f76:	b11d      	cbz	r5, d6f80 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x52>
            delegator->callback_(&result, delegator->context_);
   d6f78:	69e1      	ldr	r1, [r4, #28]
   d6f7a:	a801      	add	r0, sp, #4
   d6f7c:	47a8      	blx	r5
   d6f7e:	e03c      	b.n	d6ffa <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xcc>
            delegator->foundCount_++;
            return;
        }
        if (delegator->resultsPtr_) {
   d6f80:	68e0      	ldr	r0, [r4, #12]
   d6f82:	b198      	cbz	r0, d6fac <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x7e>
            if (delegator->foundCount_ < delegator->targetCount_) {
   d6f84:	6963      	ldr	r3, [r4, #20]
   d6f86:	6922      	ldr	r2, [r4, #16]
   d6f88:	4293      	cmp	r3, r2
   d6f8a:	d239      	bcs.n	d7000 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd2>
                delegator->resultsPtr_[delegator->foundCount_++] = result;
   d6f8c:	1c5a      	adds	r2, r3, #1
   d6f8e:	6162      	str	r2, [r4, #20]
   d6f90:	fb06 0003 	mla	r0, r6, r3, r0
   d6f94:	2251      	movs	r2, #81	; 0x51
   d6f96:	a901      	add	r1, sp, #4
   d6f98:	f002 fe2d 	bl	d9bf6 <memcpy>
                if (delegator->foundCount_ >= delegator->targetCount_) {
   d6f9c:	6962      	ldr	r2, [r4, #20]
   d6f9e:	6923      	ldr	r3, [r4, #16]
   d6fa0:	429a      	cmp	r2, r3
   d6fa2:	d32d      	bcc.n	d7000 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd2>
                    LOG_DEBUG(TRACE, "Target number of devices found. Stop scanning...");
                    hal_ble_gap_stop_scan(nullptr);
   d6fa4:	4628      	mov	r0, r5
   d6fa6:	f7ff f859 	bl	d605c <hal_ble_gap_stop_scan>
   d6faa:	e029      	b.n	d7000 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd2>
   d6fac:	4632      	mov	r2, r6
   d6fae:	a901      	add	r1, sp, #4
   d6fb0:	a816      	add	r0, sp, #88	; 0x58
   d6fb2:	f002 fe20 	bl	d9bf6 <memcpy>
   d6fb6:	4632      	mov	r2, r6
   d6fb8:	a916      	add	r1, sp, #88	; 0x58
   d6fba:	a82b      	add	r0, sp, #172	; 0xac
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d6fbc:	6865      	ldr	r5, [r4, #4]
   d6fbe:	f002 fe1a 	bl	d9bf6 <memcpy>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6fc2:	68a3      	ldr	r3, [r4, #8]
   d6fc4:	429d      	cmp	r5, r3
   d6fc6:	db04      	blt.n	d6fd2 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xa4>
   d6fc8:	1c69      	adds	r1, r5, #1
   d6fca:	4620      	mov	r0, r4
   d6fcc:	f7ff ff9c 	bl	d6f08 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d6fd0:	b1b0      	cbz	r0, d7000 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd2>
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d6fd2:	6863      	ldr	r3, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6fd4:	6822      	ldr	r2, [r4, #0]
   d6fd6:	2654      	movs	r6, #84	; 0x54
   d6fd8:	fb06 2505 	mla	r5, r6, r5, r2
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d6fdc:	fb06 2203 	mla	r2, r6, r3, r2
   d6fe0:	1b52      	subs	r2, r2, r5
   d6fe2:	4629      	mov	r1, r5
   d6fe4:	19a8      	adds	r0, r5, r6
   d6fe6:	f002 fe11 	bl	d9c0c <memmove>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
   d6fea:	4632      	mov	r2, r6
   d6fec:	a92b      	add	r1, sp, #172	; 0xac
   d6fee:	4628      	mov	r0, r5
   d6ff0:	f002 fe01 	bl	d9bf6 <memcpy>
    ++size_;
   d6ff4:	6863      	ldr	r3, [r4, #4]
   d6ff6:	3301      	adds	r3, #1
   d6ff8:	6063      	str	r3, [r4, #4]
                }
            }
            return;
        }
        if (delegator->resultsVector_.append(result)) {
            delegator->foundCount_++;
   d6ffa:	6963      	ldr	r3, [r4, #20]
   d6ffc:	3301      	adds	r3, #1
   d6ffe:	6163      	str	r3, [r4, #20]
        }
    }
   d7000:	b040      	add	sp, #256	; 0x100
   d7002:	bd70      	pop	{r4, r5, r6, pc}

000d7004 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d7004:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d7006:	4c06      	ldr	r4, [pc, #24]	; (d7020 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d7008:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d700a:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d700c:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d700e:	f7ff f86b 	bl	d60e8 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d7012:	4620      	mov	r0, r4
   d7014:	4a03      	ldr	r2, [pc, #12]	; (d7024 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d7016:	4904      	ldr	r1, [pc, #16]	; (d7028 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d7018:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d701c:	f002 baa2 	b.w	d9564 <__aeabi_atexit>
   d7020:	2003e480 	.word	0x2003e480
   d7024:	2003e25c 	.word	0x2003e25c
   d7028:	000d67b7 	.word	0x000d67b7

000d702c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d702c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d702e:	4606      	mov	r6, r0
   d7030:	460d      	mov	r5, r1
   d7032:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d7034:	2400      	movs	r4, #0
  while (size--) {
   d7036:	42bd      	cmp	r5, r7
   d7038:	d00c      	beq.n	d7054 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d703a:	6833      	ldr	r3, [r6, #0]
   d703c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d7040:	689b      	ldr	r3, [r3, #8]
   d7042:	4630      	mov	r0, r6
   d7044:	4798      	blx	r3
     if (chunk>=0)
   d7046:	2800      	cmp	r0, #0
   d7048:	db01      	blt.n	d704e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d704a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d704c:	e7f3      	b.n	d7036 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d704e:	2c00      	cmp	r4, #0
   d7050:	bf08      	it	eq
   d7052:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d7054:	4620      	mov	r0, r4
   d7056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7058 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d7058:	b570      	push	{r4, r5, r6, lr}
   d705a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d705c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d705e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d7060:	b149      	cbz	r1, d7076 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d7062:	f002 fe5c 	bl	d9d1e <strlen>
   d7066:	682b      	ldr	r3, [r5, #0]
   d7068:	4602      	mov	r2, r0
   d706a:	4621      	mov	r1, r4
   d706c:	4628      	mov	r0, r5
   d706e:	68db      	ldr	r3, [r3, #12]
    }
   d7070:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d7074:	4718      	bx	r3
    }
   d7076:	bd70      	pop	{r4, r5, r6, pc}

000d7078 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d7078:	6803      	ldr	r3, [r0, #0]
   d707a:	689b      	ldr	r3, [r3, #8]
   d707c:	4718      	bx	r3

000d707e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d707e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d7080:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d7082:	4605      	mov	r5, r0
  size_t n = print('\r');
   d7084:	f7ff fff8 	bl	d7078 <_ZN5Print5printEc>
  n += print('\n');
   d7088:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d708a:	4604      	mov	r4, r0
  n += print('\n');
   d708c:	4628      	mov	r0, r5
   d708e:	f7ff fff3 	bl	d7078 <_ZN5Print5printEc>
  return n;
}
   d7092:	4420      	add	r0, r4
   d7094:	bd38      	pop	{r3, r4, r5, pc}

000d7096 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d7096:	b530      	push	{r4, r5, lr}
   d7098:	b08b      	sub	sp, #44	; 0x2c
   d709a:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d709c:	2100      	movs	r1, #0
   d709e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d70a2:	2a01      	cmp	r2, #1
   d70a4:	bf98      	it	ls
   d70a6:	220a      	movls	r2, #10
   d70a8:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d70ac:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d70b0:	fb05 3312 	mls	r3, r5, r2, r3
   d70b4:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d70b8:	2b09      	cmp	r3, #9
   d70ba:	bf94      	ite	ls
   d70bc:	3330      	addls	r3, #48	; 0x30
   d70be:	3337      	addhi	r3, #55	; 0x37
   d70c0:	b2db      	uxtb	r3, r3
   d70c2:	4621      	mov	r1, r4
   d70c4:	f804 3901 	strb.w	r3, [r4], #-1
   d70c8:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d70ca:	2d00      	cmp	r5, #0
   d70cc:	d1ee      	bne.n	d70ac <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d70ce:	f7ff ffc3 	bl	d7058 <_ZN5Print5writeEPKc>
}
   d70d2:	b00b      	add	sp, #44	; 0x2c
   d70d4:	bd30      	pop	{r4, r5, pc}

000d70d6 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d70d6:	b40c      	push	{r2, r3}
   d70d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d70dc:	b087      	sub	sp, #28
   d70de:	af00      	add	r7, sp, #0
   d70e0:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d70e4:	4605      	mov	r5, r0
   d70e6:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d70ea:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d70ec:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d70ee:	4623      	mov	r3, r4
   d70f0:	464a      	mov	r2, r9
   d70f2:	2114      	movs	r1, #20
   d70f4:	1d38      	adds	r0, r7, #4
   d70f6:	f7ff fa0b 	bl	d6510 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d70fa:	2813      	cmp	r0, #19
   d70fc:	d805      	bhi.n	d710a <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d70fe:	1d39      	adds	r1, r7, #4
   d7100:	4628      	mov	r0, r5
   d7102:	f7ff ffa9 	bl	d7058 <_ZN5Print5writeEPKc>
   d7106:	4604      	mov	r4, r0
   d7108:	e013      	b.n	d7132 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d710a:	f100 0308 	add.w	r3, r0, #8
   d710e:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d7112:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d7114:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d7118:	1c41      	adds	r1, r0, #1
   d711a:	4623      	mov	r3, r4
   d711c:	464a      	mov	r2, r9
   d711e:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d7120:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d7122:	f7ff f9f5 	bl	d6510 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d7126:	4669      	mov	r1, sp
   d7128:	4628      	mov	r0, r5
   d712a:	f7ff ff95 	bl	d7058 <_ZN5Print5writeEPKc>
   d712e:	4604      	mov	r4, r0
   d7130:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d7132:	b11e      	cbz	r6, d713c <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d7134:	4628      	mov	r0, r5
   d7136:	f7ff ffa2 	bl	d707e <_ZN5Print7printlnEv>
   d713a:	4404      	add	r4, r0
    return n;
}
   d713c:	4620      	mov	r0, r4
   d713e:	371c      	adds	r7, #28
   d7140:	46bd      	mov	sp, r7
   d7142:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7146:	b002      	add	sp, #8
   d7148:	4770      	bx	lr

000d714a <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   d714a:	6880      	ldr	r0, [r0, #8]
   d714c:	6803      	ldr	r3, [r0, #0]
   d714e:	68db      	ldr	r3, [r3, #12]
   d7150:	4718      	bx	r3

000d7152 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
inline void spark::StreamLogHandler::printf(const char *fmt, ArgsT... args) {
    stream_->printf(fmt, args...);
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
   d7152:	4770      	bx	lr

000d7154 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   d7154:	b119      	cbz	r1, d715e <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   d7156:	680b      	ldr	r3, [r1, #0]
   d7158:	4608      	mov	r0, r1
   d715a:	685b      	ldr	r3, [r3, #4]
   d715c:	4718      	bx	r3
   d715e:	4770      	bx	lr

000d7160 <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print>:
}

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   d7160:	b119      	cbz	r1, d716a <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print+0xa>
   d7162:	680b      	ldr	r3, [r1, #0]
   d7164:	4608      	mov	r0, r1
   d7166:	685b      	ldr	r3, [r3, #4]
   d7168:	4718      	bx	r3
   d716a:	4770      	bx	lr

000d716c <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:

    virtual Print* createStream(const char *type, const JSONValue &params) = 0;
    virtual void destroyStream(Print *stream);
};

class DefaultOutputStreamFactory: public OutputStreamFactory {
   d716c:	4770      	bx	lr

000d716e <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
    virtual LogHandler* createHandler(const char *type, LogLevel level, LogCategoryFilters filters, Print *stream,
            const JSONValue &params) = 0; // TODO: Use some generic container or a buffer instead of JSONValue
    virtual void destroyHandler(LogHandler *handler);
};

class DefaultLogHandlerFactory: public LogHandlerFactory {
   d716e:	4770      	bx	lr

000d7170 <_ZN5spark16JSONStreamWriterD1Ev>:
    void writeSeparator();
    void writeEscaped(const char *data, size_t size);
    void write(char c);
};

class JSONStreamWriter: public JSONWriter {
   d7170:	4770      	bx	lr

000d7172 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
    return s;
}
#endif

// Iterates over subcategory names separated by '.' character
const char* nextSubcategoryName(const char* &category, size_t &size) {
   d7172:	b538      	push	{r3, r4, r5, lr}
   d7174:	4604      	mov	r4, r0
   d7176:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   d7178:	6800      	ldr	r0, [r0, #0]
   d717a:	212e      	movs	r1, #46	; 0x2e
   d717c:	f002 fda0 	bl	d9cc0 <strchrnul>
    size = s - category;
   d7180:	6823      	ldr	r3, [r4, #0]
   d7182:	1ac3      	subs	r3, r0, r3
   d7184:	602b      	str	r3, [r5, #0]
    if (size) {
   d7186:	b123      	cbz	r3, d7192 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   d7188:	7803      	ldrb	r3, [r0, #0]
   d718a:	b103      	cbz	r3, d718e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   d718c:	3001      	adds	r0, #1
   d718e:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d7190:	6020      	str	r0, [r4, #0]
        }
        std::swap(s, category);
        return s;
    }
    return nullptr;
   d7192:	4618      	mov	r0, r3
}
   d7194:	bd38      	pop	{r3, r4, r5, pc}

000d7196 <_ZN5spark16JSONStreamWriterD0Ev>:
   d7196:	b510      	push	{r4, lr}
   d7198:	210c      	movs	r1, #12
   d719a:	4604      	mov	r4, r0
   d719c:	f002 f9f0 	bl	d9580 <_ZdlPvj>
   d71a0:	4620      	mov	r0, r4
   d71a2:	bd10      	pop	{r4, pc}

000d71a4 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   d71a4:	b510      	push	{r4, lr}
   d71a6:	2104      	movs	r1, #4
   d71a8:	4604      	mov	r4, r0
   d71aa:	f002 f9e9 	bl	d9580 <_ZdlPvj>
   d71ae:	4620      	mov	r0, r4
   d71b0:	bd10      	pop	{r4, pc}

000d71b2 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:

    virtual Print* createStream(const char *type, const JSONValue &params) = 0;
    virtual void destroyStream(Print *stream);
};

class DefaultOutputStreamFactory: public OutputStreamFactory {
   d71b2:	b510      	push	{r4, lr}
   d71b4:	2104      	movs	r1, #4
   d71b6:	4604      	mov	r4, r0
   d71b8:	f002 f9e2 	bl	d9580 <_ZdlPvj>
   d71bc:	4620      	mov	r0, r4
   d71be:	bd10      	pop	{r4, pc}

000d71c0 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   d71c0:	b538      	push	{r3, r4, r5, lr}
   d71c2:	460c      	mov	r4, r1
   d71c4:	4605      	mov	r5, r0
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   d71c6:	f001 fc09 	bl	d89dc <_Z16_fetch_usbserialv>
   d71ca:	4284      	cmp	r4, r0
   d71cc:	d00d      	beq.n	d71ea <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2a>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   d71ce:	f001 fcdd 	bl	d8b8c <_Z22__fetch_global_Serial1v>
   d71d2:	4284      	cmp	r4, r0
   d71d4:	d105      	bne.n	d71e2 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x22>
        Serial1.end();
   d71d6:	f001 fcd9 	bl	d8b8c <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   d71da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
        Serial1.end();
   d71de:	f001 bcce 	b.w	d8b7e <_ZN11USARTSerial3endEv>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
   d71e2:	4621      	mov	r1, r4
   d71e4:	4628      	mov	r0, r5
   d71e6:	f7ff ffbb 	bl	d7160 <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print>
   d71ea:	bd38      	pop	{r3, r4, r5, pc}

000d71ec <_ZNK5spark10JSONStringeqEPKc.isra.7>:

inline bool spark::JSONString::isEmpty() const {
    return !n_;
}

inline bool spark::JSONString::operator==(const char *str) const {
   d71ec:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   d71ee:	f002 fd71 	bl	d9cd4 <strcmp>
}
   d71f2:	fab0 f080 	clz	r0, r0
   d71f6:	0940      	lsrs	r0, r0, #5
   d71f8:	bd08      	pop	{r3, pc}

000d71fa <_ZN5spark10JSONWriter5valueEPKc>:

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d71fa:	b538      	push	{r3, r4, r5, lr}
   d71fc:	4605      	mov	r5, r0
    return value(val, strlen(val));
   d71fe:	4608      	mov	r0, r1

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d7200:	460c      	mov	r4, r1
    return value(val, strlen(val));
   d7202:	f002 fd8c 	bl	d9d1e <strlen>
   d7206:	4621      	mov	r1, r4
   d7208:	4602      	mov	r2, r0
   d720a:	4628      	mov	r0, r5
}
   d720c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
    return value(val, strlen(val));
   d7210:	f002 b879 	b.w	d9306 <_ZN5spark10JSONWriter5valueEPKcj>

000d7214 <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d7214:	6800      	ldr	r0, [r0, #0]
   d7216:	f7fe bf77 	b.w	d6108 <os_mutex_recursive_lock>

000d721a <_ZN5spark16StreamLogHandler5writeEPKc>:

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
   d721a:	b570      	push	{r4, r5, r6, lr}
   d721c:	4604      	mov	r4, r0
    write(str, strlen(str));
   d721e:	4608      	mov	r0, r1

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
   d7220:	460d      	mov	r5, r1
    write(str, strlen(str));
   d7222:	f002 fd7c 	bl	d9d1e <strlen>
   d7226:	6823      	ldr	r3, [r4, #0]
   d7228:	4602      	mov	r2, r0
   d722a:	4629      	mov	r1, r5
   d722c:	4620      	mov	r0, r4
   d722e:	68db      	ldr	r3, [r3, #12]
}
   d7230:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
    write(str, strlen(str));
   d7234:	4718      	bx	r3

000d7236 <_ZN5spark16StreamLogHandler5writeEc>:
}

inline void spark::StreamLogHandler::write(char c) {
   d7236:	b513      	push	{r0, r1, r4, lr}
   d7238:	ab02      	add	r3, sp, #8
    write(&c, 1);
   d723a:	6802      	ldr	r2, [r0, #0]

inline void spark::StreamLogHandler::write(const char *str) {
    write(str, strlen(str));
}

inline void spark::StreamLogHandler::write(char c) {
   d723c:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
   d7240:	68d4      	ldr	r4, [r2, #12]
   d7242:	4619      	mov	r1, r3
   d7244:	2201      	movs	r2, #1
   d7246:	47a0      	blx	r4
}
   d7248:	b002      	add	sp, #8
   d724a:	bd10      	pop	{r4, pc}

000d724c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
        }
    }
    return level;
}

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d724c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d7250:	6845      	ldr	r5, [r0, #4]
   d7252:	6807      	ldr	r7, [r0, #0]
   d7254:	b085      	sub	sp, #20
   d7256:	4691      	mov	r9, r2
   d7258:	2214      	movs	r2, #20
   d725a:	4355      	muls	r5, r2
   d725c:	9301      	str	r3, [sp, #4]
   d725e:	10ab      	asrs	r3, r5, #2
   d7260:	4d19      	ldr	r5, [pc, #100]	; (d72c8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x7c>)
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
   d7262:	9202      	str	r2, [sp, #8]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d7264:	435d      	muls	r5, r3
   d7266:	468b      	mov	fp, r1
   d7268:	463c      	mov	r4, r7
    return std::distance(nodes.begin(), std::lower_bound(nodes.begin(), nodes.end(), std::make_pair(name, size),
            [&found](const Node &node, const std::pair<const char*, size_t> &value) {
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
                if (cmp == 0) {
                    if (node.size == value.second) { // Lengths are equal
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d726a:	2301      	movs	r3, #1
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   d726c:	2d00      	cmp	r5, #0
   d726e:	9303      	str	r3, [sp, #12]
   d7270:	dd23      	ble.n	d72ba <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x6e>
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
   d7272:	9b02      	ldr	r3, [sp, #8]
	{
	  _DistanceType __half = __len >> 1;
   d7274:	106e      	asrs	r6, r5, #1
   d7276:	fb03 f006 	mul.w	r0, r3, r6
   d727a:	eb04 0800 	add.w	r8, r4, r0

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
    // Using binary search to find existent node or suitable position for new node
    return std::distance(nodes.begin(), std::lower_bound(nodes.begin(), nodes.end(), std::make_pair(name, size),
            [&found](const Node &node, const std::pair<const char*, size_t> &value) {
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   d727e:	464a      	mov	r2, r9
   d7280:	f8b8 a004 	ldrh.w	sl, [r8, #4]
   d7284:	5820      	ldr	r0, [r4, r0]
   d7286:	45d1      	cmp	r9, sl
   d7288:	bf28      	it	cs
   d728a:	4652      	movcs	r2, sl
   d728c:	4659      	mov	r1, fp
   d728e:	f002 fd4e 	bl	d9d2e <strncmp>
                if (cmp == 0) {
   d7292:	9b03      	ldr	r3, [sp, #12]
   d7294:	b948      	cbnz	r0, d72aa <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x5e>
                    if (node.size == value.second) { // Lengths are equal
   d7296:	45d1      	cmp	r9, sl
   d7298:	d103      	bne.n	d72a2 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d729a:	9a01      	ldr	r2, [sp, #4]
   d729c:	7013      	strb	r3, [r2, #0]
        }
    }
    return level;
}

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d729e:	4635      	mov	r5, r6
   d72a0:	e7e4      	b.n	d726c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x20>
                if (cmp == 0) {
                    if (node.size == value.second) { // Lengths are equal
                        found = true; // Allows caller code to avoid extra call to strncmp()
                        return false;
                    }
                    return node.size < value.second;
   d72a2:	bf8c      	ite	hi
   d72a4:	2001      	movhi	r0, #1
   d72a6:	2000      	movls	r0, #0
   d72a8:	e000      	b.n	d72ac <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                }
                return cmp < 0;
   d72aa:	0fc0      	lsrs	r0, r0, #31
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   d72ac:	2800      	cmp	r0, #0
   d72ae:	d0f6      	beq.n	d729e <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x52>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   d72b0:	1bae      	subs	r6, r5, r6
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
	    {
	      __first = __middle;
	      ++__first;
   d72b2:	f108 0414 	add.w	r4, r8, #20
	      __len = __len - __half - 1;
   d72b6:	3e01      	subs	r6, #1
   d72b8:	e7f1      	b.n	d729e <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x52>
            }));
   d72ba:	1be4      	subs	r4, r4, r7
}
   d72bc:	4802      	ldr	r0, [pc, #8]	; (d72c8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x7c>)
                        return false;
                    }
                    return node.size < value.second;
                }
                return cmp < 0;
            }));
   d72be:	10a4      	asrs	r4, r4, #2
}
   d72c0:	4360      	muls	r0, r4
   d72c2:	b005      	add	sp, #20
   d72c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d72c8:	cccccccd 	.word	0xcccccccd

000d72cc <_ZNK5spark6detail9LogFilter5levelEPKc>:
}

spark::detail::LogFilter::~LogFilter() {
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
   d72cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d72ce:	b085      	sub	sp, #20
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
   d72d0:	6903      	ldr	r3, [r0, #16]
}

spark::detail::LogFilter::~LogFilter() {
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
   d72d2:	9101      	str	r1, [sp, #4]
    LogLevel level = level_; // Default level
   d72d4:	7e06      	ldrb	r6, [r0, #24]
    if (!nodes_.isEmpty() && category) {
   d72d6:	b313      	cbz	r3, d731e <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
   d72d8:	b309      	cbz	r1, d731e <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d72da:	af04      	add	r7, sp, #16
   d72dc:	2300      	movs	r3, #0
   d72de:	f847 3d04 	str.w	r3, [r7, #-4]!
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   d72e2:	f100 040c 	add.w	r4, r0, #12
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d72e6:	461d      	mov	r5, r3
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d72e8:	4639      	mov	r1, r7
   d72ea:	a801      	add	r0, sp, #4
   d72ec:	f7ff ff41 	bl	d7172 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d72f0:	4601      	mov	r1, r0
   d72f2:	b1a0      	cbz	r0, d731e <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
            bool found = false;
   d72f4:	ab04      	add	r3, sp, #16
            const int index = nodeIndex(*pNodes, name, size, found);
   d72f6:	9a03      	ldr	r2, [sp, #12]
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d72f8:	f803 5d05 	strb.w	r5, [r3, #-5]!
            const int index = nodeIndex(*pNodes, name, size, found);
   d72fc:	4620      	mov	r0, r4
   d72fe:	f7ff ffa5 	bl	d724c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   d7302:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d7306:	b153      	cbz	r3, d731e <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
    return data_[i];
}

template<typename T, typename AllocatorT>
inline const T& spark::Vector<T, AllocatorT>::at(int i) const {
    return data_[i];
   d7308:	6823      	ldr	r3, [r4, #0]
   d730a:	2414      	movs	r4, #20
   d730c:	fb04 3400 	mla	r4, r4, r0, r3
            }
            const Node &node = pNodes->at(index);
            if (node.level >= 0) {
                level = (LogLevel)node.level;
            }
            pNodes = &node.nodes;
   d7310:	3408      	adds	r4, #8
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found) {
                break;
            }
            const Node &node = pNodes->at(index);
            if (node.level >= 0) {
   d7312:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   d7316:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   d7318:	bfa8      	it	ge
   d731a:	b2de      	uxtbge	r6, r3
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d731c:	e7e4      	b.n	d72e8 <_ZNK5spark6detail9LogFilter5levelEPKc+0x1c>
            }
            pNodes = &node.nodes;
        }
    }
    return level;
}
   d731e:	4630      	mov	r0, r6
   d7320:	b005      	add	sp, #20
   d7322:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7324 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   d7324:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   d7326:	4c09      	ldr	r4, [pc, #36]	; (d734c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   d7328:	6823      	ldr	r3, [r4, #0]
   d732a:	07db      	lsls	r3, r3, #31
   d732c:	d40b      	bmi.n	d7346 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d732e:	4620      	mov	r0, r4
   d7330:	f7fc fec2 	bl	d40b8 <__cxa_guard_acquire>
   d7334:	b138      	cbz	r0, d7346 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d7336:	4620      	mov	r0, r4
   d7338:	f7fc fec3 	bl	d40c2 <__cxa_guard_release>
   d733c:	4a04      	ldr	r2, [pc, #16]	; (d7350 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   d733e:	4905      	ldr	r1, [pc, #20]	; (d7354 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   d7340:	4805      	ldr	r0, [pc, #20]	; (d7358 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d7342:	f002 f90f 	bl	d9564 <__aeabi_atexit>
    return &factory;
}
   d7346:	4804      	ldr	r0, [pc, #16]	; (d7358 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d7348:	bd10      	pop	{r4, pc}
   d734a:	bf00      	nop
   d734c:	2003e484 	.word	0x2003e484
   d7350:	2003e25c 	.word	0x2003e25c
   d7354:	000d716f 	.word	0x000d716f
   d7358:	2003e1ec 	.word	0x2003e1ec

000d735c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   d735c:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   d735e:	4c09      	ldr	r4, [pc, #36]	; (d7384 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   d7360:	6823      	ldr	r3, [r4, #0]
   d7362:	07db      	lsls	r3, r3, #31
   d7364:	d40b      	bmi.n	d737e <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d7366:	4620      	mov	r0, r4
   d7368:	f7fc fea6 	bl	d40b8 <__cxa_guard_acquire>
   d736c:	b138      	cbz	r0, d737e <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d736e:	4620      	mov	r0, r4
   d7370:	f7fc fea7 	bl	d40c2 <__cxa_guard_release>
   d7374:	4a04      	ldr	r2, [pc, #16]	; (d7388 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   d7376:	4905      	ldr	r1, [pc, #20]	; (d738c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   d7378:	4805      	ldr	r0, [pc, #20]	; (d7390 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d737a:	f002 f8f3 	bl	d9564 <__aeabi_atexit>
    return &factory;
}
   d737e:	4804      	ldr	r0, [pc, #16]	; (d7390 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d7380:	bd10      	pop	{r4, pc}
   d7382:	bf00      	nop
   d7384:	2003e4b4 	.word	0x2003e4b4
   d7388:	2003e25c 	.word	0x2003e25c
   d738c:	000d716d 	.word	0x000d716d
   d7390:	2003e1e8 	.word	0x2003e1e8

000d7394 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   d7394:	b538      	push	{r3, r4, r5, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d7396:	2500      	movs	r5, #0
   d7398:	4604      	mov	r4, r0
   d739a:	6005      	str	r5, [r0, #0]
   d739c:	6045      	str	r5, [r0, #4]
   d739e:	6085      	str	r5, [r0, #8]
   d73a0:	6105      	str	r5, [r0, #16]
   d73a2:	6145      	str	r5, [r0, #20]
   d73a4:	6185      	str	r5, [r0, #24]
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d73a6:	f840 5f24 	str.w	r5, [r0, #36]!
    {
        os_mutex_recursive_create(&handle_);
   d73aa:	f7fe fe9d 	bl	d60e8 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   d73ae:	f7ff ffb9 	bl	d7324 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   d73b2:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d73b4:	f7ff ffd2 	bl	d735c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   d73b8:	7325      	strb	r5, [r4, #12]
#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d73ba:	6220      	str	r0, [r4, #32]
#endif
    outputActive_ = false;
}
   d73bc:	4620      	mov	r0, r4
   d73be:	bd38      	pop	{r3, r4, r5, pc}

000d73c0 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   d73c0:	b510      	push	{r4, lr}
    static LogManager mgr;
   d73c2:	4c0a      	ldr	r4, [pc, #40]	; (d73ec <_ZN5spark10LogManager8instanceEv+0x2c>)
   d73c4:	6823      	ldr	r3, [r4, #0]
   d73c6:	07db      	lsls	r3, r3, #31
   d73c8:	d40e      	bmi.n	d73e8 <_ZN5spark10LogManager8instanceEv+0x28>
   d73ca:	4620      	mov	r0, r4
   d73cc:	f7fc fe74 	bl	d40b8 <__cxa_guard_acquire>
   d73d0:	b150      	cbz	r0, d73e8 <_ZN5spark10LogManager8instanceEv+0x28>
   d73d2:	4807      	ldr	r0, [pc, #28]	; (d73f0 <_ZN5spark10LogManager8instanceEv+0x30>)
   d73d4:	f7ff ffde 	bl	d7394 <_ZN5spark10LogManagerC1Ev>
   d73d8:	4620      	mov	r0, r4
   d73da:	f7fc fe72 	bl	d40c2 <__cxa_guard_release>
   d73de:	4a05      	ldr	r2, [pc, #20]	; (d73f4 <_ZN5spark10LogManager8instanceEv+0x34>)
   d73e0:	4905      	ldr	r1, [pc, #20]	; (d73f8 <_ZN5spark10LogManager8instanceEv+0x38>)
   d73e2:	4803      	ldr	r0, [pc, #12]	; (d73f0 <_ZN5spark10LogManager8instanceEv+0x30>)
   d73e4:	f002 f8be 	bl	d9564 <__aeabi_atexit>
    return &mgr;
}
   d73e8:	4801      	ldr	r0, [pc, #4]	; (d73f0 <_ZN5spark10LogManager8instanceEv+0x30>)
   d73ea:	bd10      	pop	{r4, pc}
   d73ec:	2003e488 	.word	0x2003e488
   d73f0:	2003e48c 	.word	0x2003e48c
   d73f4:	2003e25c 	.word	0x2003e25c
   d73f8:	000d782b 	.word	0x000d782b

000d73fc <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   d73fc:	2300      	movs	r3, #0
   d73fe:	4a02      	ldr	r2, [pc, #8]	; (d7408 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   d7400:	4902      	ldr	r1, [pc, #8]	; (d740c <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   d7402:	4803      	ldr	r0, [pc, #12]	; (d7410 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   d7404:	f7fe bfa0 	b.w	d6348 <log_set_callbacks>
   d7408:	000d770d 	.word	0x000d770d
   d740c:	000d769d 	.word	0x000d769d
   d7410:	000d7625 	.word	0x000d7625

000d7414 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   d7414:	2300      	movs	r3, #0
   d7416:	461a      	mov	r2, r3
   d7418:	4619      	mov	r1, r3
   d741a:	4618      	mov	r0, r3
   d741c:	f7fe bf94 	b.w	d6348 <log_set_callbacks>

000d7420 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d7420:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7422:	ac02      	add	r4, sp, #8
        JSONObjectIterator(value.t_, value.d_) {
   d7424:	688e      	ldr	r6, [r1, #8]
   d7426:	f851 3b04 	ldr.w	r3, [r1], #4
   d742a:	f844 3d08 	str.w	r3, [r4, #-8]!
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d742e:	4605      	mov	r5, r0
   d7430:	a801      	add	r0, sp, #4
   d7432:	f7ff fb7f 	bl	d6b34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        JSONObjectIterator(value.t_, value.d_) {
   d7436:	4622      	mov	r2, r4
   d7438:	4631      	mov	r1, r6
   d743a:	4628      	mov	r0, r5
   d743c:	f001 ff9a 	bl	d9374 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7440:	a801      	add	r0, sp, #4
   d7442:	f7fc fff7 	bl	d4434 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d7446:	4628      	mov	r0, r5
   d7448:	b002      	add	sp, #8
   d744a:	bd70      	pop	{r4, r5, r6, pc}

000d744c <_ZNK5spark18JSONObjectIterator5valueEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d744c:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d744e:	ac02      	add	r4, sp, #8
    return JSONValue(v_, d_);
   d7450:	690e      	ldr	r6, [r1, #16]
   d7452:	f851 3b04 	ldr.w	r3, [r1], #4
   d7456:	f844 3d08 	str.w	r3, [r4, #-8]!

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d745a:	4605      	mov	r5, r0
   d745c:	a801      	add	r0, sp, #4
   d745e:	f7ff fb69 	bl	d6b34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONValue(v_, d_);
   d7462:	4622      	mov	r2, r4
   d7464:	4631      	mov	r1, r6
   d7466:	4628      	mov	r0, r5
   d7468:	f001 ff9f 	bl	d93aa <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d746c:	a801      	add	r0, sp, #4
   d746e:	f7fc ffe1 	bl	d4434 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d7472:	4628      	mov	r0, r5
   d7474:	b002      	add	sp, #8
   d7476:	bd70      	pop	{r4, r5, r6, pc}

000d7478 <_ZNK5spark18JSONObjectIterator4nameEv>:

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
        JSONObjectIterator(value.t_, value.d_) {
}

inline spark::JSONString spark::JSONObjectIterator::name() const {
   d7478:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d747a:	ac02      	add	r4, sp, #8
    return JSONString(k_, d_);
   d747c:	68ce      	ldr	r6, [r1, #12]
   d747e:	f851 3b04 	ldr.w	r3, [r1], #4
   d7482:	f844 3d08 	str.w	r3, [r4, #-8]!

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
        JSONObjectIterator(value.t_, value.d_) {
}

inline spark::JSONString spark::JSONObjectIterator::name() const {
   d7486:	4605      	mov	r5, r0
   d7488:	a801      	add	r0, sp, #4
   d748a:	f7ff fb53 	bl	d6b34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONString(k_, d_);
   d748e:	4622      	mov	r2, r4
   d7490:	4631      	mov	r1, r6
   d7492:	4628      	mov	r0, r5
   d7494:	f001 ff46 	bl	d9324 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7498:	a801      	add	r0, sp, #4
   d749a:	f7fc ffcb 	bl	d4434 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d749e:	4628      	mov	r0, r5
   d74a0:	b002      	add	sp, #8
   d74a2:	bd70      	pop	{r4, r5, r6, pc}

000d74a4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
    static DefaultOutputStreamFactory factory;
    return &factory;
}

void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   d74a4:	b530      	push	{r4, r5, lr}
   d74a6:	b08b      	sub	sp, #44	; 0x2c
   d74a8:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   d74aa:	4601      	mov	r1, r0
   d74ac:	a804      	add	r0, sp, #16
   d74ae:	f7ff ffb7 	bl	d7420 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
    while (it.next()) {
   d74b2:	a804      	add	r0, sp, #16
   d74b4:	f001 fe3c 	bl	d9130 <_ZN5spark18JSONObjectIterator4nextEv>
   d74b8:	b1e8      	cbz	r0, d74f6 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x52>
        if (it.name() == "baud" && baudRate) {
   d74ba:	a904      	add	r1, sp, #16
   d74bc:	4668      	mov	r0, sp
   d74be:	f7ff ffdb 	bl	d7478 <_ZNK5spark18JSONObjectIterator4nameEv>
   d74c2:	490f      	ldr	r1, [pc, #60]	; (d7500 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x5c>)
   d74c4:	9802      	ldr	r0, [sp, #8]
   d74c6:	f7ff fe91 	bl	d71ec <_ZNK5spark10JSONStringeqEPKc.isra.7>
   d74ca:	4604      	mov	r4, r0
   d74cc:	b110      	cbz	r0, d74d4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x30>
   d74ce:	1c2c      	adds	r4, r5, #0
   d74d0:	bf18      	it	ne
   d74d2:	2401      	movne	r4, #1
   d74d4:	a801      	add	r0, sp, #4
   d74d6:	f7fc ffad 	bl	d4434 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d74da:	2c00      	cmp	r4, #0
   d74dc:	d0e9      	beq.n	d74b2 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0xe>
            *baudRate = it.value().toInt();
   d74de:	a904      	add	r1, sp, #16
   d74e0:	4668      	mov	r0, sp
   d74e2:	f7ff ffb3 	bl	d744c <_ZNK5spark18JSONObjectIterator5valueEv>
   d74e6:	4668      	mov	r0, sp
   d74e8:	f001 fe02 	bl	d90f0 <_ZNK5spark9JSONValue5toIntEv>
   d74ec:	6028      	str	r0, [r5, #0]
   d74ee:	a801      	add	r0, sp, #4
   d74f0:	f7fc ffa0 	bl	d4434 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d74f4:	e7dd      	b.n	d74b2 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0xe>
   d74f6:	a805      	add	r0, sp, #20
   d74f8:	f7fc ff9c 	bl	d4434 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
    }
}
   d74fc:	b00b      	add	sp, #44	; 0x2c
   d74fe:	bd30      	pop	{r4, r5, pc}
   d7500:	000daae8 	.word	0x000daae8

000d7504 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
    static DefaultLogHandlerFactory factory;
    return &factory;
}

// spark::DefaultOutputStreamFactory
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d7504:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7506:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (strcmp(type, "Serial") == 0) {
   d7508:	4620      	mov	r0, r4
   d750a:	4913      	ldr	r1, [pc, #76]	; (d7558 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
    static DefaultLogHandlerFactory factory;
    return &factory;
}

// spark::DefaultOutputStreamFactory
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d750c:	4615      	mov	r5, r2
#if PLATFORM_ID != 3
    if (strcmp(type, "Serial") == 0) {
   d750e:	f002 fbe1 	bl	d9cd4 <strcmp>
   d7512:	b940      	cbnz	r0, d7526 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x22>
        Serial.begin();
   d7514:	f001 fa62 	bl	d89dc <_Z16_fetch_usbserialv>
   d7518:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d751c:	f001 fa4e 	bl	d89bc <_ZN9USBSerial5beginEl>
        return &Serial;
   d7520:	f001 fa5c 	bl	d89dc <_Z16_fetch_usbserialv>
   d7524:	e015      	b.n	d7552 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4e>
    if (strcmp(type, "USBSerial1") == 0) {
        USBSerial1.begin();
        return &USBSerial1;
    }
#endif
    if (strcmp(type, "Serial1") == 0) {
   d7526:	490d      	ldr	r1, [pc, #52]	; (d755c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   d7528:	4620      	mov	r0, r4
   d752a:	f002 fbd3 	bl	d9cd4 <strcmp>
   d752e:	b978      	cbnz	r0, d7550 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   d7530:	a902      	add	r1, sp, #8
   d7532:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   d7536:	f841 3d04 	str.w	r3, [r1, #-4]!
        getParams(params, &baud);
   d753a:	4628      	mov	r0, r5
   d753c:	f7ff ffb2 	bl	d74a4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   d7540:	f001 fb24 	bl	d8b8c <_Z22__fetch_global_Serial1v>
   d7544:	9901      	ldr	r1, [sp, #4]
   d7546:	f001 fb17 	bl	d8b78 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   d754a:	f001 fb1f 	bl	d8b8c <_Z22__fetch_global_Serial1v>
   d754e:	e000      	b.n	d7552 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4e>
    }
#endif // PLATFORM_ID != 3
    return nullptr;
   d7550:	2000      	movs	r0, #0
}
   d7552:	b003      	add	sp, #12
   d7554:	bd30      	pop	{r4, r5, pc}
   d7556:	bf00      	nop
   d7558:	000daaed 	.word	0x000daaed
   d755c:	000daaf4 	.word	0x000daaf4

000d7560 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d7560:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d7562:	6804      	ldr	r4, [r0, #0]
   d7564:	6843      	ldr	r3, [r0, #4]
   d7566:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d7568:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d756a:	fb06 4603 	mla	r6, r6, r3, r4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d756e:	42a6      	cmp	r6, r4
   d7570:	d005      	beq.n	d757e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d7572:	f104 0008 	add.w	r0, r4, #8
   d7576:	f7ff fff3 	bl	d7560 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d757a:	3414      	adds	r4, #20
   d757c:	e7f7      	b.n	d756e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d757e:	6828      	ldr	r0, [r5, #0]
   d7580:	f7fe ffa6 	bl	d64d0 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d7584:	4628      	mov	r0, r5
   d7586:	bd70      	pop	{r4, r5, r6, pc}

000d7588 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d7588:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d758a:	6804      	ldr	r4, [r0, #0]
   d758c:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d758e:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d7590:	eb04 1603 	add.w	r6, r4, r3, lsl #4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d7594:	42a6      	cmp	r6, r4
   d7596:	d004      	beq.n	d75a2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   d7598:	4620      	mov	r0, r4
   d759a:	f7ff f855 	bl	d6648 <_ZN6StringD1Ev>
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d759e:	3410      	adds	r4, #16
   d75a0:	e7f8      	b.n	d7594 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d75a2:	6828      	ldr	r0, [r5, #0]
   d75a4:	f7fe ff94 	bl	d64d0 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d75a8:	4628      	mov	r0, r5
   d75aa:	bd70      	pop	{r4, r5, r6, pc}

000d75ac <_ZN5spark6detail9LogFilterD1Ev>:
    swap(cats_, cats);
    swap(nodes_, nodes);
    level_ = level;
}

spark::detail::LogFilter::~LogFilter() {
   d75ac:	b510      	push	{r4, lr}
   d75ae:	4604      	mov	r4, r0
   d75b0:	300c      	adds	r0, #12
   d75b2:	f7ff ffd5 	bl	d7560 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d75b6:	4620      	mov	r0, r4
   d75b8:	f7ff ffe6 	bl	d7588 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d75bc:	4620      	mov	r0, r4
   d75be:	bd10      	pop	{r4, pc}

000d75c0 <_ZN5spark16StreamLogHandlerD1Ev>:
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d75c0:	b510      	push	{r4, lr}
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d75c2:	4b04      	ldr	r3, [pc, #16]	; (d75d4 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d75c4:	4604      	mov	r4, r0
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d75c6:	f840 3b04 	str.w	r3, [r0], #4
   d75ca:	f7ff ffef 	bl	d75ac <_ZN5spark6detail9LogFilterD1Ev>
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d75ce:	4620      	mov	r0, r4
   d75d0:	bd10      	pop	{r4, pc}
   d75d2:	bf00      	nop
   d75d4:	000da0d8 	.word	0x000da0d8

000d75d8 <_ZN5spark16StreamLogHandlerD0Ev>:
   d75d8:	b510      	push	{r4, lr}
   d75da:	4604      	mov	r4, r0
   d75dc:	f7ff fff0 	bl	d75c0 <_ZN5spark16StreamLogHandlerD1Ev>
   d75e0:	4620      	mov	r0, r4
   d75e2:	2124      	movs	r1, #36	; 0x24
   d75e4:	f001 ffcc 	bl	d9580 <_ZdlPvj>
   d75e8:	4620      	mov	r0, r4
   d75ea:	bd10      	pop	{r4, pc}

000d75ec <_ZN5spark20JSONStreamLogHandlerD1Ev>:

private:
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
   d75ec:	b510      	push	{r4, lr}
   d75ee:	4b03      	ldr	r3, [pc, #12]	; (d75fc <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   d75f0:	6003      	str	r3, [r0, #0]
   d75f2:	4604      	mov	r4, r0
   d75f4:	f7ff ffe4 	bl	d75c0 <_ZN5spark16StreamLogHandlerD1Ev>
   d75f8:	4620      	mov	r0, r4
   d75fa:	bd10      	pop	{r4, pc}
   d75fc:	000daad8 	.word	0x000daad8

000d7600 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   d7600:	b510      	push	{r4, lr}
   d7602:	4604      	mov	r4, r0
   d7604:	f7ff fff2 	bl	d75ec <_ZN5spark20JSONStreamLogHandlerD1Ev>
   d7608:	4620      	mov	r0, r4
   d760a:	2124      	movs	r1, #36	; 0x24
   d760c:	f001 ffb8 	bl	d9580 <_ZdlPvj>
   d7610:	4620      	mov	r0, r4
   d7612:	bd10      	pop	{r4, pc}

000d7614 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d7614:	b510      	push	{r4, lr}
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d7616:	6803      	ldr	r3, [r0, #0]
   d7618:	4604      	mov	r4, r0
   d761a:	6818      	ldr	r0, [r3, #0]
   d761c:	f7fe fd7c 	bl	d6118 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   d7620:	4620      	mov	r0, r4
   d7622:	bd10      	pop	{r4, pc}

000d7624 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d7624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7628:	469b      	mov	fp, r3
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   d762a:	4b1b      	ldr	r3, [pc, #108]	; (d7698 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>)
   d762c:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d762e:	f3c3 0308 	ubfx	r3, r3, #0, #9

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d7632:	b085      	sub	sp, #20
   d7634:	4682      	mov	sl, r0
   d7636:	460e      	mov	r6, r1
   d7638:	4690      	mov	r8, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d763a:	bb53      	cbnz	r3, d7692 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x6e>
        return;
    }
#endif
    LogManager *that = instance();
   d763c:	f7ff fec0 	bl	d73c0 <_ZN5spark10LogManager8instanceEv>
   d7640:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d7642:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d7644:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   d7646:	f7ff fde5 	bl	d7214 <_ZN14RecursiveMutex4lockEv>
        // prevent re-entry
        if (that->isActive()) {
   d764a:	7b23      	ldrb	r3, [r4, #12]
   d764c:	b9f3      	cbnz	r3, d768c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x68>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d764e:	2301      	movs	r3, #1
   d7650:	7323      	strb	r3, [r4, #12]
   d7652:	6825      	ldr	r5, [r4, #0]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d7654:	6863      	ldr	r3, [r4, #4]
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
   d7656:	b2f6      	uxtb	r6, r6
   d7658:	eb05 0983 	add.w	r9, r5, r3, lsl #2
        // prevent re-entry
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
   d765c:	454d      	cmp	r5, r9
   d765e:	d013      	beq.n	d7688 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x64>
   d7660:	f855 7b04 	ldr.w	r7, [r5], #4
inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
}

inline void spark::LogHandler::message(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
    if (level >= filter_.level(category)) {
   d7664:	4641      	mov	r1, r8
   d7666:	1d38      	adds	r0, r7, #4
   d7668:	f7ff fe30 	bl	d72cc <_ZNK5spark6detail9LogFilter5levelEPKc>
   d766c:	4286      	cmp	r6, r0
   d766e:	d3f5      	bcc.n	d765c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x38>
        logMessage(msg, level, category, attr);
   d7670:	683b      	ldr	r3, [r7, #0]
   d7672:	f8cd b000 	str.w	fp, [sp]
   d7676:	689b      	ldr	r3, [r3, #8]
   d7678:	469e      	mov	lr, r3
   d767a:	4638      	mov	r0, r7
   d767c:	4643      	mov	r3, r8
   d767e:	4632      	mov	r2, r6
   d7680:	4651      	mov	r1, sl
   d7682:	4677      	mov	r7, lr
   d7684:	47b8      	blx	r7
   d7686:	e7e9      	b.n	d765c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x38>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d7688:	2300      	movs	r3, #0
   d768a:	7323      	strb	r3, [r4, #12]
#endif
    LogManager *that = instance();
    LOG_WITH_LOCK(that->mutex_) {
        // prevent re-entry
        if (that->isActive()) {
            return;
   d768c:	a803      	add	r0, sp, #12
   d768e:	f7ff ffc1 	bl	d7614 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   d7692:	b005      	add	sp, #20
   d7694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7698:	e000ed00 	.word	0xe000ed00

000d769c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:

void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d769c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d76a0:	4699      	mov	r9, r3
   d76a2:	4b19      	ldr	r3, [pc, #100]	; (d7708 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x6c>)
   d76a4:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d76a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
        }
        that->setActive(false);
    }
}

void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d76aa:	4607      	mov	r7, r0
   d76ac:	4688      	mov	r8, r1
   d76ae:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d76b0:	bb33      	cbnz	r3, d7700 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x64>
        return;
    }
#endif
    LogManager *that = instance();
   d76b2:	f7ff fe85 	bl	d73c0 <_ZN5spark10LogManager8instanceEv>
   d76b6:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d76b8:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d76ba:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d76bc:	f7ff fdaa 	bl	d7214 <_ZN14RecursiveMutex4lockEv>
        // prevent re-entry
        if (that->isActive()) {
   d76c0:	7b23      	ldrb	r3, [r4, #12]
   d76c2:	b9d3      	cbnz	r3, d76fa <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x5e>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d76c4:	2301      	movs	r3, #1
   d76c6:	7323      	strb	r3, [r4, #12]
   d76c8:	6825      	ldr	r5, [r4, #0]
   d76ca:	6863      	ldr	r3, [r4, #4]
    }
}

inline void spark::LogHandler::write(const char *data, size_t size, LogLevel level, const char *category) {
    if (level >= filter_.level(category)) {
   d76cc:	fa5f fb86 	uxtb.w	fp, r6
   d76d0:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        // prevent re-entry
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
   d76d4:	4555      	cmp	r5, sl
   d76d6:	d00e      	beq.n	d76f6 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x5a>
   d76d8:	f855 6b04 	ldr.w	r6, [r5], #4
   d76dc:	4649      	mov	r1, r9
   d76de:	1d30      	adds	r0, r6, #4
   d76e0:	f7ff fdf4 	bl	d72cc <_ZNK5spark6detail9LogFilter5levelEPKc>
   d76e4:	4583      	cmp	fp, r0
   d76e6:	d3f5      	bcc.n	d76d4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
        write(data, size);
   d76e8:	6833      	ldr	r3, [r6, #0]
   d76ea:	4642      	mov	r2, r8
   d76ec:	68db      	ldr	r3, [r3, #12]
   d76ee:	4639      	mov	r1, r7
   d76f0:	4630      	mov	r0, r6
   d76f2:	4798      	blx	r3
   d76f4:	e7ee      	b.n	d76d4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d76f6:	2300      	movs	r3, #0
   d76f8:	7323      	strb	r3, [r4, #12]
#endif
    LogManager *that = instance();
    LOG_WITH_LOCK(that->mutex_) {
        // prevent re-entry
        if (that->isActive()) {
            return;
   d76fa:	a801      	add	r0, sp, #4
   d76fc:	f7ff ff8a 	bl	d7614 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->write(data, size, (LogLevel)level, category);
        }
        that->setActive(false);
    }
}
   d7700:	b003      	add	sp, #12
   d7702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7706:	bf00      	nop
   d7708:	e000ed00 	.word	0xe000ed00

000d770c <_ZN5spark10LogManager10logEnabledEiPKcPv>:

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d770c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d7710:	4b15      	ldr	r3, [pc, #84]	; (d7768 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5c>)
   d7712:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d7714:	f3c3 0308 	ubfx	r3, r3, #0, #9
        }
        that->setActive(false);
    }
}

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d7718:	4604      	mov	r4, r0
   d771a:	4688      	mov	r8, r1
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d771c:	b9fb      	cbnz	r3, d775e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x52>
        return 0;
    }
#endif
    LogManager *that = instance();
   d771e:	f7ff fe4f 	bl	d73c0 <_ZN5spark10LogManager8instanceEv>
   d7722:	4606      	mov	r6, r0
    int minLevel = LOG_LEVEL_NONE;
    LOG_WITH_LOCK(that->mutex_) {
   d7724:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d7726:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d7728:	f7ff fd74 	bl	d7214 <_ZN14RecursiveMutex4lockEv>
   d772c:	e896 00a0 	ldmia.w	r6, {r5, r7}
   d7730:	2646      	movs	r6, #70	; 0x46
   d7732:	eb05 0787 	add.w	r7, r5, r7, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d7736:	42af      	cmp	r7, r5
   d7738:	d107      	bne.n	d774a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x3e>
        return 0;
    }
#endif
    LogManager *that = instance();
    int minLevel = LOG_LEVEL_NONE;
    LOG_WITH_LOCK(that->mutex_) {
   d773a:	a801      	add	r0, sp, #4
   d773c:	f7ff ff6a 	bl	d7614 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            if (level < minLevel) {
                minLevel = level;
            }
        }
    }
    return (level >= minLevel);
   d7740:	42b4      	cmp	r4, r6
   d7742:	bfb4      	ite	lt
   d7744:	2000      	movlt	r0, #0
   d7746:	2001      	movge	r0, #1
   d7748:	e00a      	b.n	d7760 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x54>
inline LogLevel spark::LogHandler::level() const {
    return filter_.level();
}

inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
   d774a:	f855 0b04 	ldr.w	r0, [r5], #4
   d774e:	4641      	mov	r1, r8
   d7750:	3004      	adds	r0, #4
   d7752:	f7ff fdbb 	bl	d72cc <_ZNK5spark6detail9LogFilter5levelEPKc>
   d7756:	4286      	cmp	r6, r0
   d7758:	bfa8      	it	ge
   d775a:	4606      	movge	r6, r0
   d775c:	e7eb      	b.n	d7736 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2a>
}

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
        return 0;
   d775e:	2000      	movs	r0, #0
                minLevel = level;
            }
        }
    }
    return (level >= minLevel);
}
   d7760:	b002      	add	sp, #8
   d7762:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7766:	bf00      	nop
   d7768:	e000ed00 	.word	0xe000ed00

000d776c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d776c:	b570      	push	{r4, r5, r6, lr}
    T* const p = find(data_, data_ + size_, value);
   d776e:	6803      	ldr	r3, [r0, #0]
   d7770:	6842      	ldr	r2, [r0, #4]
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d7772:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   d7774:	eb03 0282 	add.w	r2, r3, r2, lsl #2
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d7778:	429a      	cmp	r2, r3
   d777a:	4618      	mov	r0, r3
   d777c:	d00e      	beq.n	d779c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x30>
            if (*p == value) {
   d777e:	6806      	ldr	r6, [r0, #0]
   d7780:	680d      	ldr	r5, [r1, #0]
   d7782:	42ae      	cmp	r6, r5
   d7784:	f103 0304 	add.w	r3, r3, #4
   d7788:	d1f6      	bne.n	d7778 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xc>
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d778a:	1d01      	adds	r1, r0, #4
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d778c:	1a52      	subs	r2, r2, r1
   d778e:	f002 fa3d 	bl	d9c0c <memmove>
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
   d7792:	6863      	ldr	r3, [r4, #4]
   d7794:	3b01      	subs	r3, #1
   d7796:	6063      	str	r3, [r4, #4]
    return true;
   d7798:	2001      	movs	r0, #1
}
   d779a:	bd70      	pop	{r4, r5, r6, pc}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
   d779c:	2000      	movs	r0, #0
   d779e:	bd70      	pop	{r4, r5, r6, pc}

000d77a0 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
        }
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
   d77a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d77a2:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
   d77a4:	3024      	adds	r0, #36	; 0x24
        }
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
   d77a6:	9101      	str	r1, [sp, #4]
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d77a8:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   d77aa:	f7ff fd33 	bl	d7214 <_ZN14RecursiveMutex4lockEv>
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d77ae:	a901      	add	r1, sp, #4
   d77b0:	4620      	mov	r0, r4
   d77b2:	f7ff ffdb 	bl	d776c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   d77b6:	b920      	cbnz	r0, d77c2 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x22>
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
   d77b8:	a803      	add	r0, sp, #12
   d77ba:	f7ff ff2b 	bl	d7614 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
            resetSystemCallbacks();
        }
    }
}
   d77be:	b004      	add	sp, #16
   d77c0:	bd10      	pop	{r4, pc}
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d77c2:	6863      	ldr	r3, [r4, #4]
   d77c4:	2b00      	cmp	r3, #0
   d77c6:	d1f7      	bne.n	d77b8 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x18>
            resetSystemCallbacks();
   d77c8:	f7ff fe24 	bl	d7414 <_ZN5spark10LogManager20resetSystemCallbacksEv>
   d77cc:	e7f4      	b.n	d77b8 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x18>

000d77ce <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
            break;
        }
    }
}

void spark::LogManager::destroyFactoryHandlers() {
   d77ce:	b570      	push	{r4, r5, r6, lr}
   d77d0:	6905      	ldr	r5, [r0, #16]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d77d2:	6943      	ldr	r3, [r0, #20]
   d77d4:	2618      	movs	r6, #24
   d77d6:	4604      	mov	r4, r0
   d77d8:	fb06 5603 	mla	r6, r6, r3, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   d77dc:	42ae      	cmp	r6, r5
   d77de:	d015      	beq.n	d780c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   d77e0:	f105 0110 	add.w	r1, r5, #16
   d77e4:	4620      	mov	r0, r4
   d77e6:	f7ff ffc1 	bl	d776c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   d77ea:	6863      	ldr	r3, [r4, #4]
   d77ec:	b90b      	cbnz	r3, d77f2 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   d77ee:	f7ff fe11 	bl	d7414 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        }
        handlerFactory_->destroyHandler(h.handler);
   d77f2:	69e0      	ldr	r0, [r4, #28]
   d77f4:	6929      	ldr	r1, [r5, #16]
   d77f6:	6803      	ldr	r3, [r0, #0]
   d77f8:	68db      	ldr	r3, [r3, #12]
   d77fa:	4798      	blx	r3
        if (h.stream) {
   d77fc:	6969      	ldr	r1, [r5, #20]
   d77fe:	b119      	cbz	r1, d7808 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   d7800:	6a20      	ldr	r0, [r4, #32]
   d7802:	6803      	ldr	r3, [r0, #0]
   d7804:	68db      	ldr	r3, [r3, #12]
   d7806:	4798      	blx	r3
   d7808:	3518      	adds	r5, #24
        }
    }
}

void spark::LogManager::destroyFactoryHandlers() {
    for (const FactoryHandler &h: factoryHandlers_) {
   d780a:	e7e7      	b.n	d77dc <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d780c:	6925      	ldr	r5, [r4, #16]
   d780e:	6963      	ldr	r3, [r4, #20]
   d7810:	2618      	movs	r6, #24
   d7812:	fb06 5603 	mla	r6, r6, r3, r5
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d7816:	42b5      	cmp	r5, r6
   d7818:	d004      	beq.n	d7824 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
        }
    }
}

// spark::LogManager
struct spark::LogManager::FactoryHandler {
   d781a:	4628      	mov	r0, r5
   d781c:	f7fe ff14 	bl	d6648 <_ZN6StringD1Ev>
   d7820:	3518      	adds	r5, #24
   d7822:	e7f8      	b.n	d7816 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d7824:	2300      	movs	r3, #0
   d7826:	6163      	str	r3, [r4, #20]
   d7828:	bd70      	pop	{r4, r5, r6, pc}

000d782a <_ZN5spark10LogManagerD1Ev>:
    streamFactory_ = DefaultOutputStreamFactory::instance();
#endif
    outputActive_ = false;
}

spark::LogManager::~LogManager() {
   d782a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d782c:	4604      	mov	r4, r0
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d782e:	ad02      	add	r5, sp, #8
    resetSystemCallbacks();
   d7830:	f7ff fdf0 	bl	d7414 <_ZN5spark10LogManager20resetSystemCallbacksEv>
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
   d7834:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d7838:	f845 0d04 	str.w	r0, [r5, #-4]!
      { _M_device.lock(); }
   d783c:	f7ff fcea 	bl	d7214 <_ZN14RecursiveMutex4lockEv>
         destroyFactoryHandlers();
   d7840:	4620      	mov	r0, r4
   d7842:	f7ff ffc4 	bl	d77ce <_ZN5spark10LogManager22destroyFactoryHandlersEv>
}

spark::LogManager::~LogManager() {
    resetSystemCallbacks();
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
   d7846:	4628      	mov	r0, r5
   d7848:	f7ff fee4 	bl	d7614 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d784c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d784e:	b108      	cbz	r0, d7854 <_ZN5spark10LogManagerD1Ev+0x2a>
            os_mutex_recursive_destroy(handle_);
   d7850:	f7fe fc52 	bl	d60f8 <os_mutex_recursive_destroy>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d7854:	6925      	ldr	r5, [r4, #16]
   d7856:	6963      	ldr	r3, [r4, #20]
   d7858:	2618      	movs	r6, #24
   d785a:	fb06 5603 	mla	r6, r6, r3, r5
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d785e:	42b5      	cmp	r5, r6
   d7860:	d004      	beq.n	d786c <_ZN5spark10LogManagerD1Ev+0x42>
        }
    }
}

// spark::LogManager
struct spark::LogManager::FactoryHandler {
   d7862:	4628      	mov	r0, r5
   d7864:	f7fe fef0 	bl	d6648 <_ZN6StringD1Ev>
   d7868:	3518      	adds	r5, #24
   d786a:	e7f8      	b.n	d785e <_ZN5spark10LogManagerD1Ev+0x34>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d786c:	6920      	ldr	r0, [r4, #16]
   d786e:	f7fe fe2f 	bl	d64d0 <free>
   d7872:	6820      	ldr	r0, [r4, #0]
   d7874:	f7fe fe2c 	bl	d64d0 <free>
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
         destroyFactoryHandlers();
    }
#endif
}
   d7878:	4620      	mov	r0, r4
   d787a:	b002      	add	sp, #8
   d787c:	bd70      	pop	{r4, r5, r6, pc}

000d787e <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>:
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d787e:	6803      	ldr	r3, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d7880:	680a      	ldr	r2, [r1, #0]
   d7882:	6002      	str	r2, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d7884:	600b      	str	r3, [r1, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7886:	6843      	ldr	r3, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d7888:	684a      	ldr	r2, [r1, #4]
   d788a:	6042      	str	r2, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d788c:	604b      	str	r3, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d788e:	6883      	ldr	r3, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   d7890:	688a      	ldr	r2, [r1, #8]
   d7892:	6082      	str	r2, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7894:	608b      	str	r3, [r1, #8]
   d7896:	4770      	bx	lr

000d7898 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        size_ = vector.size_;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d7898:	b510      	push	{r4, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d789a:	2300      	movs	r3, #0
        size_ = vector.size_;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d789c:	4604      	mov	r4, r0
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d789e:	6003      	str	r3, [r0, #0]
   d78a0:	6043      	str	r3, [r0, #4]
   d78a2:	6083      	str	r3, [r0, #8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d78a4:	f7ff ffeb 	bl	d787e <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
}
   d78a8:	4620      	mov	r0, r4
   d78aa:	bd10      	pop	{r4, pc}

000d78ac <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d78ac:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d78ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d78b0:	4604      	mov	r4, r0
   d78b2:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d78b4:	d925      	bls.n	d7902 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
   d78b6:	4290      	cmp	r0, r2
   d78b8:	d224      	bcs.n	d7904 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x58>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d78ba:	1a55      	subs	r5, r2, r1
   d78bc:	3d14      	subs	r5, #20
   d78be:	442c      	add	r4, r5
   d78c0:	f1a1 0714 	sub.w	r7, r1, #20
   d78c4:	f1a2 050c 	sub.w	r5, r2, #12
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d78c8:	2600      	movs	r6, #0
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d78ca:	f1a5 0308 	sub.w	r3, r5, #8
   d78ce:	429f      	cmp	r7, r3
   d78d0:	d037      	beq.n	d7942 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
                new(dest) T(std::move(*end));
   d78d2:	b184      	cbz	r4, d78f6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4a>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d78d4:	f855 3c08 	ldr.w	r3, [r5, #-8]
   d78d8:	6023      	str	r3, [r4, #0]
   d78da:	f835 3c04 	ldrh.w	r3, [r5, #-4]
   d78de:	80a3      	strh	r3, [r4, #4]
   d78e0:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
   d78e4:	80e3      	strh	r3, [r4, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d78e6:	60a6      	str	r6, [r4, #8]
   d78e8:	60e6      	str	r6, [r4, #12]
   d78ea:	6126      	str	r6, [r4, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d78ec:	4629      	mov	r1, r5
   d78ee:	f104 0008 	add.w	r0, r4, #8
   d78f2:	f7ff ffc4 	bl	d787e <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
   d78f6:	4628      	mov	r0, r5
   d78f8:	f7ff fe32 	bl	d7560 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d78fc:	3c14      	subs	r4, #20
   d78fe:	3d14      	subs	r5, #20
   d7900:	e7e3      	b.n	d78ca <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d7902:	d01e      	beq.n	d7942 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
   d7904:	f101 0508 	add.w	r5, r1, #8
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d7908:	2700      	movs	r7, #0
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d790a:	f1a5 0308 	sub.w	r3, r5, #8
   d790e:	429e      	cmp	r6, r3
   d7910:	d017      	beq.n	d7942 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
                new(dest) T(std::move(*p));
   d7912:	b184      	cbz	r4, d7936 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x8a>
   d7914:	f855 3c08 	ldr.w	r3, [r5, #-8]
   d7918:	6023      	str	r3, [r4, #0]
   d791a:	f835 3c04 	ldrh.w	r3, [r5, #-4]
   d791e:	80a3      	strh	r3, [r4, #4]
   d7920:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
   d7924:	80e3      	strh	r3, [r4, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d7926:	60a7      	str	r7, [r4, #8]
   d7928:	60e7      	str	r7, [r4, #12]
   d792a:	6127      	str	r7, [r4, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d792c:	4629      	mov	r1, r5
   d792e:	f104 0008 	add.w	r0, r4, #8
   d7932:	f7ff ffa4 	bl	d787e <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
   d7936:	4628      	mov	r0, r5
   d7938:	f7ff fe12 	bl	d7560 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d793c:	3414      	adds	r4, #20
   d793e:	3514      	adds	r5, #20
   d7940:	e7e3      	b.n	d790a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
   d7942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7944 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d7944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7946:	6845      	ldr	r5, [r0, #4]
   d7948:	6883      	ldr	r3, [r0, #8]
   d794a:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d794c:	4604      	mov	r4, r0
   d794e:	460e      	mov	r6, r1
   d7950:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7952:	db0e      	blt.n	d7972 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2e>
   d7954:	3501      	adds	r5, #1
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d7956:	2d00      	cmp	r5, #0
   d7958:	dd05      	ble.n	d7966 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
}

inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
   d795a:	00a9      	lsls	r1, r5, #2
   d795c:	6800      	ldr	r0, [r0, #0]
   d795e:	f7fe fdbf 	bl	d64e0 <realloc>
    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
            if (!d) {
   d7962:	b920      	cbnz	r0, d796e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2a>
   d7964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d7966:	6800      	ldr	r0, [r0, #0]
   d7968:	f7fe fdb2 	bl	d64d0 <free>
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d796c:	2000      	movs	r0, #0
                return false;
            }
        } else {
            AllocatorT::free(data_);
        }
        data_ = d;
   d796e:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d7970:	60a5      	str	r5, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d7972:	6825      	ldr	r5, [r4, #0]
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d7974:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d7976:	eb05 0186 	add.w	r1, r5, r6, lsl #2
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d797a:	eb05 0282 	add.w	r2, r5, r2, lsl #2
   d797e:	1a52      	subs	r2, r2, r1
   d7980:	1d08      	adds	r0, r1, #4
   d7982:	f002 f943 	bl	d9c0c <memmove>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
   d7986:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   d798a:	6863      	ldr	r3, [r4, #4]
   d798c:	3301      	adds	r3, #1
   d798e:	6063      	str	r3, [r4, #4]
   d7990:	2001      	movs	r0, #1
    return true;
}
   d7992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7994 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
         destroyFactoryHandlers();
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
   d7994:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7996:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
   d7998:	3024      	adds	r0, #36	; 0x24
         destroyFactoryHandlers();
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
   d799a:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d799c:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d799e:	f7ff fc39 	bl	d7214 <_ZN14RecursiveMutex4lockEv>
    return p - data_;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::contains(const T &value) const {
    return find(data_, data_ + size_, value);
   d79a2:	6823      	ldr	r3, [r4, #0]
   d79a4:	6861      	ldr	r1, [r4, #4]
   d79a6:	eb03 0081 	add.w	r0, r3, r1, lsl #2
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d79aa:	4283      	cmp	r3, r0
   d79ac:	461a      	mov	r2, r3
   d79ae:	d009      	beq.n	d79c4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>
            if (*p == value) {
   d79b0:	6812      	ldr	r2, [r2, #0]
   d79b2:	42aa      	cmp	r2, r5
   d79b4:	f103 0304 	add.w	r3, r3, #4
   d79b8:	d1f7      	bne.n	d79aa <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x16>
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
            return false;
   d79ba:	a801      	add	r0, sp, #4
   d79bc:	f7ff fe2a 	bl	d7614 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   d79c0:	2500      	movs	r5, #0
   d79c2:	e00e      	b.n	d79e2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d79c4:	462a      	mov	r2, r5
   d79c6:	4620      	mov	r0, r4
   d79c8:	f7ff ffbc 	bl	d7944 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   d79cc:	4605      	mov	r5, r0
   d79ce:	2800      	cmp	r0, #0
   d79d0:	d0f3      	beq.n	d79ba <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x26>
            return false;
        }
        if (activeHandlers_.size() == 1) {
   d79d2:	6863      	ldr	r3, [r4, #4]
   d79d4:	2b01      	cmp	r3, #1
   d79d6:	d101      	bne.n	d79dc <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x48>
            setSystemCallbacks();
   d79d8:	f7ff fd10 	bl	d73fc <_ZN5spark10LogManager18setSystemCallbacksEv>
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
   d79dc:	a801      	add	r0, sp, #4
   d79de:	f7ff fe19 	bl	d7614 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (activeHandlers_.size() == 1) {
            setSystemCallbacks();
        }
    }
    return true;
}
   d79e2:	4628      	mov	r0, r5
   d79e4:	b003      	add	sp, #12
   d79e6:	bd30      	pop	{r4, r5, pc}

000d79e8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d79e8:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d79ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d79ec:	4606      	mov	r6, r0
   d79ee:	460c      	mov	r4, r1
   d79f0:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d79f2:	d914      	bls.n	d7a1e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   d79f4:	4290      	cmp	r0, r2
   d79f6:	d213      	bcs.n	d7a20 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d79f8:	f1a2 0510 	sub.w	r5, r2, #16
            dest += end - p - 1;
   d79fc:	1a6c      	subs	r4, r5, r1
   d79fe:	f1a1 0710 	sub.w	r7, r1, #16
   d7a02:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d7a04:	42af      	cmp	r7, r5
   d7a06:	d018      	beq.n	d7a3a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   d7a08:	b11c      	cbz	r4, d7a12 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   d7a0a:	4629      	mov	r1, r5
   d7a0c:	4620      	mov	r0, r4
   d7a0e:	f7fe fe0b 	bl	d6628 <_ZN6StringC1EOS_>
                end->~T();
   d7a12:	4628      	mov	r0, r5
   d7a14:	f7fe fe18 	bl	d6648 <_ZN6StringD1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d7a18:	3d10      	subs	r5, #16
   d7a1a:	3c10      	subs	r4, #16
   d7a1c:	e7f2      	b.n	d7a04 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d7a1e:	d00c      	beq.n	d7a3a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   d7a20:	42ac      	cmp	r4, r5
   d7a22:	d00a      	beq.n	d7a3a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   d7a24:	b11e      	cbz	r6, d7a2e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   d7a26:	4621      	mov	r1, r4
   d7a28:	4630      	mov	r0, r6
   d7a2a:	f7fe fdfd 	bl	d6628 <_ZN6StringC1EOS_>
                p->~T();
   d7a2e:	4620      	mov	r0, r4
   d7a30:	f7fe fe0a 	bl	d6648 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d7a34:	3410      	adds	r4, #16
   d7a36:	3610      	adds	r6, #16
   d7a38:	e7f2      	b.n	d7a20 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
   d7a3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7a3c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d7a3c:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d7a3e:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d7a40:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d7a42:	dd0b      	ble.n	d7a5c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d7a44:	0130      	lsls	r0, r6, #4
   d7a46:	f7fe fd3b 	bl	d64c0 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d7a4a:	4604      	mov	r4, r0
   d7a4c:	b170      	cbz	r0, d7a6c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d7a4e:	e895 0006 	ldmia.w	r5, {r1, r2}
   d7a52:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   d7a56:	f7ff ffc7 	bl	d79e8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
   d7a5a:	e000      	b.n	d7a5e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d7a5c:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d7a5e:	6828      	ldr	r0, [r5, #0]
   d7a60:	f7fe fd36 	bl	d64d0 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d7a64:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d7a66:	60ae      	str	r6, [r5, #8]
        return true;
   d7a68:	2001      	movs	r0, #1
   d7a6a:	bd70      	pop	{r4, r5, r6, pc}
    }
   d7a6c:	bd70      	pop	{r4, r5, r6, pc}

000d7a6e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d7a6e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d7a72:	2300      	movs	r3, #0
   d7a74:	b095      	sub	sp, #84	; 0x54
   d7a76:	4692      	mov	sl, r2
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d7a78:	2246      	movs	r2, #70	; 0x46
   d7a7a:	6003      	str	r3, [r0, #0]
   d7a7c:	6043      	str	r3, [r0, #4]
   d7a7e:	6083      	str	r3, [r0, #8]
   d7a80:	60c3      	str	r3, [r0, #12]
   d7a82:	6103      	str	r3, [r0, #16]
   d7a84:	6143      	str	r3, [r0, #20]
   d7a86:	7602      	strb	r2, [r0, #24]

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d7a88:	9102      	str	r1, [sp, #8]
   d7a8a:	f8da 1004 	ldr.w	r1, [sl, #4]
   d7a8e:	9308      	str	r3, [sp, #32]
    return size_ == 0;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
    if (n > capacity_ && !realloc(n)) {
   d7a90:	4299      	cmp	r1, r3
   d7a92:	4605      	mov	r5, r0
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d7a94:	9309      	str	r3, [sp, #36]	; 0x24
   d7a96:	930a      	str	r3, [sp, #40]	; 0x28
    return size_ == 0;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
    if (n > capacity_ && !realloc(n)) {
   d7a98:	f340 809d 	ble.w	d7bd6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x168>
   d7a9c:	a808      	add	r0, sp, #32
   d7a9e:	f7ff ffcd 	bl	d7a3c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d7aa2:	2800      	cmp	r0, #0
   d7aa4:	f040 8097 	bne.w	d7bd6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x168>
   d7aa8:	e08e      	b.n	d7bc8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15a>
    Vector<String> cats;
    if (!cats.reserve(filters.size())) {
        return;
    }
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
   d7aaa:	4621      	mov	r1, r4
   d7aac:	a80b      	add	r0, sp, #44	; 0x2c
   d7aae:	f7fe fdbb 	bl	d6628 <_ZN6StringC1EOS_>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d7ab2:	a90b      	add	r1, sp, #44	; 0x2c
   d7ab4:	a80f      	add	r0, sp, #60	; 0x3c
   d7ab6:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d7ab8:	f7fe fdb6 	bl	d6628 <_ZN6StringC1EOS_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7abc:	9909      	ldr	r1, [sp, #36]	; 0x24
   d7abe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7ac0:	4299      	cmp	r1, r3
   d7ac2:	f2c0 80ce 	blt.w	d7c62 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
   d7ac6:	3101      	adds	r1, #1
   d7ac8:	a808      	add	r0, sp, #32
   d7aca:	f7ff ffb7 	bl	d7a3c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d7ace:	2800      	cmp	r0, #0
   d7ad0:	f040 80c7 	bne.w	d7c62 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d7ad4:	a80f      	add	r0, sp, #60	; 0x3c
   d7ad6:	f7fe fdb7 	bl	d6648 <_ZN6StringD1Ev>
   d7ada:	a80b      	add	r0, sp, #44	; 0x2c
   d7adc:	f7fe fdb4 	bl	d6648 <_ZN6StringD1Ev>
   d7ae0:	3414      	adds	r4, #20
    // Store category names
    Vector<String> cats;
    if (!cats.reserve(filters.size())) {
        return;
    }
    for (LogCategoryFilter &filter: filters) {
   d7ae2:	42a7      	cmp	r7, r4
   d7ae4:	d1e1      	bne.n	d7aaa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x3c>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d7ae6:	2600      	movs	r6, #0
   d7ae8:	960b      	str	r6, [sp, #44]	; 0x2c
   d7aea:	960c      	str	r6, [sp, #48]	; 0x30
   d7aec:	960d      	str	r6, [sp, #52]	; 0x34
        if (!category) {
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d7aee:	46b1      	mov	r9, r6
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
    for (int i = 0; i < cats.size(); ++i) {
   d7af0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d7af2:	429e      	cmp	r6, r3
   d7af4:	f280 80a8 	bge.w	d7c48 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   d7af8:	0133      	lsls	r3, r6, #4
   d7afa:	9a08      	ldr	r2, [sp, #32]
   d7afc:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   d7afe:	9306      	str	r3, [sp, #24]
        if (!category) {
   d7b00:	2b00      	cmp	r3, #0
   d7b02:	f000 809f 	beq.w	d7c44 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d6>
   d7b06:	2314      	movs	r3, #20
   d7b08:	4373      	muls	r3, r6
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d7b0a:	f8cd 901c 	str.w	r9, [sp, #28]
   d7b0e:	9301      	str	r3, [sp, #4]
    for (int i = 0; i < cats.size(); ++i) {
        const char *category = cats.at(i).c_str();
        if (!category) {
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
   d7b10:	ac0b      	add	r4, sp, #44	; 0x2c
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d7b12:	a907      	add	r1, sp, #28
   d7b14:	a806      	add	r0, sp, #24
   d7b16:	f7ff fb2c 	bl	d7172 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d7b1a:	4607      	mov	r7, r0
   d7b1c:	2800      	cmp	r0, #0
   d7b1e:	f000 8091 	beq.w	d7c44 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d6>
            bool found = false;
   d7b22:	ab14      	add	r3, sp, #80	; 0x50
            const int index = nodeIndex(*pNodes, name, size, found);
   d7b24:	4601      	mov	r1, r0
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d7b26:	f803 9d39 	strb.w	r9, [r3, #-57]!
            const int index = nodeIndex(*pNodes, name, size, found);
   d7b2a:	9a07      	ldr	r2, [sp, #28]
   d7b2c:	4620      	mov	r0, r4
   d7b2e:	f7ff fb8d 	bl	d724c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d7b32:	f89d 8017 	ldrb.w	r8, [sp, #23]
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
   d7b36:	9000      	str	r0, [sp, #0]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d7b38:	f1b8 0f00 	cmp.w	r8, #0
   d7b3c:	d153      	bne.n	d7be6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x178>
   d7b3e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    Vector<Node> nodes; // Children nodes

    Node(const char *name, uint16_t size) :
            name(name),
            size(size),
            level(-1) {
   d7b42:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
   d7b46:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d7b4a:	970f      	str	r7, [sp, #60]	; 0x3c
   d7b4c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   d7b50:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
   d7b54:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
   d7b58:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7b5c:	6867      	ldr	r7, [r4, #4]
   d7b5e:	68a3      	ldr	r3, [r4, #8]
   d7b60:	429f      	cmp	r7, r3
   d7b62:	da4f      	bge.n	d7c04 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x196>
        return false;
    }
    T* const p = data_ + i;
   d7b64:	9b00      	ldr	r3, [sp, #0]
   d7b66:	f8d4 b000 	ldr.w	fp, [r4]
    move(p + 1, p, data_ + size_);
   d7b6a:	6861      	ldr	r1, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d7b6c:	2214      	movs	r2, #20
   d7b6e:	4353      	muls	r3, r2
   d7b70:	eb0b 0703 	add.w	r7, fp, r3
    move(p + 1, p, data_ + size_);
   d7b74:	fb02 b201 	mla	r2, r2, r1, fp
   d7b78:	f107 0014 	add.w	r0, r7, #20
   d7b7c:	4639      	mov	r1, r7
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d7b7e:	9303      	str	r3, [sp, #12]
    move(p + 1, p, data_ + size_);
   d7b80:	f7ff fe94 	bl	d78ac <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   d7b84:	b1a7      	cbz	r7, d7bb0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x142>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d7b86:	9b03      	ldr	r3, [sp, #12]
   d7b88:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d7b8a:	f84b 2003 	str.w	r2, [fp, r3]
   d7b8e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   d7b92:	80bb      	strh	r3, [r7, #4]
   d7b94:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
   d7b98:	80fb      	strh	r3, [r7, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d7b9a:	f8c7 9008 	str.w	r9, [r7, #8]
   d7b9e:	f8c7 900c 	str.w	r9, [r7, #12]
   d7ba2:	f8c7 9010 	str.w	r9, [r7, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d7ba6:	a911      	add	r1, sp, #68	; 0x44
   d7ba8:	f107 0008 	add.w	r0, r7, #8
   d7bac:	f7ff fe67 	bl	d787e <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
    ++size_;
   d7bb0:	6863      	ldr	r3, [r4, #4]
   d7bb2:	3301      	adds	r3, #1
   d7bb4:	6063      	str	r3, [r4, #4]
   d7bb6:	a811      	add	r0, sp, #68	; 0x44
   d7bb8:	f7ff fcd2 	bl	d7560 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d7bbc:	f1b8 0f00 	cmp.w	r8, #0
   d7bc0:	d011      	beq.n	d7be6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x178>
    }
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
   d7bc2:	a80b      	add	r0, sp, #44	; 0x2c
   d7bc4:	f7ff fccc 	bl	d7560 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d7bc8:	a808      	add	r0, sp, #32
   d7bca:	f7ff fcdd 	bl	d7588 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    }
    using std::swap;
    swap(cats_, cats);
    swap(nodes_, nodes);
    level_ = level;
}
   d7bce:	4628      	mov	r0, r5
   d7bd0:	b015      	add	sp, #84	; 0x54
   d7bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7bd6:	f8da 4000 	ldr.w	r4, [sl]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d7bda:	f8da 3004 	ldr.w	r3, [sl, #4]
   d7bde:	2714      	movs	r7, #20
   d7be0:	fb07 4703 	mla	r7, r7, r3, r4
   d7be4:	e77d      	b.n	d7ae2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_[size_ - 1];
}

template<typename T, typename AllocatorT>
inline T& spark::Vector<T, AllocatorT>::at(int i) {
    return data_[i];
   d7be6:	6823      	ldr	r3, [r4, #0]
   d7be8:	9a00      	ldr	r2, [sp, #0]
   d7bea:	2414      	movs	r4, #20
   d7bec:	fb04 3402 	mla	r4, r4, r2, r3
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
                return;
            }
            Node &node = pNodes->at(index);
            if (!*category) { // Check if it's last subcategory
   d7bf0:	9b06      	ldr	r3, [sp, #24]
   d7bf2:	781b      	ldrb	r3, [r3, #0]
   d7bf4:	bb23      	cbnz	r3, d7c40 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d2>
                node.level = filters.at(i).level_;
   d7bf6:	f8da 3000 	ldr.w	r3, [sl]
   d7bfa:	9a01      	ldr	r2, [sp, #4]
   d7bfc:	4413      	add	r3, r2
   d7bfe:	7c1b      	ldrb	r3, [r3, #16]
   d7c00:	80e3      	strh	r3, [r4, #6]
   d7c02:	e01d      	b.n	d7c40 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d2>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7c04:	3701      	adds	r7, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d7c06:	2f00      	cmp	r7, #0
   d7c08:	dd0f      	ble.n	d7c2a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d7c0a:	2314      	movs	r3, #20
   d7c0c:	fb03 f007 	mul.w	r0, r3, r7
   d7c10:	9303      	str	r3, [sp, #12]
   d7c12:	f7fe fc55 	bl	d64c0 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d7c16:	4683      	mov	fp, r0
   d7c18:	b178      	cbz	r0, d7c3a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1cc>
                return false;
            }
            move(d, data_, data_ + size_);
   d7c1a:	e894 0006 	ldmia.w	r4, {r1, r2}
   d7c1e:	9b03      	ldr	r3, [sp, #12]
   d7c20:	fb03 1202 	mla	r2, r3, r2, r1
   d7c24:	f7ff fe42 	bl	d78ac <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   d7c28:	e000      	b.n	d7c2c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1be>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d7c2a:	46c3      	mov	fp, r8
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d7c2c:	6820      	ldr	r0, [r4, #0]
   d7c2e:	f7fe fc4f 	bl	d64d0 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d7c32:	f8c4 b000 	str.w	fp, [r4]
        capacity_ = n;
   d7c36:	60a7      	str	r7, [r4, #8]
   d7c38:	e794      	b.n	d7b64 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xf6>
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d7c3a:	f04f 0801 	mov.w	r8, #1
   d7c3e:	e7ba      	b.n	d7bb6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x148>
            }
            Node &node = pNodes->at(index);
            if (!*category) { // Check if it's last subcategory
                node.level = filters.at(i).level_;
            }
            pNodes = &node.nodes;
   d7c40:	3408      	adds	r4, #8
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d7c42:	e766      	b.n	d7b12 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa4>
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
    for (int i = 0; i < cats.size(); ++i) {
   d7c44:	3601      	adds	r6, #1
   d7c46:	e753      	b.n	d7af0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x82>
            }
            pNodes = &node.nodes;
        }
    }
    using std::swap;
    swap(cats_, cats);
   d7c48:	a908      	add	r1, sp, #32
   d7c4a:	4628      	mov	r0, r5
   d7c4c:	f7ff fe17 	bl	d787e <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
    swap(nodes_, nodes);
   d7c50:	a90b      	add	r1, sp, #44	; 0x2c
   d7c52:	f105 000c 	add.w	r0, r5, #12
   d7c56:	f7ff fe12 	bl	d787e <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
    level_ = level;
   d7c5a:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d7c5e:	762b      	strb	r3, [r5, #24]
   d7c60:	e7af      	b.n	d7bc2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x154>
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d7c62:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   d7c64:	9a09      	ldr	r2, [sp, #36]	; 0x24
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d7c66:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   d7c6a:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   d7c6e:	4631      	mov	r1, r6
   d7c70:	f106 0010 	add.w	r0, r6, #16
   d7c74:	f7ff feb8 	bl	d79e8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   d7c78:	b11e      	cbz	r6, d7c82 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x214>
   d7c7a:	a90f      	add	r1, sp, #60	; 0x3c
   d7c7c:	4630      	mov	r0, r6
   d7c7e:	f7fe fcd3 	bl	d6628 <_ZN6StringC1EOS_>
    ++size_;
   d7c82:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d7c84:	3301      	adds	r3, #1
   d7c86:	9309      	str	r3, [sp, #36]	; 0x24
   d7c88:	e724      	b.n	d7ad4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x66>
	...

000d7c8c <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
// spark::LogHandler
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d7c8c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   d7c8e:	4604      	mov	r4, r0
   d7c90:	4b09      	ldr	r3, [pc, #36]	; (d7cb8 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   d7c92:	f844 3b04 	str.w	r3, [r4], #4
// spark::LogHandler
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d7c96:	4605      	mov	r5, r0
   d7c98:	460e      	mov	r6, r1
        filter_(level, filters) {
   d7c9a:	a801      	add	r0, sp, #4
   d7c9c:	4611      	mov	r1, r2
   d7c9e:	f7fc fd40 	bl	d4722 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d7ca2:	aa01      	add	r2, sp, #4
   d7ca4:	4631      	mov	r1, r6
   d7ca6:	4620      	mov	r0, r4
   d7ca8:	f7ff fee1 	bl	d7a6e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d7cac:	a801      	add	r0, sp, #4
   d7cae:	f7fc fcf7 	bl	d46a0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   d7cb2:	4628      	mov	r0, r5
   d7cb4:	b004      	add	sp, #16
   d7cb6:	bd70      	pop	{r4, r5, r6, pc}
   d7cb8:	000da0d8 	.word	0x000da0d8

000d7cbc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d7cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7cbe:	460f      	mov	r7, r1
   d7cc0:	b08b      	sub	sp, #44	; 0x2c
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d7cc2:	492b      	ldr	r1, [pc, #172]	; (d7d70 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb4>)

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d7cc4:	9c10      	ldr	r4, [sp, #64]	; 0x40
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d7cc6:	4638      	mov	r0, r7

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d7cc8:	4616      	mov	r6, r2
   d7cca:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d7ccc:	f002 f802 	bl	d9cd4 <strcmp>
   d7cd0:	bb28      	cbnz	r0, d7d1e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x62>
        if (!stream) {
   d7cd2:	2c00      	cmp	r4, #0
   d7cd4:	d049      	beq.n	d7d6a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xae>
            return nullptr; // Output stream is not specified
        }
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   d7cd6:	4629      	mov	r1, r5
   d7cd8:	a801      	add	r0, sp, #4
   d7cda:	f7ff fddd 	bl	d7898 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d7cde:	4925      	ldr	r1, [pc, #148]	; (d7d74 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb8>)
   d7ce0:	2024      	movs	r0, #36	; 0x24
   d7ce2:	f001 fc51 	bl	d9588 <_ZnwjRKSt9nothrow_t>
   d7ce6:	4605      	mov	r5, r0
   d7ce8:	b1b8      	cbz	r0, d7d1a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x5e>
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
public:
    using StreamLogHandler::StreamLogHandler;
   d7cea:	a901      	add	r1, sp, #4
   d7cec:	a804      	add	r0, sp, #16
   d7cee:	f7ff fdd3 	bl	d7898 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d7cf2:	a904      	add	r1, sp, #16
   d7cf4:	a807      	add	r0, sp, #28
   d7cf6:	f7fc fd14 	bl	d4722 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d7cfa:	aa07      	add	r2, sp, #28
   d7cfc:	4631      	mov	r1, r6
   d7cfe:	4628      	mov	r0, r5
   d7d00:	f7ff ffc4 	bl	d7c8c <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d7d04:	a807      	add	r0, sp, #28
   d7d06:	f7fc fccb 	bl	d46a0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d7d0a:	4b1b      	ldr	r3, [pc, #108]	; (d7d78 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xbc>)
   d7d0c:	602b      	str	r3, [r5, #0]
   d7d0e:	622c      	str	r4, [r5, #32]
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
public:
    using StreamLogHandler::StreamLogHandler;
   d7d10:	a804      	add	r0, sp, #16
   d7d12:	f7fc fcc5 	bl	d46a0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d7d16:	4b19      	ldr	r3, [pc, #100]	; (d7d7c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xc0>)
   d7d18:	602b      	str	r3, [r5, #0]
   d7d1a:	a801      	add	r0, sp, #4
   d7d1c:	e01f      	b.n	d7d5e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa2>
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   d7d1e:	4918      	ldr	r1, [pc, #96]	; (d7d80 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xc4>)
   d7d20:	4638      	mov	r0, r7
   d7d22:	f001 ffd7 	bl	d9cd4 <strcmp>
   d7d26:	b9f0      	cbnz	r0, d7d66 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xaa>
        if (!stream) {
   d7d28:	b1fc      	cbz	r4, d7d6a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xae>
            return nullptr;
        }
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d7d2a:	4629      	mov	r1, r5
   d7d2c:	a804      	add	r0, sp, #16
   d7d2e:	f7ff fdb3 	bl	d7898 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d7d32:	4910      	ldr	r1, [pc, #64]	; (d7d74 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb8>)
   d7d34:	2024      	movs	r0, #36	; 0x24
   d7d36:	f001 fc27 	bl	d9588 <_ZnwjRKSt9nothrow_t>
   d7d3a:	4605      	mov	r5, r0
   d7d3c:	b170      	cbz	r0, d7d5c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d7d3e:	a904      	add	r1, sp, #16
   d7d40:	a807      	add	r0, sp, #28
   d7d42:	f7fc fcee 	bl	d4722 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d7d46:	aa07      	add	r2, sp, #28
   d7d48:	4631      	mov	r1, r6
   d7d4a:	4628      	mov	r0, r5
   d7d4c:	f7ff ff9e 	bl	d7c8c <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d7d50:	a807      	add	r0, sp, #28
   d7d52:	f7fc fca5 	bl	d46a0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d7d56:	4b08      	ldr	r3, [pc, #32]	; (d7d78 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xbc>)
   d7d58:	602b      	str	r3, [r5, #0]
   d7d5a:	622c      	str	r4, [r5, #32]
   d7d5c:	a804      	add	r0, sp, #16
   d7d5e:	f7fc fc9f 	bl	d46a0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d7d62:	4628      	mov	r0, r5
   d7d64:	e002      	b.n	d7d6c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>
// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
        if (!stream) {
            return nullptr; // Output stream is not specified
   d7d66:	2000      	movs	r0, #0
   d7d68:	e000      	b.n	d7d6c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>
   d7d6a:	4620      	mov	r0, r4
            return nullptr;
        }
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
    }
    return nullptr; // Unknown handler type
}
   d7d6c:	b00b      	add	sp, #44	; 0x2c
   d7d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7d70:	000dab46 	.word	0x000dab46
   d7d74:	000dadce 	.word	0x000dadce
   d7d78:	000dabd0 	.word	0x000dabd0
   d7d7c:	000daad8 	.word	0x000daad8
   d7d80:	000dab4a 	.word	0x000dab4a

000d7d84 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d7d84:	4b01      	ldr	r3, [pc, #4]	; (d7d8c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d7d86:	4a02      	ldr	r2, [pc, #8]	; (d7d90 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d7d88:	601a      	str	r2, [r3, #0]
   d7d8a:	4770      	bx	lr
   d7d8c:	2003e4b8 	.word	0x2003e4b8
   d7d90:	000dab5b 	.word	0x000dab5b

000d7d94 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d7d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7d98:	9d08      	ldr	r5, [sp, #32]
    // TODO: Move this check to a base class (see also JSONStreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (stream_ == &Serial && Network.listening()) {
   d7d9a:	f8d0 9020 	ldr.w	r9, [r0, #32]
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d7d9e:	4604      	mov	r4, r0
   d7da0:	460e      	mov	r6, r1
   d7da2:	4617      	mov	r7, r2
   d7da4:	4698      	mov	r8, r3
    // TODO: Move this check to a base class (see also JSONStreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (stream_ == &Serial && Network.listening()) {
   d7da6:	f000 fe19 	bl	d89dc <_Z16_fetch_usbserialv>
   d7daa:	4581      	cmp	r9, r0
   d7dac:	d105      	bne.n	d7dba <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x26>
   d7dae:	485a      	ldr	r0, [pc, #360]	; (d7f18 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   d7db0:	f001 f86f 	bl	d8e92 <_ZN5spark12NetworkClass9listeningEv>
   d7db4:	2800      	cmp	r0, #0
   d7db6:	f040 80ac 	bne.w	d7f12 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17e>
        return; // Do not mix logging and serial console output
    }
#endif
    const char *s = nullptr;
    // Timestamp
    if (attr.has_time) {
   d7dba:	792b      	ldrb	r3, [r5, #4]
   d7dbc:	071b      	lsls	r3, r3, #28
   d7dbe:	d505      	bpl.n	d7dcc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x38>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d7dc0:	696b      	ldr	r3, [r5, #20]
   d7dc2:	4a56      	ldr	r2, [pc, #344]	; (d7f1c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   d7dc4:	6a20      	ldr	r0, [r4, #32]
   d7dc6:	2100      	movs	r1, #0
   d7dc8:	f7ff f985 	bl	d70d6 <_ZN5Print11printf_implEbPKcz>
        printf("%010u ", (unsigned)attr.time);
    }
    // Category
    if (category) {
   d7dcc:	f1b8 0f00 	cmp.w	r8, #0
   d7dd0:	d00d      	beq.n	d7dee <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x5a>
        write('[');
   d7dd2:	215b      	movs	r1, #91	; 0x5b
   d7dd4:	4620      	mov	r0, r4
   d7dd6:	f7ff fa2e 	bl	d7236 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   d7dda:	4641      	mov	r1, r8
   d7ddc:	4620      	mov	r0, r4
   d7dde:	f7ff fa1c 	bl	d721a <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   d7de2:	6823      	ldr	r3, [r4, #0]
   d7de4:	494e      	ldr	r1, [pc, #312]	; (d7f20 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   d7de6:	68db      	ldr	r3, [r3, #12]
   d7de8:	2202      	movs	r2, #2
   d7dea:	4620      	mov	r0, r4
   d7dec:	4798      	blx	r3
    }
    // Source file
    if (attr.has_file) {
   d7dee:	792b      	ldrb	r3, [r5, #4]
   d7df0:	07d9      	lsls	r1, r3, #31
   d7df2:	d525      	bpl.n	d7e40 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xac>
        s = extractFileName(attr.file); // Strip directory path
   d7df4:	f8d5 8008 	ldr.w	r8, [r5, #8]
    }
    return nullptr;
}

const char* extractFileName(const char *s) {
    const char *s1 = strrchr(s, '/');
   d7df8:	212f      	movs	r1, #47	; 0x2f
   d7dfa:	4640      	mov	r0, r8
   d7dfc:	f001 ffac 	bl	d9d58 <strrchr>
    if (s1) {
   d7e00:	b108      	cbz	r0, d7e06 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x72>
        return s1 + 1;
   d7e02:	f100 0801 	add.w	r8, r0, #1
        write("] ", 2);
    }
    // Source file
    if (attr.has_file) {
        s = extractFileName(attr.file); // Strip directory path
        write(s); // File name
   d7e06:	4641      	mov	r1, r8
   d7e08:	4620      	mov	r0, r4
   d7e0a:	f7ff fa06 	bl	d721a <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   d7e0e:	792b      	ldrb	r3, [r5, #4]
   d7e10:	079a      	lsls	r2, r3, #30
   d7e12:	d509      	bpl.n	d7e28 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x94>
            write(':');
   d7e14:	213a      	movs	r1, #58	; 0x3a
   d7e16:	4620      	mov	r0, r4
   d7e18:	f7ff fa0d 	bl	d7236 <_ZN5spark16StreamLogHandler5writeEc>
   d7e1c:	68eb      	ldr	r3, [r5, #12]
   d7e1e:	4a41      	ldr	r2, [pc, #260]	; (d7f24 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   d7e20:	6a20      	ldr	r0, [r4, #32]
   d7e22:	2100      	movs	r1, #0
   d7e24:	f7ff f957 	bl	d70d6 <_ZN5Print11printf_implEbPKcz>
            printf("%d", (int)attr.line); // Line number
        }
        if (attr.has_function) {
   d7e28:	792b      	ldrb	r3, [r5, #4]
   d7e2a:	f013 0f04 	tst.w	r3, #4
   d7e2e:	6823      	ldr	r3, [r4, #0]
            write(", ", 2);
   d7e30:	bf18      	it	ne
   d7e32:	493d      	ldrne	r1, [pc, #244]	; (d7f28 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d7e34:	68db      	ldr	r3, [r3, #12]
        } else {
            write(": ", 2);
   d7e36:	bf08      	it	eq
   d7e38:	493c      	ldreq	r1, [pc, #240]	; (d7f2c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
        if (attr.has_line) {
            write(':');
            printf("%d", (int)attr.line); // Line number
        }
        if (attr.has_function) {
            write(", ", 2);
   d7e3a:	2202      	movs	r2, #2
        } else {
            write(": ", 2);
   d7e3c:	4620      	mov	r0, r4
   d7e3e:	4798      	blx	r3
        }
    }
    // Function name
    if (attr.has_function) {
   d7e40:	792b      	ldrb	r3, [r5, #4]
   d7e42:	075b      	lsls	r3, r3, #29
   d7e44:	d518      	bpl.n	d7e78 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe4>
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d7e46:	6929      	ldr	r1, [r5, #16]
   d7e48:	460a      	mov	r2, r1
    return s;
}

const char* extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
    for (; *s; ++s) {
   d7e4a:	4613      	mov	r3, r2
   d7e4c:	f813 0b01 	ldrb.w	r0, [r3], #1
   d7e50:	b138      	cbz	r0, d7e62 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xce>
        if (*s == ' ') {
   d7e52:	2820      	cmp	r0, #32
   d7e54:	d101      	bne.n	d7e5a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
            s1 = s + 1; // Skip return type
   d7e56:	4619      	mov	r1, r3
   d7e58:	e001      	b.n	d7e5e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xca>
        } else if (*s == '(') {
   d7e5a:	2828      	cmp	r0, #40	; 0x28
   d7e5c:	d001      	beq.n	d7e62 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xce>
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d7e5e:	461a      	mov	r2, r3
   d7e60:	e7f3      	b.n	d7e4a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    }
    // Function name
    if (attr.has_function) {
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
        write(s, n);
   d7e62:	6823      	ldr	r3, [r4, #0]
   d7e64:	1a52      	subs	r2, r2, r1
   d7e66:	68db      	ldr	r3, [r3, #12]
   d7e68:	4620      	mov	r0, r4
   d7e6a:	4798      	blx	r3
        write("(): ", 4);
   d7e6c:	6823      	ldr	r3, [r4, #0]
   d7e6e:	4930      	ldr	r1, [pc, #192]	; (d7f30 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   d7e70:	68db      	ldr	r3, [r3, #12]
   d7e72:	2204      	movs	r2, #4
   d7e74:	4620      	mov	r0, r4
   d7e76:	4798      	blx	r3
inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
}

inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
   d7e78:	2100      	movs	r1, #0
   d7e7a:	4638      	mov	r0, r7
   d7e7c:	f7fe fa5c 	bl	d6338 <log_level_name>
    }
    // Level
    s = levelName(level);
    write(s);
   d7e80:	4601      	mov	r1, r0
   d7e82:	4620      	mov	r0, r4
   d7e84:	f7ff f9c9 	bl	d721a <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   d7e88:	6823      	ldr	r3, [r4, #0]
   d7e8a:	4928      	ldr	r1, [pc, #160]	; (d7f2c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   d7e8c:	68db      	ldr	r3, [r3, #12]
   d7e8e:	2202      	movs	r2, #2
   d7e90:	4620      	mov	r0, r4
   d7e92:	4798      	blx	r3
    // Message
    if (msg) {
   d7e94:	b11e      	cbz	r6, d7e9e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x10a>
        write(msg);
   d7e96:	4631      	mov	r1, r6
   d7e98:	4620      	mov	r0, r4
   d7e9a:	f7ff f9be 	bl	d721a <_ZN5spark16StreamLogHandler5writeEPKc>
    }
    // Additional attributes
    if (attr.has_code || attr.has_details) {
   d7e9e:	792b      	ldrb	r3, [r5, #4]
   d7ea0:	f013 0f30 	tst.w	r3, #48	; 0x30
   d7ea4:	d02d      	beq.n	d7f02 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16e>
        write(" [", 2);
   d7ea6:	6823      	ldr	r3, [r4, #0]
   d7ea8:	4922      	ldr	r1, [pc, #136]	; (d7f34 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   d7eaa:	68db      	ldr	r3, [r3, #12]
   d7eac:	4620      	mov	r0, r4
   d7eae:	2202      	movs	r2, #2
   d7eb0:	4798      	blx	r3
        // Code
        if (attr.has_code) {
   d7eb2:	792b      	ldrb	r3, [r5, #4]
   d7eb4:	06d8      	lsls	r0, r3, #27
   d7eb6:	d50b      	bpl.n	d7ed0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
            write("code = ", 7);
   d7eb8:	6823      	ldr	r3, [r4, #0]
   d7eba:	491f      	ldr	r1, [pc, #124]	; (d7f38 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
   d7ebc:	68db      	ldr	r3, [r3, #12]
   d7ebe:	2207      	movs	r2, #7
   d7ec0:	4620      	mov	r0, r4
   d7ec2:	4798      	blx	r3
   d7ec4:	69ab      	ldr	r3, [r5, #24]
   d7ec6:	4a1d      	ldr	r2, [pc, #116]	; (d7f3c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a8>)
   d7ec8:	6a20      	ldr	r0, [r4, #32]
   d7eca:	2100      	movs	r1, #0
   d7ecc:	f7ff f903 	bl	d70d6 <_ZN5Print11printf_implEbPKcz>
            printf("%" PRIiPTR, (intptr_t)attr.code);
        }
        // Details
        if (attr.has_details) {
   d7ed0:	792b      	ldrb	r3, [r5, #4]
   d7ed2:	0699      	lsls	r1, r3, #26
   d7ed4:	d511      	bpl.n	d7efa <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
            if (attr.has_code) {
   d7ed6:	06da      	lsls	r2, r3, #27
   d7ed8:	d505      	bpl.n	d7ee6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x152>
                write(", ", 2);
   d7eda:	6823      	ldr	r3, [r4, #0]
   d7edc:	4912      	ldr	r1, [pc, #72]	; (d7f28 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d7ede:	68db      	ldr	r3, [r3, #12]
   d7ee0:	2202      	movs	r2, #2
   d7ee2:	4620      	mov	r0, r4
   d7ee4:	4798      	blx	r3
            }
            write("details = ", 10);
   d7ee6:	6823      	ldr	r3, [r4, #0]
   d7ee8:	4915      	ldr	r1, [pc, #84]	; (d7f40 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1ac>)
   d7eea:	68db      	ldr	r3, [r3, #12]
   d7eec:	4620      	mov	r0, r4
   d7eee:	220a      	movs	r2, #10
   d7ef0:	4798      	blx	r3
            write(attr.details);
   d7ef2:	69e9      	ldr	r1, [r5, #28]
   d7ef4:	4620      	mov	r0, r4
   d7ef6:	f7ff f990 	bl	d721a <_ZN5spark16StreamLogHandler5writeEPKc>
        }
        write(']');
   d7efa:	215d      	movs	r1, #93	; 0x5d
   d7efc:	4620      	mov	r0, r4
   d7efe:	f7ff f99a 	bl	d7236 <_ZN5spark16StreamLogHandler5writeEc>
    }
    write("\r\n", 2);
   d7f02:	6823      	ldr	r3, [r4, #0]
   d7f04:	490f      	ldr	r1, [pc, #60]	; (d7f44 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1b0>)
   d7f06:	68db      	ldr	r3, [r3, #12]
   d7f08:	4620      	mov	r0, r4
   d7f0a:	2202      	movs	r2, #2
}
   d7f0c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            write("details = ", 10);
            write(attr.details);
        }
        write(']');
    }
    write("\r\n", 2);
   d7f10:	4718      	bx	r3
   d7f12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7f16:	bf00      	nop
   d7f18:	2003e714 	.word	0x2003e714
   d7f1c:	000dab5f 	.word	0x000dab5f
   d7f20:	000dab66 	.word	0x000dab66
   d7f24:	000dab69 	.word	0x000dab69
   d7f28:	000dab6c 	.word	0x000dab6c
   d7f2c:	000dab71 	.word	0x000dab71
   d7f30:	000dab6f 	.word	0x000dab6f
   d7f34:	000dab74 	.word	0x000dab74
   d7f38:	000dab77 	.word	0x000dab77
   d7f3c:	000dab7f 	.word	0x000dab7f
   d7f40:	000dab82 	.word	0x000dab82
   d7f44:	000dab8d 	.word	0x000dab8d

000d7f48 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d7f48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7f4c:	b085      	sub	sp, #20
   d7f4e:	f8d0 8020 	ldr.w	r8, [r0, #32]
   d7f52:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   d7f54:	4606      	mov	r6, r0
   d7f56:	460f      	mov	r7, r1
   d7f58:	4691      	mov	r9, r2
   d7f5a:	461d      	mov	r5, r3
    // TODO: Move this check to a base class (see also StreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (this->stream() == &Serial && Network.listening()) {
   d7f5c:	f000 fd3e 	bl	d89dc <_Z16_fetch_usbserialv>
   d7f60:	4580      	cmp	r8, r0
   d7f62:	d105      	bne.n	d7f70 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   d7f64:	484a      	ldr	r0, [pc, #296]	; (d8090 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   d7f66:	f000 ff94 	bl	d8e92 <_ZN5spark12NetworkClass9listeningEv>
   d7f6a:	2800      	cmp	r0, #0
   d7f6c:	f040 808c 	bne.w	d8088 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x140>
   d7f70:	6a33      	ldr	r3, [r6, #32]
    write(&c, 1);
}

// spark::JSONStreamWriter
inline spark::JSONStreamWriter::JSONStreamWriter(Print &stream) :
        strm_(stream) {
   d7f72:	4a48      	ldr	r2, [pc, #288]	; (d8094 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   d7f74:	9201      	str	r2, [sp, #4]
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
   d7f76:	f04f 0800 	mov.w	r8, #0
        return; // Do not mix logging and serial console output
    }
#endif
    JSONStreamWriter json(*this->stream());
    json.beginObject();
   d7f7a:	a801      	add	r0, sp, #4
    write(&c, 1);
}

// spark::JSONStreamWriter
inline spark::JSONStreamWriter::JSONStreamWriter(Print &stream) :
        strm_(stream) {
   d7f7c:	9303      	str	r3, [sp, #12]
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
   d7f7e:	f88d 8008 	strb.w	r8, [sp, #8]
   d7f82:	f001 f914 	bl	d91ae <_ZN5spark10JSONWriter11beginObjectEv>
   d7f86:	4641      	mov	r1, r8
   d7f88:	4648      	mov	r0, r9
   d7f8a:	f7fe f9d5 	bl	d6338 <log_level_name>
    // Level
    const char *s = levelName(level);
    json.name("l", 1).value(s);
   d7f8e:	4942      	ldr	r1, [pc, #264]	; (d8098 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   d7f90:	4680      	mov	r8, r0
   d7f92:	2201      	movs	r2, #1
   d7f94:	a801      	add	r0, sp, #4
   d7f96:	f001 f9a7 	bl	d92e8 <_ZN5spark10JSONWriter4nameEPKcj>
   d7f9a:	4641      	mov	r1, r8
   d7f9c:	f7ff f92d 	bl	d71fa <_ZN5spark10JSONWriter5valueEPKc>
    // Message
    if (msg) {
   d7fa0:	b13f      	cbz	r7, d7fb2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   d7fa2:	493e      	ldr	r1, [pc, #248]	; (d809c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   d7fa4:	2201      	movs	r2, #1
   d7fa6:	a801      	add	r0, sp, #4
   d7fa8:	f001 f99e 	bl	d92e8 <_ZN5spark10JSONWriter4nameEPKcj>
   d7fac:	4639      	mov	r1, r7
   d7fae:	f7ff f924 	bl	d71fa <_ZN5spark10JSONWriter5valueEPKc>
    }
    // Category
    if (category) {
   d7fb2:	b13d      	cbz	r5, d7fc4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   d7fb4:	493a      	ldr	r1, [pc, #232]	; (d80a0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   d7fb6:	2201      	movs	r2, #1
   d7fb8:	a801      	add	r0, sp, #4
   d7fba:	f001 f995 	bl	d92e8 <_ZN5spark10JSONWriter4nameEPKcj>
   d7fbe:	4629      	mov	r1, r5
   d7fc0:	f7ff f91b 	bl	d71fa <_ZN5spark10JSONWriter5valueEPKc>
    }
    // File name
    if (attr.has_file) {
   d7fc4:	7923      	ldrb	r3, [r4, #4]
   d7fc6:	07df      	lsls	r7, r3, #31
   d7fc8:	d50e      	bpl.n	d7fe8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   d7fca:	68a5      	ldr	r5, [r4, #8]
    }
    return nullptr;
}

const char* extractFileName(const char *s) {
    const char *s1 = strrchr(s, '/');
   d7fcc:	212f      	movs	r1, #47	; 0x2f
   d7fce:	4628      	mov	r0, r5
   d7fd0:	f001 fec2 	bl	d9d58 <strrchr>
    if (s1) {
   d7fd4:	b100      	cbz	r0, d7fd8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   d7fd6:	1c45      	adds	r5, r0, #1
        json.name("c", 1).value(category);
    }
    // File name
    if (attr.has_file) {
        s = extractFileName(attr.file); // Strip directory path
        json.name("f", 1).value(s);
   d7fd8:	4932      	ldr	r1, [pc, #200]	; (d80a4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   d7fda:	2201      	movs	r2, #1
   d7fdc:	a801      	add	r0, sp, #4
   d7fde:	f001 f983 	bl	d92e8 <_ZN5spark10JSONWriter4nameEPKcj>
   d7fe2:	4629      	mov	r1, r5
   d7fe4:	f7ff f909 	bl	d71fa <_ZN5spark10JSONWriter5valueEPKc>
    }
    // Line number
    if (attr.has_line) {
   d7fe8:	7923      	ldrb	r3, [r4, #4]
   d7fea:	079d      	lsls	r5, r3, #30
   d7fec:	d507      	bpl.n	d7ffe <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   d7fee:	492e      	ldr	r1, [pc, #184]	; (d80a8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   d7ff0:	2202      	movs	r2, #2
   d7ff2:	a801      	add	r0, sp, #4
   d7ff4:	f001 f978 	bl	d92e8 <_ZN5spark10JSONWriter4nameEPKcj>
   d7ff8:	68e1      	ldr	r1, [r4, #12]
   d7ffa:	f001 f8fd 	bl	d91f8 <_ZN5spark10JSONWriter5valueEi>
    }
    // Function name
    if (attr.has_function) {
   d7ffe:	7923      	ldrb	r3, [r4, #4]
   d8000:	0758      	lsls	r0, r3, #29
   d8002:	d516      	bpl.n	d8032 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xea>
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d8004:	6925      	ldr	r5, [r4, #16]
   d8006:	462f      	mov	r7, r5
    return s;
}

const char* extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
    for (; *s; ++s) {
   d8008:	463b      	mov	r3, r7
   d800a:	f813 2b01 	ldrb.w	r2, [r3], #1
   d800e:	b13a      	cbz	r2, d8020 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd8>
        if (*s == ' ') {
   d8010:	2a20      	cmp	r2, #32
   d8012:	d101      	bne.n	d8018 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   d8014:	461d      	mov	r5, r3
   d8016:	e001      	b.n	d801c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        } else if (*s == '(') {
   d8018:	2a28      	cmp	r2, #40	; 0x28
   d801a:	d001      	beq.n	d8020 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd8>
    }
    write("\r\n", 2);
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d801c:	461f      	mov	r7, r3
   d801e:	e7f3      	b.n	d8008 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
    }
    // Function name
    if (attr.has_function) {
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
        json.name("fn", 2).value(s, n);
   d8020:	2202      	movs	r2, #2
   d8022:	4922      	ldr	r1, [pc, #136]	; (d80ac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   d8024:	a801      	add	r0, sp, #4
   d8026:	f001 f95f 	bl	d92e8 <_ZN5spark10JSONWriter4nameEPKcj>
   d802a:	1b7a      	subs	r2, r7, r5
   d802c:	4629      	mov	r1, r5
   d802e:	f001 f96a 	bl	d9306 <_ZN5spark10JSONWriter5valueEPKcj>
    }
    // Timestamp
    if (attr.has_time) {
   d8032:	7923      	ldrb	r3, [r4, #4]
   d8034:	0719      	lsls	r1, r3, #28
   d8036:	d507      	bpl.n	d8048 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x100>
        json.name("t", 1).value((unsigned)attr.time);
   d8038:	491d      	ldr	r1, [pc, #116]	; (d80b0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   d803a:	2201      	movs	r2, #1
   d803c:	a801      	add	r0, sp, #4
   d803e:	f001 f953 	bl	d92e8 <_ZN5spark10JSONWriter4nameEPKcj>
   d8042:	6961      	ldr	r1, [r4, #20]
   d8044:	f001 f8ea 	bl	d921c <_ZN5spark10JSONWriter5valueEj>
    }
    // Code (additional attribute)
    if (attr.has_code) {
   d8048:	7923      	ldrb	r3, [r4, #4]
   d804a:	06da      	lsls	r2, r3, #27
   d804c:	d508      	bpl.n	d8060 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x118>
        json.name("code", 4).value((int)attr.code);
   d804e:	2204      	movs	r2, #4
   d8050:	4918      	ldr	r1, [pc, #96]	; (d80b4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   d8052:	eb0d 0002 	add.w	r0, sp, r2
   d8056:	f001 f947 	bl	d92e8 <_ZN5spark10JSONWriter4nameEPKcj>
   d805a:	69a1      	ldr	r1, [r4, #24]
   d805c:	f001 f8cc 	bl	d91f8 <_ZN5spark10JSONWriter5valueEi>
    }
    // Details (additional attribute)
    if (attr.has_details) {
   d8060:	7923      	ldrb	r3, [r4, #4]
   d8062:	069b      	lsls	r3, r3, #26
   d8064:	d507      	bpl.n	d8076 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12e>
        json.name("detail", 6).value(attr.details);
   d8066:	4914      	ldr	r1, [pc, #80]	; (d80b8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   d8068:	2206      	movs	r2, #6
   d806a:	a801      	add	r0, sp, #4
   d806c:	f001 f93c 	bl	d92e8 <_ZN5spark10JSONWriter4nameEPKcj>
   d8070:	69e1      	ldr	r1, [r4, #28]
   d8072:	f7ff f8c2 	bl	d71fa <_ZN5spark10JSONWriter5valueEPKc>
    }
    json.endObject();
   d8076:	a801      	add	r0, sp, #4
   d8078:	f001 f877 	bl	d916a <_ZN5spark10JSONWriter9endObjectEv>
   d807c:	6a30      	ldr	r0, [r6, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   d807e:	490f      	ldr	r1, [pc, #60]	; (d80bc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   d8080:	6803      	ldr	r3, [r0, #0]
   d8082:	2202      	movs	r2, #2
   d8084:	68db      	ldr	r3, [r3, #12]
   d8086:	4798      	blx	r3
}
   d8088:	b005      	add	sp, #20
   d808a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d808e:	bf00      	nop
   d8090:	2003e714 	.word	0x2003e714
   d8094:	000daac0 	.word	0x000daac0
   d8098:	000daaf2 	.word	0x000daaf2
   d809c:	000dab05 	.word	0x000dab05
   d80a0:	000dabc1 	.word	0x000dabc1
   d80a4:	000da46e 	.word	0x000da46e
   d80a8:	000dab90 	.word	0x000dab90
   d80ac:	000dab93 	.word	0x000dab93
   d80b0:	000da3d5 	.word	0x000da3d5
   d80b4:	000dab96 	.word	0x000dab96
   d80b8:	000dab9b 	.word	0x000dab9b
   d80bc:	000dab8d 	.word	0x000dab8d

000d80c0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d80c0:	4b02      	ldr	r3, [pc, #8]	; (d80cc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d80c2:	681a      	ldr	r2, [r3, #0]
   d80c4:	4b02      	ldr	r3, [pc, #8]	; (d80d0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d80c6:	601a      	str	r2, [r3, #0]
   d80c8:	4770      	bx	lr
   d80ca:	bf00      	nop
   d80cc:	2003e1f0 	.word	0x2003e1f0
   d80d0:	2003e4bc 	.word	0x2003e4bc

000d80d4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d80d4:	2100      	movs	r1, #0
   d80d6:	f7fe b947 	b.w	d6368 <system_delay_ms>

000d80da <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d80da:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d80dc:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d80de:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d80e0:	b113      	cbz	r3, d80e8 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d80e2:	2203      	movs	r2, #3
   d80e4:	4601      	mov	r1, r0
   d80e6:	4798      	blx	r3
    }
   d80e8:	4620      	mov	r0, r4
   d80ea:	bd10      	pop	{r4, pc}

000d80ec <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d80ec:	b510      	push	{r4, lr}
   d80ee:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d80f0:	f7ff fff3 	bl	d80da <_ZNSt14_Function_baseD1Ev>
   d80f4:	4620      	mov	r0, r4
   d80f6:	bd10      	pop	{r4, pc}

000d80f8 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d80f8:	b513      	push	{r0, r1, r4, lr}
   d80fa:	460b      	mov	r3, r1
   d80fc:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d80fe:	c803      	ldmia	r0, {r0, r1}
   d8100:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d8104:	e893 0003 	ldmia.w	r3, {r0, r1}
   d8108:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d810c:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d8110:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d8114:	b002      	add	sp, #8
   d8116:	bd10      	pop	{r4, pc}

000d8118 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d8118:	4803      	ldr	r0, [pc, #12]	; (d8128 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d811a:	4a04      	ldr	r2, [pc, #16]	; (d812c <_GLOBAL__sub_I_RGB+0x14>)
   d811c:	4904      	ldr	r1, [pc, #16]	; (d8130 <_GLOBAL__sub_I_RGB+0x18>)
   d811e:	2300      	movs	r3, #0
   d8120:	6083      	str	r3, [r0, #8]
   d8122:	f001 ba1f 	b.w	d9564 <__aeabi_atexit>
   d8126:	bf00      	nop
   d8128:	2003e4c0 	.word	0x2003e4c0
   d812c:	2003e25c 	.word	0x2003e25c
   d8130:	000d80ed 	.word	0x000d80ed

000d8134 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d8134:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d8136:	4b0c      	ldr	r3, [pc, #48]	; (d8168 <serialEventRun+0x34>)
   d8138:	b133      	cbz	r3, d8148 <serialEventRun+0x14>
   d813a:	f000 fc4f 	bl	d89dc <_Z16_fetch_usbserialv>
   d813e:	6803      	ldr	r3, [r0, #0]
   d8140:	691b      	ldr	r3, [r3, #16]
   d8142:	4798      	blx	r3
   d8144:	2800      	cmp	r0, #0
   d8146:	dc09      	bgt.n	d815c <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d8148:	4b08      	ldr	r3, [pc, #32]	; (d816c <serialEventRun+0x38>)
   d814a:	b163      	cbz	r3, d8166 <serialEventRun+0x32>
   d814c:	f000 fd1e 	bl	d8b8c <_Z22__fetch_global_Serial1v>
   d8150:	6803      	ldr	r3, [r0, #0]
   d8152:	691b      	ldr	r3, [r3, #16]
   d8154:	4798      	blx	r3
   d8156:	2800      	cmp	r0, #0
   d8158:	dc03      	bgt.n	d8162 <serialEventRun+0x2e>
   d815a:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d815c:	f3af 8000 	nop.w
   d8160:	e7f2      	b.n	d8148 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d8162:	f3af 8000 	nop.w
   d8166:	bd08      	pop	{r3, pc}
	...

000d8170 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d8170:	b508      	push	{r3, lr}
	serialEventRun();
   d8172:	f7ff ffdf 	bl	d8134 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d8176:	f7fd ff19 	bl	d5fac <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d817a:	4b01      	ldr	r3, [pc, #4]	; (d8180 <_post_loop+0x10>)
   d817c:	6018      	str	r0, [r3, #0]
   d817e:	bd08      	pop	{r3, pc}
   d8180:	2003e728 	.word	0x2003e728

000d8184 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d8184:	4802      	ldr	r0, [pc, #8]	; (d8190 <_Z33system_initialize_user_backup_ramv+0xc>)
   d8186:	4a03      	ldr	r2, [pc, #12]	; (d8194 <_Z33system_initialize_user_backup_ramv+0x10>)
   d8188:	4903      	ldr	r1, [pc, #12]	; (d8198 <_Z33system_initialize_user_backup_ramv+0x14>)
   d818a:	1a12      	subs	r2, r2, r0
   d818c:	f001 bd33 	b.w	d9bf6 <memcpy>
   d8190:	2003f400 	.word	0x2003f400
   d8194:	2003f404 	.word	0x2003f404
   d8198:	000daf80 	.word	0x000daf80

000d819c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d819c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d819e:	2300      	movs	r3, #0
   d81a0:	9300      	str	r3, [sp, #0]
   d81a2:	461a      	mov	r2, r3
   d81a4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d81a8:	f7fe f908 	bl	d63bc <system_ctrl_set_result>
}
   d81ac:	b003      	add	sp, #12
   d81ae:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d81b4 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d81b4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d81b6:	8843      	ldrh	r3, [r0, #2]
   d81b8:	2b0a      	cmp	r3, #10
   d81ba:	d008      	beq.n	d81ce <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d81bc:	2b50      	cmp	r3, #80	; 0x50
   d81be:	d109      	bne.n	d81d4 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d81c0:	4b09      	ldr	r3, [pc, #36]	; (d81e8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d81c2:	681b      	ldr	r3, [r3, #0]
   d81c4:	b13b      	cbz	r3, d81d6 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d81c6:	b003      	add	sp, #12
   d81c8:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d81cc:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d81ce:	f7ff ffe5 	bl	d819c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d81d2:	e006      	b.n	d81e2 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d81d4:	2300      	movs	r3, #0
   d81d6:	9300      	str	r3, [sp, #0]
   d81d8:	461a      	mov	r2, r3
   d81da:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d81de:	f7fe f8ed 	bl	d63bc <system_ctrl_set_result>
        break;
    }
}
   d81e2:	b003      	add	sp, #12
   d81e4:	f85d fb04 	ldr.w	pc, [sp], #4
   d81e8:	2003e4d0 	.word	0x2003e4d0

000d81ec <module_user_init_hook>:

void module_user_init_hook()
{
   d81ec:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d81ee:	4c10      	ldr	r4, [pc, #64]	; (d8230 <module_user_init_hook+0x44>)
   d81f0:	4d10      	ldr	r5, [pc, #64]	; (d8234 <module_user_init_hook+0x48>)
   d81f2:	6823      	ldr	r3, [r4, #0]
   d81f4:	42ab      	cmp	r3, r5
   d81f6:	4b10      	ldr	r3, [pc, #64]	; (d8238 <module_user_init_hook+0x4c>)
   d81f8:	bf0c      	ite	eq
   d81fa:	2201      	moveq	r2, #1
   d81fc:	2200      	movne	r2, #0
   d81fe:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d8200:	d002      	beq.n	d8208 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d8202:	f7ff ffbf 	bl	d8184 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d8206:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d8208:	f7fd feb8 	bl	d5f7c <HAL_RNG_GetRandomNumber>
   d820c:	4604      	mov	r4, r0
    srand(seed);
   d820e:	f001 fd21 	bl	d9c54 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d8212:	4b0a      	ldr	r3, [pc, #40]	; (d823c <module_user_init_hook+0x50>)
   d8214:	b113      	cbz	r3, d821c <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d8216:	4620      	mov	r0, r4
   d8218:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d821c:	2100      	movs	r1, #0
   d821e:	4807      	ldr	r0, [pc, #28]	; (d823c <module_user_init_hook+0x50>)
   d8220:	f7fe f93e 	bl	d64a0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d8224:	2100      	movs	r1, #0
   d8226:	4806      	ldr	r0, [pc, #24]	; (d8240 <module_user_init_hook+0x54>)
}
   d8228:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d822c:	f7fe b8bc 	b.w	d63a8 <system_ctrl_set_app_request_handler>
   d8230:	2003f400 	.word	0x2003f400
   d8234:	9a271c1e 	.word	0x9a271c1e
   d8238:	2003e4d4 	.word	0x2003e4d4
   d823c:	00000000 	.word	0x00000000
   d8240:	000d81b5 	.word	0x000d81b5

000d8244 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d8244:	4770      	bx	lr

000d8246 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d8246:	2000      	movs	r0, #0
   d8248:	4770      	bx	lr

000d824a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d824a:	b510      	push	{r4, lr}
   d824c:	2110      	movs	r1, #16
   d824e:	4604      	mov	r4, r0
   d8250:	f001 f996 	bl	d9580 <_ZdlPvj>
   d8254:	4620      	mov	r0, r4
   d8256:	bd10      	pop	{r4, pc}

000d8258 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d8258:	b508      	push	{r3, lr}
      { delete this; }
   d825a:	b108      	cbz	r0, d8260 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d825c:	f7ff fff5 	bl	d824a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d8260:	bd08      	pop	{r3, pc}

000d8262 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d8262:	2200      	movs	r2, #0
   d8264:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d8266:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d8268:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d826c:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d826e:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d8272:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d8274:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8276:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d8278:	680c      	ldr	r4, [r1, #0]
   d827a:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d827c:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d827e:	bd10      	pop	{r4, pc}

000d8280 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d8280:	b510      	push	{r4, lr}
   d8282:	4604      	mov	r4, r0
    free((void*)msg_);
   d8284:	6800      	ldr	r0, [r0, #0]
   d8286:	f7fe f923 	bl	d64d0 <free>
}
   d828a:	4620      	mov	r0, r4
   d828c:	bd10      	pop	{r4, pc}

000d828e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d828e:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d8290:	68c4      	ldr	r4, [r0, #12]
   d8292:	b1f4      	cbz	r4, d82d2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d8294:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d8296:	2b02      	cmp	r3, #2
   d8298:	d103      	bne.n	d82a2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d829a:	f104 000c 	add.w	r0, r4, #12
   d829e:	f7ff ffef 	bl	d8280 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d82a2:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d82a4:	b135      	cbz	r5, d82b4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d82a6:	4628      	mov	r0, r5
   d82a8:	f7ff ff17 	bl	d80da <_ZNSt14_Function_baseD1Ev>
   d82ac:	2110      	movs	r1, #16
   d82ae:	4628      	mov	r0, r5
   d82b0:	f001 f966 	bl	d9580 <_ZdlPvj>
   d82b4:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d82b6:	b135      	cbz	r5, d82c6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d82b8:	4628      	mov	r0, r5
   d82ba:	f7ff ff0e 	bl	d80da <_ZNSt14_Function_baseD1Ev>
   d82be:	2110      	movs	r1, #16
   d82c0:	4628      	mov	r0, r5
   d82c2:	f001 f95d 	bl	d9580 <_ZdlPvj>
   d82c6:	4620      	mov	r0, r4
   d82c8:	2114      	movs	r1, #20
   d82ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d82ce:	f001 b957 	b.w	d9580 <_ZdlPvj>
   d82d2:	bd38      	pop	{r3, r4, r5, pc}

000d82d4 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d82d4:	b510      	push	{r4, lr}
   d82d6:	b088      	sub	sp, #32
   d82d8:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d82da:	4668      	mov	r0, sp
   d82dc:	f7fe f9fb 	bl	d66d6 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   d82e0:	4669      	mov	r1, sp
   d82e2:	a804      	add	r0, sp, #16
   d82e4:	f7fe fa19 	bl	d671a <_ZN6StringC1ERKS_>
   d82e8:	a804      	add	r0, sp, #16
   d82ea:	47a0      	blx	r4
   d82ec:	4604      	mov	r4, r0
   d82ee:	a804      	add	r0, sp, #16
   d82f0:	f7fe f9aa 	bl	d6648 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d82f4:	4668      	mov	r0, sp
   d82f6:	f7fe f9a7 	bl	d6648 <_ZN6StringD1Ev>
    return (*fn)(p);
}
   d82fa:	4620      	mov	r0, r4
   d82fc:	b008      	add	sp, #32
   d82fe:	bd10      	pop	{r4, pc}

000d8300 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d8300:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d8302:	2410      	movs	r4, #16
   d8304:	b085      	sub	sp, #20
   d8306:	4607      	mov	r7, r0
   d8308:	460e      	mov	r6, r1
   d830a:	4615      	mov	r5, r2
   d830c:	2100      	movs	r1, #0
   d830e:	4622      	mov	r2, r4
   d8310:	4668      	mov	r0, sp
   d8312:	f001 fc96 	bl	d9c42 <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d8316:	2200      	movs	r2, #0
   d8318:	4669      	mov	r1, sp
   d831a:	4610      	mov	r0, r2
         size = sizeof(*this);
   d831c:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
   d8320:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
   d8322:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
   d8324:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d8326:	f7fe f8a3 	bl	d6470 <spark_function>
}
   d832a:	b005      	add	sp, #20
   d832c:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d832e <_ZN10CloudClass13publishVitalsEm>:
    }

    return p.future();
}

int CloudClass::publishVitals(system_tick_t period_s_) {
   d832e:	4608      	mov	r0, r1
    return spark_publish_vitals(period_s_, nullptr);
   d8330:	2100      	movs	r1, #0
   d8332:	f7fe b8bd 	b.w	d64b0 <spark_publish_vitals>

000d8336 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d8336:	b513      	push	{r0, r1, r4, lr}
   d8338:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d833a:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d833e:	2300      	movs	r3, #0
   d8340:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d8342:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d8344:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d8346:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d8348:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d834a:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d834c:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d834e:	f7fc f871 	bl	d4434 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8352:	4620      	mov	r0, r4
   d8354:	b002      	add	sp, #8
   d8356:	bd10      	pop	{r4, pc}

000d8358 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d8358:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d835a:	460c      	mov	r4, r1
   d835c:	ad02      	add	r5, sp, #8
   d835e:	f854 3b04 	ldr.w	r3, [r4], #4
   d8362:	f845 3d08 	str.w	r3, [r5, #-8]!
   d8366:	4606      	mov	r6, r0
   d8368:	460f      	mov	r7, r1
   d836a:	a801      	add	r0, sp, #4
   d836c:	4621      	mov	r1, r4
   d836e:	f7fe fbe1 	bl	d6b34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d8372:	4629      	mov	r1, r5
   d8374:	4630      	mov	r0, r6
   d8376:	f7ff ffde 	bl	d8336 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d837a:	a801      	add	r0, sp, #4
   d837c:	f7fc f85a 	bl	d4434 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8380:	4620      	mov	r0, r4
   d8382:	f7fc f857 	bl	d4434 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d8386:	4638      	mov	r0, r7
   d8388:	2108      	movs	r1, #8
   d838a:	f001 f8f9 	bl	d9580 <_ZdlPvj>
        return p;
    }
   d838e:	4630      	mov	r0, r6
   d8390:	b003      	add	sp, #12
   d8392:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d8394 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d8394:	b538      	push	{r3, r4, r5, lr}
   d8396:	2300      	movs	r3, #0
   d8398:	4604      	mov	r4, r0
   d839a:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d839c:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d839e:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d83a0:	f7fb fe79 	bl	d4096 <_Znwj>
   d83a4:	b128      	cbz	r0, d83b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d83a6:	2301      	movs	r3, #1
   d83a8:	6043      	str	r3, [r0, #4]
   d83aa:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d83ac:	4b02      	ldr	r3, [pc, #8]	; (d83b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d83ae:	6003      	str	r3, [r0, #0]
   d83b0:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d83b2:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d83b4:	4620      	mov	r0, r4
   d83b6:	bd38      	pop	{r3, r4, r5, pc}
   d83b8:	000dac44 	.word	0x000dac44

000d83bc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d83bc:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d83be:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d83c0:	b90a      	cbnz	r2, d83c6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d83c2:	f001 f8f3 	bl	d95ac <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d83c6:	68c3      	ldr	r3, [r0, #12]
    }
   d83c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d83cc:	4718      	bx	r3

000d83ce <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d83ce:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d83d0:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d83d2:	f100 0110 	add.w	r1, r0, #16
   d83d6:	f7ff fff1 	bl	d83bc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d83da:	bd08      	pop	{r3, pc}

000d83dc <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d83dc:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d83de:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d83e0:	b90a      	cbnz	r2, d83e6 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d83e2:	f001 f8e3 	bl	d95ac <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d83e6:	68c3      	ldr	r3, [r0, #12]
    }
   d83e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d83ec:	4718      	bx	r3

000d83ee <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d83ee:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d83f0:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d83f2:	f100 0110 	add.w	r1, r0, #16
   d83f6:	f7ff fff1 	bl	d83dc <_ZNKSt8functionIFvRKbEEclES1_>
   d83fa:	bd08      	pop	{r3, pc}

000d83fc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d83fc:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d83fe:	2300      	movs	r3, #0
   d8400:	6083      	str	r3, [r0, #8]
   d8402:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d8404:	4604      	mov	r4, r0
   d8406:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d8408:	b12b      	cbz	r3, d8416 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d840a:	2202      	movs	r2, #2
   d840c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d840e:	68eb      	ldr	r3, [r5, #12]
   d8410:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d8412:	68ab      	ldr	r3, [r5, #8]
   d8414:	60a3      	str	r3, [r4, #8]
	}
    }
   d8416:	4620      	mov	r0, r4
   d8418:	bd38      	pop	{r3, r4, r5, pc}
	...

000d841c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d841c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d841e:	b089      	sub	sp, #36	; 0x24
   d8420:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d8422:	4668      	mov	r0, sp
   d8424:	f7ff ff1d 	bl	d8262 <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d8428:	2300      	movs	r3, #0
   d842a:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d842e:	f04f 0202 	mov.w	r2, #2
   d8432:	e8d4 3f4f 	ldrexb	r3, [r4]
   d8436:	2b00      	cmp	r3, #0
   d8438:	d103      	bne.n	d8442 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d843a:	e8c4 2f41 	strexb	r1, r2, [r4]
   d843e:	2900      	cmp	r1, #0
   d8440:	d1f7      	bne.n	d8432 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d8442:	d002      	beq.n	d844a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d8444:	f88d 3008 	strb.w	r3, [sp, #8]
   d8448:	e063      	b.n	d8512 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d844a:	f114 050c 	adds.w	r5, r4, #12
   d844e:	d003      	beq.n	d8458 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d8450:	4669      	mov	r1, sp
   d8452:	4628      	mov	r0, r5
   d8454:	f7ff ff05 	bl	d8262 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d8458:	f3bf 8f5f 	dmb	sy
   d845c:	2301      	movs	r3, #1
   d845e:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d8460:	2000      	movs	r0, #0
   d8462:	f104 0308 	add.w	r3, r4, #8
   d8466:	f3bf 8f5f 	dmb	sy
   d846a:	e853 6f00 	ldrex	r6, [r3]
   d846e:	e843 0200 	strex	r2, r0, [r3]
   d8472:	2a00      	cmp	r2, #0
   d8474:	d1f9      	bne.n	d846a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d8476:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d847a:	2e00      	cmp	r6, #0
   d847c:	d049      	beq.n	d8512 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d847e:	f7fd ff83 	bl	d6388 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d8482:	b120      	cbz	r0, d848e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d8484:	4629      	mov	r1, r5
   d8486:	4630      	mov	r0, r6
   d8488:	f7ff ff98 	bl	d83bc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d848c:	e03a      	b.n	d8504 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d848e:	4631      	mov	r1, r6
   d8490:	a802      	add	r0, sp, #8
   d8492:	f7ff ffb3 	bl	d83fc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d8496:	68e0      	ldr	r0, [r4, #12]
   d8498:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d849c:	b108      	cbz	r0, d84a2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d849e:	f001 fc23 	bl	d9ce8 <strdup>
   d84a2:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d84a4:	2010      	movs	r0, #16
   d84a6:	f8ad 501c 	strh.w	r5, [sp, #28]
   d84aa:	f7fb fdf4 	bl	d4096 <_Znwj>
   d84ae:	4605      	mov	r5, r0
   d84b0:	b1e8      	cbz	r0, d84ee <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d84b2:	2700      	movs	r7, #0
   d84b4:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d84b6:	2018      	movs	r0, #24
   d84b8:	f7fb fded 	bl	d4096 <_Znwj>
   d84bc:	4604      	mov	r4, r0
   d84be:	b188      	cbz	r0, d84e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d84c0:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d84c2:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d84c4:	a802      	add	r0, sp, #8
   d84c6:	f7ff fe17 	bl	d80f8 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d84ca:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d84cc:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d84ce:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d84d0:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d84d2:	9204      	str	r2, [sp, #16]
   d84d4:	a906      	add	r1, sp, #24
   d84d6:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d84d8:	60e3      	str	r3, [r4, #12]
   d84da:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d84de:	9205      	str	r2, [sp, #20]
   d84e0:	f7ff febf 	bl	d8262 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d84e4:	4b0d      	ldr	r3, [pc, #52]	; (d851c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d84e6:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d84e8:	4b0d      	ldr	r3, [pc, #52]	; (d8520 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d84ea:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d84ec:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d84ee:	a806      	add	r0, sp, #24
   d84f0:	f7ff fec6 	bl	d8280 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d84f4:	a802      	add	r0, sp, #8
   d84f6:	f7ff fdf0 	bl	d80da <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d84fa:	2200      	movs	r2, #0
   d84fc:	4629      	mov	r1, r5
   d84fe:	4809      	ldr	r0, [pc, #36]	; (d8524 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d8500:	f7fd ff4a 	bl	d6398 <application_thread_invoke>
   d8504:	4630      	mov	r0, r6
   d8506:	f7ff fde8 	bl	d80da <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d850a:	2110      	movs	r1, #16
   d850c:	4630      	mov	r0, r6
   d850e:	f001 f837 	bl	d9580 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d8512:	4668      	mov	r0, sp
   d8514:	f7ff feb4 	bl	d8280 <_ZN8particle5ErrorD1Ev>
    }
   d8518:	b009      	add	sp, #36	; 0x24
   d851a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d851c:	000d83cf 	.word	0x000d83cf
   d8520:	000d8645 	.word	0x000d8645
   d8524:	000d8c0d 	.word	0x000d8c0d

000d8528 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d8528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d852c:	b08b      	sub	sp, #44	; 0x2c
   d852e:	4606      	mov	r6, r0
   d8530:	460f      	mov	r7, r1
   d8532:	4690      	mov	r8, r2
   d8534:	4699      	mov	r9, r3
   d8536:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d853a:	f7fd ffa1 	bl	d6480 <spark_cloud_flag_connected>
   d853e:	ad07      	add	r5, sp, #28
    if (!connected()) {
   d8540:	4683      	mov	fp, r0
   d8542:	bb30      	cbnz	r0, d8592 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d8544:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d8548:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d854a:	a905      	add	r1, sp, #20
   d854c:	4628      	mov	r0, r5
   d854e:	f8ad 3018 	strh.w	r3, [sp, #24]
   d8552:	f7ff fe86 	bl	d8262 <_ZN8particle5ErrorC1EOS0_>
   d8556:	2014      	movs	r0, #20
   d8558:	f7fb fd9d 	bl	d4096 <_Znwj>
   d855c:	4604      	mov	r4, r0
   d855e:	b158      	cbz	r0, d8578 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d8560:	2302      	movs	r3, #2
   d8562:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d8564:	2301      	movs	r3, #1
   d8566:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d8568:	f8c0 b004 	str.w	fp, [r0, #4]
   d856c:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d8570:	4629      	mov	r1, r5
   d8572:	300c      	adds	r0, #12
   d8574:	f7ff fe75 	bl	d8262 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d8578:	4630      	mov	r0, r6
   d857a:	4621      	mov	r1, r4
   d857c:	f840 4b04 	str.w	r4, [r0], #4
   d8580:	f7ff ff08 	bl	d8394 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d8584:	4628      	mov	r0, r5
   d8586:	f7ff fe7b 	bl	d8280 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d858a:	a805      	add	r0, sp, #20
   d858c:	f7ff fe78 	bl	d8280 <_ZN8particle5ErrorD1Ev>
   d8590:	e052      	b.n	d8638 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d8592:	2400      	movs	r4, #0
   d8594:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d8596:	2014      	movs	r0, #20
   d8598:	606c      	str	r4, [r5, #4]
   d859a:	60ac      	str	r4, [r5, #8]
   d859c:	9307      	str	r3, [sp, #28]
   d859e:	f7fb fd7a 	bl	d4096 <_Znwj>
   d85a2:	4601      	mov	r1, r0
   d85a4:	b118      	cbz	r0, d85ae <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d85a6:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d85a8:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d85aa:	6044      	str	r4, [r0, #4]
   d85ac:	6084      	str	r4, [r0, #8]
   d85ae:	a804      	add	r0, sp, #16
   d85b0:	9103      	str	r1, [sp, #12]
   d85b2:	f7ff feef 	bl	d8394 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d85b6:	4b22      	ldr	r3, [pc, #136]	; (d8640 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d85b8:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d85ba:	2008      	movs	r0, #8
   d85bc:	f7fb fd6b 	bl	d4096 <_Znwj>
   d85c0:	4604      	mov	r4, r0
   d85c2:	b128      	cbz	r0, d85d0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d85c4:	9b03      	ldr	r3, [sp, #12]
   d85c6:	f840 3b04 	str.w	r3, [r0], #4
   d85ca:	a904      	add	r1, sp, #16
   d85cc:	f7fe fab2 	bl	d6b34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d85d0:	9500      	str	r5, [sp, #0]
   d85d2:	fa5f f38a 	uxtb.w	r3, sl
   d85d6:	464a      	mov	r2, r9
   d85d8:	4641      	mov	r1, r8
   d85da:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d85dc:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d85de:	f7fd ff57 	bl	d6490 <spark_send_event>
   d85e2:	b920      	cbnz	r0, d85ee <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d85e4:	9b03      	ldr	r3, [sp, #12]
   d85e6:	785b      	ldrb	r3, [r3, #1]
   d85e8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d85ec:	b183      	cbz	r3, d8610 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d85ee:	9b03      	ldr	r3, [sp, #12]
   d85f0:	9305      	str	r3, [sp, #20]
   d85f2:	a904      	add	r1, sp, #16
   d85f4:	a806      	add	r0, sp, #24
   d85f6:	f7fe fa9d 	bl	d6b34 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d85fa:	a905      	add	r1, sp, #20
   d85fc:	4630      	mov	r0, r6
   d85fe:	f7ff fe9a 	bl	d8336 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d8602:	a806      	add	r0, sp, #24
   d8604:	f7fb ff16 	bl	d4434 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8608:	a804      	add	r0, sp, #16
   d860a:	f7fb ff13 	bl	d4434 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d860e:	e013      	b.n	d8638 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d8610:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d8614:	a905      	add	r1, sp, #20
   d8616:	a803      	add	r0, sp, #12
   d8618:	9205      	str	r2, [sp, #20]
   d861a:	f8ad 3018 	strh.w	r3, [sp, #24]
   d861e:	f7ff fefd 	bl	d841c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d8622:	a805      	add	r0, sp, #20
   d8624:	f7ff fe2c 	bl	d8280 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d8628:	a805      	add	r0, sp, #20
   d862a:	9909      	ldr	r1, [sp, #36]	; 0x24
   d862c:	f7ff fe94 	bl	d8358 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d8630:	a806      	add	r0, sp, #24
   d8632:	f7fb feff 	bl	d4434 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8636:	e7da      	b.n	d85ee <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   d8638:	4630      	mov	r0, r6
   d863a:	b00b      	add	sp, #44	; 0x2c
   d863c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8640:	000d87b5 	.word	0x000d87b5

000d8644 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d8644:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d8646:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8648:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d864a:	d006      	beq.n	d865a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d864c:	2a03      	cmp	r2, #3
   d864e:	d017      	beq.n	d8680 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d8650:	2a01      	cmp	r2, #1
   d8652:	d122      	bne.n	d869a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d8654:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d8656:	6003      	str	r3, [r0, #0]
	      break;
   d8658:	e01f      	b.n	d869a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d865a:	2018      	movs	r0, #24
   d865c:	680e      	ldr	r6, [r1, #0]
   d865e:	f7fb fd1a 	bl	d4096 <_Znwj>
   d8662:	4605      	mov	r5, r0
   d8664:	b150      	cbz	r0, d867c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d8666:	4631      	mov	r1, r6
   d8668:	f7ff fec8 	bl	d83fc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d866c:	6930      	ldr	r0, [r6, #16]
   d866e:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d8672:	b108      	cbz	r0, d8678 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d8674:	f001 fb38 	bl	d9ce8 <strdup>
   d8678:	6128      	str	r0, [r5, #16]
   d867a:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d867c:	6025      	str	r5, [r4, #0]
   d867e:	e00c      	b.n	d869a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d8680:	6804      	ldr	r4, [r0, #0]
   d8682:	b154      	cbz	r4, d869a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d8684:	f104 0010 	add.w	r0, r4, #16
   d8688:	f7ff fdfa 	bl	d8280 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d868c:	4620      	mov	r0, r4
   d868e:	f7ff fd24 	bl	d80da <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d8692:	2118      	movs	r1, #24
   d8694:	4620      	mov	r0, r4
   d8696:	f000 ff73 	bl	d9580 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d869a:	2000      	movs	r0, #0
   d869c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d869e <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d869e:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d86a0:	2300      	movs	r3, #0
   d86a2:	6083      	str	r3, [r0, #8]
   d86a4:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d86a6:	4604      	mov	r4, r0
   d86a8:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d86aa:	b12b      	cbz	r3, d86b8 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d86ac:	2202      	movs	r2, #2
   d86ae:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d86b0:	68eb      	ldr	r3, [r5, #12]
   d86b2:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d86b4:	68ab      	ldr	r3, [r5, #8]
   d86b6:	60a3      	str	r3, [r4, #8]
	}
    }
   d86b8:	4620      	mov	r0, r4
   d86ba:	bd38      	pop	{r3, r4, r5, pc}

000d86bc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d86bc:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d86be:	b570      	push	{r4, r5, r6, lr}
   d86c0:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d86c2:	d006      	beq.n	d86d2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d86c4:	2a03      	cmp	r2, #3
   d86c6:	d011      	beq.n	d86ec <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d86c8:	2a01      	cmp	r2, #1
   d86ca:	d118      	bne.n	d86fe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d86cc:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d86ce:	6003      	str	r3, [r0, #0]
	      break;
   d86d0:	e015      	b.n	d86fe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d86d2:	2014      	movs	r0, #20
   d86d4:	680e      	ldr	r6, [r1, #0]
   d86d6:	f7fb fcde 	bl	d4096 <_Znwj>
   d86da:	4605      	mov	r5, r0
   d86dc:	b120      	cbz	r0, d86e8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d86de:	4631      	mov	r1, r6
   d86e0:	f7ff ffdd 	bl	d869e <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d86e4:	7c33      	ldrb	r3, [r6, #16]
   d86e6:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d86e8:	6025      	str	r5, [r4, #0]
   d86ea:	e008      	b.n	d86fe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d86ec:	6804      	ldr	r4, [r0, #0]
   d86ee:	b134      	cbz	r4, d86fe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d86f0:	4620      	mov	r0, r4
   d86f2:	f7ff fcf2 	bl	d80da <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d86f6:	2114      	movs	r1, #20
   d86f8:	4620      	mov	r0, r4
   d86fa:	f000 ff41 	bl	d9580 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d86fe:	2000      	movs	r0, #0
   d8700:	bd70      	pop	{r4, r5, r6, pc}
	...

000d8704 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d8704:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d8706:	2300      	movs	r3, #0
   d8708:	b087      	sub	sp, #28
   d870a:	460c      	mov	r4, r1
   d870c:	f3bf 8f5f 	dmb	sy
   d8710:	e850 6f00 	ldrex	r6, [r0]
   d8714:	e840 3200 	strex	r2, r3, [r0]
   d8718:	2a00      	cmp	r2, #0
   d871a:	d1f9      	bne.n	d8710 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d871c:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d8720:	2e00      	cmp	r6, #0
   d8722:	d03f      	beq.n	d87a4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d8724:	4618      	mov	r0, r3
   d8726:	f7fd fe2f 	bl	d6388 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d872a:	4607      	mov	r7, r0
   d872c:	b120      	cbz	r0, d8738 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d872e:	4621      	mov	r1, r4
   d8730:	4630      	mov	r0, r6
   d8732:	f7ff fe53 	bl	d83dc <_ZNKSt8functionIFvRKbEEclES1_>
   d8736:	e02e      	b.n	d8796 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d8738:	4631      	mov	r1, r6
   d873a:	a801      	add	r0, sp, #4
   d873c:	f7ff ffaf 	bl	d869e <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d8740:	7823      	ldrb	r3, [r4, #0]
   d8742:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d8746:	2010      	movs	r0, #16
   d8748:	f7fb fca5 	bl	d4096 <_Znwj>
   d874c:	4605      	mov	r5, r0
   d874e:	b1d0      	cbz	r0, d8786 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d8750:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8752:	2014      	movs	r0, #20
   d8754:	f7fb fc9f 	bl	d4096 <_Znwj>
   d8758:	4604      	mov	r4, r0
   d875a:	b178      	cbz	r0, d877c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d875c:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d875e:	4601      	mov	r1, r0
   d8760:	a801      	add	r0, sp, #4
   d8762:	f7ff fcc9 	bl	d80f8 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8766:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d8768:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d876a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d876c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d876e:	9203      	str	r2, [sp, #12]
   d8770:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d8772:	60e3      	str	r3, [r4, #12]
   d8774:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d8778:	9204      	str	r2, [sp, #16]
   d877a:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d877c:	4b0a      	ldr	r3, [pc, #40]	; (d87a8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d877e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d8780:	4b0a      	ldr	r3, [pc, #40]	; (d87ac <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8782:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d8784:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d8786:	a801      	add	r0, sp, #4
   d8788:	f7ff fca7 	bl	d80da <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d878c:	2200      	movs	r2, #0
   d878e:	4629      	mov	r1, r5
   d8790:	4807      	ldr	r0, [pc, #28]	; (d87b0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d8792:	f7fd fe01 	bl	d6398 <application_thread_invoke>
   d8796:	4630      	mov	r0, r6
   d8798:	f7ff fc9f 	bl	d80da <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d879c:	2110      	movs	r1, #16
   d879e:	4630      	mov	r0, r6
   d87a0:	f000 feee 	bl	d9580 <_ZdlPvj>
        }
    }
   d87a4:	b007      	add	sp, #28
   d87a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d87a8:	000d83ef 	.word	0x000d83ef
   d87ac:	000d86bd 	.word	0x000d86bd
   d87b0:	000d8c0d 	.word	0x000d8c0d

000d87b4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d87b4:	b530      	push	{r4, r5, lr}
   d87b6:	b085      	sub	sp, #20
   d87b8:	4604      	mov	r4, r0
   d87ba:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d87bc:	4668      	mov	r0, sp
   d87be:	4611      	mov	r1, r2
   d87c0:	f7ff fdca 	bl	d8358 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d87c4:	b17c      	cbz	r4, d87e6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d87c6:	b224      	sxth	r4, r4
   d87c8:	4628      	mov	r0, r5
   d87ca:	b10d      	cbz	r5, d87d0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d87cc:	f001 fa8c 	bl	d9ce8 <strdup>
   d87d0:	9002      	str	r0, [sp, #8]
   d87d2:	a902      	add	r1, sp, #8
   d87d4:	4668      	mov	r0, sp
   d87d6:	f8ad 400c 	strh.w	r4, [sp, #12]
   d87da:	f7ff fe1f 	bl	d841c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d87de:	a802      	add	r0, sp, #8
   d87e0:	f7ff fd4e 	bl	d8280 <_ZN8particle5ErrorD1Ev>
   d87e4:	e01d      	b.n	d8822 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d87e6:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d87e8:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d87ec:	f04f 0201 	mov.w	r2, #1
   d87f0:	e8d0 3f4f 	ldrexb	r3, [r0]
   d87f4:	42a3      	cmp	r3, r4
   d87f6:	d103      	bne.n	d8800 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d87f8:	e8c0 2f41 	strexb	r1, r2, [r0]
   d87fc:	2900      	cmp	r1, #0
   d87fe:	d1f7      	bne.n	d87f0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d8800:	d002      	beq.n	d8808 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d8802:	f88d 3008 	strb.w	r3, [sp, #8]
   d8806:	e00c      	b.n	d8822 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d8808:	f110 010c 	adds.w	r1, r0, #12
   d880c:	f04f 0301 	mov.w	r3, #1
   d8810:	bf18      	it	ne
   d8812:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d8814:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d8818:	3004      	adds	r0, #4
   d881a:	f800 3c03 	strb.w	r3, [r0, #-3]
   d881e:	f7ff ff71 	bl	d8704 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d8822:	a801      	add	r0, sp, #4
   d8824:	f7fb fe06 	bl	d4434 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d8828:	b005      	add	sp, #20
   d882a:	bd30      	pop	{r4, r5, pc}

000d882c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d882c:	4770      	bx	lr

000d882e <_ZN9IPAddressD0Ev>:
   d882e:	b510      	push	{r4, lr}
   d8830:	2118      	movs	r1, #24
   d8832:	4604      	mov	r4, r0
   d8834:	f000 fea4 	bl	d9580 <_ZdlPvj>
   d8838:	4620      	mov	r0, r4
   d883a:	bd10      	pop	{r4, pc}

000d883c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d883c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d883e:	7d03      	ldrb	r3, [r0, #20]
   d8840:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d8842:	b08d      	sub	sp, #52	; 0x34
   d8844:	460e      	mov	r6, r1
   d8846:	f100 0704 	add.w	r7, r0, #4
   d884a:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d884e:	d002      	beq.n	d8856 <_ZNK9IPAddress7printToER5Print+0x1a>
   d8850:	f100 0508 	add.w	r5, r0, #8
   d8854:	e018      	b.n	d8888 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d8856:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d8858:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d885a:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d885e:	232f      	movs	r3, #47	; 0x2f
   d8860:	462a      	mov	r2, r5
   d8862:	200a      	movs	r0, #10
   d8864:	f7fd fc80 	bl	d6168 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d8868:	4628      	mov	r0, r5
   d886a:	f001 fa58 	bl	d9d1e <strlen>
   d886e:	6833      	ldr	r3, [r6, #0]
   d8870:	4602      	mov	r2, r0
   d8872:	68db      	ldr	r3, [r3, #12]
   d8874:	4629      	mov	r1, r5
   d8876:	4630      	mov	r0, r6
   d8878:	4798      	blx	r3
   d887a:	e00f      	b.n	d889c <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d887c:	b124      	cbz	r4, d8888 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d887e:	212e      	movs	r1, #46	; 0x2e
   d8880:	4630      	mov	r0, r6
   d8882:	f7fe fbf9 	bl	d7078 <_ZN5Print5printEc>
   d8886:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d8888:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d888c:	220a      	movs	r2, #10
   d888e:	4630      	mov	r0, r6
   d8890:	f7fe fc01 	bl	d7096 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d8894:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d8896:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d8898:	d1f0      	bne.n	d887c <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d889a:	4620      	mov	r0, r4
    }
    return n;
}
   d889c:	b00d      	add	sp, #52	; 0x34
   d889e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d88a0 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d88a0:	b510      	push	{r4, lr}
   d88a2:	4b05      	ldr	r3, [pc, #20]	; (d88b8 <_ZN9IPAddressC1Ev+0x18>)
   d88a4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d88a6:	2211      	movs	r2, #17
   d88a8:	f840 3b04 	str.w	r3, [r0], #4
   d88ac:	2100      	movs	r1, #0
   d88ae:	f001 f9c8 	bl	d9c42 <memset>
{
    clear();
}
   d88b2:	4620      	mov	r0, r4
   d88b4:	bd10      	pop	{r4, pc}
   d88b6:	bf00      	nop
   d88b8:	000dac60 	.word	0x000dac60

000d88bc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d88bc:	4603      	mov	r3, r0
   d88be:	4a07      	ldr	r2, [pc, #28]	; (d88dc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d88c0:	b510      	push	{r4, lr}
   d88c2:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d88c6:	f101 0210 	add.w	r2, r1, #16
   d88ca:	f851 4b04 	ldr.w	r4, [r1], #4
   d88ce:	f843 4b04 	str.w	r4, [r3], #4
   d88d2:	4291      	cmp	r1, r2
   d88d4:	d1f9      	bne.n	d88ca <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d88d6:	780a      	ldrb	r2, [r1, #0]
   d88d8:	701a      	strb	r2, [r3, #0]
}
   d88da:	bd10      	pop	{r4, pc}
   d88dc:	000dac60 	.word	0x000dac60

000d88e0 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d88e0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d88e2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d88e6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d88ea:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d88ee:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d88f2:	2304      	movs	r3, #4
   d88f4:	6041      	str	r1, [r0, #4]
   d88f6:	7503      	strb	r3, [r0, #20]
   d88f8:	bd10      	pop	{r4, pc}

000d88fa <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d88fa:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d88fc:	780d      	ldrb	r5, [r1, #0]
   d88fe:	788b      	ldrb	r3, [r1, #2]
   d8900:	784a      	ldrb	r2, [r1, #1]
   d8902:	78c9      	ldrb	r1, [r1, #3]
   d8904:	9100      	str	r1, [sp, #0]
   d8906:	4629      	mov	r1, r5
   d8908:	f7ff ffea 	bl	d88e0 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d890c:	b003      	add	sp, #12
   d890e:	bd30      	pop	{r4, r5, pc}

000d8910 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d8910:	7441      	strb	r1, [r0, #17]
   d8912:	4770      	bx	lr

000d8914 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d8914:	4770      	bx	lr

000d8916 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d8916:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d8918:	2100      	movs	r1, #0
   d891a:	7c00      	ldrb	r0, [r0, #16]
   d891c:	f7fd fcdc 	bl	d62d8 <HAL_USB_USART_Receive_Data>
}
   d8920:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d8924:	bf28      	it	cs
   d8926:	f04f 30ff 	movcs.w	r0, #4294967295
   d892a:	bd08      	pop	{r3, pc}

000d892c <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d892c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d892e:	2101      	movs	r1, #1
   d8930:	7c00      	ldrb	r0, [r0, #16]
   d8932:	f7fd fcd1 	bl	d62d8 <HAL_USB_USART_Receive_Data>
}
   d8936:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d893a:	bf28      	it	cs
   d893c:	f04f 30ff 	movcs.w	r0, #4294967295
   d8940:	bd08      	pop	{r3, pc}

000d8942 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d8942:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d8944:	7c00      	ldrb	r0, [r0, #16]
   d8946:	f7fd fcbf 	bl	d62c8 <HAL_USB_USART_Available_Data_For_Write>
}
   d894a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d894e:	bd08      	pop	{r3, pc}

000d8950 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d8950:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d8952:	7c00      	ldrb	r0, [r0, #16]
   d8954:	f7fd fcb0 	bl	d62b8 <HAL_USB_USART_Available_Data>
}
   d8958:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d895c:	bd08      	pop	{r3, pc}

000d895e <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d895e:	7c00      	ldrb	r0, [r0, #16]
   d8960:	f7fd bcca 	b.w	d62f8 <HAL_USB_USART_Flush_Data>

000d8964 <_ZN9USBSerialD0Ev>:
   d8964:	b510      	push	{r4, lr}
   d8966:	2114      	movs	r1, #20
   d8968:	4604      	mov	r4, r0
   d896a:	f000 fe09 	bl	d9580 <_ZdlPvj>
   d896e:	4620      	mov	r0, r4
   d8970:	bd10      	pop	{r4, pc}

000d8972 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d8972:	b538      	push	{r3, r4, r5, lr}
   d8974:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d8976:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d8978:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d897a:	f7fd fca5 	bl	d62c8 <HAL_USB_USART_Available_Data_For_Write>
   d897e:	2800      	cmp	r0, #0
   d8980:	dc01      	bgt.n	d8986 <_ZN9USBSerial5writeEh+0x14>
   d8982:	7c60      	ldrb	r0, [r4, #17]
   d8984:	b128      	cbz	r0, d8992 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d8986:	4629      	mov	r1, r5
   d8988:	7c20      	ldrb	r0, [r4, #16]
   d898a:	f7fd fcad 	bl	d62e8 <HAL_USB_USART_Send_Data>
   d898e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d8992:	bd38      	pop	{r3, r4, r5, pc}

000d8994 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d8994:	b510      	push	{r4, lr}
   d8996:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d8998:	2300      	movs	r3, #0
   d899a:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d899c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d89a0:	60a3      	str	r3, [r4, #8]
   d89a2:	4b05      	ldr	r3, [pc, #20]	; (d89b8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d89a4:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d89a6:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d89a8:	4608      	mov	r0, r1
{
  _serial = serial;
   d89aa:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d89ac:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d89ae:	4611      	mov	r1, r2
   d89b0:	f7fd fc6a 	bl	d6288 <HAL_USB_USART_Init>
}
   d89b4:	4620      	mov	r0, r4
   d89b6:	bd10      	pop	{r4, pc}
   d89b8:	000dac74 	.word	0x000dac74

000d89bc <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d89bc:	2200      	movs	r2, #0
   d89be:	7c00      	ldrb	r0, [r0, #16]
   d89c0:	f7fd bc6a 	b.w	d6298 <HAL_USB_USART_Begin>

000d89c4 <_ZN9USBSerial3endEv>:
}

void USBSerial::end()
{
    HAL_USB_USART_End(_serial);
   d89c4:	7c00      	ldrb	r0, [r0, #16]
   d89c6:	f7fd bc6f 	b.w	d62a8 <HAL_USB_USART_End>

000d89ca <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d89ca:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d89cc:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d89ce:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d89d0:	2100      	movs	r1, #0
   d89d2:	f001 f936 	bl	d9c42 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d89d6:	4620      	mov	r0, r4
   d89d8:	bd10      	pop	{r4, pc}
	...

000d89dc <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d89dc:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d89de:	4d0e      	ldr	r5, [pc, #56]	; (d8a18 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d89e0:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d89e2:	a801      	add	r0, sp, #4
   d89e4:	f7ff fff1 	bl	d89ca <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d89e8:	6829      	ldr	r1, [r5, #0]
   d89ea:	f011 0401 	ands.w	r4, r1, #1
   d89ee:	d110      	bne.n	d8a12 <_Z16_fetch_usbserialv+0x36>
   d89f0:	4628      	mov	r0, r5
   d89f2:	f7fb fb61 	bl	d40b8 <__cxa_guard_acquire>
   d89f6:	b160      	cbz	r0, d8a12 <_Z16_fetch_usbserialv+0x36>
   d89f8:	aa01      	add	r2, sp, #4
   d89fa:	4621      	mov	r1, r4
   d89fc:	4807      	ldr	r0, [pc, #28]	; (d8a1c <_Z16_fetch_usbserialv+0x40>)
   d89fe:	f7ff ffc9 	bl	d8994 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d8a02:	4628      	mov	r0, r5
   d8a04:	f7fb fb5d 	bl	d40c2 <__cxa_guard_release>
   d8a08:	4a05      	ldr	r2, [pc, #20]	; (d8a20 <_Z16_fetch_usbserialv+0x44>)
   d8a0a:	4906      	ldr	r1, [pc, #24]	; (d8a24 <_Z16_fetch_usbserialv+0x48>)
   d8a0c:	4803      	ldr	r0, [pc, #12]	; (d8a1c <_Z16_fetch_usbserialv+0x40>)
   d8a0e:	f000 fda9 	bl	d9564 <__aeabi_atexit>
	return _usbserial;
}
   d8a12:	4802      	ldr	r0, [pc, #8]	; (d8a1c <_Z16_fetch_usbserialv+0x40>)
   d8a14:	b007      	add	sp, #28
   d8a16:	bd30      	pop	{r4, r5, pc}
   d8a18:	2003e4d8 	.word	0x2003e4d8
   d8a1c:	2003e4dc 	.word	0x2003e4dc
   d8a20:	2003e25c 	.word	0x2003e25c
   d8a24:	000d8915 	.word	0x000d8915

000d8a28 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d8a28:	2200      	movs	r2, #0
   d8a2a:	4611      	mov	r1, r2
   d8a2c:	6840      	ldr	r0, [r0, #4]
   d8a2e:	f7fd bce7 	b.w	d6400 <network_ready>

000d8a32 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d8a32:	2200      	movs	r2, #0
   d8a34:	4611      	mov	r1, r2
   d8a36:	6840      	ldr	r0, [r0, #4]
   d8a38:	f7fd bd02 	b.w	d6440 <network_listening>

000d8a3c <_ZN5spark13CellularClass16getListenTimeoutEv>:
    }

    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d8a3c:	2200      	movs	r2, #0
   d8a3e:	4611      	mov	r1, r2
   d8a40:	6840      	ldr	r0, [r0, #4]
   d8a42:	f7fd bd0d 	b.w	d6460 <network_get_listen_timeout>

000d8a46 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    inline void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d8a46:	2200      	movs	r2, #0
   d8a48:	6840      	ldr	r0, [r0, #4]
   d8a4a:	f7fd bd01 	b.w	d6450 <network_set_listen_timeout>

000d8a4e <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d8a4e:	2200      	movs	r2, #0
   d8a50:	f081 0101 	eor.w	r1, r1, #1
   d8a54:	6840      	ldr	r0, [r0, #4]
   d8a56:	f7fd bceb 	b.w	d6430 <network_listen>

000d8a5a <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d8a5a:	2300      	movs	r3, #0
   d8a5c:	461a      	mov	r2, r3
   d8a5e:	4619      	mov	r1, r3
   d8a60:	6840      	ldr	r0, [r0, #4]
   d8a62:	f7fd bcdd 	b.w	d6420 <network_off>

000d8a66 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d8a66:	2300      	movs	r3, #0
   d8a68:	461a      	mov	r2, r3
   d8a6a:	4619      	mov	r1, r3
   d8a6c:	6840      	ldr	r0, [r0, #4]
   d8a6e:	f7fd bccf 	b.w	d6410 <network_on>

000d8a72 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d8a72:	2200      	movs	r2, #0
   d8a74:	4611      	mov	r1, r2
   d8a76:	6840      	ldr	r0, [r0, #4]
   d8a78:	f7fd bcb2 	b.w	d63e0 <network_connecting>

000d8a7c <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8a7c:	2200      	movs	r2, #0
   d8a7e:	2102      	movs	r1, #2
   d8a80:	6840      	ldr	r0, [r0, #4]
   d8a82:	f7fd bcb5 	b.w	d63f0 <network_disconnect>

000d8a86 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d8a86:	2300      	movs	r3, #0
   d8a88:	461a      	mov	r2, r3
   d8a8a:	6840      	ldr	r0, [r0, #4]
   d8a8c:	f7fd bca0 	b.w	d63d0 <network_connect>

000d8a90 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d8a90:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d8a92:	4c08      	ldr	r4, [pc, #32]	; (d8ab4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d8a94:	2528      	movs	r5, #40	; 0x28
   d8a96:	462a      	mov	r2, r5
   d8a98:	2100      	movs	r1, #0
   d8a9a:	4620      	mov	r0, r4
   d8a9c:	f001 f8d1 	bl	d9c42 <memset>
        cid = -1;
   d8aa0:	f04f 33ff 	mov.w	r3, #4294967295
   d8aa4:	6063      	str	r3, [r4, #4]
   d8aa6:	4b04      	ldr	r3, [pc, #16]	; (d8ab8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d8aa8:	8025      	strh	r5, [r4, #0]
   d8aaa:	2204      	movs	r2, #4
   d8aac:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d8aae:	4a03      	ldr	r2, [pc, #12]	; (d8abc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d8ab0:	601a      	str	r2, [r3, #0]
   d8ab2:	bd38      	pop	{r3, r4, r5, pc}
   d8ab4:	2003e4f8 	.word	0x2003e4f8
   d8ab8:	2003e4f0 	.word	0x2003e4f0
   d8abc:	000daca4 	.word	0x000daca4

000d8ac0 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d8ac0:	4770      	bx	lr

000d8ac2 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d8ac2:	7441      	strb	r1, [r0, #17]
   d8ac4:	4770      	bx	lr

000d8ac6 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d8ac6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d8ac8:	7c00      	ldrb	r0, [r0, #16]
   d8aca:	f7fd fb95 	bl	d61f8 <HAL_USART_Available_Data_For_Write>
}
   d8ace:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8ad2:	bd08      	pop	{r3, pc}

000d8ad4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d8ad4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d8ad6:	7c00      	ldrb	r0, [r0, #16]
   d8ad8:	f7fd fb66 	bl	d61a8 <HAL_USART_Available_Data>
}
   d8adc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8ae0:	bd08      	pop	{r3, pc}

000d8ae2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d8ae2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d8ae4:	7c00      	ldrb	r0, [r0, #16]
   d8ae6:	f7fd fb6f 	bl	d61c8 <HAL_USART_Peek_Data>
}
   d8aea:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d8aee:	bf28      	it	cs
   d8af0:	f04f 30ff 	movcs.w	r0, #4294967295
   d8af4:	bd08      	pop	{r3, pc}

000d8af6 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d8af6:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d8af8:	7c00      	ldrb	r0, [r0, #16]
   d8afa:	f7fd fb5d 	bl	d61b8 <HAL_USART_Read_Data>
}
   d8afe:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d8b02:	bf28      	it	cs
   d8b04:	f04f 30ff 	movcs.w	r0, #4294967295
   d8b08:	bd08      	pop	{r3, pc}

000d8b0a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d8b0a:	7c00      	ldrb	r0, [r0, #16]
   d8b0c:	f7fd bb64 	b.w	d61d8 <HAL_USART_Flush_Data>

000d8b10 <_ZN11USARTSerialD0Ev>:
   d8b10:	b510      	push	{r4, lr}
   d8b12:	2114      	movs	r1, #20
   d8b14:	4604      	mov	r4, r0
   d8b16:	f000 fd33 	bl	d9580 <_ZdlPvj>
   d8b1a:	4620      	mov	r0, r4
   d8b1c:	bd10      	pop	{r4, pc}

000d8b1e <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d8b1e:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d8b20:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d8b22:	4604      	mov	r4, r0
   d8b24:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d8b26:	b925      	cbnz	r5, d8b32 <_ZN11USARTSerial5writeEh+0x14>
   d8b28:	7c00      	ldrb	r0, [r0, #16]
   d8b2a:	f7fd fb65 	bl	d61f8 <HAL_USART_Available_Data_For_Write>
   d8b2e:	2800      	cmp	r0, #0
   d8b30:	dd05      	ble.n	d8b3e <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d8b32:	4631      	mov	r1, r6
   d8b34:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d8b36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d8b3a:	f7fd bb2d 	b.w	d6198 <HAL_USART_Write_Data>
  }
  return 0;
}
   d8b3e:	4628      	mov	r0, r5
   d8b40:	bd70      	pop	{r4, r5, r6, pc}
	...

000d8b44 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d8b44:	b510      	push	{r4, lr}
   d8b46:	4604      	mov	r4, r0
   d8b48:	4608      	mov	r0, r1
   d8b4a:	4611      	mov	r1, r2
   d8b4c:	2200      	movs	r2, #0
   d8b4e:	6062      	str	r2, [r4, #4]
   d8b50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d8b54:	60a2      	str	r2, [r4, #8]
   d8b56:	4a05      	ldr	r2, [pc, #20]	; (d8b6c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d8b58:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d8b5a:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d8b5c:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d8b5e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d8b60:	461a      	mov	r2, r3
   d8b62:	f7fd fb09 	bl	d6178 <HAL_USART_Init>
}
   d8b66:	4620      	mov	r0, r4
   d8b68:	bd10      	pop	{r4, pc}
   d8b6a:	bf00      	nop
   d8b6c:	000dacd8 	.word	0x000dacd8

000d8b70 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   d8b70:	2300      	movs	r3, #0
   d8b72:	7c00      	ldrb	r0, [r0, #16]
   d8b74:	f7fd bb48 	b.w	d6208 <HAL_USART_BeginConfig>

000d8b78 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
   d8b78:	2200      	movs	r2, #0
   d8b7a:	f7ff bff9 	b.w	d8b70 <_ZN11USARTSerial5beginEmm>

000d8b7e <_ZN11USARTSerial3endEv>:
  HAL_USART_BeginConfig(_serial, baud, config, 0);
}

void USARTSerial::end()
{
  HAL_USART_End(_serial);
   d8b7e:	7c00      	ldrb	r0, [r0, #16]
   d8b80:	f7fd bb02 	b.w	d6188 <HAL_USART_End>

000d8b84 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d8b84:	7c00      	ldrb	r0, [r0, #16]
   d8b86:	f7fd bb2f 	b.w	d61e8 <HAL_USART_Is_Enabled>
	...

000d8b8c <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d8b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
   d8b8e:	4c19      	ldr	r4, [pc, #100]	; (d8bf4 <_Z22__fetch_global_Serial1v+0x68>)
   d8b90:	6825      	ldr	r5, [r4, #0]
   d8b92:	b94d      	cbnz	r5, d8ba8 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
   d8b94:	2084      	movs	r0, #132	; 0x84
   d8b96:	f7fb fa7e 	bl	d4096 <_Znwj>
   d8b9a:	4606      	mov	r6, r0
   d8b9c:	b118      	cbz	r0, d8ba6 <_Z22__fetch_global_Serial1v+0x1a>
   d8b9e:	2284      	movs	r2, #132	; 0x84
   d8ba0:	4629      	mov	r1, r5
   d8ba2:	f001 f84e 	bl	d9c42 <memset>
   d8ba6:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
   d8ba8:	4d13      	ldr	r5, [pc, #76]	; (d8bf8 <_Z22__fetch_global_Serial1v+0x6c>)
   d8baa:	682e      	ldr	r6, [r5, #0]
   d8bac:	b94e      	cbnz	r6, d8bc2 <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
   d8bae:	2084      	movs	r0, #132	; 0x84
   d8bb0:	f7fb fa71 	bl	d4096 <_Znwj>
   d8bb4:	4607      	mov	r7, r0
   d8bb6:	b118      	cbz	r0, d8bc0 <_Z22__fetch_global_Serial1v+0x34>
   d8bb8:	2284      	movs	r2, #132	; 0x84
   d8bba:	4631      	mov	r1, r6
   d8bbc:	f001 f841 	bl	d9c42 <memset>
   d8bc0:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   d8bc2:	4f0e      	ldr	r7, [pc, #56]	; (d8bfc <_Z22__fetch_global_Serial1v+0x70>)
   d8bc4:	6839      	ldr	r1, [r7, #0]
   d8bc6:	f011 0601 	ands.w	r6, r1, #1
   d8bca:	d111      	bne.n	d8bf0 <_Z22__fetch_global_Serial1v+0x64>
   d8bcc:	4638      	mov	r0, r7
   d8bce:	f7fb fa73 	bl	d40b8 <__cxa_guard_acquire>
   d8bd2:	b168      	cbz	r0, d8bf0 <_Z22__fetch_global_Serial1v+0x64>
   d8bd4:	6822      	ldr	r2, [r4, #0]
   d8bd6:	682b      	ldr	r3, [r5, #0]
   d8bd8:	4809      	ldr	r0, [pc, #36]	; (d8c00 <_Z22__fetch_global_Serial1v+0x74>)
   d8bda:	4631      	mov	r1, r6
   d8bdc:	f7ff ffb2 	bl	d8b44 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d8be0:	4638      	mov	r0, r7
   d8be2:	f7fb fa6e 	bl	d40c2 <__cxa_guard_release>
   d8be6:	4a07      	ldr	r2, [pc, #28]	; (d8c04 <_Z22__fetch_global_Serial1v+0x78>)
   d8be8:	4907      	ldr	r1, [pc, #28]	; (d8c08 <_Z22__fetch_global_Serial1v+0x7c>)
   d8bea:	4805      	ldr	r0, [pc, #20]	; (d8c00 <_Z22__fetch_global_Serial1v+0x74>)
   d8bec:	f000 fcba 	bl	d9564 <__aeabi_atexit>
#endif
	return serial1;
}
   d8bf0:	4803      	ldr	r0, [pc, #12]	; (d8c00 <_Z22__fetch_global_Serial1v+0x74>)
   d8bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d8bf4:	2003e53c 	.word	0x2003e53c
   d8bf8:	2003e534 	.word	0x2003e534
   d8bfc:	2003e538 	.word	0x2003e538
   d8c00:	2003e520 	.word	0x2003e520
   d8c04:	2003e25c 	.word	0x2003e25c
   d8c08:	000d8ac1 	.word	0x000d8ac1

000d8c0c <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d8c0c:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d8c0e:	6883      	ldr	r3, [r0, #8]
   d8c10:	4604      	mov	r4, r0
   d8c12:	b90b      	cbnz	r3, d8c18 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d8c14:	f000 fcca 	bl	d95ac <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d8c18:	68c3      	ldr	r3, [r0, #12]
   d8c1a:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d8c1c:	68a3      	ldr	r3, [r4, #8]
   d8c1e:	b11b      	cbz	r3, d8c28 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d8c20:	2203      	movs	r2, #3
   d8c22:	4621      	mov	r1, r4
   d8c24:	4620      	mov	r0, r4
   d8c26:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d8c28:	4620      	mov	r0, r4
   d8c2a:	2110      	movs	r1, #16
}
   d8c2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d8c30:	f000 bca6 	b.w	d9580 <_ZdlPvj>

000d8c34 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d8c34:	4770      	bx	lr

000d8c36 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d8c36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8c38:	4606      	mov	r6, r0
   d8c3a:	4615      	mov	r5, r2
   d8c3c:	460c      	mov	r4, r1
   d8c3e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d8c40:	42bc      	cmp	r4, r7
   d8c42:	d006      	beq.n	d8c52 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d8c44:	6833      	ldr	r3, [r6, #0]
   d8c46:	f814 1b01 	ldrb.w	r1, [r4], #1
   d8c4a:	689b      	ldr	r3, [r3, #8]
   d8c4c:	4630      	mov	r0, r6
   d8c4e:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d8c50:	e7f6      	b.n	d8c40 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d8c52:	4628      	mov	r0, r5
   d8c54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8c56 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d8c56:	2200      	movs	r2, #0
   d8c58:	7c00      	ldrb	r0, [r0, #16]
   d8c5a:	f7fd badd 	b.w	d6218 <HAL_I2C_Write_Data>

000d8c5e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d8c5e:	2100      	movs	r1, #0
   d8c60:	7c00      	ldrb	r0, [r0, #16]
   d8c62:	f7fd bae1 	b.w	d6228 <HAL_I2C_Available_Data>

000d8c66 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d8c66:	2100      	movs	r1, #0
   d8c68:	7c00      	ldrb	r0, [r0, #16]
   d8c6a:	f7fd bae5 	b.w	d6238 <HAL_I2C_Read_Data>

000d8c6e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d8c6e:	2100      	movs	r1, #0
   d8c70:	7c00      	ldrb	r0, [r0, #16]
   d8c72:	f7fd bae9 	b.w	d6248 <HAL_I2C_Peek_Data>

000d8c76 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d8c76:	2100      	movs	r1, #0
   d8c78:	7c00      	ldrb	r0, [r0, #16]
   d8c7a:	f7fd baed 	b.w	d6258 <HAL_I2C_Flush_Data>

000d8c7e <_ZN7TwoWireD0Ev>:
   d8c7e:	b510      	push	{r4, lr}
   d8c80:	2114      	movs	r1, #20
   d8c82:	4604      	mov	r4, r0
   d8c84:	f000 fc7c 	bl	d9580 <_ZdlPvj>
   d8c88:	4620      	mov	r0, r4
   d8c8a:	bd10      	pop	{r4, pc}

000d8c8c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d8c8c:	b510      	push	{r4, lr}
   d8c8e:	4604      	mov	r4, r0
   d8c90:	2300      	movs	r3, #0
   d8c92:	6063      	str	r3, [r4, #4]
   d8c94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d8c98:	60a3      	str	r3, [r4, #8]
   d8c9a:	4b04      	ldr	r3, [pc, #16]	; (d8cac <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d8c9c:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d8c9e:	4608      	mov	r0, r1
   d8ca0:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d8ca2:	4611      	mov	r1, r2
   d8ca4:	f7fd fae8 	bl	d6278 <HAL_I2C_Init>
}
   d8ca8:	4620      	mov	r0, r4
   d8caa:	bd10      	pop	{r4, pc}
   d8cac:	000dad08 	.word	0x000dad08

000d8cb0 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d8cb0:	2100      	movs	r1, #0
   d8cb2:	7c00      	ldrb	r0, [r0, #16]
   d8cb4:	f7fd bad8 	b.w	d6268 <HAL_I2C_Is_Enabled>

000d8cb8 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d8cb8:	2200      	movs	r2, #0
   d8cba:	4611      	mov	r1, r2
   d8cbc:	6840      	ldr	r0, [r0, #4]
   d8cbe:	f7fd bbbf 	b.w	d6440 <network_listening>

000d8cc2 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d8cc2:	2200      	movs	r2, #0
   d8cc4:	4611      	mov	r1, r2
   d8cc6:	6840      	ldr	r0, [r0, #4]
   d8cc8:	f7fd bbca 	b.w	d6460 <network_get_listen_timeout>

000d8ccc <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d8ccc:	2200      	movs	r2, #0
   d8cce:	6840      	ldr	r0, [r0, #4]
   d8cd0:	f7fd bbbe 	b.w	d6450 <network_set_listen_timeout>

000d8cd4 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d8cd4:	2200      	movs	r2, #0
   d8cd6:	f081 0101 	eor.w	r1, r1, #1
   d8cda:	6840      	ldr	r0, [r0, #4]
   d8cdc:	f7fd bba8 	b.w	d6430 <network_listen>

000d8ce0 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d8ce0:	2300      	movs	r3, #0
   d8ce2:	461a      	mov	r2, r3
   d8ce4:	2101      	movs	r1, #1
   d8ce6:	6840      	ldr	r0, [r0, #4]
   d8ce8:	f7fd bb9a 	b.w	d6420 <network_off>

000d8cec <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d8cec:	2300      	movs	r3, #0
   d8cee:	461a      	mov	r2, r3
   d8cf0:	4619      	mov	r1, r3
   d8cf2:	6840      	ldr	r0, [r0, #4]
   d8cf4:	f7fd bb8c 	b.w	d6410 <network_on>

000d8cf8 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d8cf8:	2200      	movs	r2, #0
   d8cfa:	4611      	mov	r1, r2
   d8cfc:	6840      	ldr	r0, [r0, #4]
   d8cfe:	f7fd bb7f 	b.w	d6400 <network_ready>

000d8d02 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d8d02:	2200      	movs	r2, #0
   d8d04:	4611      	mov	r1, r2
   d8d06:	6840      	ldr	r0, [r0, #4]
   d8d08:	f7fd bb6a 	b.w	d63e0 <network_connecting>

000d8d0c <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8d0c:	2200      	movs	r2, #0
   d8d0e:	2102      	movs	r1, #2
   d8d10:	6840      	ldr	r0, [r0, #4]
   d8d12:	f7fd bb6d 	b.w	d63f0 <network_disconnect>

000d8d16 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d8d16:	2300      	movs	r3, #0
   d8d18:	461a      	mov	r2, r3
   d8d1a:	6840      	ldr	r0, [r0, #4]
   d8d1c:	f7fd bb58 	b.w	d63d0 <network_connect>

000d8d20 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d8d20:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d8d22:	4605      	mov	r5, r0
   d8d24:	b188      	cbz	r0, d8d4a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d8d26:	6804      	ldr	r4, [r0, #0]
   d8d28:	b14c      	cbz	r4, d8d3e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d8d2a:	68a3      	ldr	r3, [r4, #8]
   d8d2c:	b11b      	cbz	r3, d8d36 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d8d2e:	2203      	movs	r2, #3
   d8d30:	4621      	mov	r1, r4
   d8d32:	4620      	mov	r0, r4
   d8d34:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d8d36:	2110      	movs	r1, #16
   d8d38:	4620      	mov	r0, r4
   d8d3a:	f000 fc21 	bl	d9580 <_ZdlPvj>
   d8d3e:	4628      	mov	r0, r5
   d8d40:	2114      	movs	r1, #20
      }
   d8d42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d8d46:	f000 bc1b 	b.w	d9580 <_ZdlPvj>
   d8d4a:	bd38      	pop	{r3, r4, r5, pc}

000d8d4c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d8d4c:	b110      	cbz	r0, d8d54 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d8d4e:	6803      	ldr	r3, [r0, #0]
   d8d50:	685b      	ldr	r3, [r3, #4]
   d8d52:	4718      	bx	r3
   d8d54:	4770      	bx	lr

000d8d56 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d8d56:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d8d58:	6803      	ldr	r3, [r0, #0]
   d8d5a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d8d5c:	b1bb      	cbz	r3, d8d8e <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d8d5e:	6858      	ldr	r0, [r3, #4]
   d8d60:	f7fd f9a2 	bl	d60a8 <os_thread_is_current>
   d8d64:	b978      	cbnz	r0, d8d86 <_ZN6ThreadD1Ev+0x30>
   d8d66:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d8d68:	7c5a      	ldrb	r2, [r3, #17]
   d8d6a:	b912      	cbnz	r2, d8d72 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d8d6c:	6858      	ldr	r0, [r3, #4]
   d8d6e:	f7fd f9ab 	bl	d60c8 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d8d72:	6823      	ldr	r3, [r4, #0]
   d8d74:	6858      	ldr	r0, [r3, #4]
   d8d76:	f7fd f9af 	bl	d60d8 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8d7a:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d8d7c:	2300      	movs	r3, #0
   d8d7e:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d8d80:	b128      	cbz	r0, d8d8e <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d8d82:	f7ff ffcd 	bl	d8d20 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d8d86:	6820      	ldr	r0, [r4, #0]
   d8d88:	b108      	cbz	r0, d8d8e <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d8d8a:	f7ff ffc9 	bl	d8d20 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d8d8e:	4620      	mov	r0, r4
   d8d90:	bd10      	pop	{r4, pc}

000d8d92 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d8d92:	b538      	push	{r3, r4, r5, lr}
   d8d94:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d8d96:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d8d9a:	b108      	cbz	r0, d8da0 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d8d9c:	f7fb f97f 	bl	d409e <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d8da0:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d8da4:	b108      	cbz	r0, d8daa <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d8da6:	f7fd f9a7 	bl	d60f8 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d8daa:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d8dae:	b135      	cbz	r5, d8dbe <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d8db0:	4628      	mov	r0, r5
   d8db2:	f7ff ffd0 	bl	d8d56 <_ZN6ThreadD1Ev>
   d8db6:	2104      	movs	r1, #4
   d8db8:	4628      	mov	r0, r5
   d8dba:	f000 fbe1 	bl	d9580 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d8dbe:	6820      	ldr	r0, [r4, #0]
   d8dc0:	b108      	cbz	r0, d8dc6 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d8dc2:	f7ff ffc3 	bl	d8d4c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d8dc6:	4620      	mov	r0, r4
   d8dc8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d8dcc <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d8dcc:	b510      	push	{r4, lr}
   d8dce:	4b04      	ldr	r3, [pc, #16]	; (d8de0 <_ZN5spark9MeshClassD1Ev+0x14>)
   d8dd0:	4604      	mov	r4, r0
   d8dd2:	f840 3b08 	str.w	r3, [r0], #8
   d8dd6:	f7ff ffdc 	bl	d8d92 <_ZN5spark11MeshPublishD1Ev>
   d8dda:	4620      	mov	r0, r4
   d8ddc:	bd10      	pop	{r4, pc}
   d8dde:	bf00      	nop
   d8de0:	000dad30 	.word	0x000dad30

000d8de4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d8de4:	b538      	push	{r3, r4, r5, lr}
   d8de6:	4c0e      	ldr	r4, [pc, #56]	; (d8e20 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d8de8:	4b0e      	ldr	r3, [pc, #56]	; (d8e24 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d8dea:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d8dec:	2500      	movs	r5, #0
   d8dee:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d8df0:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d8df4:	6063      	str	r3, [r4, #4]
   d8df6:	60a5      	str	r5, [r4, #8]
   d8df8:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d8dfc:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d8e00:	f7fd f972 	bl	d60e8 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d8e04:	4b08      	ldr	r3, [pc, #32]	; (d8e28 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d8e06:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d8e0a:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d8e0e:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d8e10:	4620      	mov	r0, r4
   d8e12:	4a06      	ldr	r2, [pc, #24]	; (d8e2c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d8e14:	4906      	ldr	r1, [pc, #24]	; (d8e30 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d8e16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d8e1a:	f000 bba3 	b.w	d9564 <__aeabi_atexit>
   d8e1e:	bf00      	nop
   d8e20:	2003e540 	.word	0x2003e540
   d8e24:	000dad64 	.word	0x000dad64
   d8e28:	000dad30 	.word	0x000dad30
   d8e2c:	2003e25c 	.word	0x2003e25c
   d8e30:	000d8dcd 	.word	0x000d8dcd

000d8e34 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d8e34:	2300      	movs	r3, #0
   d8e36:	461a      	mov	r2, r3
   d8e38:	6840      	ldr	r0, [r0, #4]
   d8e3a:	f7fd bac9 	b.w	d63d0 <network_connect>

000d8e3e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d8e3e:	2200      	movs	r2, #0
   d8e40:	2102      	movs	r1, #2
   d8e42:	6840      	ldr	r0, [r0, #4]
   d8e44:	f7fd bad4 	b.w	d63f0 <network_disconnect>

000d8e48 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d8e48:	2200      	movs	r2, #0
   d8e4a:	4611      	mov	r1, r2
   d8e4c:	6840      	ldr	r0, [r0, #4]
   d8e4e:	f7fd bac7 	b.w	d63e0 <network_connecting>

000d8e52 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d8e52:	2200      	movs	r2, #0
   d8e54:	4611      	mov	r1, r2
   d8e56:	6840      	ldr	r0, [r0, #4]
   d8e58:	f7fd bad2 	b.w	d6400 <network_ready>

000d8e5c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d8e5c:	2300      	movs	r3, #0
   d8e5e:	461a      	mov	r2, r3
   d8e60:	4619      	mov	r1, r3
   d8e62:	6840      	ldr	r0, [r0, #4]
   d8e64:	f7fd bad4 	b.w	d6410 <network_on>

000d8e68 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d8e68:	2300      	movs	r3, #0
   d8e6a:	461a      	mov	r2, r3
   d8e6c:	4619      	mov	r1, r3
   d8e6e:	6840      	ldr	r0, [r0, #4]
   d8e70:	f7fd bad6 	b.w	d6420 <network_off>

000d8e74 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d8e74:	2200      	movs	r2, #0
   d8e76:	f081 0101 	eor.w	r1, r1, #1
   d8e7a:	6840      	ldr	r0, [r0, #4]
   d8e7c:	f7fd bad8 	b.w	d6430 <network_listen>

000d8e80 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d8e80:	2200      	movs	r2, #0
   d8e82:	6840      	ldr	r0, [r0, #4]
   d8e84:	f7fd bae4 	b.w	d6450 <network_set_listen_timeout>

000d8e88 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d8e88:	2200      	movs	r2, #0
   d8e8a:	4611      	mov	r1, r2
   d8e8c:	6840      	ldr	r0, [r0, #4]
   d8e8e:	f7fd bae7 	b.w	d6460 <network_get_listen_timeout>

000d8e92 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d8e92:	2200      	movs	r2, #0
   d8e94:	4611      	mov	r1, r2
   d8e96:	6840      	ldr	r0, [r0, #4]
   d8e98:	f7fd bad2 	b.w	d6440 <network_listening>

000d8e9c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d8e9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d8ea0:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d8ea2:	b095      	sub	sp, #84	; 0x54
   d8ea4:	4616      	mov	r6, r2
   d8ea6:	460d      	mov	r5, r1
   d8ea8:	4607      	mov	r7, r0
    IPAddress addr;
   d8eaa:	f7ff fcf9 	bl	d88a0 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d8eae:	4621      	mov	r1, r4
   d8eb0:	2220      	movs	r2, #32
   d8eb2:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d8eb4:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d8eb6:	f000 fec4 	bl	d9c42 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d8eba:	2340      	movs	r3, #64	; 0x40
   d8ebc:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d8ebe:	4621      	mov	r1, r4
   d8ec0:	466b      	mov	r3, sp
   d8ec2:	aa0c      	add	r2, sp, #48	; 0x30
   d8ec4:	4630      	mov	r0, r6
   d8ec6:	f7fd f821 	bl	d5f0c <netdb_getaddrinfo>
    if (!r) {
   d8eca:	4604      	mov	r4, r0
   d8ecc:	2800      	cmp	r0, #0
   d8ece:	d144      	bne.n	d8f5a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d8ed0:	4602      	mov	r2, r0
   d8ed2:	2101      	movs	r1, #1
   d8ed4:	6868      	ldr	r0, [r5, #4]
   d8ed6:	f7fd fa93 	bl	d6400 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8eda:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d8edc:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8ede:	4622      	mov	r2, r4
   d8ee0:	6868      	ldr	r0, [r5, #4]
   d8ee2:	f7fd fa8d 	bl	d6400 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8ee6:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8ee8:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d8eea:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8eec:	2e00      	cmp	r6, #0
   d8eee:	d034      	beq.n	d8f5a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d8ef0:	2900      	cmp	r1, #0
   d8ef2:	d132      	bne.n	d8f5a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d8ef4:	6873      	ldr	r3, [r6, #4]
   d8ef6:	2b02      	cmp	r3, #2
   d8ef8:	d002      	beq.n	d8f00 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d8efa:	2b0a      	cmp	r3, #10
   d8efc:	d009      	beq.n	d8f12 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d8efe:	e02a      	b.n	d8f56 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d8f00:	f1b8 0f00 	cmp.w	r8, #0
   d8f04:	d027      	beq.n	d8f56 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d8f06:	6971      	ldr	r1, [r6, #20]
   d8f08:	4638      	mov	r0, r7
   d8f0a:	3104      	adds	r1, #4
   d8f0c:	f7ff fcf5 	bl	d88fa <_ZN9IPAddressaSEPKh>
   d8f10:	e020      	b.n	d8f54 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d8f12:	f1b9 0f00 	cmp.w	r9, #0
   d8f16:	d01e      	beq.n	d8f56 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d8f18:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d8f1a:	2211      	movs	r2, #17
   d8f1c:	a801      	add	r0, sp, #4
   d8f1e:	f000 fe90 	bl	d9c42 <memset>
                    a.v = 6;
   d8f22:	2306      	movs	r3, #6
   d8f24:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d8f28:	ad01      	add	r5, sp, #4
   d8f2a:	f104 0308 	add.w	r3, r4, #8
   d8f2e:	3418      	adds	r4, #24
   d8f30:	6818      	ldr	r0, [r3, #0]
   d8f32:	6859      	ldr	r1, [r3, #4]
   d8f34:	462a      	mov	r2, r5
   d8f36:	c203      	stmia	r2!, {r0, r1}
   d8f38:	3308      	adds	r3, #8
   d8f3a:	42a3      	cmp	r3, r4
   d8f3c:	4615      	mov	r5, r2
   d8f3e:	d1f7      	bne.n	d8f30 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d8f40:	a901      	add	r1, sp, #4
   d8f42:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d8f44:	ad07      	add	r5, sp, #28
   d8f46:	f7ff fcb9 	bl	d88bc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d8f4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8f4c:	1d3c      	adds	r4, r7, #4
   d8f4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8f50:	682b      	ldr	r3, [r5, #0]
   d8f52:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d8f54:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8f56:	69f6      	ldr	r6, [r6, #28]
   d8f58:	e7c8      	b.n	d8eec <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d8f5a:	9800      	ldr	r0, [sp, #0]
   d8f5c:	f7fc ffce 	bl	d5efc <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d8f60:	4638      	mov	r0, r7
   d8f62:	b015      	add	sp, #84	; 0x54
   d8f64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d8f68 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d8f68:	4b02      	ldr	r3, [pc, #8]	; (d8f74 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d8f6a:	4a03      	ldr	r2, [pc, #12]	; (d8f78 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d8f6c:	601a      	str	r2, [r3, #0]
   d8f6e:	2200      	movs	r2, #0
   d8f70:	605a      	str	r2, [r3, #4]
   d8f72:	4770      	bx	lr
   d8f74:	2003e714 	.word	0x2003e714
   d8f78:	000dad64 	.word	0x000dad64

000d8f7c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:
#include <cstdarg>

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
   d8f7c:	f100 0210 	add.w	r2, r0, #16
    size_t n = 1;
   d8f80:	2301      	movs	r3, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d8f82:	f812 1c10 	ldrb.w	r1, [r2, #-16]
   d8f86:	2901      	cmp	r1, #1
   d8f88:	4610      	mov	r0, r2
   d8f8a:	d104      	bne.n	d8f96 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x1a>
            n += t->size * 2; // Number of name and value tokens
   d8f8c:	f852 1c04 	ldr.w	r1, [r2, #-4]
   d8f90:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   d8f94:	e004      	b.n	d8fa0 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x24>
        } else if (t->type == JSMN_ARRAY) {
   d8f96:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d8f98:	bf04      	itt	eq
   d8f9a:	f852 1c04 	ldreq.w	r1, [r2, #-4]
   d8f9e:	185b      	addeq	r3, r3, r1
namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
    do {
   d8fa0:	3b01      	subs	r3, #1
   d8fa2:	f102 0210 	add.w	r2, r2, #16
   d8fa6:	d1ec      	bne.n	d8f82 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
        }
        ++t;
        --n;
    } while (n);
    return t;
}
   d8fa8:	4770      	bx	lr

000d8faa <_ZN5spark16JSONBufferWriterD1Ev>:

private:
    Print &strm_;
};

class JSONBufferWriter: public JSONWriter {
   d8faa:	4770      	bx	lr

000d8fac <_ZN5spark16JSONBufferWriterD0Ev>:
   d8fac:	b510      	push	{r4, lr}
   d8fae:	2114      	movs	r1, #20
   d8fb0:	4604      	mov	r4, r0
   d8fb2:	f000 fae5 	bl	d9580 <_ZdlPvj>
   d8fb6:	4620      	mov	r0, r4
   d8fb8:	bd10      	pop	{r4, pc}

000d8fba <_ZN5spark16JSONBufferWriter5writeEPKcj>:
    }
    write('"');
}

// spark::JSONBufferWriter
void spark::JSONBufferWriter::write(const char *data, size_t size) {
   d8fba:	b538      	push	{r3, r4, r5, lr}
   d8fbc:	4615      	mov	r5, r2
    if (n_ < bufSize_) {
   d8fbe:	6903      	ldr	r3, [r0, #16]
   d8fc0:	68c2      	ldr	r2, [r0, #12]
   d8fc2:	4293      	cmp	r3, r2
    }
    write('"');
}

// spark::JSONBufferWriter
void spark::JSONBufferWriter::write(const char *data, size_t size) {
   d8fc4:	4604      	mov	r4, r0
    if (n_ < bufSize_) {
   d8fc6:	d207      	bcs.n	d8fd8 <_ZN5spark16JSONBufferWriter5writeEPKcj+0x1e>
        memcpy(buf_ + n_, data, std::min(size, bufSize_ - n_));
   d8fc8:	1ad2      	subs	r2, r2, r3
   d8fca:	6880      	ldr	r0, [r0, #8]
   d8fcc:	42aa      	cmp	r2, r5
   d8fce:	bf28      	it	cs
   d8fd0:	462a      	movcs	r2, r5
   d8fd2:	4418      	add	r0, r3
   d8fd4:	f000 fe0f 	bl	d9bf6 <memcpy>
    }
    n_ += size;
   d8fd8:	6923      	ldr	r3, [r4, #16]
   d8fda:	441d      	add	r5, r3
   d8fdc:	6125      	str	r5, [r4, #16]
   d8fde:	bd38      	pop	{r3, r4, r5, pc}

000d8fe0 <_ZN5spark16JSONBufferWriter6printfEPKcz>:
}

void spark::JSONBufferWriter::printf(const char *fmt, ...) {
   d8fe0:	b40e      	push	{r1, r2, r3}
   d8fe2:	b517      	push	{r0, r1, r2, r4, lr}
   d8fe4:	ab05      	add	r3, sp, #20
   d8fe6:	4604      	mov	r4, r0
   d8fe8:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list args;
    va_start(args, fmt);
    const int n = vsnprintf(buf_ + n_, (n_ < bufSize_) ? bufSize_ - n_ : 0, fmt, args);
   d8fec:	6901      	ldr	r1, [r0, #16]
    n_ += size;
}

void spark::JSONBufferWriter::printf(const char *fmt, ...) {
    va_list args;
    va_start(args, fmt);
   d8fee:	9301      	str	r3, [sp, #4]
    const int n = vsnprintf(buf_ + n_, (n_ < bufSize_) ? bufSize_ - n_ : 0, fmt, args);
   d8ff0:	68e3      	ldr	r3, [r4, #12]
   d8ff2:	6880      	ldr	r0, [r0, #8]
   d8ff4:	4299      	cmp	r1, r3
   d8ff6:	4408      	add	r0, r1
   d8ff8:	bf34      	ite	cc
   d8ffa:	1a59      	subcc	r1, r3, r1
   d8ffc:	2100      	movcs	r1, #0
   d8ffe:	9b01      	ldr	r3, [sp, #4]
   d9000:	f7fd fa86 	bl	d6510 <vsnprintf>
    va_end(args);
    n_ += n;
   d9004:	6923      	ldr	r3, [r4, #16]
   d9006:	4418      	add	r0, r3
   d9008:	6120      	str	r0, [r4, #16]
}
   d900a:	b003      	add	sp, #12
   d900c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d9010:	b003      	add	sp, #12
   d9012:	4770      	bx	lr

000d9014 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   d9014:	b40e      	push	{r1, r2, r3}
   d9016:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d901a:	b087      	sub	sp, #28
   d901c:	af00      	add	r7, sp, #0
   d901e:	f107 0434 	add.w	r4, r7, #52	; 0x34
   d9022:	4605      	mov	r5, r0
   d9024:	f854 6b04 	ldr.w	r6, [r4], #4
    char buf[16];
    va_list args;
    va_start(args, fmt);
   d9028:	607c      	str	r4, [r7, #4]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d902a:	4623      	mov	r3, r4
   d902c:	4632      	mov	r2, r6
   d902e:	2110      	movs	r1, #16
   d9030:	f107 0008 	add.w	r0, r7, #8
   d9034:	f7fd fa6c 	bl	d6510 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   d9038:	280f      	cmp	r0, #15
   d903a:	d916      	bls.n	d906a <_ZN5spark10JSONWriter6printfEPKcz+0x56>
        char buf[n + 1]; // Use larger buffer
   d903c:	f100 0308 	add.w	r3, r0, #8
   d9040:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   d9044:	46e8      	mov	r8, sp
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
        char buf[n + 1]; // Use larger buffer
   d9046:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d904a:	4632      	mov	r2, r6
   d904c:	1c41      	adds	r1, r0, #1
   d904e:	4623      	mov	r3, r4
   d9050:	4668      	mov	r0, sp
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
        char buf[n + 1]; // Use larger buffer
        va_start(args, fmt);
   d9052:	607c      	str	r4, [r7, #4]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d9054:	f7fd fa5c 	bl	d6510 <vsnprintf>
        va_end(args);
        if (n > 0) {
   d9058:	1e02      	subs	r2, r0, #0
   d905a:	dd04      	ble.n	d9066 <_ZN5spark10JSONWriter6printfEPKcz+0x52>
            write(buf, n);
   d905c:	682b      	ldr	r3, [r5, #0]
   d905e:	4669      	mov	r1, sp
   d9060:	689b      	ldr	r3, [r3, #8]
   d9062:	4628      	mov	r0, r5
   d9064:	4798      	blx	r3
   d9066:	46c5      	mov	sp, r8
   d9068:	e007      	b.n	d907a <_ZN5spark10JSONWriter6printfEPKcz+0x66>
        }
    } else if (n > 0) {
   d906a:	b130      	cbz	r0, d907a <_ZN5spark10JSONWriter6printfEPKcz+0x66>
        write(buf, n);
   d906c:	682b      	ldr	r3, [r5, #0]
   d906e:	4602      	mov	r2, r0
   d9070:	689b      	ldr	r3, [r3, #8]
   d9072:	f107 0108 	add.w	r1, r7, #8
   d9076:	4628      	mov	r0, r5
   d9078:	4798      	blx	r3
    }
}
   d907a:	371c      	adds	r7, #28
   d907c:	46bd      	mov	sp, r7
   d907e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d9082:	b003      	add	sp, #12
   d9084:	4770      	bx	lr

000d9086 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d9086:	b513      	push	{r0, r1, r4, lr}
   d9088:	ab02      	add	r3, sp, #8
    write(&c, 1);
   d908a:	6802      	ldr	r2, [r0, #0]

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d908c:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
   d9090:	6894      	ldr	r4, [r2, #8]
   d9092:	4619      	mov	r1, r3
   d9094:	2201      	movs	r2, #1
   d9096:	47a0      	blx	r4
}
   d9098:	b002      	add	sp, #8
   d909a:	bd10      	pop	{r4, pc}

000d909c <_ZNK5spark9JSONValue4typeEv>:
        return 0.0;
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
   d909c:	6883      	ldr	r3, [r0, #8]
   d909e:	b1fb      	cbz	r3, d90e0 <_ZNK5spark9JSONValue4typeEv+0x44>
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
   d90a0:	781a      	ldrb	r2, [r3, #0]
   d90a2:	2a03      	cmp	r2, #3
   d90a4:	d81a      	bhi.n	d90dc <_ZNK5spark9JSONValue4typeEv+0x40>
   d90a6:	e8df f002 	tbb	[pc, r2]
   d90aa:	1704      	.short	0x1704
   d90ac:	1d02      	.short	0x1d02
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
   d90ae:	2005      	movs	r0, #5
   d90b0:	4770      	bx	lr
    if (!t_) {
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
   d90b2:	6802      	ldr	r2, [r0, #0]
   d90b4:	685b      	ldr	r3, [r3, #4]
   d90b6:	6852      	ldr	r2, [r2, #4]
   d90b8:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d90ba:	282d      	cmp	r0, #45	; 0x2d
   d90bc:	d014      	beq.n	d90e8 <_ZNK5spark9JSONValue4typeEv+0x4c>
   d90be:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d90c2:	2b09      	cmp	r3, #9
   d90c4:	d910      	bls.n	d90e8 <_ZNK5spark9JSONValue4typeEv+0x4c>
            return JSON_TYPE_NUMBER;
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d90c6:	2874      	cmp	r0, #116	; 0x74
   d90c8:	d010      	beq.n	d90ec <_ZNK5spark9JSONValue4typeEv+0x50>
   d90ca:	2866      	cmp	r0, #102	; 0x66
   d90cc:	d00e      	beq.n	d90ec <_ZNK5spark9JSONValue4typeEv+0x50>
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
   d90ce:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d90d2:	4258      	negs	r0, r3
   d90d4:	4158      	adcs	r0, r3
   d90d6:	4770      	bx	lr
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
   d90d8:	2006      	movs	r0, #6
   d90da:	4770      	bx	lr
    default:
        return JSON_TYPE_INVALID;
   d90dc:	2000      	movs	r0, #0
   d90de:	4770      	bx	lr
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
   d90e0:	4618      	mov	r0, r3
   d90e2:	4770      	bx	lr
            return JSON_TYPE_NULL;
        }
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
   d90e4:	2004      	movs	r0, #4
   d90e6:	4770      	bx	lr
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
        if (c == '-' || (c >= '0' && c <= '9')) {
            return JSON_TYPE_NUMBER;
   d90e8:	2003      	movs	r0, #3
   d90ea:	4770      	bx	lr
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
            return JSON_TYPE_BOOL;
   d90ec:	2002      	movs	r0, #2
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
    default:
        return JSON_TYPE_INVALID;
    }
}
   d90ee:	4770      	bx	lr

000d90f0 <_ZNK5spark9JSONValue5toIntEv>:
    default:
        return false;
    }
}

int spark::JSONValue::toInt() const {
   d90f0:	b510      	push	{r4, lr}
   d90f2:	4604      	mov	r4, r0
    switch (type()) {
   d90f4:	f7ff ffd2 	bl	d909c <_ZNK5spark9JSONValue4typeEv>
   d90f8:	2802      	cmp	r0, #2
   d90fa:	d00d      	beq.n	d9118 <_ZNK5spark9JSONValue5toIntEv+0x28>
   d90fc:	d316      	bcc.n	d912c <_ZNK5spark9JSONValue5toIntEv+0x3c>
   d90fe:	2804      	cmp	r0, #4
   d9100:	d814      	bhi.n	d912c <_ZNK5spark9JSONValue5toIntEv+0x3c>
    }
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        // toInt() may produce incorrect results for floating point numbers, since we want to keep
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
   d9102:	6822      	ldr	r2, [r4, #0]
   d9104:	68a3      	ldr	r3, [r4, #8]
        return strtol(s, nullptr, 10);
   d9106:	6850      	ldr	r0, [r2, #4]
   d9108:	685b      	ldr	r3, [r3, #4]
   d910a:	220a      	movs	r2, #10
   d910c:	2100      	movs	r1, #0
   d910e:	4418      	add	r0, r3
    }
    default:
        return 0;
    }
}
   d9110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        // toInt() may produce incorrect results for floating point numbers, since we want to keep
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
        return strtol(s, nullptr, 10);
   d9114:	f000 beba 	b.w	d9e8c <strtol>
}

int spark::JSONValue::toInt() const {
    switch (type()) {
    case JSON_TYPE_BOOL: {
        const char* const s = d_->json + t_->start;
   d9118:	6822      	ldr	r2, [r4, #0]
   d911a:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d911c:	6852      	ldr	r2, [r2, #4]
   d911e:	685b      	ldr	r3, [r3, #4]
   d9120:	5cd0      	ldrb	r0, [r2, r3]
   d9122:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d9126:	4258      	negs	r0, r3
   d9128:	4158      	adcs	r0, r3
   d912a:	bd10      	pop	{r4, pc}
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
        return strtol(s, nullptr, 10);
    }
    default:
        return 0;
   d912c:	2000      	movs	r0, #0
    }
}
   d912e:	bd10      	pop	{r4, pc}

000d9130 <_ZN5spark18JSONObjectIterator4nextEv>:
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
   d9130:	b510      	push	{r4, lr}
    if (!n_) {
   d9132:	6943      	ldr	r3, [r0, #20]
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
   d9134:	4604      	mov	r4, r0
    if (!n_) {
   d9136:	b15b      	cbz	r3, d9150 <_ZN5spark18JSONObjectIterator4nextEv+0x20>
        return false;
    }
    k_ = t_; // Name
   d9138:	6880      	ldr	r0, [r0, #8]
   d913a:	60e0      	str	r0, [r4, #12]
    ++t_;
    v_ = t_; // Value
    --n_;
   d913c:	3b01      	subs	r3, #1
bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
    }
    k_ = t_; // Name
    ++t_;
   d913e:	3010      	adds	r0, #16
   d9140:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d9142:	6120      	str	r0, [r4, #16]
    --n_;
   d9144:	6163      	str	r3, [r4, #20]
    if (n_) {
   d9146:	b12b      	cbz	r3, d9154 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        t_ = skipToken(t_);
   d9148:	f7ff ff18 	bl	d8f7c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d914c:	60a0      	str	r0, [r4, #8]
   d914e:	e001      	b.n	d9154 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
    }
}

bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
   d9150:	4618      	mov	r0, r3
   d9152:	bd10      	pop	{r4, pc}
    v_ = t_; // Value
    --n_;
    if (n_) {
        t_ = skipToken(t_);
    }
    return true;
   d9154:	2001      	movs	r0, #1
}
   d9156:	bd10      	pop	{r4, pc}

000d9158 <_ZN5spark10JSONWriter8endArrayEv>:
    write('[');
    state_ = BEGIN;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::endArray() {
   d9158:	b510      	push	{r4, lr}
    write(']');
   d915a:	215d      	movs	r1, #93	; 0x5d
    write('[');
    state_ = BEGIN;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::endArray() {
   d915c:	4604      	mov	r4, r0
    write(']');
   d915e:	f7ff ff92 	bl	d9086 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   d9162:	2301      	movs	r3, #1
   d9164:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d9166:	4620      	mov	r0, r4
   d9168:	bd10      	pop	{r4, pc}

000d916a <_ZN5spark10JSONWriter9endObjectEv>:
    write('{');
    state_ = BEGIN;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::endObject() {
   d916a:	b510      	push	{r4, lr}
    write('}');
   d916c:	217d      	movs	r1, #125	; 0x7d
    write('{');
    state_ = BEGIN;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::endObject() {
   d916e:	4604      	mov	r4, r0
    write('}');
   d9170:	f7ff ff89 	bl	d9086 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   d9174:	2301      	movs	r3, #1
   d9176:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d9178:	4620      	mov	r0, r4
   d917a:	bd10      	pop	{r4, pc}

000d917c <_ZN5spark10JSONWriter14writeSeparatorEv>:
    } else if (n > 0) {
        write(buf, n);
    }
}

void spark::JSONWriter::writeSeparator() {
   d917c:	b508      	push	{r3, lr}
    switch (state_) {
   d917e:	7903      	ldrb	r3, [r0, #4]
   d9180:	2b01      	cmp	r3, #1
   d9182:	d002      	beq.n	d918a <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   d9184:	2b02      	cmp	r3, #2
   d9186:	d002      	beq.n	d918e <_ZN5spark10JSONWriter14writeSeparatorEv+0x12>
   d9188:	bd08      	pop	{r3, pc}
    case NEXT:
        write(',');
   d918a:	212c      	movs	r1, #44	; 0x2c
   d918c:	e000      	b.n	d9190 <_ZN5spark10JSONWriter14writeSeparatorEv+0x14>
        break;
    case VALUE:
        write(':');
   d918e:	213a      	movs	r1, #58	; 0x3a
   d9190:	f7ff ff79 	bl	d9086 <_ZN5spark10JSONWriter5writeEc>
   d9194:	bd08      	pop	{r3, pc}

000d9196 <_ZN5spark10JSONWriter10beginArrayEv>:
    }
    return true;
}

// spark::JSONWriter
spark::JSONWriter& spark::JSONWriter::beginArray() {
   d9196:	b510      	push	{r4, lr}
   d9198:	4604      	mov	r4, r0
    writeSeparator();
   d919a:	f7ff ffef 	bl	d917c <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('[');
   d919e:	4620      	mov	r0, r4
   d91a0:	215b      	movs	r1, #91	; 0x5b
   d91a2:	f7ff ff70 	bl	d9086 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   d91a6:	2300      	movs	r3, #0
   d91a8:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d91aa:	4620      	mov	r0, r4
   d91ac:	bd10      	pop	{r4, pc}

000d91ae <_ZN5spark10JSONWriter11beginObjectEv>:
    write(']');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::beginObject() {
   d91ae:	b510      	push	{r4, lr}
   d91b0:	4604      	mov	r4, r0
    writeSeparator();
   d91b2:	f7ff ffe3 	bl	d917c <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   d91b6:	4620      	mov	r0, r4
   d91b8:	217b      	movs	r1, #123	; 0x7b
   d91ba:	f7ff ff64 	bl	d9086 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   d91be:	2300      	movs	r3, #0
   d91c0:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d91c2:	4620      	mov	r0, r4
   d91c4:	bd10      	pop	{r4, pc}
	...

000d91c8 <_ZN5spark10JSONWriter5valueEb>:
    writeEscaped(name, size);
    state_ = VALUE;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(bool val) {
   d91c8:	b538      	push	{r3, r4, r5, lr}
   d91ca:	4604      	mov	r4, r0
   d91cc:	460d      	mov	r5, r1
    writeSeparator();
   d91ce:	f7ff ffd5 	bl	d917c <_ZN5spark10JSONWriter14writeSeparatorEv>
   d91d2:	6823      	ldr	r3, [r4, #0]
    if (val) {
        write("true", 4);
   d91d4:	689b      	ldr	r3, [r3, #8]
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(bool val) {
    writeSeparator();
    if (val) {
   d91d6:	b115      	cbz	r5, d91de <_ZN5spark10JSONWriter5valueEb+0x16>
        write("true", 4);
   d91d8:	2204      	movs	r2, #4
   d91da:	4905      	ldr	r1, [pc, #20]	; (d91f0 <_ZN5spark10JSONWriter5valueEb+0x28>)
   d91dc:	e001      	b.n	d91e2 <_ZN5spark10JSONWriter5valueEb+0x1a>
    } else {
        write("false", 5);
   d91de:	4905      	ldr	r1, [pc, #20]	; (d91f4 <_ZN5spark10JSONWriter5valueEb+0x2c>)
   d91e0:	2205      	movs	r2, #5
   d91e2:	4620      	mov	r0, r4
   d91e4:	4798      	blx	r3
    }
    state_ = NEXT;
   d91e6:	2301      	movs	r3, #1
   d91e8:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d91ea:	4620      	mov	r0, r4
   d91ec:	bd38      	pop	{r3, r4, r5, pc}
   d91ee:	bf00      	nop
   d91f0:	000dadb2 	.word	0x000dadb2
   d91f4:	000dadac 	.word	0x000dadac

000d91f8 <_ZN5spark10JSONWriter5valueEi>:

spark::JSONWriter& spark::JSONWriter::value(int val) {
   d91f8:	b538      	push	{r3, r4, r5, lr}
   d91fa:	4604      	mov	r4, r0
   d91fc:	460d      	mov	r5, r1
    writeSeparator();
   d91fe:	f7ff ffbd 	bl	d917c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   d9202:	6823      	ldr	r3, [r4, #0]
   d9204:	4904      	ldr	r1, [pc, #16]	; (d9218 <_ZN5spark10JSONWriter5valueEi+0x20>)
   d9206:	68db      	ldr	r3, [r3, #12]
   d9208:	4620      	mov	r0, r4
   d920a:	462a      	mov	r2, r5
   d920c:	4798      	blx	r3
    state_ = NEXT;
   d920e:	2301      	movs	r3, #1
   d9210:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d9212:	4620      	mov	r0, r4
   d9214:	bd38      	pop	{r3, r4, r5, pc}
   d9216:	bf00      	nop
   d9218:	000dab69 	.word	0x000dab69

000d921c <_ZN5spark10JSONWriter5valueEj>:

spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   d921c:	b538      	push	{r3, r4, r5, lr}
   d921e:	4604      	mov	r4, r0
   d9220:	460d      	mov	r5, r1
    writeSeparator();
   d9222:	f7ff ffab 	bl	d917c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   d9226:	6823      	ldr	r3, [r4, #0]
   d9228:	4904      	ldr	r1, [pc, #16]	; (d923c <_ZN5spark10JSONWriter5valueEj+0x20>)
   d922a:	68db      	ldr	r3, [r3, #12]
   d922c:	4620      	mov	r0, r4
   d922e:	462a      	mov	r2, r5
   d9230:	4798      	blx	r3
    state_ = NEXT;
   d9232:	2301      	movs	r3, #1
   d9234:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d9236:	4620      	mov	r0, r4
   d9238:	bd38      	pop	{r3, r4, r5, pc}
   d923a:	bf00      	nop
   d923c:	000dadb7 	.word	0x000dadb7

000d9240 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d9240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9242:	460d      	mov	r5, r1
   d9244:	4617      	mov	r7, r2
    write('"');
   d9246:	2122      	movs	r1, #34	; 0x22
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d9248:	4604      	mov	r4, r0
   d924a:	442f      	add	r7, r5
    write('"');
   d924c:	f7ff ff1b 	bl	d9086 <_ZN5spark10JSONWriter5writeEc>
   d9250:	462a      	mov	r2, r5
    const char* const end = str + size;
   d9252:	4629      	mov	r1, r5
    const char *s = str;
    while (s != end) {
   d9254:	42ba      	cmp	r2, r7
   d9256:	d038      	beq.n	d92ca <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8a>
        const char c = *s;
   d9258:	4616      	mov	r6, r2
   d925a:	f816 5b01 	ldrb.w	r5, [r6], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   d925e:	2d22      	cmp	r5, #34	; 0x22
   d9260:	d003      	beq.n	d926a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
   d9262:	2d5c      	cmp	r5, #92	; 0x5c
   d9264:	d001      	beq.n	d926a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
   d9266:	2d1f      	cmp	r5, #31
   d9268:	d82d      	bhi.n	d92c6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x86>
            write(str, s - str); // Write preceeding characters
   d926a:	6823      	ldr	r3, [r4, #0]
   d926c:	1a52      	subs	r2, r2, r1
   d926e:	689b      	ldr	r3, [r3, #8]
   d9270:	4620      	mov	r0, r4
   d9272:	4798      	blx	r3
            write('\\');
   d9274:	215c      	movs	r1, #92	; 0x5c
   d9276:	4620      	mov	r0, r4
   d9278:	f7ff ff05 	bl	d9086 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   d927c:	2d0c      	cmp	r5, #12
   d927e:	d019      	beq.n	d92b4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
   d9280:	d807      	bhi.n	d9292 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x52>
   d9282:	2d09      	cmp	r5, #9
   d9284:	d00f      	beq.n	d92a6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x66>
   d9286:	2d0a      	cmp	r5, #10
   d9288:	d012      	beq.n	d92b0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x70>
   d928a:	2d08      	cmp	r5, #8
   d928c:	d114      	bne.n	d92b8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
   d928e:	2162      	movs	r1, #98	; 0x62
   d9290:	e00a      	b.n	d92a8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
    while (s != end) {
        const char c = *s;
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
   d9292:	2d22      	cmp	r5, #34	; 0x22
   d9294:	d005      	beq.n	d92a2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d9296:	2d5c      	cmp	r5, #92	; 0x5c
   d9298:	d003      	beq.n	d92a2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d929a:	2d0d      	cmp	r5, #13
   d929c:	d10c      	bne.n	d92b8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
                break;
            case 0x0c: // Form feed
                write('f');
                break;
            case 0x0d: // Carriage return
                write('r');
   d929e:	2172      	movs	r1, #114	; 0x72
   d92a0:	e002      	b.n	d92a8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
            case '"':
            case '\\':
                write(c);
   d92a2:	4629      	mov	r1, r5
   d92a4:	e000      	b.n	d92a8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x08: // Backspace
                write('b');
                break;
            case 0x09: // Tab
                write('t');
   d92a6:	2174      	movs	r1, #116	; 0x74
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
   d92a8:	4620      	mov	r0, r4
   d92aa:	f7ff feec 	bl	d9086 <_ZN5spark10JSONWriter5writeEc>
                break;
   d92ae:	e009      	b.n	d92c4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x84>
            case 0x09: // Tab
                write('t');
                break;
            case 0x0a: // Line feed
                write('n');
   d92b0:	216e      	movs	r1, #110	; 0x6e
   d92b2:	e7f9      	b.n	d92a8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x0c: // Form feed
                write('f');
   d92b4:	2166      	movs	r1, #102	; 0x66
   d92b6:	e7f7      	b.n	d92a8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   d92b8:	6823      	ldr	r3, [r4, #0]
   d92ba:	490a      	ldr	r1, [pc, #40]	; (d92e4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xa4>)
   d92bc:	68db      	ldr	r3, [r3, #12]
   d92be:	462a      	mov	r2, r5
   d92c0:	4620      	mov	r0, r4
   d92c2:	4798      	blx	r3
                break;
            }
            str = s + 1;
   d92c4:	4631      	mov	r1, r6

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
    write('"');
    const char* const end = str + size;
    const char *s = str;
    while (s != end) {
   d92c6:	4632      	mov	r2, r6
   d92c8:	e7c4      	b.n	d9254 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x14>
            }
            str = s + 1;
        }
        ++s;
    }
    if (s != str) {
   d92ca:	4291      	cmp	r1, r2
   d92cc:	d004      	beq.n	d92d8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x98>
        write(str, s - str); // Write remaining characters
   d92ce:	6823      	ldr	r3, [r4, #0]
   d92d0:	1a52      	subs	r2, r2, r1
   d92d2:	689d      	ldr	r5, [r3, #8]
   d92d4:	4620      	mov	r0, r4
   d92d6:	47a8      	blx	r5
    }
    write('"');
   d92d8:	2122      	movs	r1, #34	; 0x22
   d92da:	4620      	mov	r0, r4
   d92dc:	f7ff fed3 	bl	d9086 <_ZN5spark10JSONWriter5writeEc>
   d92e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d92e2:	bf00      	nop
   d92e4:	000dadc8 	.word	0x000dadc8

000d92e8 <_ZN5spark10JSONWriter4nameEPKcj>:
    write('}');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   d92e8:	b570      	push	{r4, r5, r6, lr}
   d92ea:	4604      	mov	r4, r0
   d92ec:	460d      	mov	r5, r1
   d92ee:	4616      	mov	r6, r2
    writeSeparator();
   d92f0:	f7ff ff44 	bl	d917c <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   d92f4:	4620      	mov	r0, r4
   d92f6:	4632      	mov	r2, r6
   d92f8:	4629      	mov	r1, r5
   d92fa:	f7ff ffa1 	bl	d9240 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   d92fe:	2302      	movs	r3, #2
   d9300:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d9302:	4620      	mov	r0, r4
   d9304:	bd70      	pop	{r4, r5, r6, pc}

000d9306 <_ZN5spark10JSONWriter5valueEPKcj>:
    printf("%g", val);
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   d9306:	b570      	push	{r4, r5, r6, lr}
   d9308:	4604      	mov	r4, r0
   d930a:	460d      	mov	r5, r1
   d930c:	4616      	mov	r6, r2
    writeSeparator();
   d930e:	f7ff ff35 	bl	d917c <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   d9312:	4620      	mov	r0, r4
   d9314:	4632      	mov	r2, r6
   d9316:	4629      	mov	r1, r5
   d9318:	f7ff ff92 	bl	d9240 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   d931c:	2301      	movs	r3, #1
   d931e:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d9320:	4620      	mov	r0, r4
   d9322:	bd70      	pop	{r4, r5, r6, pc}

000d9324 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
    t->end = str - json; // Update string length
    return true;
}

// spark::JSONString
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d9324:	b510      	push	{r4, lr}

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d9326:	2300      	movs	r3, #0
   d9328:	4604      	mov	r4, r0
   d932a:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d932c:	6043      	str	r3, [r0, #4]
}

// spark::JSONString
inline spark::JSONString::JSONString() :
        s_(""),
        n_(0) {
   d932e:	4810      	ldr	r0, [pc, #64]	; (d9370 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x4c>)
   d9330:	60a0      	str	r0, [r4, #8]
   d9332:	60e3      	str	r3, [r4, #12]
        JSONString() {
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d9334:	b1d1      	cbz	r1, d936c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
   d9336:	780b      	ldrb	r3, [r1, #0]
   d9338:	2b03      	cmp	r3, #3
   d933a:	d006      	beq.n	d934a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d933c:	b9b3      	cbnz	r3, d936c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d933e:	6813      	ldr	r3, [r2, #0]
   d9340:	6858      	ldr	r0, [r3, #4]
   d9342:	684b      	ldr	r3, [r1, #4]
   d9344:	5cc3      	ldrb	r3, [r0, r3]
   d9346:	2b6e      	cmp	r3, #110	; 0x6e
   d9348:	d008      	beq.n	d935c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x38>
            s_ = d->json + t->start;
   d934a:	6813      	ldr	r3, [r2, #0]
   d934c:	6858      	ldr	r0, [r3, #4]
   d934e:	684b      	ldr	r3, [r1, #4]
   d9350:	4403      	add	r3, r0
   d9352:	60a3      	str	r3, [r4, #8]
            n_ = t->end - t->start;
   d9354:	688b      	ldr	r3, [r1, #8]
   d9356:	6849      	ldr	r1, [r1, #4]
   d9358:	1a5b      	subs	r3, r3, r1
   d935a:	60e3      	str	r3, [r4, #12]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d935c:	4611      	mov	r1, r2
   d935e:	4620      	mov	r0, r4
   d9360:	f851 3b04 	ldr.w	r3, [r1], #4
   d9364:	f840 3b04 	str.w	r3, [r0], #4
   d9368:	f7fd fc76 	bl	d6c58 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        }
        d_ = d;
    }
}
   d936c:	4620      	mov	r0, r4
   d936e:	bd10      	pop	{r4, pc}
   d9370:	000dab8f 	.word	0x000dab8f

000d9374 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d9374:	2300      	movs	r3, #0
bool spark::JSONString::operator==(const JSONString &str) const {
    return n_ == str.n_ && strncmp(s_, str.s_, n_) == 0;
}

// spark::JSONObjectIterator
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d9376:	b510      	push	{r4, lr}
   d9378:	4604      	mov	r4, r0
   d937a:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d937c:	6043      	str	r3, [r0, #4]
// spark::JSONObjectIterator
inline spark::JSONObjectIterator::JSONObjectIterator() :
        t_(nullptr),
        k_(nullptr),
        v_(nullptr),
        n_(0) {
   d937e:	6083      	str	r3, [r0, #8]
   d9380:	60c3      	str	r3, [r0, #12]
   d9382:	6103      	str	r3, [r0, #16]
   d9384:	6143      	str	r3, [r0, #20]
        JSONObjectIterator() {
    if (t && t->type == JSMN_OBJECT) {
   d9386:	b171      	cbz	r1, d93a6 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
   d9388:	780b      	ldrb	r3, [r1, #0]
   d938a:	2b01      	cmp	r3, #1
   d938c:	d10b      	bne.n	d93a6 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
        t_ = t + 1; // First property's name
   d938e:	f101 0310 	add.w	r3, r1, #16
   d9392:	6083      	str	r3, [r0, #8]
        n_ = t->size; // Number of properties
   d9394:	68cb      	ldr	r3, [r1, #12]
   d9396:	6143      	str	r3, [r0, #20]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d9398:	4611      	mov	r1, r2
   d939a:	f851 3b04 	ldr.w	r3, [r1], #4
   d939e:	f840 3b04 	str.w	r3, [r0], #4
   d93a2:	f7fd fc59 	bl	d6c58 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        d_ = d;
    }
}
   d93a6:	4620      	mov	r0, r4
   d93a8:	bd10      	pop	{r4, pc}

000d93aa <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d93aa:	2300      	movs	r3, #0
        }
    }
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d93ac:	b510      	push	{r4, lr}
   d93ae:	4604      	mov	r4, r0
   d93b0:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d93b2:	6043      	str	r3, [r0, #4]
        JSONValue() {
    if (t) {
        t_ = t;
   d93b4:	6081      	str	r1, [r0, #8]
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
        JSONValue() {
    if (t) {
   d93b6:	b131      	cbz	r1, d93c6 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x1c>
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d93b8:	4611      	mov	r1, r2
   d93ba:	f851 3b04 	ldr.w	r3, [r1], #4
   d93be:	f840 3b04 	str.w	r3, [r0], #4
   d93c2:	f7fd fc49 	bl	d6c58 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        t_ = t;
        d_ = d;
    }
}
   d93c6:	4620      	mov	r0, r4
   d93c8:	bd10      	pop	{r4, pc}
	...

000d93cc <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   d93cc:	b508      	push	{r3, lr}
   d93ce:	4b02      	ldr	r3, [pc, #8]	; (d93d8 <spark_protocol_instance+0xc>)
   d93d0:	681b      	ldr	r3, [r3, #0]
   d93d2:	681b      	ldr	r3, [r3, #0]
   d93d4:	9301      	str	r3, [sp, #4]
   d93d6:	bd08      	pop	{r3, pc}
   d93d8:	0003025c 	.word	0x0003025c

000d93dc <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   d93dc:	b508      	push	{r3, lr}
   d93de:	4b02      	ldr	r3, [pc, #8]	; (d93e8 <spark_protocol_set_product_id+0xc>)
   d93e0:	681b      	ldr	r3, [r3, #0]
   d93e2:	685b      	ldr	r3, [r3, #4]
   d93e4:	9301      	str	r3, [sp, #4]
   d93e6:	bd08      	pop	{r3, pc}
   d93e8:	0003025c 	.word	0x0003025c

000d93ec <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   d93ec:	b508      	push	{r3, lr}
   d93ee:	4b02      	ldr	r3, [pc, #8]	; (d93f8 <spark_protocol_set_product_firmware_version+0xc>)
   d93f0:	681b      	ldr	r3, [r3, #0]
   d93f2:	689b      	ldr	r3, [r3, #8]
   d93f4:	9301      	str	r3, [sp, #4]
   d93f6:	bd08      	pop	{r3, pc}
   d93f8:	0003025c 	.word	0x0003025c

000d93fc <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d93fc:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d93fe:	4e18      	ldr	r6, [pc, #96]	; (d9460 <pinAvailable+0x64>)
   d9400:	6831      	ldr	r1, [r6, #0]
   d9402:	f011 0501 	ands.w	r5, r1, #1
   d9406:	4604      	mov	r4, r0
   d9408:	d10a      	bne.n	d9420 <pinAvailable+0x24>
   d940a:	4630      	mov	r0, r6
   d940c:	f7fa fe54 	bl	d40b8 <__cxa_guard_acquire>
   d9410:	b130      	cbz	r0, d9420 <pinAvailable+0x24>
   d9412:	4629      	mov	r1, r5
   d9414:	4813      	ldr	r0, [pc, #76]	; (d9464 <pinAvailable+0x68>)
   d9416:	f7fd f8d1 	bl	d65bc <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d941a:	4630      	mov	r0, r6
   d941c:	f7fa fe51 	bl	d40c2 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d9420:	4810      	ldr	r0, [pc, #64]	; (d9464 <pinAvailable+0x68>)
   d9422:	f7fd f8d5 	bl	d65d0 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d9426:	b128      	cbz	r0, d9434 <pinAvailable+0x38>
   d9428:	f1a4 030b 	sub.w	r3, r4, #11
   d942c:	2b02      	cmp	r3, #2
   d942e:	d801      	bhi.n	d9434 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d9430:	2000      	movs	r0, #0
   d9432:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d9434:	f000 f870 	bl	d9518 <_Z19__fetch_global_Wirev>
   d9438:	f7ff fc3a 	bl	d8cb0 <_ZN7TwoWire9isEnabledEv>
   d943c:	b108      	cbz	r0, d9442 <pinAvailable+0x46>
   d943e:	2c01      	cmp	r4, #1
   d9440:	d9f6      	bls.n	d9430 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d9442:	f7ff fba3 	bl	d8b8c <_Z22__fetch_global_Serial1v>
   d9446:	f7ff fb9d 	bl	d8b84 <_ZN11USARTSerial9isEnabledEv>
   d944a:	b118      	cbz	r0, d9454 <pinAvailable+0x58>
   d944c:	f1a4 0309 	sub.w	r3, r4, #9
   d9450:	2b01      	cmp	r3, #1
   d9452:	d9ed      	bls.n	d9430 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d9454:	2c23      	cmp	r4, #35	; 0x23
   d9456:	bf8c      	ite	hi
   d9458:	2000      	movhi	r0, #0
   d945a:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d945c:	bd70      	pop	{r4, r5, r6, pc}
   d945e:	bf00      	nop
   d9460:	2003e71c 	.word	0x2003e71c
   d9464:	2003e720 	.word	0x2003e720

000d9468 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d9468:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d946a:	b538      	push	{r3, r4, r5, lr}
   d946c:	4604      	mov	r4, r0
   d946e:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d9470:	d80a      	bhi.n	d9488 <pinMode+0x20>
   d9472:	29ff      	cmp	r1, #255	; 0xff
   d9474:	d008      	beq.n	d9488 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d9476:	f7ff ffc1 	bl	d93fc <pinAvailable>
   d947a:	b128      	cbz	r0, d9488 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d947c:	4629      	mov	r1, r5
   d947e:	4620      	mov	r0, r4
}
   d9480:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d9484:	f7fc bd52 	b.w	d5f2c <HAL_Pin_Mode>
   d9488:	bd38      	pop	{r3, r4, r5, pc}

000d948a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d948a:	b538      	push	{r3, r4, r5, lr}
   d948c:	4604      	mov	r4, r0
   d948e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d9490:	f7fc fd54 	bl	d5f3c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d9494:	28ff      	cmp	r0, #255	; 0xff
   d9496:	d010      	beq.n	d94ba <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d9498:	2806      	cmp	r0, #6
   d949a:	d804      	bhi.n	d94a6 <digitalWrite+0x1c>
   d949c:	234d      	movs	r3, #77	; 0x4d
   d949e:	fa23 f000 	lsr.w	r0, r3, r0
   d94a2:	07c3      	lsls	r3, r0, #31
   d94a4:	d409      	bmi.n	d94ba <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d94a6:	4620      	mov	r0, r4
   d94a8:	f7ff ffa8 	bl	d93fc <pinAvailable>
   d94ac:	b128      	cbz	r0, d94ba <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d94ae:	4629      	mov	r1, r5
   d94b0:	4620      	mov	r0, r4
}
   d94b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d94b6:	f7fc bd49 	b.w	d5f4c <HAL_GPIO_Write>
   d94ba:	bd38      	pop	{r3, r4, r5, pc}

000d94bc <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   d94bc:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   d94be:	4c07      	ldr	r4, [pc, #28]	; (d94dc <_Z21__fetch_global_EEPROMv+0x20>)
   d94c0:	6823      	ldr	r3, [r4, #0]
   d94c2:	07db      	lsls	r3, r3, #31
   d94c4:	d408      	bmi.n	d94d8 <_Z21__fetch_global_EEPROMv+0x1c>
   d94c6:	4620      	mov	r0, r4
   d94c8:	f7fa fdf6 	bl	d40b8 <__cxa_guard_acquire>
   d94cc:	b120      	cbz	r0, d94d8 <_Z21__fetch_global_EEPROMv+0x1c>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   d94ce:	f7fc fd75 	bl	d5fbc <HAL_EEPROM_Init>
   d94d2:	4620      	mov	r0, r4
   d94d4:	f7fa fdf5 	bl	d40c2 <__cxa_guard_release>
	return eeprom;
}
   d94d8:	4801      	ldr	r0, [pc, #4]	; (d94e0 <_Z21__fetch_global_EEPROMv+0x24>)
   d94da:	bd10      	pop	{r4, pc}
   d94dc:	2003e72c 	.word	0x2003e72c
   d94e0:	2003e730 	.word	0x2003e730

000d94e4 <_Z17acquireWireBufferv>:
   d94e4:	b570      	push	{r4, r5, r6, lr}
   d94e6:	4604      	mov	r4, r0
   d94e8:	2514      	movs	r5, #20
   d94ea:	462a      	mov	r2, r5
   d94ec:	4e09      	ldr	r6, [pc, #36]	; (d9514 <_Z17acquireWireBufferv+0x30>)
   d94ee:	2100      	movs	r1, #0
   d94f0:	f000 fba7 	bl	d9c42 <memset>
   d94f4:	8025      	strh	r5, [r4, #0]
   d94f6:	2520      	movs	r5, #32
   d94f8:	4631      	mov	r1, r6
   d94fa:	60a5      	str	r5, [r4, #8]
   d94fc:	6125      	str	r5, [r4, #16]
   d94fe:	4628      	mov	r0, r5
   d9500:	f000 f840 	bl	d9584 <_ZnajRKSt9nothrow_t>
   d9504:	4631      	mov	r1, r6
   d9506:	6060      	str	r0, [r4, #4]
   d9508:	4628      	mov	r0, r5
   d950a:	f000 f83b 	bl	d9584 <_ZnajRKSt9nothrow_t>
   d950e:	60e0      	str	r0, [r4, #12]
   d9510:	4620      	mov	r0, r4
   d9512:	bd70      	pop	{r4, r5, r6, pc}
   d9514:	000dadce 	.word	0x000dadce

000d9518 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d9518:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d951a:	4d0e      	ldr	r5, [pc, #56]	; (d9554 <_Z19__fetch_global_Wirev+0x3c>)
   d951c:	6829      	ldr	r1, [r5, #0]
   d951e:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d9522:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d9524:	d113      	bne.n	d954e <_Z19__fetch_global_Wirev+0x36>
   d9526:	4628      	mov	r0, r5
   d9528:	f7fa fdc6 	bl	d40b8 <__cxa_guard_acquire>
   d952c:	b178      	cbz	r0, d954e <_Z19__fetch_global_Wirev+0x36>
   d952e:	a801      	add	r0, sp, #4
   d9530:	f7ff ffd8 	bl	d94e4 <_Z17acquireWireBufferv>
   d9534:	aa01      	add	r2, sp, #4
   d9536:	4621      	mov	r1, r4
   d9538:	4807      	ldr	r0, [pc, #28]	; (d9558 <_Z19__fetch_global_Wirev+0x40>)
   d953a:	f7ff fba7 	bl	d8c8c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d953e:	4628      	mov	r0, r5
   d9540:	f7fa fdbf 	bl	d40c2 <__cxa_guard_release>
   d9544:	4a05      	ldr	r2, [pc, #20]	; (d955c <_Z19__fetch_global_Wirev+0x44>)
   d9546:	4906      	ldr	r1, [pc, #24]	; (d9560 <_Z19__fetch_global_Wirev+0x48>)
   d9548:	4803      	ldr	r0, [pc, #12]	; (d9558 <_Z19__fetch_global_Wirev+0x40>)
   d954a:	f000 f80b 	bl	d9564 <__aeabi_atexit>
	return wire;
}
   d954e:	4802      	ldr	r0, [pc, #8]	; (d9558 <_Z19__fetch_global_Wirev+0x40>)
   d9550:	b007      	add	sp, #28
   d9552:	bd30      	pop	{r4, r5, pc}
   d9554:	2003e734 	.word	0x2003e734
   d9558:	2003e738 	.word	0x2003e738
   d955c:	2003e25c 	.word	0x2003e25c
   d9560:	000d8c35 	.word	0x000d8c35

000d9564 <__aeabi_atexit>:
   d9564:	460b      	mov	r3, r1
   d9566:	4601      	mov	r1, r0
   d9568:	4618      	mov	r0, r3
   d956a:	f000 bb27 	b.w	d9bbc <__cxa_atexit>
	...

000d9570 <_ZSt15get_new_handlerv>:
   d9570:	4b02      	ldr	r3, [pc, #8]	; (d957c <_ZSt15get_new_handlerv+0xc>)
   d9572:	6818      	ldr	r0, [r3, #0]
   d9574:	f3bf 8f5f 	dmb	sy
   d9578:	4770      	bx	lr
   d957a:	bf00      	nop
   d957c:	2003e74c 	.word	0x2003e74c

000d9580 <_ZdlPvj>:
   d9580:	f7fa bd8b 	b.w	d409a <_ZdlPv>

000d9584 <_ZnajRKSt9nothrow_t>:
   d9584:	f000 b800 	b.w	d9588 <_ZnwjRKSt9nothrow_t>

000d9588 <_ZnwjRKSt9nothrow_t>:
   d9588:	b510      	push	{r4, lr}
   d958a:	2800      	cmp	r0, #0
   d958c:	bf14      	ite	ne
   d958e:	4604      	movne	r4, r0
   d9590:	2401      	moveq	r4, #1
   d9592:	4620      	mov	r0, r4
   d9594:	f7fc ff94 	bl	d64c0 <malloc>
   d9598:	b920      	cbnz	r0, d95a4 <_ZnwjRKSt9nothrow_t+0x1c>
   d959a:	f7ff ffe9 	bl	d9570 <_ZSt15get_new_handlerv>
   d959e:	b108      	cbz	r0, d95a4 <_ZnwjRKSt9nothrow_t+0x1c>
   d95a0:	4780      	blx	r0
   d95a2:	e7f6      	b.n	d9592 <_ZnwjRKSt9nothrow_t+0xa>
   d95a4:	bd10      	pop	{r4, pc}

000d95a6 <_ZSt17__throw_bad_allocv>:
   d95a6:	b508      	push	{r3, lr}
   d95a8:	f7fc ffba 	bl	d6520 <abort>

000d95ac <_ZSt25__throw_bad_function_callv>:
   d95ac:	b508      	push	{r3, lr}
   d95ae:	f7fc ffb7 	bl	d6520 <abort>
	...

000d95b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d95b4:	4b18      	ldr	r3, [pc, #96]	; (d9618 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d95b6:	681a      	ldr	r2, [r3, #0]
   d95b8:	07d1      	lsls	r1, r2, #31
   d95ba:	bf5c      	itt	pl
   d95bc:	2201      	movpl	r2, #1
   d95be:	601a      	strpl	r2, [r3, #0]
   d95c0:	4b16      	ldr	r3, [pc, #88]	; (d961c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d95c2:	681a      	ldr	r2, [r3, #0]
   d95c4:	07d2      	lsls	r2, r2, #31
   d95c6:	bf5c      	itt	pl
   d95c8:	2201      	movpl	r2, #1
   d95ca:	601a      	strpl	r2, [r3, #0]
   d95cc:	4b14      	ldr	r3, [pc, #80]	; (d9620 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d95ce:	681a      	ldr	r2, [r3, #0]
   d95d0:	07d0      	lsls	r0, r2, #31
   d95d2:	bf5c      	itt	pl
   d95d4:	2201      	movpl	r2, #1
   d95d6:	601a      	strpl	r2, [r3, #0]
   d95d8:	4b12      	ldr	r3, [pc, #72]	; (d9624 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d95da:	681a      	ldr	r2, [r3, #0]
   d95dc:	07d1      	lsls	r1, r2, #31
   d95de:	bf5c      	itt	pl
   d95e0:	2201      	movpl	r2, #1
   d95e2:	601a      	strpl	r2, [r3, #0]
   d95e4:	4b10      	ldr	r3, [pc, #64]	; (d9628 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d95e6:	681a      	ldr	r2, [r3, #0]
   d95e8:	07d2      	lsls	r2, r2, #31
   d95ea:	bf5c      	itt	pl
   d95ec:	2201      	movpl	r2, #1
   d95ee:	601a      	strpl	r2, [r3, #0]
   d95f0:	4b0e      	ldr	r3, [pc, #56]	; (d962c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d95f2:	681a      	ldr	r2, [r3, #0]
   d95f4:	07d0      	lsls	r0, r2, #31
   d95f6:	bf5c      	itt	pl
   d95f8:	2201      	movpl	r2, #1
   d95fa:	601a      	strpl	r2, [r3, #0]
   d95fc:	4b0c      	ldr	r3, [pc, #48]	; (d9630 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d95fe:	681a      	ldr	r2, [r3, #0]
   d9600:	07d1      	lsls	r1, r2, #31
   d9602:	bf5c      	itt	pl
   d9604:	2201      	movpl	r2, #1
   d9606:	601a      	strpl	r2, [r3, #0]
   d9608:	4b0a      	ldr	r3, [pc, #40]	; (d9634 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d960a:	681a      	ldr	r2, [r3, #0]
   d960c:	07d2      	lsls	r2, r2, #31
   d960e:	bf5c      	itt	pl
   d9610:	2201      	movpl	r2, #1
   d9612:	601a      	strpl	r2, [r3, #0]
   d9614:	4770      	bx	lr
   d9616:	bf00      	nop
   d9618:	2003e76c 	.word	0x2003e76c
   d961c:	2003e768 	.word	0x2003e768
   d9620:	2003e764 	.word	0x2003e764
   d9624:	2003e760 	.word	0x2003e760
   d9628:	2003e75c 	.word	0x2003e75c
   d962c:	2003e758 	.word	0x2003e758
   d9630:	2003e754 	.word	0x2003e754
   d9634:	2003e750 	.word	0x2003e750

000d9638 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d9638:	4b24      	ldr	r3, [pc, #144]	; (d96cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d963a:	681a      	ldr	r2, [r3, #0]
   d963c:	07d0      	lsls	r0, r2, #31
   d963e:	bf5c      	itt	pl
   d9640:	2201      	movpl	r2, #1
   d9642:	601a      	strpl	r2, [r3, #0]
   d9644:	4b22      	ldr	r3, [pc, #136]	; (d96d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d9646:	681a      	ldr	r2, [r3, #0]
   d9648:	07d1      	lsls	r1, r2, #31
   d964a:	bf5c      	itt	pl
   d964c:	2201      	movpl	r2, #1
   d964e:	601a      	strpl	r2, [r3, #0]
   d9650:	4b20      	ldr	r3, [pc, #128]	; (d96d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d9652:	681a      	ldr	r2, [r3, #0]
   d9654:	07d2      	lsls	r2, r2, #31
   d9656:	bf5c      	itt	pl
   d9658:	2201      	movpl	r2, #1
   d965a:	601a      	strpl	r2, [r3, #0]
   d965c:	4b1e      	ldr	r3, [pc, #120]	; (d96d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d965e:	681a      	ldr	r2, [r3, #0]
   d9660:	07d0      	lsls	r0, r2, #31
   d9662:	bf5c      	itt	pl
   d9664:	2201      	movpl	r2, #1
   d9666:	601a      	strpl	r2, [r3, #0]
   d9668:	4b1c      	ldr	r3, [pc, #112]	; (d96dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d966a:	681a      	ldr	r2, [r3, #0]
   d966c:	07d1      	lsls	r1, r2, #31
   d966e:	bf5c      	itt	pl
   d9670:	2201      	movpl	r2, #1
   d9672:	601a      	strpl	r2, [r3, #0]
   d9674:	4b1a      	ldr	r3, [pc, #104]	; (d96e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d9676:	681a      	ldr	r2, [r3, #0]
   d9678:	07d2      	lsls	r2, r2, #31
   d967a:	bf5c      	itt	pl
   d967c:	2201      	movpl	r2, #1
   d967e:	601a      	strpl	r2, [r3, #0]
   d9680:	4b18      	ldr	r3, [pc, #96]	; (d96e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d9682:	681a      	ldr	r2, [r3, #0]
   d9684:	07d0      	lsls	r0, r2, #31
   d9686:	bf5c      	itt	pl
   d9688:	2201      	movpl	r2, #1
   d968a:	601a      	strpl	r2, [r3, #0]
   d968c:	4b16      	ldr	r3, [pc, #88]	; (d96e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d968e:	681a      	ldr	r2, [r3, #0]
   d9690:	07d1      	lsls	r1, r2, #31
   d9692:	bf5c      	itt	pl
   d9694:	2201      	movpl	r2, #1
   d9696:	601a      	strpl	r2, [r3, #0]
   d9698:	4b14      	ldr	r3, [pc, #80]	; (d96ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d969a:	681a      	ldr	r2, [r3, #0]
   d969c:	07d2      	lsls	r2, r2, #31
   d969e:	bf5c      	itt	pl
   d96a0:	2201      	movpl	r2, #1
   d96a2:	601a      	strpl	r2, [r3, #0]
   d96a4:	4b12      	ldr	r3, [pc, #72]	; (d96f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d96a6:	681a      	ldr	r2, [r3, #0]
   d96a8:	07d0      	lsls	r0, r2, #31
   d96aa:	bf5c      	itt	pl
   d96ac:	2201      	movpl	r2, #1
   d96ae:	601a      	strpl	r2, [r3, #0]
   d96b0:	4b10      	ldr	r3, [pc, #64]	; (d96f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d96b2:	681a      	ldr	r2, [r3, #0]
   d96b4:	07d1      	lsls	r1, r2, #31
   d96b6:	bf5c      	itt	pl
   d96b8:	2201      	movpl	r2, #1
   d96ba:	601a      	strpl	r2, [r3, #0]
   d96bc:	4b0e      	ldr	r3, [pc, #56]	; (d96f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d96be:	681a      	ldr	r2, [r3, #0]
   d96c0:	07d2      	lsls	r2, r2, #31
   d96c2:	bf5c      	itt	pl
   d96c4:	2201      	movpl	r2, #1
   d96c6:	601a      	strpl	r2, [r3, #0]
   d96c8:	4770      	bx	lr
   d96ca:	bf00      	nop
   d96cc:	2003e79c 	.word	0x2003e79c
   d96d0:	2003e798 	.word	0x2003e798
   d96d4:	2003e794 	.word	0x2003e794
   d96d8:	2003e790 	.word	0x2003e790
   d96dc:	2003e78c 	.word	0x2003e78c
   d96e0:	2003e788 	.word	0x2003e788
   d96e4:	2003e784 	.word	0x2003e784
   d96e8:	2003e780 	.word	0x2003e780
   d96ec:	2003e77c 	.word	0x2003e77c
   d96f0:	2003e778 	.word	0x2003e778
   d96f4:	2003e774 	.word	0x2003e774
   d96f8:	2003e770 	.word	0x2003e770

000d96fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d96fc:	4b24      	ldr	r3, [pc, #144]	; (d9790 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d96fe:	681a      	ldr	r2, [r3, #0]
   d9700:	07d0      	lsls	r0, r2, #31
   d9702:	bf5c      	itt	pl
   d9704:	2201      	movpl	r2, #1
   d9706:	601a      	strpl	r2, [r3, #0]
   d9708:	4b22      	ldr	r3, [pc, #136]	; (d9794 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d970a:	681a      	ldr	r2, [r3, #0]
   d970c:	07d1      	lsls	r1, r2, #31
   d970e:	bf5c      	itt	pl
   d9710:	2201      	movpl	r2, #1
   d9712:	601a      	strpl	r2, [r3, #0]
   d9714:	4b20      	ldr	r3, [pc, #128]	; (d9798 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d9716:	681a      	ldr	r2, [r3, #0]
   d9718:	07d2      	lsls	r2, r2, #31
   d971a:	bf5c      	itt	pl
   d971c:	2201      	movpl	r2, #1
   d971e:	601a      	strpl	r2, [r3, #0]
   d9720:	4b1e      	ldr	r3, [pc, #120]	; (d979c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d9722:	681a      	ldr	r2, [r3, #0]
   d9724:	07d0      	lsls	r0, r2, #31
   d9726:	bf5c      	itt	pl
   d9728:	2201      	movpl	r2, #1
   d972a:	601a      	strpl	r2, [r3, #0]
   d972c:	4b1c      	ldr	r3, [pc, #112]	; (d97a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d972e:	681a      	ldr	r2, [r3, #0]
   d9730:	07d1      	lsls	r1, r2, #31
   d9732:	bf5c      	itt	pl
   d9734:	2201      	movpl	r2, #1
   d9736:	601a      	strpl	r2, [r3, #0]
   d9738:	4b1a      	ldr	r3, [pc, #104]	; (d97a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d973a:	681a      	ldr	r2, [r3, #0]
   d973c:	07d2      	lsls	r2, r2, #31
   d973e:	bf5c      	itt	pl
   d9740:	2201      	movpl	r2, #1
   d9742:	601a      	strpl	r2, [r3, #0]
   d9744:	4b18      	ldr	r3, [pc, #96]	; (d97a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d9746:	681a      	ldr	r2, [r3, #0]
   d9748:	07d0      	lsls	r0, r2, #31
   d974a:	bf5c      	itt	pl
   d974c:	2201      	movpl	r2, #1
   d974e:	601a      	strpl	r2, [r3, #0]
   d9750:	4b16      	ldr	r3, [pc, #88]	; (d97ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d9752:	681a      	ldr	r2, [r3, #0]
   d9754:	07d1      	lsls	r1, r2, #31
   d9756:	bf5c      	itt	pl
   d9758:	2201      	movpl	r2, #1
   d975a:	601a      	strpl	r2, [r3, #0]
   d975c:	4b14      	ldr	r3, [pc, #80]	; (d97b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d975e:	681a      	ldr	r2, [r3, #0]
   d9760:	07d2      	lsls	r2, r2, #31
   d9762:	bf5c      	itt	pl
   d9764:	2201      	movpl	r2, #1
   d9766:	601a      	strpl	r2, [r3, #0]
   d9768:	4b12      	ldr	r3, [pc, #72]	; (d97b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d976a:	681a      	ldr	r2, [r3, #0]
   d976c:	07d0      	lsls	r0, r2, #31
   d976e:	bf5c      	itt	pl
   d9770:	2201      	movpl	r2, #1
   d9772:	601a      	strpl	r2, [r3, #0]
   d9774:	4b10      	ldr	r3, [pc, #64]	; (d97b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d9776:	681a      	ldr	r2, [r3, #0]
   d9778:	07d1      	lsls	r1, r2, #31
   d977a:	bf5c      	itt	pl
   d977c:	2201      	movpl	r2, #1
   d977e:	601a      	strpl	r2, [r3, #0]
   d9780:	4b0e      	ldr	r3, [pc, #56]	; (d97bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d9782:	681a      	ldr	r2, [r3, #0]
   d9784:	07d2      	lsls	r2, r2, #31
   d9786:	bf5c      	itt	pl
   d9788:	2201      	movpl	r2, #1
   d978a:	601a      	strpl	r2, [r3, #0]
   d978c:	4770      	bx	lr
   d978e:	bf00      	nop
   d9790:	2003e7cc 	.word	0x2003e7cc
   d9794:	2003e7c8 	.word	0x2003e7c8
   d9798:	2003e7c4 	.word	0x2003e7c4
   d979c:	2003e7c0 	.word	0x2003e7c0
   d97a0:	2003e7bc 	.word	0x2003e7bc
   d97a4:	2003e7b8 	.word	0x2003e7b8
   d97a8:	2003e7b4 	.word	0x2003e7b4
   d97ac:	2003e7b0 	.word	0x2003e7b0
   d97b0:	2003e7ac 	.word	0x2003e7ac
   d97b4:	2003e7a8 	.word	0x2003e7a8
   d97b8:	2003e7a4 	.word	0x2003e7a4
   d97bc:	2003e7a0 	.word	0x2003e7a0

000d97c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d97c0:	4b18      	ldr	r3, [pc, #96]	; (d9824 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d97c2:	681a      	ldr	r2, [r3, #0]
   d97c4:	07d1      	lsls	r1, r2, #31
   d97c6:	bf5c      	itt	pl
   d97c8:	2201      	movpl	r2, #1
   d97ca:	601a      	strpl	r2, [r3, #0]
   d97cc:	4b16      	ldr	r3, [pc, #88]	; (d9828 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d97ce:	681a      	ldr	r2, [r3, #0]
   d97d0:	07d2      	lsls	r2, r2, #31
   d97d2:	bf5c      	itt	pl
   d97d4:	2201      	movpl	r2, #1
   d97d6:	601a      	strpl	r2, [r3, #0]
   d97d8:	4b14      	ldr	r3, [pc, #80]	; (d982c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d97da:	681a      	ldr	r2, [r3, #0]
   d97dc:	07d0      	lsls	r0, r2, #31
   d97de:	bf5c      	itt	pl
   d97e0:	2201      	movpl	r2, #1
   d97e2:	601a      	strpl	r2, [r3, #0]
   d97e4:	4b12      	ldr	r3, [pc, #72]	; (d9830 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d97e6:	681a      	ldr	r2, [r3, #0]
   d97e8:	07d1      	lsls	r1, r2, #31
   d97ea:	bf5c      	itt	pl
   d97ec:	2201      	movpl	r2, #1
   d97ee:	601a      	strpl	r2, [r3, #0]
   d97f0:	4b10      	ldr	r3, [pc, #64]	; (d9834 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d97f2:	681a      	ldr	r2, [r3, #0]
   d97f4:	07d2      	lsls	r2, r2, #31
   d97f6:	bf5c      	itt	pl
   d97f8:	2201      	movpl	r2, #1
   d97fa:	601a      	strpl	r2, [r3, #0]
   d97fc:	4b0e      	ldr	r3, [pc, #56]	; (d9838 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d97fe:	681a      	ldr	r2, [r3, #0]
   d9800:	07d0      	lsls	r0, r2, #31
   d9802:	bf5c      	itt	pl
   d9804:	2201      	movpl	r2, #1
   d9806:	601a      	strpl	r2, [r3, #0]
   d9808:	4b0c      	ldr	r3, [pc, #48]	; (d983c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d980a:	681a      	ldr	r2, [r3, #0]
   d980c:	07d1      	lsls	r1, r2, #31
   d980e:	bf5c      	itt	pl
   d9810:	2201      	movpl	r2, #1
   d9812:	601a      	strpl	r2, [r3, #0]
   d9814:	4b0a      	ldr	r3, [pc, #40]	; (d9840 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d9816:	681a      	ldr	r2, [r3, #0]
   d9818:	07d2      	lsls	r2, r2, #31
   d981a:	bf5c      	itt	pl
   d981c:	2201      	movpl	r2, #1
   d981e:	601a      	strpl	r2, [r3, #0]
   d9820:	4770      	bx	lr
   d9822:	bf00      	nop
   d9824:	2003e7ec 	.word	0x2003e7ec
   d9828:	2003e7e8 	.word	0x2003e7e8
   d982c:	2003e7e4 	.word	0x2003e7e4
   d9830:	2003e7e0 	.word	0x2003e7e0
   d9834:	2003e7dc 	.word	0x2003e7dc
   d9838:	2003e7d8 	.word	0x2003e7d8
   d983c:	2003e7d4 	.word	0x2003e7d4
   d9840:	2003e7d0 	.word	0x2003e7d0

000d9844 <__aeabi_drsub>:
   d9844:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d9848:	e002      	b.n	d9850 <__adddf3>
   d984a:	bf00      	nop

000d984c <__aeabi_dsub>:
   d984c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d9850 <__adddf3>:
   d9850:	b530      	push	{r4, r5, lr}
   d9852:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d9856:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d985a:	ea94 0f05 	teq	r4, r5
   d985e:	bf08      	it	eq
   d9860:	ea90 0f02 	teqeq	r0, r2
   d9864:	bf1f      	itttt	ne
   d9866:	ea54 0c00 	orrsne.w	ip, r4, r0
   d986a:	ea55 0c02 	orrsne.w	ip, r5, r2
   d986e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d9872:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d9876:	f000 80e2 	beq.w	d9a3e <__adddf3+0x1ee>
   d987a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d987e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d9882:	bfb8      	it	lt
   d9884:	426d      	neglt	r5, r5
   d9886:	dd0c      	ble.n	d98a2 <__adddf3+0x52>
   d9888:	442c      	add	r4, r5
   d988a:	ea80 0202 	eor.w	r2, r0, r2
   d988e:	ea81 0303 	eor.w	r3, r1, r3
   d9892:	ea82 0000 	eor.w	r0, r2, r0
   d9896:	ea83 0101 	eor.w	r1, r3, r1
   d989a:	ea80 0202 	eor.w	r2, r0, r2
   d989e:	ea81 0303 	eor.w	r3, r1, r3
   d98a2:	2d36      	cmp	r5, #54	; 0x36
   d98a4:	bf88      	it	hi
   d98a6:	bd30      	pophi	{r4, r5, pc}
   d98a8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d98ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d98b0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d98b4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d98b8:	d002      	beq.n	d98c0 <__adddf3+0x70>
   d98ba:	4240      	negs	r0, r0
   d98bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d98c0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d98c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d98c8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d98cc:	d002      	beq.n	d98d4 <__adddf3+0x84>
   d98ce:	4252      	negs	r2, r2
   d98d0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d98d4:	ea94 0f05 	teq	r4, r5
   d98d8:	f000 80a7 	beq.w	d9a2a <__adddf3+0x1da>
   d98dc:	f1a4 0401 	sub.w	r4, r4, #1
   d98e0:	f1d5 0e20 	rsbs	lr, r5, #32
   d98e4:	db0d      	blt.n	d9902 <__adddf3+0xb2>
   d98e6:	fa02 fc0e 	lsl.w	ip, r2, lr
   d98ea:	fa22 f205 	lsr.w	r2, r2, r5
   d98ee:	1880      	adds	r0, r0, r2
   d98f0:	f141 0100 	adc.w	r1, r1, #0
   d98f4:	fa03 f20e 	lsl.w	r2, r3, lr
   d98f8:	1880      	adds	r0, r0, r2
   d98fa:	fa43 f305 	asr.w	r3, r3, r5
   d98fe:	4159      	adcs	r1, r3
   d9900:	e00e      	b.n	d9920 <__adddf3+0xd0>
   d9902:	f1a5 0520 	sub.w	r5, r5, #32
   d9906:	f10e 0e20 	add.w	lr, lr, #32
   d990a:	2a01      	cmp	r2, #1
   d990c:	fa03 fc0e 	lsl.w	ip, r3, lr
   d9910:	bf28      	it	cs
   d9912:	f04c 0c02 	orrcs.w	ip, ip, #2
   d9916:	fa43 f305 	asr.w	r3, r3, r5
   d991a:	18c0      	adds	r0, r0, r3
   d991c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d9920:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d9924:	d507      	bpl.n	d9936 <__adddf3+0xe6>
   d9926:	f04f 0e00 	mov.w	lr, #0
   d992a:	f1dc 0c00 	rsbs	ip, ip, #0
   d992e:	eb7e 0000 	sbcs.w	r0, lr, r0
   d9932:	eb6e 0101 	sbc.w	r1, lr, r1
   d9936:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d993a:	d31b      	bcc.n	d9974 <__adddf3+0x124>
   d993c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d9940:	d30c      	bcc.n	d995c <__adddf3+0x10c>
   d9942:	0849      	lsrs	r1, r1, #1
   d9944:	ea5f 0030 	movs.w	r0, r0, rrx
   d9948:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d994c:	f104 0401 	add.w	r4, r4, #1
   d9950:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d9954:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d9958:	f080 809a 	bcs.w	d9a90 <__adddf3+0x240>
   d995c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d9960:	bf08      	it	eq
   d9962:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d9966:	f150 0000 	adcs.w	r0, r0, #0
   d996a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d996e:	ea41 0105 	orr.w	r1, r1, r5
   d9972:	bd30      	pop	{r4, r5, pc}
   d9974:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d9978:	4140      	adcs	r0, r0
   d997a:	eb41 0101 	adc.w	r1, r1, r1
   d997e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9982:	f1a4 0401 	sub.w	r4, r4, #1
   d9986:	d1e9      	bne.n	d995c <__adddf3+0x10c>
   d9988:	f091 0f00 	teq	r1, #0
   d998c:	bf04      	itt	eq
   d998e:	4601      	moveq	r1, r0
   d9990:	2000      	moveq	r0, #0
   d9992:	fab1 f381 	clz	r3, r1
   d9996:	bf08      	it	eq
   d9998:	3320      	addeq	r3, #32
   d999a:	f1a3 030b 	sub.w	r3, r3, #11
   d999e:	f1b3 0220 	subs.w	r2, r3, #32
   d99a2:	da0c      	bge.n	d99be <__adddf3+0x16e>
   d99a4:	320c      	adds	r2, #12
   d99a6:	dd08      	ble.n	d99ba <__adddf3+0x16a>
   d99a8:	f102 0c14 	add.w	ip, r2, #20
   d99ac:	f1c2 020c 	rsb	r2, r2, #12
   d99b0:	fa01 f00c 	lsl.w	r0, r1, ip
   d99b4:	fa21 f102 	lsr.w	r1, r1, r2
   d99b8:	e00c      	b.n	d99d4 <__adddf3+0x184>
   d99ba:	f102 0214 	add.w	r2, r2, #20
   d99be:	bfd8      	it	le
   d99c0:	f1c2 0c20 	rsble	ip, r2, #32
   d99c4:	fa01 f102 	lsl.w	r1, r1, r2
   d99c8:	fa20 fc0c 	lsr.w	ip, r0, ip
   d99cc:	bfdc      	itt	le
   d99ce:	ea41 010c 	orrle.w	r1, r1, ip
   d99d2:	4090      	lslle	r0, r2
   d99d4:	1ae4      	subs	r4, r4, r3
   d99d6:	bfa2      	ittt	ge
   d99d8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d99dc:	4329      	orrge	r1, r5
   d99de:	bd30      	popge	{r4, r5, pc}
   d99e0:	ea6f 0404 	mvn.w	r4, r4
   d99e4:	3c1f      	subs	r4, #31
   d99e6:	da1c      	bge.n	d9a22 <__adddf3+0x1d2>
   d99e8:	340c      	adds	r4, #12
   d99ea:	dc0e      	bgt.n	d9a0a <__adddf3+0x1ba>
   d99ec:	f104 0414 	add.w	r4, r4, #20
   d99f0:	f1c4 0220 	rsb	r2, r4, #32
   d99f4:	fa20 f004 	lsr.w	r0, r0, r4
   d99f8:	fa01 f302 	lsl.w	r3, r1, r2
   d99fc:	ea40 0003 	orr.w	r0, r0, r3
   d9a00:	fa21 f304 	lsr.w	r3, r1, r4
   d9a04:	ea45 0103 	orr.w	r1, r5, r3
   d9a08:	bd30      	pop	{r4, r5, pc}
   d9a0a:	f1c4 040c 	rsb	r4, r4, #12
   d9a0e:	f1c4 0220 	rsb	r2, r4, #32
   d9a12:	fa20 f002 	lsr.w	r0, r0, r2
   d9a16:	fa01 f304 	lsl.w	r3, r1, r4
   d9a1a:	ea40 0003 	orr.w	r0, r0, r3
   d9a1e:	4629      	mov	r1, r5
   d9a20:	bd30      	pop	{r4, r5, pc}
   d9a22:	fa21 f004 	lsr.w	r0, r1, r4
   d9a26:	4629      	mov	r1, r5
   d9a28:	bd30      	pop	{r4, r5, pc}
   d9a2a:	f094 0f00 	teq	r4, #0
   d9a2e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d9a32:	bf06      	itte	eq
   d9a34:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d9a38:	3401      	addeq	r4, #1
   d9a3a:	3d01      	subne	r5, #1
   d9a3c:	e74e      	b.n	d98dc <__adddf3+0x8c>
   d9a3e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d9a42:	bf18      	it	ne
   d9a44:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d9a48:	d029      	beq.n	d9a9e <__adddf3+0x24e>
   d9a4a:	ea94 0f05 	teq	r4, r5
   d9a4e:	bf08      	it	eq
   d9a50:	ea90 0f02 	teqeq	r0, r2
   d9a54:	d005      	beq.n	d9a62 <__adddf3+0x212>
   d9a56:	ea54 0c00 	orrs.w	ip, r4, r0
   d9a5a:	bf04      	itt	eq
   d9a5c:	4619      	moveq	r1, r3
   d9a5e:	4610      	moveq	r0, r2
   d9a60:	bd30      	pop	{r4, r5, pc}
   d9a62:	ea91 0f03 	teq	r1, r3
   d9a66:	bf1e      	ittt	ne
   d9a68:	2100      	movne	r1, #0
   d9a6a:	2000      	movne	r0, #0
   d9a6c:	bd30      	popne	{r4, r5, pc}
   d9a6e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d9a72:	d105      	bne.n	d9a80 <__adddf3+0x230>
   d9a74:	0040      	lsls	r0, r0, #1
   d9a76:	4149      	adcs	r1, r1
   d9a78:	bf28      	it	cs
   d9a7a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d9a7e:	bd30      	pop	{r4, r5, pc}
   d9a80:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d9a84:	bf3c      	itt	cc
   d9a86:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d9a8a:	bd30      	popcc	{r4, r5, pc}
   d9a8c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d9a90:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d9a94:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d9a98:	f04f 0000 	mov.w	r0, #0
   d9a9c:	bd30      	pop	{r4, r5, pc}
   d9a9e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d9aa2:	bf1a      	itte	ne
   d9aa4:	4619      	movne	r1, r3
   d9aa6:	4610      	movne	r0, r2
   d9aa8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d9aac:	bf1c      	itt	ne
   d9aae:	460b      	movne	r3, r1
   d9ab0:	4602      	movne	r2, r0
   d9ab2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d9ab6:	bf06      	itte	eq
   d9ab8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d9abc:	ea91 0f03 	teqeq	r1, r3
   d9ac0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d9ac4:	bd30      	pop	{r4, r5, pc}
   d9ac6:	bf00      	nop

000d9ac8 <__aeabi_ui2d>:
   d9ac8:	f090 0f00 	teq	r0, #0
   d9acc:	bf04      	itt	eq
   d9ace:	2100      	moveq	r1, #0
   d9ad0:	4770      	bxeq	lr
   d9ad2:	b530      	push	{r4, r5, lr}
   d9ad4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d9ad8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d9adc:	f04f 0500 	mov.w	r5, #0
   d9ae0:	f04f 0100 	mov.w	r1, #0
   d9ae4:	e750      	b.n	d9988 <__adddf3+0x138>
   d9ae6:	bf00      	nop

000d9ae8 <__aeabi_i2d>:
   d9ae8:	f090 0f00 	teq	r0, #0
   d9aec:	bf04      	itt	eq
   d9aee:	2100      	moveq	r1, #0
   d9af0:	4770      	bxeq	lr
   d9af2:	b530      	push	{r4, r5, lr}
   d9af4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d9af8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d9afc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d9b00:	bf48      	it	mi
   d9b02:	4240      	negmi	r0, r0
   d9b04:	f04f 0100 	mov.w	r1, #0
   d9b08:	e73e      	b.n	d9988 <__adddf3+0x138>
   d9b0a:	bf00      	nop

000d9b0c <__aeabi_f2d>:
   d9b0c:	0042      	lsls	r2, r0, #1
   d9b0e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d9b12:	ea4f 0131 	mov.w	r1, r1, rrx
   d9b16:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d9b1a:	bf1f      	itttt	ne
   d9b1c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d9b20:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d9b24:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d9b28:	4770      	bxne	lr
   d9b2a:	f092 0f00 	teq	r2, #0
   d9b2e:	bf14      	ite	ne
   d9b30:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d9b34:	4770      	bxeq	lr
   d9b36:	b530      	push	{r4, r5, lr}
   d9b38:	f44f 7460 	mov.w	r4, #896	; 0x380
   d9b3c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d9b40:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d9b44:	e720      	b.n	d9988 <__adddf3+0x138>
   d9b46:	bf00      	nop

000d9b48 <__aeabi_ul2d>:
   d9b48:	ea50 0201 	orrs.w	r2, r0, r1
   d9b4c:	bf08      	it	eq
   d9b4e:	4770      	bxeq	lr
   d9b50:	b530      	push	{r4, r5, lr}
   d9b52:	f04f 0500 	mov.w	r5, #0
   d9b56:	e00a      	b.n	d9b6e <__aeabi_l2d+0x16>

000d9b58 <__aeabi_l2d>:
   d9b58:	ea50 0201 	orrs.w	r2, r0, r1
   d9b5c:	bf08      	it	eq
   d9b5e:	4770      	bxeq	lr
   d9b60:	b530      	push	{r4, r5, lr}
   d9b62:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d9b66:	d502      	bpl.n	d9b6e <__aeabi_l2d+0x16>
   d9b68:	4240      	negs	r0, r0
   d9b6a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d9b6e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d9b72:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d9b76:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d9b7a:	f43f aedc 	beq.w	d9936 <__adddf3+0xe6>
   d9b7e:	f04f 0203 	mov.w	r2, #3
   d9b82:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d9b86:	bf18      	it	ne
   d9b88:	3203      	addne	r2, #3
   d9b8a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d9b8e:	bf18      	it	ne
   d9b90:	3203      	addne	r2, #3
   d9b92:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d9b96:	f1c2 0320 	rsb	r3, r2, #32
   d9b9a:	fa00 fc03 	lsl.w	ip, r0, r3
   d9b9e:	fa20 f002 	lsr.w	r0, r0, r2
   d9ba2:	fa01 fe03 	lsl.w	lr, r1, r3
   d9ba6:	ea40 000e 	orr.w	r0, r0, lr
   d9baa:	fa21 f102 	lsr.w	r1, r1, r2
   d9bae:	4414      	add	r4, r2
   d9bb0:	e6c1      	b.n	d9936 <__adddf3+0xe6>
   d9bb2:	bf00      	nop

000d9bb4 <atol>:
   d9bb4:	220a      	movs	r2, #10
   d9bb6:	2100      	movs	r1, #0
   d9bb8:	f000 b968 	b.w	d9e8c <strtol>

000d9bbc <__cxa_atexit>:
   d9bbc:	b510      	push	{r4, lr}
   d9bbe:	4c05      	ldr	r4, [pc, #20]	; (d9bd4 <__cxa_atexit+0x18>)
   d9bc0:	4613      	mov	r3, r2
   d9bc2:	b12c      	cbz	r4, d9bd0 <__cxa_atexit+0x14>
   d9bc4:	460a      	mov	r2, r1
   d9bc6:	4601      	mov	r1, r0
   d9bc8:	2002      	movs	r0, #2
   d9bca:	f3af 8000 	nop.w
   d9bce:	bd10      	pop	{r4, pc}
   d9bd0:	4620      	mov	r0, r4
   d9bd2:	bd10      	pop	{r4, pc}
   d9bd4:	00000000 	.word	0x00000000

000d9bd8 <memcmp>:
   d9bd8:	b510      	push	{r4, lr}
   d9bda:	3901      	subs	r1, #1
   d9bdc:	4402      	add	r2, r0
   d9bde:	4290      	cmp	r0, r2
   d9be0:	d007      	beq.n	d9bf2 <memcmp+0x1a>
   d9be2:	f810 3b01 	ldrb.w	r3, [r0], #1
   d9be6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d9bea:	42a3      	cmp	r3, r4
   d9bec:	d0f7      	beq.n	d9bde <memcmp+0x6>
   d9bee:	1b18      	subs	r0, r3, r4
   d9bf0:	bd10      	pop	{r4, pc}
   d9bf2:	2000      	movs	r0, #0
   d9bf4:	bd10      	pop	{r4, pc}

000d9bf6 <memcpy>:
   d9bf6:	b510      	push	{r4, lr}
   d9bf8:	1e43      	subs	r3, r0, #1
   d9bfa:	440a      	add	r2, r1
   d9bfc:	4291      	cmp	r1, r2
   d9bfe:	d004      	beq.n	d9c0a <memcpy+0x14>
   d9c00:	f811 4b01 	ldrb.w	r4, [r1], #1
   d9c04:	f803 4f01 	strb.w	r4, [r3, #1]!
   d9c08:	e7f8      	b.n	d9bfc <memcpy+0x6>
   d9c0a:	bd10      	pop	{r4, pc}

000d9c0c <memmove>:
   d9c0c:	4288      	cmp	r0, r1
   d9c0e:	b510      	push	{r4, lr}
   d9c10:	eb01 0302 	add.w	r3, r1, r2
   d9c14:	d801      	bhi.n	d9c1a <memmove+0xe>
   d9c16:	1e42      	subs	r2, r0, #1
   d9c18:	e00b      	b.n	d9c32 <memmove+0x26>
   d9c1a:	4298      	cmp	r0, r3
   d9c1c:	d2fb      	bcs.n	d9c16 <memmove+0xa>
   d9c1e:	1881      	adds	r1, r0, r2
   d9c20:	1ad2      	subs	r2, r2, r3
   d9c22:	42d3      	cmn	r3, r2
   d9c24:	d004      	beq.n	d9c30 <memmove+0x24>
   d9c26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d9c2a:	f801 4d01 	strb.w	r4, [r1, #-1]!
   d9c2e:	e7f8      	b.n	d9c22 <memmove+0x16>
   d9c30:	bd10      	pop	{r4, pc}
   d9c32:	4299      	cmp	r1, r3
   d9c34:	d004      	beq.n	d9c40 <memmove+0x34>
   d9c36:	f811 4b01 	ldrb.w	r4, [r1], #1
   d9c3a:	f802 4f01 	strb.w	r4, [r2, #1]!
   d9c3e:	e7f8      	b.n	d9c32 <memmove+0x26>
   d9c40:	bd10      	pop	{r4, pc}

000d9c42 <memset>:
   d9c42:	4402      	add	r2, r0
   d9c44:	4603      	mov	r3, r0
   d9c46:	4293      	cmp	r3, r2
   d9c48:	d002      	beq.n	d9c50 <memset+0xe>
   d9c4a:	f803 1b01 	strb.w	r1, [r3], #1
   d9c4e:	e7fa      	b.n	d9c46 <memset+0x4>
   d9c50:	4770      	bx	lr
	...

000d9c54 <srand>:
   d9c54:	b538      	push	{r3, r4, r5, lr}
   d9c56:	4b12      	ldr	r3, [pc, #72]	; (d9ca0 <srand+0x4c>)
   d9c58:	681c      	ldr	r4, [r3, #0]
   d9c5a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d9c5c:	4605      	mov	r5, r0
   d9c5e:	b9d3      	cbnz	r3, d9c96 <srand+0x42>
   d9c60:	2018      	movs	r0, #24
   d9c62:	f7fc fc2d 	bl	d64c0 <malloc>
   d9c66:	f243 330e 	movw	r3, #13070	; 0x330e
   d9c6a:	63a0      	str	r0, [r4, #56]	; 0x38
   d9c6c:	8003      	strh	r3, [r0, #0]
   d9c6e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d9c72:	8043      	strh	r3, [r0, #2]
   d9c74:	f241 2334 	movw	r3, #4660	; 0x1234
   d9c78:	8083      	strh	r3, [r0, #4]
   d9c7a:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d9c7e:	80c3      	strh	r3, [r0, #6]
   d9c80:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d9c84:	8103      	strh	r3, [r0, #8]
   d9c86:	2305      	movs	r3, #5
   d9c88:	8143      	strh	r3, [r0, #10]
   d9c8a:	230b      	movs	r3, #11
   d9c8c:	8183      	strh	r3, [r0, #12]
   d9c8e:	2201      	movs	r2, #1
   d9c90:	2300      	movs	r3, #0
   d9c92:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d9c96:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d9c98:	2200      	movs	r2, #0
   d9c9a:	611d      	str	r5, [r3, #16]
   d9c9c:	615a      	str	r2, [r3, #20]
   d9c9e:	bd38      	pop	{r3, r4, r5, pc}
   d9ca0:	2003e258 	.word	0x2003e258

000d9ca4 <strchr>:
   d9ca4:	b2c9      	uxtb	r1, r1
   d9ca6:	4603      	mov	r3, r0
   d9ca8:	f810 2b01 	ldrb.w	r2, [r0], #1
   d9cac:	b11a      	cbz	r2, d9cb6 <strchr+0x12>
   d9cae:	4291      	cmp	r1, r2
   d9cb0:	d1f9      	bne.n	d9ca6 <strchr+0x2>
   d9cb2:	4618      	mov	r0, r3
   d9cb4:	4770      	bx	lr
   d9cb6:	2900      	cmp	r1, #0
   d9cb8:	bf0c      	ite	eq
   d9cba:	4618      	moveq	r0, r3
   d9cbc:	2000      	movne	r0, #0
   d9cbe:	4770      	bx	lr

000d9cc0 <strchrnul>:
   d9cc0:	b510      	push	{r4, lr}
   d9cc2:	4604      	mov	r4, r0
   d9cc4:	f7ff ffee 	bl	d9ca4 <strchr>
   d9cc8:	b918      	cbnz	r0, d9cd2 <strchrnul+0x12>
   d9cca:	4620      	mov	r0, r4
   d9ccc:	f000 f827 	bl	d9d1e <strlen>
   d9cd0:	4420      	add	r0, r4
   d9cd2:	bd10      	pop	{r4, pc}

000d9cd4 <strcmp>:
   d9cd4:	f810 2b01 	ldrb.w	r2, [r0], #1
   d9cd8:	f811 3b01 	ldrb.w	r3, [r1], #1
   d9cdc:	2a01      	cmp	r2, #1
   d9cde:	bf28      	it	cs
   d9ce0:	429a      	cmpcs	r2, r3
   d9ce2:	d0f7      	beq.n	d9cd4 <strcmp>
   d9ce4:	1ad0      	subs	r0, r2, r3
   d9ce6:	4770      	bx	lr

000d9ce8 <strdup>:
   d9ce8:	4b02      	ldr	r3, [pc, #8]	; (d9cf4 <strdup+0xc>)
   d9cea:	4601      	mov	r1, r0
   d9cec:	6818      	ldr	r0, [r3, #0]
   d9cee:	f000 b803 	b.w	d9cf8 <_strdup_r>
   d9cf2:	bf00      	nop
   d9cf4:	2003e258 	.word	0x2003e258

000d9cf8 <_strdup_r>:
   d9cf8:	b570      	push	{r4, r5, r6, lr}
   d9cfa:	4606      	mov	r6, r0
   d9cfc:	4608      	mov	r0, r1
   d9cfe:	460c      	mov	r4, r1
   d9d00:	f000 f80d 	bl	d9d1e <strlen>
   d9d04:	1c45      	adds	r5, r0, #1
   d9d06:	4629      	mov	r1, r5
   d9d08:	4630      	mov	r0, r6
   d9d0a:	f7fc fc11 	bl	d6530 <_malloc_r>
   d9d0e:	4606      	mov	r6, r0
   d9d10:	b118      	cbz	r0, d9d1a <_strdup_r+0x22>
   d9d12:	462a      	mov	r2, r5
   d9d14:	4621      	mov	r1, r4
   d9d16:	f7ff ff6e 	bl	d9bf6 <memcpy>
   d9d1a:	4630      	mov	r0, r6
   d9d1c:	bd70      	pop	{r4, r5, r6, pc}

000d9d1e <strlen>:
   d9d1e:	4603      	mov	r3, r0
   d9d20:	f813 2b01 	ldrb.w	r2, [r3], #1
   d9d24:	2a00      	cmp	r2, #0
   d9d26:	d1fb      	bne.n	d9d20 <strlen+0x2>
   d9d28:	1a18      	subs	r0, r3, r0
   d9d2a:	3801      	subs	r0, #1
   d9d2c:	4770      	bx	lr

000d9d2e <strncmp>:
   d9d2e:	b530      	push	{r4, r5, lr}
   d9d30:	b182      	cbz	r2, d9d54 <strncmp+0x26>
   d9d32:	1e45      	subs	r5, r0, #1
   d9d34:	3901      	subs	r1, #1
   d9d36:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d9d3a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d9d3e:	42a3      	cmp	r3, r4
   d9d40:	d106      	bne.n	d9d50 <strncmp+0x22>
   d9d42:	43ec      	mvns	r4, r5
   d9d44:	4414      	add	r4, r2
   d9d46:	42e0      	cmn	r0, r4
   d9d48:	d001      	beq.n	d9d4e <strncmp+0x20>
   d9d4a:	2b00      	cmp	r3, #0
   d9d4c:	d1f3      	bne.n	d9d36 <strncmp+0x8>
   d9d4e:	461c      	mov	r4, r3
   d9d50:	1b18      	subs	r0, r3, r4
   d9d52:	bd30      	pop	{r4, r5, pc}
   d9d54:	4610      	mov	r0, r2
   d9d56:	bd30      	pop	{r4, r5, pc}

000d9d58 <strrchr>:
   d9d58:	b538      	push	{r3, r4, r5, lr}
   d9d5a:	4603      	mov	r3, r0
   d9d5c:	460d      	mov	r5, r1
   d9d5e:	b141      	cbz	r1, d9d72 <strrchr+0x1a>
   d9d60:	2400      	movs	r4, #0
   d9d62:	4629      	mov	r1, r5
   d9d64:	4618      	mov	r0, r3
   d9d66:	f7ff ff9d 	bl	d9ca4 <strchr>
   d9d6a:	b130      	cbz	r0, d9d7a <strrchr+0x22>
   d9d6c:	1c43      	adds	r3, r0, #1
   d9d6e:	4604      	mov	r4, r0
   d9d70:	e7f7      	b.n	d9d62 <strrchr+0xa>
   d9d72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d9d76:	f7ff bf95 	b.w	d9ca4 <strchr>
   d9d7a:	4620      	mov	r0, r4
   d9d7c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d9d80 <_strtol_r>:
   d9d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9d84:	4680      	mov	r8, r0
   d9d86:	4840      	ldr	r0, [pc, #256]	; (d9e88 <_strtol_r+0x108>)
   d9d88:	f8d0 9000 	ldr.w	r9, [r0]
   d9d8c:	460f      	mov	r7, r1
   d9d8e:	463d      	mov	r5, r7
   d9d90:	f815 4b01 	ldrb.w	r4, [r5], #1
   d9d94:	eb09 0004 	add.w	r0, r9, r4
   d9d98:	7840      	ldrb	r0, [r0, #1]
   d9d9a:	f000 0008 	and.w	r0, r0, #8
   d9d9e:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d9da2:	b108      	cbz	r0, d9da8 <_strtol_r+0x28>
   d9da4:	462f      	mov	r7, r5
   d9da6:	e7f2      	b.n	d9d8e <_strtol_r+0xe>
   d9da8:	2c2d      	cmp	r4, #45	; 0x2d
   d9daa:	d103      	bne.n	d9db4 <_strtol_r+0x34>
   d9dac:	1cbd      	adds	r5, r7, #2
   d9dae:	787c      	ldrb	r4, [r7, #1]
   d9db0:	2601      	movs	r6, #1
   d9db2:	e003      	b.n	d9dbc <_strtol_r+0x3c>
   d9db4:	2c2b      	cmp	r4, #43	; 0x2b
   d9db6:	bf04      	itt	eq
   d9db8:	787c      	ldrbeq	r4, [r7, #1]
   d9dba:	1cbd      	addeq	r5, r7, #2
   d9dbc:	b113      	cbz	r3, d9dc4 <_strtol_r+0x44>
   d9dbe:	2b10      	cmp	r3, #16
   d9dc0:	d10a      	bne.n	d9dd8 <_strtol_r+0x58>
   d9dc2:	e05b      	b.n	d9e7c <_strtol_r+0xfc>
   d9dc4:	2c30      	cmp	r4, #48	; 0x30
   d9dc6:	d157      	bne.n	d9e78 <_strtol_r+0xf8>
   d9dc8:	7828      	ldrb	r0, [r5, #0]
   d9dca:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d9dce:	2858      	cmp	r0, #88	; 0x58
   d9dd0:	d14d      	bne.n	d9e6e <_strtol_r+0xee>
   d9dd2:	786c      	ldrb	r4, [r5, #1]
   d9dd4:	2310      	movs	r3, #16
   d9dd6:	3502      	adds	r5, #2
   d9dd8:	2e00      	cmp	r6, #0
   d9dda:	bf14      	ite	ne
   d9ddc:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d9de0:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d9de4:	2700      	movs	r7, #0
   d9de6:	fbbc faf3 	udiv	sl, ip, r3
   d9dea:	4638      	mov	r0, r7
   d9dec:	fb03 cc1a 	mls	ip, r3, sl, ip
   d9df0:	eb09 0e04 	add.w	lr, r9, r4
   d9df4:	f89e e001 	ldrb.w	lr, [lr, #1]
   d9df8:	f01e 0f04 	tst.w	lr, #4
   d9dfc:	d001      	beq.n	d9e02 <_strtol_r+0x82>
   d9dfe:	3c30      	subs	r4, #48	; 0x30
   d9e00:	e00b      	b.n	d9e1a <_strtol_r+0x9a>
   d9e02:	f01e 0e03 	ands.w	lr, lr, #3
   d9e06:	d01b      	beq.n	d9e40 <_strtol_r+0xc0>
   d9e08:	f1be 0f01 	cmp.w	lr, #1
   d9e0c:	bf0c      	ite	eq
   d9e0e:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d9e12:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d9e16:	ebce 0404 	rsb	r4, lr, r4
   d9e1a:	42a3      	cmp	r3, r4
   d9e1c:	dd10      	ble.n	d9e40 <_strtol_r+0xc0>
   d9e1e:	f1b7 3fff 	cmp.w	r7, #4294967295
   d9e22:	d00a      	beq.n	d9e3a <_strtol_r+0xba>
   d9e24:	4550      	cmp	r0, sl
   d9e26:	d806      	bhi.n	d9e36 <_strtol_r+0xb6>
   d9e28:	d101      	bne.n	d9e2e <_strtol_r+0xae>
   d9e2a:	4564      	cmp	r4, ip
   d9e2c:	dc03      	bgt.n	d9e36 <_strtol_r+0xb6>
   d9e2e:	fb03 4000 	mla	r0, r3, r0, r4
   d9e32:	2701      	movs	r7, #1
   d9e34:	e001      	b.n	d9e3a <_strtol_r+0xba>
   d9e36:	f04f 37ff 	mov.w	r7, #4294967295
   d9e3a:	f815 4b01 	ldrb.w	r4, [r5], #1
   d9e3e:	e7d7      	b.n	d9df0 <_strtol_r+0x70>
   d9e40:	1c7b      	adds	r3, r7, #1
   d9e42:	d10c      	bne.n	d9e5e <_strtol_r+0xde>
   d9e44:	2e00      	cmp	r6, #0
   d9e46:	f04f 0322 	mov.w	r3, #34	; 0x22
   d9e4a:	bf14      	ite	ne
   d9e4c:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d9e50:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d9e54:	f8c8 3000 	str.w	r3, [r8]
   d9e58:	b92a      	cbnz	r2, d9e66 <_strtol_r+0xe6>
   d9e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9e5e:	b106      	cbz	r6, d9e62 <_strtol_r+0xe2>
   d9e60:	4240      	negs	r0, r0
   d9e62:	b172      	cbz	r2, d9e82 <_strtol_r+0x102>
   d9e64:	b107      	cbz	r7, d9e68 <_strtol_r+0xe8>
   d9e66:	1e69      	subs	r1, r5, #1
   d9e68:	6011      	str	r1, [r2, #0]
   d9e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9e6e:	2430      	movs	r4, #48	; 0x30
   d9e70:	2b00      	cmp	r3, #0
   d9e72:	d1b1      	bne.n	d9dd8 <_strtol_r+0x58>
   d9e74:	2308      	movs	r3, #8
   d9e76:	e7af      	b.n	d9dd8 <_strtol_r+0x58>
   d9e78:	230a      	movs	r3, #10
   d9e7a:	e7ad      	b.n	d9dd8 <_strtol_r+0x58>
   d9e7c:	2c30      	cmp	r4, #48	; 0x30
   d9e7e:	d0a3      	beq.n	d9dc8 <_strtol_r+0x48>
   d9e80:	e7aa      	b.n	d9dd8 <_strtol_r+0x58>
   d9e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9e86:	bf00      	nop
   d9e88:	2003e1f4 	.word	0x2003e1f4

000d9e8c <strtol>:
   d9e8c:	4613      	mov	r3, r2
   d9e8e:	460a      	mov	r2, r1
   d9e90:	4601      	mov	r1, r0
   d9e92:	4802      	ldr	r0, [pc, #8]	; (d9e9c <strtol+0x10>)
   d9e94:	6800      	ldr	r0, [r0, #0]
   d9e96:	f7ff bf73 	b.w	d9d80 <_strtol_r>
   d9e9a:	bf00      	nop
   d9e9c:	2003e258 	.word	0x2003e258

000d9ea0 <dynalib_user>:
   d9ea0:	000d401d 000d4059 000d4085 000d4089     .@..Y@...@...@..
   d9eb0:	00000000 45534552 45525f54 4e4f5341     ....RESET_REASON
   d9ec0:	4e49505f 5345525f 203a5445 68746965     _PIN_RESET: eith
   d9ed0:	52207265 54455345 20726f20 64726168     er RESET or hard
   d9ee0:	65726177 74617720 6f646863 65730067     ware watchdog.se
   d9ef0:	63697672 61772065 64686374 7300676f     rvice watchdog.s
   d9f00:	426e6163 6854454c 64616572 6f6f6400     canBLEThread.doo
   d9f10:	44492072 616c6620 73692067 25783020     r ID flag is 0x%
   d9f20:	00583430 726f6f44 20444920 20736177     04X.Door ID was 
   d9f30:	74697277 206e6574 66206f74 6873616c     written to flash
   d9f40:	206e6f20 746f6f62 002e7075 726f6f44      on bootup..Door
   d9f50:	20444920 20736177 64616572 6f726620      ID was read fro
   d9f60:	6c66206d 20687361 62206e6f 75746f6f     m flash on bootu
   d9f70:	7b002e70 65642220 65636976 3a226469     p..{ "deviceid":
   d9f80:	30252220 253a5832 3a583230 58323025      "%02X:%02X:%02X
   d9f90:	22202c22 61746164 22203a22 58323025     ", "data": "%02X
   d9fa0:	22202c22 746e6f63 226c6f72 2522203a     ", "control": "%
   d9fb0:	22583230 49007d20 2031324d 61746144     02X" }.IM21 Data
   d9fc0:	62757000 6873696c 202c6465 30257830     .published, 0x%0
   d9fd0:	7b005832 65642220 65636976 3a226469     2X.{ "deviceid":
   d9fe0:	30252220 253a5832 3a583230 58323025      "%02X:%02X:%02X
   d9ff0:	22202c22 76657270 6e6f635f 6c6f7274     ", "prev_control
   da000:	7479625f 203a2265 32302522 202c2258     _byte": "%02X", 
   da010:	72756322 6f635f72 6f72746e 79625f6c     "curr_control_by
   da020:	3a226574 30252220 20225832 4d49007d     te": "%02X" }.IM
   da030:	57203132 696e7261 7000676e 696c6275     21 Warning.publi
   da040:	64656873 324d4920 61772031 6e696e72     shed IM21 warnin
   da050:	70202c67 20766572 726f6f64 74796220     g, prev door byt
   da060:	203d2065 30257830 202c5832 72727563     e = 0x%02X, curr
   da070:	6f6f6420 79622072 3d206574 25783020      door byte = 0x%
   da080:	00583230 72727563 70203e20 20766572     02X.curr > prev 
   da090:	2c31202b 52415720 474e494e 52415720     + 1, WARNING WAR
   da0a0:	474e494e 52415720 474e494e 696d202c     NING WARNING, mi
   da0b0:	64657373 6f6f6420 76652072 21746e65     ssed door event!
   da0c0:	206f6e00 2077656e 61746164 00000000     .no new data....

000da0d0 <_ZTVN5spark10LogHandlerE>:
	...
   da0e0:	000d40a5 000d45bd                       .@...E..

000da0e8 <_ZTVN5spark16SerialLogHandlerE>:
	...
   da0f0:	000d45c9 000d45fd 000d7d95 000d45bf     .E...E...}...E..
   da100:	7962227b 22316574 3025223a 2c225832     {"byte1":"%02X",
   da110:	79622220 22326574 3025223a 2c225832      "byte2":"%02X",
   da120:	79622220 22336574 3025223a 7d225832      "byte3":"%02X"}
   da130:	72754300 746e6572 6f6f4420 65532072     .Current Door Se
   da140:	726f736e 3a444920 68430020 65676e61     nsor ID: .Change
   da150:	696e495f 6c616974 6d69545f 43007265     _Initial_Timer.C
   da160:	676e6168 75445f65 69746172 545f6e6f     hange_Duration_T
   da170:	72656d69 61684300 5f65676e 6c697453     imer.Change_Stil
   da180:	73656e6c 69545f73 0072656d 6e616843     lness_Timer.Chan
   da190:	495f6567 545f534e 73657268 646c6f68     ge_INS_Threshold
   da1a0:	72755400 65445f6e 67677562 5f676e69     .Turn_Debugging_
   da1b0:	6c627550 65687369 6e4f5f73 66664f5f     Publishes_On_Off
   da1c0:	61684300 5f65676e 31324d49 6f6f445f     .Change_IM21_Doo
   da1d0:	44495f72 61747300 6d206574 69686361     r_ID.state machi
   da1e0:	6320656e 74736e6f 73746e61 616c6620     ne constants fla
   da1f0:	73692067 25783020 00583430 74617453     g is 0x%04X.Stat
   da200:	616d2065 6e696863 6f632065 6174736e     e machine consta
   da210:	2073746e 65726577 69727720 6e657474     nts were written
   da220:	206f7420 73616c66 6e6f2068 6f6f6220      to flash on boo
   da230:	2e707574 61745300 6d206574 69686361     tup..State machi
   da240:	6320656e 74736e6f 73746e61 72657720     ne constants wer
   da250:	65722065 66206461 206d6f72 73616c66     e read from flas
   da260:	6e6f2068 6f6f6220 2e707574 4e495000     h on bootup..PIN
   da270:	5345525f 50005445 5245574f 4e414d5f     _RESET.POWER_MAN
   da280:	4d454741 00544e45 45574f50 4f445f52     AGEMENT.POWER_DO
   da290:	50004e57 5245574f 4f52425f 554f4e57     WN.POWER_BROWNOU
   da2a0:	41570054 44484354 5500474f 54414450     T.WATCHDOG.UPDAT
   da2b0:	50550045 45544144 4d49545f 54554f45     E.UPDATE_TIMEOUT
   da2c0:	43414600 59524f54 5345525f 44005445     .FACTORY_RESET.D
   da2d0:	4d5f5546 0045444f 494e4150 53550043     FU_MODE.PANIC.US
   da2e0:	55005245 4f4e4b4e 4e004e57 00454e4f     ER.UNKNOWN.NONE.
   da2f0:	7270227b 735f7665 65746174 25223a22     {"prev_state":"%
   da300:	202c2264 78656e22 74735f74 22657461     d", "next_state"
   da310:	6425223a 22202c22 726f6f64 6174735f     :"%d", "door_sta
   da320:	22737574 7830223a 58323025 22202c22     tus":"0x%02X", "
   da330:	5f534e49 226c6176 6625223a 53007d22     INS_val":"%f"}.S
   da340:	65746174 61725420 7469736e 006e6f69     tate Transition.
   da350:	7473227b 22657461 6425223a 22202c22     {"state":"%d", "
   da360:	726f6f64 6174735f 22737574 7830223a     door_status":"0x
   da370:	58323025 22202c22 5f534e49 226c6176     %02X", "INS_val"
   da380:	6625223a 22202c22 656d6974 74735f72     :"%f", "timer_st
   da390:	73757461 25223a22 7d22646c 62654400     atus":"%ld"}.Deb
   da3a0:	4d206775 61737365 64006567 4d726f6f     ug Message.doorM
   da3b0:	65737369 67734d64 6f6f6400 776f4c72     issedMsg.doorLow
   da3c0:	74746142 6f6f6400 73614c72 61654874     Batt.doorLastHea
   da3d0:	65627472 72007461 74657365 73616552     rtbeat.resetReas
   da3e0:	73006e6f 65746174 65480073 62747261     on.states.Heartb
   da3f0:	20746165 7373656d 20656761 6c6c7566     eat message full
   da400:	6572202c 6e69616d 20676e69 74617473     , remaining stat
   da410:	77207365 206c6c69 72206562 726f7065     es will be repor
   da420:	20646574 7478656e 61656820 65627472     ted next heartbe
   da430:	59007461 6120756f 69206572 7473206e     at.You are in st
   da440:	20657461 69202c30 3a656c64 6f6f4420     ate 0, idle: Doo
   da450:	74732072 73757461 4169202c 61726576     r status, iAvera
   da460:	3d206567 25783020 2c583230 00662520     ge = 0x%02X, %f.
   da470:	73206e49 65746174 202c3020 726f6f64     In state 0, door
   da480:	6f6c6320 20646573 20646e61 69656573      closed and seei
   da490:	6d20676e 6d65766f 2c746e65 61656820     ng movement, hea
   da4a0:	676e6964 206f7420 74617473 00312065     ding to state 1.
   da4b0:	20756f59 20657261 73206e69 65746174     You are in state
   da4c0:	202c3120 20733531 6e756f63 776f6474      1, 15s countdow
   da4d0:	44203a6e 20726f6f 74617473 202c7375     n: Door status, 
   da4e0:	65764169 65676172 6974202c 2072656d     iAverage, timer 
   da4f0:	7830203d 58323025 6625202c 6c25202c     = 0x%02X, %f, %l
   da500:	6f6e0064 766f6d20 6e656d65 79202c74     d.no movement, y
   da510:	7227756f 6f672065 20676e69 6b636162     ou're going back
   da520:	206f7420 74617473 20302065 6d6f7266      to state 0 from
   da530:	61747320 31206574 6f6f6400 61772072      state 1.door wa
   da540:	706f2073 64656e65 6f79202c 65722775     s opened, you're
   da550:	696f6720 6220676e 206b6361 73206f74      going back to s
   da560:	65746174 66203020 206d6f72 74617473     tate 0 from stat
   da570:	00312065 726f6f64 6f6c6320 20646573     e 1.door closed 
   da580:	6d202626 6f69746f 6f66206e 203e2072     && motion for > 
   da590:	202c7358 6e696f67 6f742067 61747320     Xs, going to sta
   da5a0:	32206574 6f726620 7473206d 31657461     te 2 from state1
   da5b0:	756f5900 65726120 206e6920 74617473     .You are in stat
   da5c0:	2c322065 72756420 6f697461 44203a6e     e 2, duration: D
   da5d0:	20726f6f 74617473 202c7375 65764169     oor status, iAve
   da5e0:	65676172 6974202c 2072656d 7830203d     rage, timer = 0x
   da5f0:	58323025 6625202c 6c25202c 65530064     %02X, %f, %ld.Se
   da600:	676e6965 69747320 656e6c6c 202c7373     eing stillness, 
   da610:	6e696f67 6f742067 61747320 5f336574     going to state3_
   da620:	6c697473 73656e6c 72662073 73206d6f     stillness from s
   da630:	65746174 75645f32 69746172 44006e6f     tate2_duration.D
   da640:	20726f6f 6e65706f 202c6465 73736573     oor opened, sess
   da650:	206e6f69 7265766f 6f67202c 20676e69     ion over, going 
   da660:	69206f74 20656c64 6d6f7266 61747320     to idle from sta
   da670:	5f326574 61727564 6e6f6974 65655300     te2_duration.See
   da680:	72756420 6f697461 6c61206e 2c747265      duration alert,
   da690:	696f6720 6620676e 206d6f72 74617473      going from stat
   da6a0:	645f3265 74617275 206e6f69 69206f74     e2_duration to i
   da6b0:	20656c64 65746661 6c612072 20747265     dle after alert 
   da6c0:	6c627570 00687369 61727544 6e6f6974     publish.Duration
   da6d0:	656c4120 21217472 72756400 6f697461      Alert!!.duratio
   da6e0:	6c61206e 00747265 61727544 6e6f6974     n alert.Duration
   da6f0:	656c4120 59007472 6120756f 69206572      Alert.You are i
   da700:	7473206e 20657461 73202c33 6c6c6974     n state 3, still
   da710:	7373656e 6f44203a 7320726f 75746174     ness: Door statu
   da720:	69202c73 72657641 2c656761 6d697420     s, iAverage, tim
   da730:	3d207265 25783020 2c583230 2c662520     er = 0x%02X, %f,
   da740:	646c2520 746f6d00 206e6f69 746f7073      %ld.motion spot
   da750:	20646574 69616761 67202c6e 676e696f     ted again, going
   da760:	6f726620 7473206d 33657461 6974735f      from state3_sti
   da770:	656e6c6c 74207373 7473206f 32657461     llness to state2
   da780:	7275645f 6f697461 6f64006e 6f20726f     _duration.door o
   da790:	656e6570 73202c64 69737365 6f206e6f     pened, session o
   da7a0:	2c726576 696f6720 6620676e 206d6f72     ver, going from 
   da7b0:	74617473 735f3365 6c6c6974 7373656e     state3_stillness
   da7c0:	206f7420 656c6469 65655300 72756420      to idle.See dur
   da7d0:	6f697461 6c61206e 2c747265 696f6720     ation alert, goi
   da7e0:	6620676e 206d6f72 74617473 74203365     ng from state3 t
   da7f0:	6469206f 6120656c 72657466 656c6120     o idle after ale
   da800:	70207472 696c6275 73006873 6c6c6974     rt publish.still
   da810:	7373656e 656c6120 202c7472 6e696f67     ness alert, goin
   da820:	72662067 73206d6f 65746174 6f742033     g from state3 to
   da830:	6c646920 66612065 20726574 6c627570      idle after publ
   da840:	00687369 6c697453 73656e6c 6c412073     ish.Stillness Al
   da850:	21747265 74730021 6e6c6c69 20737365     ert!!.stillness 
   da860:	72656c61 21212174 69745300 656e6c6c     alert!!!.Stillne
   da870:	41207373 7472656c 80a21100 00000001     ss Alert........
   da880:	00000000 16000000 64616572 54534e49     ........readINST
   da890:	61657268 72660064 20656d61 74697277     hread.frame writ
   da8a0:	206e6574 49206f74 3333534e 203a3133     ten to INS3331: 
   da8b0:	646e6573 6675625f 5d64255b 30203d20     send_buf[%d] = 0
   da8c0:	32302578 00000058                       x%02X...

000da8c8 <_ZTVN5spark13EthernetClassE>:
	...
   da8d0:	000d659f 000d6595 000d658b 000d6581     .e...e...e...e..
   da8e0:	000d6575 000d6569 000d655d 000d6555     ue..ie..]e..Ue..
   da8f0:	000d654b 000d6541 000d8e9d              Ke..Ae......

000da8fc <_ZTVSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   da904:	000d679f 000d67a5 000d6b8b 000d67b3     .g...g...k...g..
   da914:	000d67a1 69726977 622e676e 5300656c     .g..wiring.ble.S
   da924:	74726174 73696420 65766f63 676e6972     tart discovering
   da934:	72657320 65636976 53002e73 74726174      services..Start
   da944:	73696420 65766f63 676e6972 61686320      discovering cha
   da954:	74636172 73697265 73636974 6550002e     racteristics..Pe
   da964:	64207265 63697665 73692065 73696d20     er device is mis
   da974:	676e6973 61460021 64656c69 206f7420     sing!.Failed to 
   da984:	65707061 7020646e 20726565 746e6543     append peer Cent
   da994:	206c6172 69766564 002e6563 6e6e6f43     ral device..Conn
   da9a4:	65746365 79622064 6e654320 6c617274     ected by Central
   da9b4:	76656420 2e656369 73694400 6e6e6f63      device..Disconn
   da9c4:	65746365 79622064 6d657220 2065746f     ected by remote 
   da9d4:	69766564 002e6563 6e6e6143 6120746f     device..Cannot a
   da9e4:	6e206464 70207765 20726565 69766564     dd new peer devi
   da9f4:	002e6563 2077654e 69726570 72656870     ce..New peripher
   daa04:	69206c61 6f632073 63656e6e 2e646574     al is connected.
   daa14:	69614600 2064656c 61206f74 6e657070     .Failed to appen
   daa24:	69642064 766f6373 64657265 61686320     d discovered cha
   daa34:	74636172 73697265 2e636974 69614600     racteristic..Fai
   daa44:	2064656c 61206f74 6e657070 69642064     led to append di
   daa54:	766f6373 64657265 72657320 65636976     scovered service
   daa64:	6146002e 64656c69 206f7420 65707061     ..Failed to appe
   daa74:	6c20646e 6c61636f 61686320 74636172     nd local charact
   daa84:	73697265 2e636974 70754400 6163696c     eristic..Duplica
   daa94:	20646574 72616863 65746361 74736972     ted characterist
   daaa4:	63206369 6f6e6e61 65622074 64646120     ic cannot be add
   daab4:	002e6465                                ed..

000daab8 <_ZTVN5spark16JSONStreamWriterE>:
	...
   daac0:	000d7171 000d7197 000d714b 000d9015     qq...q..Kq......

000daad0 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   daad8:	000d75ed 000d7601 000d7f49 000d7153     .u...v..I...Sq..
   daae8:	64756162 72655300 006c6169 69726553     baud.Serial.Seri
   daaf8:	00316c61 65707974 72617000 63006d61     al1.type.param.c
   dab08:	6900646d 6e680064 74730064 66006d72     md.id.hnd.strm.f
   dab18:	00746c69 006c766c 48646461 6c646e61     ilt.lvl.addHandl
   dab28:	72007265 766f6d65 6e614865 72656c64     er.removeHandler
   dab38:	756e6500 6e61486d 72656c64 534a0073     .enumHandlers.JS
   dab48:	74534e4f 6d616572 48676f4c 6c646e61     ONStreamLogHandl
   dab58:	61007265 25007070 75303130 205d0020     er.app.%010u .] 
   dab68:	00642500 2800202c 00203a29 63005b20     .%d., .(): . [.c
   dab78:	2065646f 2500203d 65640069 6c696174     ode = .%i.detail
   dab88:	203d2073 000a0d00 66006e6c 6f63006e     s = ....ln.fn.co
   dab98:	64006564 69617465 6f6e006c 7400656e     de.detail.none.t
   daba8:	65636172 666e6900 6177006f 65006e72     race.info.warn.e
   dabb8:	726f7272 6e617000 61006369 00006c6c     rror.panic.all..

000dabc8 <_ZTVN5spark16StreamLogHandlerE>:
	...
   dabd0:	000d75c1 000d75d9 000d7d95 000d45bf     .u...u...}...E..

000dabe0 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   dabe8:	000d716f 000d71a5 000d7cbd 000d7155     oq...q...|..Uq..

000dabf8 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   dac00:	000d716d 000d71b3 000d7505 000d71c1     mq...q...u...q..
   dac10:	2b25005a 3a643330 75323025 2d592500     Z.%+03d:%02u.%Y-
   dac20:	252d6d25 48255464 3a4d253a 7a255325     %m-%dT%H:%M:%S%z
   dac30:	63736100 656d6974 00000000              .asctime....

000dac3c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dac44:	000d8245 000d824b 000d828f 000d8259     E...K.......Y...
   dac54:	000d8247                                G...

000dac58 <_ZTV9IPAddress>:
	...
   dac60:	000d883d 000d882d 000d882f              =...-.../...

000dac6c <_ZTV9USBSerial>:
	...
   dac74:	000d8915 000d8965 000d8973 000d702d     ....e...s...-p..
   dac84:	000d8951 000d8917 000d892d 000d895f     Q.......-..._...
   dac94:	000d8943 000d8911                       C.......

000dac9c <_ZTVN5spark13CellularClassE>:
	...
   daca4:	000d8a87 000d8a7d 000d8a73 000d8a29     ....}...s...)...
   dacb4:	000d8a67 000d8a5b 000d8a4f 000d8a47     g...[...O...G...
   dacc4:	000d8a3d 000d8a33 000d8e9d              =...3.......

000dacd0 <_ZTV11USARTSerial>:
	...
   dacd8:	000d8ac1 000d8b11 000d8b1f 000d702d     ............-p..
   dace8:	000d8ad5 000d8af7 000d8ae3 000d8b0b     ................
   dacf8:	000d8ac3 000d8ac7                       ........

000dad00 <_ZTV7TwoWire>:
	...
   dad08:	000d8c35 000d8c7f 000d8c57 000d8c37     5.......W...7...
   dad18:	000d8c5f 000d8c67 000d8c6f 000d8c77     _...g...o...w...

000dad28 <_ZTVN5spark9MeshClassE>:
	...
   dad30:	000d8d17 000d8d0d 000d8d03 000d8cf9     ................
   dad40:	000d8ced 000d8ce1 000d8cd5 000d8ccd     ................
   dad50:	000d8cc3 000d8cb9 000d8e9d              ............

000dad5c <_ZTVN5spark12NetworkClassE>:
	...
   dad64:	000d8e35 000d8e3f 000d8e49 000d8e53     5...?...I...S...
   dad74:	000d8e5d 000d8e69 000d8e75 000d8e81     ]...i...u.......
   dad84:	000d8e89 000d8e93 000d8e9d              ............

000dad90 <_ZTVN5spark16JSONBufferWriterE>:
	...
   dad98:	000d8fab 000d8fad 000d8fbb 000d8fe1     ................
   dada8:	00302e30 736c6166 72740065 25006575     0.0.false.true.%
   dadb8:	2e250075 00666c2a 6e006725 006c6c75     u.%.*lf.%g.null.
   dadc8:	34302575 00000078                                u%04x.

000dadce <_ZSt7nothrow>:
	...

000dadcf <_ctype_>:
   dadcf:	20202000 20202020 28282020 20282828     .         ((((( 
   daddf:	20202020 20202020 20202020 20202020                     
   dadef:	10108820 10101010 10101010 10101010      ...............
   dadff:	04040410 04040404 10040404 10101010     ................
   dae0f:	41411010 41414141 01010101 01010101     ..AAAAAA........
   dae1f:	01010101 01010101 01010101 10101010     ................
   dae2f:	42421010 42424242 02020202 02020202     ..BBBBBB........
   dae3f:	02020202 02020202 02020202 10101010     ................
   dae4f:	00000020 00000000 00000000 00000000      ...............
	...

000daed0 <__sf_fake_stdin>:
	...

000daef0 <__sf_fake_stdout>:
	...

000daf10 <__sf_fake_stderr>:
	...

000daf30 <link_const_variable_data_end>:
   daf30:	000d41a5 	.word	0x000d41a5
   daf34:	000d459d 	.word	0x000d459d
   daf38:	000d4789 	.word	0x000d4789
   daf3c:	000d4ba1 	.word	0x000d4ba1
   daf40:	000d5a01 	.word	0x000d5a01
   daf44:	000d5ef9 	.word	0x000d5ef9
   daf48:	000d65a9 	.word	0x000d65a9
   daf4c:	000d65f5 	.word	0x000d65f5
   daf50:	000d7005 	.word	0x000d7005
   daf54:	000d7d85 	.word	0x000d7d85
   daf58:	000d80c1 	.word	0x000d80c1
   daf5c:	000d8119 	.word	0x000d8119
   daf60:	000d8a91 	.word	0x000d8a91
   daf64:	000d8de5 	.word	0x000d8de5
   daf68:	000d8f69 	.word	0x000d8f69
   daf6c:	000d95b5 	.word	0x000d95b5
   daf70:	000d9639 	.word	0x000d9639
   daf74:	000d96fd 	.word	0x000d96fd
   daf78:	000d97c1 	.word	0x000d97c1

000daf7c <link_constructors_end>:
   daf7c:	00000000 	.word	0x00000000
