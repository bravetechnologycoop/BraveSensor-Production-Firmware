
c:/School/CO-OP/slp/sound-light-prototype/target/2.0.1/argon/sound-light-prototype.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003674  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d7690  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000074  2003e66c  000d7694  0001e66c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000110  2003e6e0  2003e6e0  0002e6e0  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d7708  000d7708  00027708  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d7730  000d7730  00027730  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00150039  00000000  00000000  00027734  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00016fbb  00000000  00000000  0017776d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002cc92  00000000  00000000  0018e728  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002918  00000000  00000000  001bb3ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000079c8  00000000  00000000  001bdcd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00038525  00000000  00000000  001c569a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0003849b  00000000  00000000  001fdbbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010b218  00000000  00000000  0023605a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00007068  00000000  00000000  00341274  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 ffc3 	bl	d6fb8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 ffe5 	bl	d7008 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e66c 	.word	0x2003e66c
   d4048:	000d7694 	.word	0x000d7694
   d404c:	2003e6e0 	.word	0x2003e6e0
   d4050:	2003e6e0 	.word	0x2003e6e0
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f001 ff2b 	bl	d5eb8 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d7668 	.word	0x000d7668
   d407c:	000d768c 	.word	0x000d768c

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b998 	b.w	d43b4 <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f92d 	bl	d42e4 <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f001 bed5 	b.w	d5e3c <_post_loop>

000d4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4092:	f000 bcc3 	b.w	d4a1c <malloc>

000d4096 <_Znaj>:
   d4096:	f000 bcc1 	b.w	d4a1c <malloc>

000d409a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409a:	f000 bcc7 	b.w	d4a2c <free>
	...

000d40a0 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a2:	4a03      	ldr	r2, [pc, #12]	; (d40b0 <__cxa_pure_virtual+0x10>)
   d40a4:	2100      	movs	r1, #0
   d40a6:	200c      	movs	r0, #12
   d40a8:	f000 fbf4 	bl	d4894 <panic_>
  while (1);
   d40ac:	e7fe      	b.n	d40ac <__cxa_pure_virtual+0xc>
   d40ae:	bf00      	nop
   d40b0:	000d4605 	.word	0x000d4605

000d40b4 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b4:	7800      	ldrb	r0, [r0, #0]
   d40b6:	fab0 f080 	clz	r0, r0
   d40ba:	0940      	lsrs	r0, r0, #5
   d40bc:	4770      	bx	lr

000d40be <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40be:	2301      	movs	r3, #1
   d40c0:	7003      	strb	r3, [r0, #0]
   d40c2:	4770      	bx	lr

000d40c4 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   d40c4:	4770      	bx	lr

000d40c6 <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   d40c6:	6a00      	ldr	r0, [r0, #32]
   d40c8:	6803      	ldr	r3, [r0, #0]
   d40ca:	68db      	ldr	r3, [r3, #12]
   d40cc:	4718      	bx	r3

000d40ce <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d40ce:	6803      	ldr	r3, [r0, #0]
   d40d0:	4718      	bx	r3

000d40d2 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	  switch (__op)
   d40d2:	2a01      	cmp	r2, #1
   d40d4:	d003      	beq.n	d40de <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xc>
   d40d6:	2a02      	cmp	r2, #2
   d40d8:	d003      	beq.n	d40e2 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x10>
	}
   d40da:	2000      	movs	r0, #0
   d40dc:	4770      	bx	lr
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d40de:	6001      	str	r1, [r0, #0]
	      break;
   d40e0:	e7fb      	b.n	d40da <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d40e2:	680b      	ldr	r3, [r1, #0]
   d40e4:	6003      	str	r3, [r0, #0]
	}
   d40e6:	e7f8      	b.n	d40da <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>

000d40e8 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   d40e8:	6943      	ldr	r3, [r0, #20]
   d40ea:	b113      	cbz	r3, d40f2 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d40ec:	6983      	ldr	r3, [r0, #24]
   d40ee:	300c      	adds	r0, #12
   d40f0:	4718      	bx	r3
            callback();
        }
    }
   d40f2:	4770      	bx	lr

000d40f4 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   d40f4:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d40f6:	2100      	movs	r1, #0
   d40f8:	4604      	mov	r4, r0
   d40fa:	4608      	mov	r0, r1
   d40fc:	f000 fa9a 	bl	d4634 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d4100:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   d4102:	4620      	mov	r0, r4
   d4104:	a901      	add	r1, sp, #4
            void* id = nullptr;
   d4106:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   d4108:	f000 faac 	bl	d4664 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   d410c:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   d410e:	b10c      	cbz	r4, d4114 <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   d4110:	2301      	movs	r3, #1
   d4112:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d4114:	2100      	movs	r1, #0
   d4116:	2001      	movs	r0, #1
   d4118:	f000 fa8c 	bl	d4634 <os_thread_scheduling>
            }
        }
        if (t) {
   d411c:	b12c      	cbz	r4, d412a <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   d411e:	6823      	ldr	r3, [r4, #0]
   d4120:	4620      	mov	r0, r4
   d4122:	689b      	ldr	r3, [r3, #8]
   d4124:	4798      	blx	r3
            t->running = false;
   d4126:	2300      	movs	r3, #0
   d4128:	7123      	strb	r3, [r4, #4]
        }
    }
   d412a:	b002      	add	sp, #8
   d412c:	bd10      	pop	{r4, pc}

000d412e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d412e:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d4130:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4132:	4604      	mov	r4, r0
          _M_dispose();
   d4134:	689b      	ldr	r3, [r3, #8]
   d4136:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4138:	68a3      	ldr	r3, [r4, #8]
   d413a:	3b01      	subs	r3, #1
   d413c:	60a3      	str	r3, [r4, #8]
   d413e:	b92b      	cbnz	r3, d414c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d4140:	6823      	ldr	r3, [r4, #0]
   d4142:	4620      	mov	r0, r4
   d4144:	68db      	ldr	r3, [r3, #12]
        }
    }
   d4146:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d414a:	4718      	bx	r3
    }
   d414c:	bd10      	pop	{r4, pc}
	...

000d4150 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d4150:	4b0a      	ldr	r3, [pc, #40]	; (d417c <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   d4152:	b510      	push	{r4, lr}
   d4154:	4604      	mov	r4, r0
   d4156:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d4158:	f000 ffa6 	bl	d50a8 <_ZN5spark10LogManager8instanceEv>
   d415c:	4621      	mov	r1, r4
   d415e:	f001 f9a8 	bl	d54b2 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   d4162:	f002 fa4d 	bl	d6600 <_Z16_fetch_usbserialv>
   d4166:	f002 fa3f 	bl	d65e8 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   d416a:	4620      	mov	r0, r4
   d416c:	4b04      	ldr	r3, [pc, #16]	; (d4180 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   d416e:	f840 3b04 	str.w	r3, [r0], #4
   d4172:	f001 f88b 	bl	d528c <_ZN5spark6detail9LogFilterD1Ev>
    }
   d4176:	4620      	mov	r0, r4
   d4178:	bd10      	pop	{r4, pc}
   d417a:	bf00      	nop
   d417c:	000d72ec 	.word	0x000d72ec
   d4180:	000d72d4 	.word	0x000d72d4

000d4184 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   d4184:	b510      	push	{r4, lr}
   d4186:	4604      	mov	r4, r0
    }
   d4188:	f7ff ffe2 	bl	d4150 <_ZN5spark16SerialLogHandlerD1Ev>
   d418c:	4620      	mov	r0, r4
   d418e:	2124      	movs	r1, #36	; 0x24
   d4190:	f002 fefb 	bl	d6f8a <_ZdlPvj>
   d4194:	4620      	mov	r0, r4
   d4196:	bd10      	pop	{r4, pc}

000d4198 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d4198:	b510      	push	{r4, lr}
      if (_M_manager)
   d419a:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d419c:	4604      	mov	r4, r0
      if (_M_manager)
   d419e:	b113      	cbz	r3, d41a6 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d41a0:	2203      	movs	r2, #3
   d41a2:	4601      	mov	r1, r0
   d41a4:	4798      	blx	r3
    }
   d41a6:	4620      	mov	r0, r4
   d41a8:	bd10      	pop	{r4, pc}

000d41aa <_ZN5Timer5_stopEjb>:
    bool _stop(unsigned block, bool fromISR=false)
   d41aa:	b507      	push	{r0, r1, r2, lr}
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   d41ac:	6880      	ldr	r0, [r0, #8]
   d41ae:	2300      	movs	r3, #0
   d41b0:	b138      	cbz	r0, d41c2 <_ZN5Timer5_stopEjb+0x18>
   d41b2:	e9cd 1300 	strd	r1, r3, [sp]
   d41b6:	2102      	movs	r1, #2
   d41b8:	f000 fa5c 	bl	d4674 <os_timer_change>
   d41bc:	fab0 f080 	clz	r0, r0
   d41c0:	0940      	lsrs	r0, r0, #5
    }
   d41c2:	b003      	add	sp, #12
   d41c4:	f85d fb04 	ldr.w	pc, [sp], #4

000d41c8 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   d41c8:	b538      	push	{r3, r4, r5, lr}
   d41ca:	4b10      	ldr	r3, [pc, #64]	; (d420c <_ZN5TimerD1Ev+0x44>)
   d41cc:	6003      	str	r3, [r0, #0]
        if (handle) {
   d41ce:	6883      	ldr	r3, [r0, #8]
    virtual ~Timer() {
   d41d0:	4604      	mov	r4, r0
        if (handle) {
   d41d2:	b1a3      	cbz	r3, d41fe <_ZN5TimerD1Ev+0x36>
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d41d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d41d8:	2200      	movs	r2, #0
   d41da:	f7ff ffe6 	bl	d41aa <_ZN5Timer5_stopEjb>
            os_timer_set_id(handle, nullptr);
   d41de:	68a0      	ldr	r0, [r4, #8]
   d41e0:	2100      	movs	r1, #0
   d41e2:	f000 fa6f 	bl	d46c4 <os_timer_set_id>
            while (running) {
   d41e6:	7923      	ldrb	r3, [r4, #4]
   d41e8:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d41ec:	b113      	cbz	r3, d41f4 <_ZN5TimerD1Ev+0x2c>
                os_thread_yield();
   d41ee:	f000 fa19 	bl	d4624 <os_thread_yield>
            while (running) {
   d41f2:	e7f8      	b.n	d41e6 <_ZN5TimerD1Ev+0x1e>
            os_timer_destroy(handle, nullptr);
   d41f4:	68a0      	ldr	r0, [r4, #8]
   d41f6:	4629      	mov	r1, r5
   d41f8:	f000 fa2c 	bl	d4654 <os_timer_destroy>
            handle = nullptr;
   d41fc:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   d41fe:	f104 000c 	add.w	r0, r4, #12
   d4202:	f7ff ffc9 	bl	d4198 <_ZNSt14_Function_baseD1Ev>
    }
   d4206:	4620      	mov	r0, r4
   d4208:	bd38      	pop	{r3, r4, r5, pc}
   d420a:	bf00      	nop
   d420c:	000d72c0 	.word	0x000d72c0

000d4210 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   d4210:	b510      	push	{r4, lr}
   d4212:	4604      	mov	r4, r0
    }
   d4214:	f7ff ffd8 	bl	d41c8 <_ZN5TimerD1Ev>
   d4218:	4620      	mov	r0, r4
   d421a:	211c      	movs	r1, #28
   d421c:	f002 feb5 	bl	d6f8a <_ZdlPvj>
   d4220:	4620      	mov	r0, r4
   d4222:	bd10      	pop	{r4, pc}

000d4224 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d4224:	b40e      	push	{r1, r2, r3}
   d4226:	b510      	push	{r4, lr}
   d4228:	b08d      	sub	sp, #52	; 0x34
   d422a:	aa0f      	add	r2, sp, #60	; 0x3c
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
   d422c:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::info(const char *fmt, ...) const {
   d422e:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d4232:	9203      	str	r2, [sp, #12]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d4234:	2300      	movs	r3, #0
   d4236:	2020      	movs	r0, #32
   d4238:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d423c:	e9cd 4200 	strd	r4, r2, [sp]
   d4240:	201e      	movs	r0, #30
   d4242:	aa04      	add	r2, sp, #16
   d4244:	f000 fb2e 	bl	d48a4 <log_message_v>
}
   d4248:	b00d      	add	sp, #52	; 0x34
   d424a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d424e:	b003      	add	sp, #12
   d4250:	4770      	bx	lr
	...

000d4254 <_Z11buttonPressv>:
    loop();
    return 1;
}

// ends alert session, sends publish message to cloud
void buttonPress() {
   d4254:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    Log.info("Button pressed!");
   d4256:	490d      	ldr	r1, [pc, #52]	; (d428c <_Z11buttonPressv+0x38>)
   d4258:	480d      	ldr	r0, [pc, #52]	; (d4290 <_Z11buttonPressv+0x3c>)
   d425a:	f7ff ffe3 	bl	d4224 <_ZNK5spark6Logger4infoEPKcz>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d425e:	4b0d      	ldr	r3, [pc, #52]	; (d4294 <_Z11buttonPressv+0x40>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4260:	490d      	ldr	r1, [pc, #52]	; (d4298 <_Z11buttonPressv+0x44>)
   d4262:	781b      	ldrb	r3, [r3, #0]
   d4264:	f88d 3000 	strb.w	r3, [sp]
   d4268:	a802      	add	r0, sp, #8
   d426a:	233c      	movs	r3, #60	; 0x3c
   d426c:	2200      	movs	r2, #0
   d426e:	f001 ff7f 	bl	d6170 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4272:	9803      	ldr	r0, [sp, #12]
   d4274:	b128      	cbz	r0, d4282 <_Z11buttonPressv+0x2e>
      if (--_M_use_count == 0)
   d4276:	6843      	ldr	r3, [r0, #4]
   d4278:	3b01      	subs	r3, #1
   d427a:	6043      	str	r3, [r0, #4]
   d427c:	b90b      	cbnz	r3, d4282 <_Z11buttonPressv+0x2e>
   d427e:	f7ff ff56 	bl	d412e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
    Particle.publish("button-pressed", PRIVATE);
    digitalWrite(BUZZER, LOW);
   d4282:	2100      	movs	r1, #0
   d4284:	2006      	movs	r0, #6
   d4286:	f002 fe22 	bl	d6ece <digitalWrite>
    while(1);
   d428a:	e7fe      	b.n	d428a <_Z11buttonPressv+0x36>
   d428c:	000d7268 	.word	0x000d7268
   d4290:	2003e734 	.word	0x2003e734
   d4294:	2003e6e4 	.word	0x2003e6e4
   d4298:	000d7278 	.word	0x000d7278

000d429c <_Z14timerSurpassedv>:
}

void timerSurpassed() {
   d429c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    Log.info("Timer surpassed!");
   d429e:	490d      	ldr	r1, [pc, #52]	; (d42d4 <_Z14timerSurpassedv+0x38>)
   d42a0:	480d      	ldr	r0, [pc, #52]	; (d42d8 <_Z14timerSurpassedv+0x3c>)
   d42a2:	f7ff ffbf 	bl	d4224 <_ZNK5spark6Logger4infoEPKcz>
   d42a6:	4b0d      	ldr	r3, [pc, #52]	; (d42dc <_Z14timerSurpassedv+0x40>)
   d42a8:	490d      	ldr	r1, [pc, #52]	; (d42e0 <_Z14timerSurpassedv+0x44>)
   d42aa:	781b      	ldrb	r3, [r3, #0]
   d42ac:	f88d 3000 	strb.w	r3, [sp]
   d42b0:	a802      	add	r0, sp, #8
   d42b2:	233c      	movs	r3, #60	; 0x3c
   d42b4:	2200      	movs	r2, #0
   d42b6:	f001 ff5b 	bl	d6170 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	if (_M_pi != nullptr)
   d42ba:	9803      	ldr	r0, [sp, #12]
   d42bc:	b128      	cbz	r0, d42ca <_Z14timerSurpassedv+0x2e>
      if (--_M_use_count == 0)
   d42be:	6843      	ldr	r3, [r0, #4]
   d42c0:	3b01      	subs	r3, #1
   d42c2:	6043      	str	r3, [r0, #4]
   d42c4:	b90b      	cbnz	r3, d42ca <_Z14timerSurpassedv+0x2e>
   d42c6:	f7ff ff32 	bl	d412e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
    Particle.publish("timer-surpassed", PRIVATE);
    digitalWrite(BUZZER, LOW);
   d42ca:	2100      	movs	r1, #0
   d42cc:	2006      	movs	r0, #6
   d42ce:	f002 fdfe 	bl	d6ece <digitalWrite>
    while(1);
   d42d2:	e7fe      	b.n	d42d2 <_Z14timerSurpassedv+0x36>
   d42d4:	000d7287 	.word	0x000d7287
   d42d8:	2003e734 	.word	0x2003e734
   d42dc:	2003e6e4 	.word	0x2003e6e4
   d42e0:	000d7298 	.word	0x000d7298

000d42e4 <loop>:
}
   d42e4:	4770      	bx	lr
	...

000d42e8 <_Z3runv>:
int run() {
   d42e8:	b530      	push	{r4, r5, lr}
   d42ea:	b091      	sub	sp, #68	; 0x44
    attachInterrupt(BUTTON, buttonPress, RISING);
   d42ec:	2400      	movs	r4, #0
   d42ee:	4928      	ldr	r1, [pc, #160]	; (d4390 <_Z3runv+0xa8>)
   d42f0:	9400      	str	r4, [sp, #0]
   d42f2:	f04f 33ff 	mov.w	r3, #4294967295
   d42f6:	2201      	movs	r2, #1
   d42f8:	2008      	movs	r0, #8
   d42fa:	f002 f9ad 	bl	d6658 <_Z15attachInterrupttPFvvE13InterruptModeah>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d42fe:	4b25      	ldr	r3, [pc, #148]	; (d4394 <_Z3runv+0xac>)
   d4300:	9305      	str	r3, [sp, #20]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4302:	ad05      	add	r5, sp, #20
   d4304:	e895 0003 	ldmia.w	r5, {r0, r1}
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d4308:	4b23      	ldr	r3, [pc, #140]	; (d4398 <_Z3runv+0xb0>)
   d430a:	9309      	str	r3, [sp, #36]	; 0x24
   d430c:	aa03      	add	r2, sp, #12
      __a = _GLIBCXX_MOVE(__b);
   d430e:	ab0c      	add	r3, sp, #48	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4310:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4314:	e893 0003 	ldmia.w	r3, {r0, r1}
   d4318:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d431c:	e892 0003 	ldmia.w	r2, {r0, r1}
   d4320:	e883 0003 	stmia.w	r3, {r0, r1}
   d4324:	4b1d      	ldr	r3, [pc, #116]	; (d439c <_Z3runv+0xb4>)
   d4326:	930e      	str	r3, [sp, #56]	; 0x38
      __a = _GLIBCXX_MOVE(__b);
   d4328:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d432a:	9308      	str	r3, [sp, #32]
      __b = _GLIBCXX_MOVE(__tmp);
   d432c:	4b1c      	ldr	r3, [pc, #112]	; (d43a0 <_Z3runv+0xb8>)
   d432e:	930f      	str	r3, [sp, #60]	; 0x3c
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d4330:	491c      	ldr	r1, [pc, #112]	; (d43a4 <_Z3runv+0xbc>)
   d4332:	9401      	str	r4, [sp, #4]
   d4334:	2301      	movs	r3, #1
   d4336:	9300      	str	r3, [sp, #0]
   d4338:	4a1b      	ldr	r2, [pc, #108]	; (d43a8 <_Z3runv+0xc0>)
   d433a:	6809      	ldr	r1, [r1, #0]
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d433c:	f88d 4028 	strb.w	r4, [sp, #40]	; 0x28
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d4340:	ab09      	add	r3, sp, #36	; 0x24
   d4342:	a80b      	add	r0, sp, #44	; 0x2c
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d4344:	940b      	str	r4, [sp, #44]	; 0x2c
      __a = _GLIBCXX_MOVE(__b);
   d4346:	9407      	str	r4, [sp, #28]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d4348:	f000 f97c 	bl	d4644 <os_timer_create>
    class function<_Res(_ArgTypes...)>
   d434c:	4628      	mov	r0, r5
   d434e:	f7ff ff23 	bl	d4198 <_ZNSt14_Function_baseD1Ev>
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d4352:	4622      	mov	r2, r4
   d4354:	4621      	mov	r1, r4
   d4356:	a809      	add	r0, sp, #36	; 0x24
   d4358:	f7ff ff27 	bl	d41aa <_ZN5Timer5_stopEjb>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   d435c:	980b      	ldr	r0, [sp, #44]	; 0x2c
   d435e:	b140      	cbz	r0, d4372 <_Z3runv+0x8a>
   d4360:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   d4364:	9300      	str	r3, [sp, #0]
   d4366:	9401      	str	r4, [sp, #4]
   d4368:	4623      	mov	r3, r4
   d436a:	4622      	mov	r2, r4
   d436c:	4621      	mov	r1, r4
   d436e:	f000 f981 	bl	d4674 <os_timer_change>
    digitalWrite(BUZZER, HIGH);
   d4372:	2101      	movs	r1, #1
   d4374:	2006      	movs	r0, #6
   d4376:	f002 fdaa 	bl	d6ece <digitalWrite>
    Log.info("Running!");
   d437a:	490c      	ldr	r1, [pc, #48]	; (d43ac <_Z3runv+0xc4>)
   d437c:	480c      	ldr	r0, [pc, #48]	; (d43b0 <_Z3runv+0xc8>)
   d437e:	f7ff ff51 	bl	d4224 <_ZNK5spark6Logger4infoEPKcz>
    Timer timer(timeout, timerSurpassed, true);
   d4382:	a809      	add	r0, sp, #36	; 0x24
   d4384:	f7ff ff20 	bl	d41c8 <_ZN5TimerD1Ev>
}
   d4388:	2001      	movs	r0, #1
   d438a:	b011      	add	sp, #68	; 0x44
   d438c:	bd30      	pop	{r4, r5, pc}
   d438e:	bf00      	nop
   d4390:	000d4255 	.word	0x000d4255
   d4394:	000d429d 	.word	0x000d429d
   d4398:	000d72c0 	.word	0x000d72c0
   d439c:	000d40d3 	.word	0x000d40d3
   d43a0:	000d40cf 	.word	0x000d40cf
   d43a4:	2003e66c 	.word	0x2003e66c
   d43a8:	000d40f5 	.word	0x000d40f5
   d43ac:	000d72a8 	.word	0x000d72a8
   d43b0:	2003e734 	.word	0x2003e734

000d43b4 <setup>:
void setup() {
   d43b4:	b508      	push	{r3, lr}
    Particle.publishVitals(60);
   d43b6:	213c      	movs	r1, #60	; 0x3c
   d43b8:	480b      	ldr	r0, [pc, #44]	; (d43e8 <setup+0x34>)
   d43ba:	f001 fdf4 	bl	d5fa6 <_ZN10CloudClass13publishVitalsEm>
    pinMode(BUZZER, OUTPUT);
   d43be:	2101      	movs	r1, #1
   d43c0:	2006      	movs	r0, #6
   d43c2:	f002 fd73 	bl	d6eac <pinMode>
    pinMode(BUTTON, INPUT);
   d43c6:	2100      	movs	r1, #0
   d43c8:	2008      	movs	r0, #8
   d43ca:	f002 fd6f 	bl	d6eac <pinMode>
    delay(5000);
   d43ce:	f241 3088 	movw	r0, #5000	; 0x1388
   d43d2:	f001 fce7 	bl	d5da4 <delay>
    Log.info("Setup!");
   d43d6:	4905      	ldr	r1, [pc, #20]	; (d43ec <setup+0x38>)
   d43d8:	4805      	ldr	r0, [pc, #20]	; (d43f0 <setup+0x3c>)
   d43da:	f7ff ff23 	bl	d4224 <_ZNK5spark6Logger4infoEPKcz>
}
   d43de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    run();
   d43e2:	f7ff bf81 	b.w	d42e8 <_Z3runv>
   d43e6:	bf00      	nop
   d43e8:	2003e7d4 	.word	0x2003e7d4
   d43ec:	000d72b1 	.word	0x000d72b1
   d43f0:	2003e734 	.word	0x2003e734

000d43f4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d43f4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d43f6:	e9d0 5300 	ldrd	r5, r3, [r0]
   d43fa:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d43fc:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d43fe:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d4402:	42ae      	cmp	r6, r5
   d4404:	d004      	beq.n	d4410 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   d4406:	4628      	mov	r0, r5
   d4408:	f000 fbb6 	bl	d4b78 <_ZN6StringD1Ev>
   d440c:	3514      	adds	r5, #20
   d440e:	e7f8      	b.n	d4402 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d4410:	6820      	ldr	r0, [r4, #0]
   d4412:	f000 fb0b 	bl	d4a2c <free>
    AllocatorT::free(data_);
}
   d4416:	4620      	mov	r0, r4
   d4418:	bd70      	pop	{r4, r5, r6, pc}

000d441a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d441a:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d441c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d441e:	4604      	mov	r4, r0
   d4420:	460d      	mov	r5, r1
   d4422:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d4424:	d916      	bls.n	d4454 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   d4426:	4290      	cmp	r0, r2
   d4428:	d215      	bcs.n	d4456 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   d442a:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   d442e:	1a75      	subs	r5, r6, r1
   d4430:	f1a1 0714 	sub.w	r7, r1, #20
   d4434:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d4436:	42b7      	cmp	r7, r6
   d4438:	d01c      	beq.n	d4474 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   d443a:	b12c      	cbz	r4, d4448 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   d443c:	4631      	mov	r1, r6
   d443e:	4620      	mov	r0, r4
   d4440:	f000 fc02 	bl	d4c48 <_ZN6StringC1EOS_>
   d4444:	7c33      	ldrb	r3, [r6, #16]
   d4446:	7423      	strb	r3, [r4, #16]
   d4448:	4630      	mov	r0, r6
   d444a:	f000 fb95 	bl	d4b78 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d444e:	3e14      	subs	r6, #20
   d4450:	3c14      	subs	r4, #20
   d4452:	e7f0      	b.n	d4436 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d4454:	d00e      	beq.n	d4474 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   d4456:	42b5      	cmp	r5, r6
   d4458:	d00c      	beq.n	d4474 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   d445a:	b12c      	cbz	r4, d4468 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   d445c:	4629      	mov	r1, r5
   d445e:	4620      	mov	r0, r4
   d4460:	f000 fbf2 	bl	d4c48 <_ZN6StringC1EOS_>
   d4464:	7c2b      	ldrb	r3, [r5, #16]
   d4466:	7423      	strb	r3, [r4, #16]
   d4468:	4628      	mov	r0, r5
   d446a:	f000 fb85 	bl	d4b78 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d446e:	3514      	adds	r5, #20
   d4470:	3414      	adds	r4, #20
   d4472:	e7f0      	b.n	d4456 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   d4474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4476 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d4476:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   d447a:	2300      	movs	r3, #0
   d447c:	e9c0 3300 	strd	r3, r3, [r0]
   d4480:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d4482:	684f      	ldr	r7, [r1, #4]
   d4484:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d4486:	4604      	mov	r4, r0
   d4488:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d448a:	dd23      	ble.n	d44d4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   d448c:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   d4490:	fb08 f007 	mul.w	r0, r8, r7
   d4494:	f000 fac2 	bl	d4a1c <malloc>
            if (!d) {
   d4498:	4605      	mov	r5, r0
   d449a:	b1d8      	cbz	r0, d44d4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   d449c:	e9d4 1200 	ldrd	r1, r2, [r4]
   d44a0:	fb08 1202 	mla	r2, r8, r2, r1
   d44a4:	f7ff ffb9 	bl	d441a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d44a8:	6820      	ldr	r0, [r4, #0]
   d44aa:	f000 fabf 	bl	d4a2c <free>
        data_ = d;
   d44ae:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d44b0:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d44b2:	e9d6 7300 	ldrd	r7, r3, [r6]
   d44b6:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   d44ba:	45b8      	cmp	r8, r7
   d44bc:	d008      	beq.n	d44d0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   d44be:	4639      	mov	r1, r7
   d44c0:	4628      	mov	r0, r5
   d44c2:	f000 fbdb 	bl	d4c7c <_ZN6StringC1ERKS_>
   d44c6:	7c3b      	ldrb	r3, [r7, #16]
   d44c8:	742b      	strb	r3, [r5, #16]
   d44ca:	3714      	adds	r7, #20
   d44cc:	3514      	adds	r5, #20
   d44ce:	e7f4      	b.n	d44ba <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   d44d0:	6873      	ldr	r3, [r6, #4]
   d44d2:	6063      	str	r3, [r4, #4]
}
   d44d4:	4620      	mov	r0, r4
   d44d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d44dc <_GLOBAL__sub_I_timeout>:
}
   d44dc:	b570      	push	{r4, r5, r6, lr}
        val_(val) {
   d44de:	4b22      	ldr	r3, [pc, #136]	; (d4568 <_GLOBAL__sub_I_timeout+0x8c>)
        filter_(level, filters) {
   d44e0:	4c22      	ldr	r4, [pc, #136]	; (d456c <_GLOBAL__sub_I_timeout+0x90>)
   d44e2:	b08c      	sub	sp, #48	; 0x30
   d44e4:	2201      	movs	r2, #1
   d44e6:	701a      	strb	r2, [r3, #0]
        capacity_(0) {
   d44e8:	2300      	movs	r3, #0
   d44ea:	e9cd 3300 	strd	r3, r3, [sp]
   d44ee:	9302      	str	r3, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   d44f0:	f002 f886 	bl	d6600 <_Z16_fetch_usbserialv>
   d44f4:	4669      	mov	r1, sp
   d44f6:	4605      	mov	r5, r0
   d44f8:	a803      	add	r0, sp, #12
   d44fa:	f7ff ffbc 	bl	d4476 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d44fe:	4626      	mov	r6, r4
        stream_(&stream) {
   d4500:	a903      	add	r1, sp, #12
   d4502:	a806      	add	r0, sp, #24
   d4504:	f7ff ffb7 	bl	d4476 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   d4508:	4b19      	ldr	r3, [pc, #100]	; (d4570 <_GLOBAL__sub_I_timeout+0x94>)
   d450a:	f846 3b04 	str.w	r3, [r6], #4
   d450e:	a906      	add	r1, sp, #24
   d4510:	a809      	add	r0, sp, #36	; 0x24
   d4512:	f7ff ffb0 	bl	d4476 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d4516:	aa09      	add	r2, sp, #36	; 0x24
   d4518:	211e      	movs	r1, #30
   d451a:	4630      	mov	r0, r6
   d451c:	f001 f91c 	bl	d5758 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d4520:	a809      	add	r0, sp, #36	; 0x24
   d4522:	f7ff ff67 	bl	d43f4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   d4526:	a806      	add	r0, sp, #24
   d4528:	f7ff ff64 	bl	d43f4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d452c:	4b11      	ldr	r3, [pc, #68]	; (d4574 <_GLOBAL__sub_I_timeout+0x98>)
   d452e:	6023      	str	r3, [r4, #0]
   d4530:	a803      	add	r0, sp, #12
   d4532:	6225      	str	r5, [r4, #32]
   d4534:	f7ff ff5e 	bl	d43f4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d4538:	4b0f      	ldr	r3, [pc, #60]	; (d4578 <_GLOBAL__sub_I_timeout+0x9c>)
   d453a:	6023      	str	r3, [r4, #0]
        Serial.begin();
   d453c:	f002 f860 	bl	d6600 <_Z16_fetch_usbserialv>
   d4540:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4544:	f002 f84c 	bl	d65e0 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   d4548:	f000 fdae 	bl	d50a8 <_ZN5spark10LogManager8instanceEv>
   d454c:	4621      	mov	r1, r4
   d454e:	f001 f895 	bl	d567c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);
   d4552:	4668      	mov	r0, sp
   d4554:	f7ff ff4e 	bl	d43f4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d4558:	4a08      	ldr	r2, [pc, #32]	; (d457c <_GLOBAL__sub_I_timeout+0xa0>)
   d455a:	4909      	ldr	r1, [pc, #36]	; (d4580 <_GLOBAL__sub_I_timeout+0xa4>)
   d455c:	4620      	mov	r0, r4
   d455e:	f002 fd0f 	bl	d6f80 <__aeabi_atexit>
}
   d4562:	b00c      	add	sp, #48	; 0x30
   d4564:	bd70      	pop	{r4, r5, r6, pc}
   d4566:	bf00      	nop
   d4568:	2003e6e4 	.word	0x2003e6e4
   d456c:	2003e6e8 	.word	0x2003e6e8
   d4570:	000d72d4 	.word	0x000d72d4
   d4574:	000d73c8 	.word	0x000d73c8
   d4578:	000d72ec 	.word	0x000d72ec
   d457c:	2003e6e0 	.word	0x2003e6e0
   d4580:	000d4151 	.word	0x000d4151

000d4584 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4584:	b508      	push	{r3, lr}
   d4586:	4b02      	ldr	r3, [pc, #8]	; (d4590 <netdb_freeaddrinfo+0xc>)
   d4588:	681b      	ldr	r3, [r3, #0]
   d458a:	689b      	ldr	r3, [r3, #8]
   d458c:	9301      	str	r3, [sp, #4]
   d458e:	bd08      	pop	{r3, pc}
   d4590:	00030268 	.word	0x00030268

000d4594 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4594:	b508      	push	{r3, lr}
   d4596:	4b02      	ldr	r3, [pc, #8]	; (d45a0 <netdb_getaddrinfo+0xc>)
   d4598:	681b      	ldr	r3, [r3, #0]
   d459a:	68db      	ldr	r3, [r3, #12]
   d459c:	9301      	str	r3, [sp, #4]
   d459e:	bd08      	pop	{r3, pc}
   d45a0:	00030268 	.word	0x00030268

000d45a4 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d45a4:	b508      	push	{r3, lr}
   d45a6:	4b02      	ldr	r3, [pc, #8]	; (d45b0 <HAL_Pin_Mode+0xc>)
   d45a8:	681b      	ldr	r3, [r3, #0]
   d45aa:	689b      	ldr	r3, [r3, #8]
   d45ac:	9301      	str	r3, [sp, #4]
   d45ae:	bd08      	pop	{r3, pc}
   d45b0:	0003022c 	.word	0x0003022c

000d45b4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d45b4:	b508      	push	{r3, lr}
   d45b6:	4b02      	ldr	r3, [pc, #8]	; (d45c0 <HAL_Get_Pin_Mode+0xc>)
   d45b8:	681b      	ldr	r3, [r3, #0]
   d45ba:	68db      	ldr	r3, [r3, #12]
   d45bc:	9301      	str	r3, [sp, #4]
   d45be:	bd08      	pop	{r3, pc}
   d45c0:	0003022c 	.word	0x0003022c

000d45c4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d45c4:	b508      	push	{r3, lr}
   d45c6:	4b02      	ldr	r3, [pc, #8]	; (d45d0 <HAL_GPIO_Write+0xc>)
   d45c8:	681b      	ldr	r3, [r3, #0]
   d45ca:	691b      	ldr	r3, [r3, #16]
   d45cc:	9301      	str	r3, [sp, #4]
   d45ce:	bd08      	pop	{r3, pc}
   d45d0:	0003022c 	.word	0x0003022c

000d45d4 <HAL_Interrupts_Attach>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d45d4:	b508      	push	{r3, lr}
   d45d6:	4b02      	ldr	r3, [pc, #8]	; (d45e0 <HAL_Interrupts_Attach+0xc>)
   d45d8:	681b      	ldr	r3, [r3, #0]
   d45da:	699b      	ldr	r3, [r3, #24]
   d45dc:	9301      	str	r3, [sp, #4]
   d45de:	bd08      	pop	{r3, pc}
   d45e0:	0003022c 	.word	0x0003022c

000d45e4 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d45e4:	b508      	push	{r3, lr}
   d45e6:	4b02      	ldr	r3, [pc, #8]	; (d45f0 <HAL_Interrupts_Detach+0xc>)
   d45e8:	681b      	ldr	r3, [r3, #0]
   d45ea:	69db      	ldr	r3, [r3, #28]
   d45ec:	9301      	str	r3, [sp, #4]
   d45ee:	bd08      	pop	{r3, pc}
   d45f0:	0003022c 	.word	0x0003022c

000d45f4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d45f4:	b508      	push	{r3, lr}
   d45f6:	4b02      	ldr	r3, [pc, #8]	; (d4600 <HAL_RNG_GetRandomNumber+0xc>)
   d45f8:	681b      	ldr	r3, [r3, #0]
   d45fa:	685b      	ldr	r3, [r3, #4]
   d45fc:	9301      	str	r3, [sp, #4]
   d45fe:	bd08      	pop	{r3, pc}
   d4600:	00030218 	.word	0x00030218

000d4604 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d4604:	b508      	push	{r3, lr}
   d4606:	4b02      	ldr	r3, [pc, #8]	; (d4610 <HAL_Delay_Microseconds+0xc>)
   d4608:	681b      	ldr	r3, [r3, #0]
   d460a:	68db      	ldr	r3, [r3, #12]
   d460c:	9301      	str	r3, [sp, #4]
   d460e:	bd08      	pop	{r3, pc}
   d4610:	00030218 	.word	0x00030218

000d4614 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4614:	b508      	push	{r3, lr}
   d4616:	4b02      	ldr	r3, [pc, #8]	; (d4620 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4618:	681b      	ldr	r3, [r3, #0]
   d461a:	695b      	ldr	r3, [r3, #20]
   d461c:	9301      	str	r3, [sp, #4]
   d461e:	bd08      	pop	{r3, pc}
   d4620:	00030218 	.word	0x00030218

000d4624 <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d4624:	b508      	push	{r3, lr}
   d4626:	4b02      	ldr	r3, [pc, #8]	; (d4630 <os_thread_yield+0xc>)
   d4628:	681b      	ldr	r3, [r3, #0]
   d462a:	68db      	ldr	r3, [r3, #12]
   d462c:	9301      	str	r3, [sp, #4]
   d462e:	bd08      	pop	{r3, pc}
   d4630:	00030248 	.word	0x00030248

000d4634 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   d4634:	b508      	push	{r3, lr}
   d4636:	4b02      	ldr	r3, [pc, #8]	; (d4640 <os_thread_scheduling+0xc>)
   d4638:	681b      	ldr	r3, [r3, #0]
   d463a:	69db      	ldr	r3, [r3, #28]
   d463c:	9301      	str	r3, [sp, #4]
   d463e:	bd08      	pop	{r3, pc}
   d4640:	00030248 	.word	0x00030248

000d4644 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   d4644:	b508      	push	{r3, lr}
   d4646:	4b02      	ldr	r3, [pc, #8]	; (d4650 <os_timer_create+0xc>)
   d4648:	681b      	ldr	r3, [r3, #0]
   d464a:	6a1b      	ldr	r3, [r3, #32]
   d464c:	9301      	str	r3, [sp, #4]
   d464e:	bd08      	pop	{r3, pc}
   d4650:	00030248 	.word	0x00030248

000d4654 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   d4654:	b508      	push	{r3, lr}
   d4656:	4b02      	ldr	r3, [pc, #8]	; (d4660 <os_timer_destroy+0xc>)
   d4658:	681b      	ldr	r3, [r3, #0]
   d465a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d465c:	9301      	str	r3, [sp, #4]
   d465e:	bd08      	pop	{r3, pc}
   d4660:	00030248 	.word	0x00030248

000d4664 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   d4664:	b508      	push	{r3, lr}
   d4666:	4b02      	ldr	r3, [pc, #8]	; (d4670 <os_timer_get_id+0xc>)
   d4668:	681b      	ldr	r3, [r3, #0]
   d466a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d466c:	9301      	str	r3, [sp, #4]
   d466e:	bd08      	pop	{r3, pc}
   d4670:	00030248 	.word	0x00030248

000d4674 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   d4674:	b508      	push	{r3, lr}
   d4676:	4b02      	ldr	r3, [pc, #8]	; (d4680 <os_timer_change+0xc>)
   d4678:	681b      	ldr	r3, [r3, #0]
   d467a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d467c:	9301      	str	r3, [sp, #4]
   d467e:	bd08      	pop	{r3, pc}
   d4680:	00030248 	.word	0x00030248

000d4684 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4684:	b508      	push	{r3, lr}
   d4686:	4b02      	ldr	r3, [pc, #8]	; (d4690 <os_mutex_recursive_create+0xc>)
   d4688:	681b      	ldr	r3, [r3, #0]
   d468a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d468c:	9301      	str	r3, [sp, #4]
   d468e:	bd08      	pop	{r3, pc}
   d4690:	00030248 	.word	0x00030248

000d4694 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4694:	b508      	push	{r3, lr}
   d4696:	4b02      	ldr	r3, [pc, #8]	; (d46a0 <os_mutex_recursive_destroy+0xc>)
   d4698:	681b      	ldr	r3, [r3, #0]
   d469a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d469c:	9301      	str	r3, [sp, #4]
   d469e:	bd08      	pop	{r3, pc}
   d46a0:	00030248 	.word	0x00030248

000d46a4 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d46a4:	b508      	push	{r3, lr}
   d46a6:	4b02      	ldr	r3, [pc, #8]	; (d46b0 <os_mutex_recursive_lock+0xc>)
   d46a8:	681b      	ldr	r3, [r3, #0]
   d46aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d46ac:	9301      	str	r3, [sp, #4]
   d46ae:	bd08      	pop	{r3, pc}
   d46b0:	00030248 	.word	0x00030248

000d46b4 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d46b4:	b508      	push	{r3, lr}
   d46b6:	4b02      	ldr	r3, [pc, #8]	; (d46c0 <os_mutex_recursive_unlock+0xc>)
   d46b8:	681b      	ldr	r3, [r3, #0]
   d46ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d46bc:	9301      	str	r3, [sp, #4]
   d46be:	bd08      	pop	{r3, pc}
   d46c0:	00030248 	.word	0x00030248

000d46c4 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   d46c4:	b508      	push	{r3, lr}
   d46c6:	4b02      	ldr	r3, [pc, #8]	; (d46d0 <os_timer_set_id+0xc>)
   d46c8:	681b      	ldr	r3, [r3, #0]
   d46ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d46cc:	9301      	str	r3, [sp, #4]
   d46ce:	bd08      	pop	{r3, pc}
   d46d0:	00030248 	.word	0x00030248

000d46d4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d46d4:	b508      	push	{r3, lr}
   d46d6:	4b02      	ldr	r3, [pc, #8]	; (d46e0 <inet_inet_ntop+0xc>)
   d46d8:	681b      	ldr	r3, [r3, #0]
   d46da:	695b      	ldr	r3, [r3, #20]
   d46dc:	9301      	str	r3, [sp, #4]
   d46de:	bd08      	pop	{r3, pc}
   d46e0:	00030264 	.word	0x00030264

000d46e4 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d46e4:	b508      	push	{r3, lr}
   d46e6:	4b02      	ldr	r3, [pc, #8]	; (d46f0 <hal_usart_init+0xc>)
   d46e8:	681b      	ldr	r3, [r3, #0]
   d46ea:	681b      	ldr	r3, [r3, #0]
   d46ec:	9301      	str	r3, [sp, #4]
   d46ee:	bd08      	pop	{r3, pc}
   d46f0:	0003023c 	.word	0x0003023c

000d46f4 <hal_usart_end>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   d46f4:	b508      	push	{r3, lr}
   d46f6:	4b02      	ldr	r3, [pc, #8]	; (d4700 <hal_usart_end+0xc>)
   d46f8:	681b      	ldr	r3, [r3, #0]
   d46fa:	689b      	ldr	r3, [r3, #8]
   d46fc:	9301      	str	r3, [sp, #4]
   d46fe:	bd08      	pop	{r3, pc}
   d4700:	0003023c 	.word	0x0003023c

000d4704 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d4704:	b508      	push	{r3, lr}
   d4706:	4b02      	ldr	r3, [pc, #8]	; (d4710 <hal_usart_write+0xc>)
   d4708:	681b      	ldr	r3, [r3, #0]
   d470a:	68db      	ldr	r3, [r3, #12]
   d470c:	9301      	str	r3, [sp, #4]
   d470e:	bd08      	pop	{r3, pc}
   d4710:	0003023c 	.word	0x0003023c

000d4714 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d4714:	b508      	push	{r3, lr}
   d4716:	4b02      	ldr	r3, [pc, #8]	; (d4720 <hal_usart_available+0xc>)
   d4718:	681b      	ldr	r3, [r3, #0]
   d471a:	691b      	ldr	r3, [r3, #16]
   d471c:	9301      	str	r3, [sp, #4]
   d471e:	bd08      	pop	{r3, pc}
   d4720:	0003023c 	.word	0x0003023c

000d4724 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d4724:	b508      	push	{r3, lr}
   d4726:	4b02      	ldr	r3, [pc, #8]	; (d4730 <hal_usart_read+0xc>)
   d4728:	681b      	ldr	r3, [r3, #0]
   d472a:	695b      	ldr	r3, [r3, #20]
   d472c:	9301      	str	r3, [sp, #4]
   d472e:	bd08      	pop	{r3, pc}
   d4730:	0003023c 	.word	0x0003023c

000d4734 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d4734:	b508      	push	{r3, lr}
   d4736:	4b02      	ldr	r3, [pc, #8]	; (d4740 <hal_usart_peek+0xc>)
   d4738:	681b      	ldr	r3, [r3, #0]
   d473a:	699b      	ldr	r3, [r3, #24]
   d473c:	9301      	str	r3, [sp, #4]
   d473e:	bd08      	pop	{r3, pc}
   d4740:	0003023c 	.word	0x0003023c

000d4744 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d4744:	b508      	push	{r3, lr}
   d4746:	4b02      	ldr	r3, [pc, #8]	; (d4750 <hal_usart_flush+0xc>)
   d4748:	681b      	ldr	r3, [r3, #0]
   d474a:	69db      	ldr	r3, [r3, #28]
   d474c:	9301      	str	r3, [sp, #4]
   d474e:	bd08      	pop	{r3, pc}
   d4750:	0003023c 	.word	0x0003023c

000d4754 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d4754:	b508      	push	{r3, lr}
   d4756:	4b02      	ldr	r3, [pc, #8]	; (d4760 <hal_usart_is_enabled+0xc>)
   d4758:	681b      	ldr	r3, [r3, #0]
   d475a:	6a1b      	ldr	r3, [r3, #32]
   d475c:	9301      	str	r3, [sp, #4]
   d475e:	bd08      	pop	{r3, pc}
   d4760:	0003023c 	.word	0x0003023c

000d4764 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d4764:	b508      	push	{r3, lr}
   d4766:	4b02      	ldr	r3, [pc, #8]	; (d4770 <hal_usart_available_data_for_write+0xc>)
   d4768:	681b      	ldr	r3, [r3, #0]
   d476a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d476c:	9301      	str	r3, [sp, #4]
   d476e:	bd08      	pop	{r3, pc}
   d4770:	0003023c 	.word	0x0003023c

000d4774 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   d4774:	b508      	push	{r3, lr}
   d4776:	4b02      	ldr	r3, [pc, #8]	; (d4780 <hal_usart_begin_config+0xc>)
   d4778:	681b      	ldr	r3, [r3, #0]
   d477a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d477c:	9301      	str	r3, [sp, #4]
   d477e:	bd08      	pop	{r3, pc}
   d4780:	0003023c 	.word	0x0003023c

000d4784 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d4784:	b508      	push	{r3, lr}
   d4786:	4b02      	ldr	r3, [pc, #8]	; (d4790 <hal_i2c_write+0xc>)
   d4788:	681b      	ldr	r3, [r3, #0]
   d478a:	6a1b      	ldr	r3, [r3, #32]
   d478c:	9301      	str	r3, [sp, #4]
   d478e:	bd08      	pop	{r3, pc}
   d4790:	00030228 	.word	0x00030228

000d4794 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d4794:	b508      	push	{r3, lr}
   d4796:	4b02      	ldr	r3, [pc, #8]	; (d47a0 <hal_i2c_available+0xc>)
   d4798:	681b      	ldr	r3, [r3, #0]
   d479a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d479c:	9301      	str	r3, [sp, #4]
   d479e:	bd08      	pop	{r3, pc}
   d47a0:	00030228 	.word	0x00030228

000d47a4 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d47a4:	b508      	push	{r3, lr}
   d47a6:	4b02      	ldr	r3, [pc, #8]	; (d47b0 <hal_i2c_read+0xc>)
   d47a8:	681b      	ldr	r3, [r3, #0]
   d47aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d47ac:	9301      	str	r3, [sp, #4]
   d47ae:	bd08      	pop	{r3, pc}
   d47b0:	00030228 	.word	0x00030228

000d47b4 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d47b4:	b508      	push	{r3, lr}
   d47b6:	4b02      	ldr	r3, [pc, #8]	; (d47c0 <hal_i2c_peek+0xc>)
   d47b8:	681b      	ldr	r3, [r3, #0]
   d47ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d47bc:	9301      	str	r3, [sp, #4]
   d47be:	bd08      	pop	{r3, pc}
   d47c0:	00030228 	.word	0x00030228

000d47c4 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d47c4:	b508      	push	{r3, lr}
   d47c6:	4b02      	ldr	r3, [pc, #8]	; (d47d0 <hal_i2c_flush+0xc>)
   d47c8:	681b      	ldr	r3, [r3, #0]
   d47ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d47cc:	9301      	str	r3, [sp, #4]
   d47ce:	bd08      	pop	{r3, pc}
   d47d0:	00030228 	.word	0x00030228

000d47d4 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d47d4:	b508      	push	{r3, lr}
   d47d6:	4b02      	ldr	r3, [pc, #8]	; (d47e0 <hal_i2c_is_enabled+0xc>)
   d47d8:	681b      	ldr	r3, [r3, #0]
   d47da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d47dc:	9301      	str	r3, [sp, #4]
   d47de:	bd08      	pop	{r3, pc}
   d47e0:	00030228 	.word	0x00030228

000d47e4 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d47e4:	b508      	push	{r3, lr}
   d47e6:	4b02      	ldr	r3, [pc, #8]	; (d47f0 <hal_i2c_init+0xc>)
   d47e8:	681b      	ldr	r3, [r3, #0]
   d47ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d47ec:	9301      	str	r3, [sp, #4]
   d47ee:	bd08      	pop	{r3, pc}
   d47f0:	00030228 	.word	0x00030228

000d47f4 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d47f4:	b508      	push	{r3, lr}
   d47f6:	4b02      	ldr	r3, [pc, #8]	; (d4800 <hal_spi_init+0xc>)
   d47f8:	681b      	ldr	r3, [r3, #0]
   d47fa:	69db      	ldr	r3, [r3, #28]
   d47fc:	9301      	str	r3, [sp, #4]
   d47fe:	bd08      	pop	{r3, pc}
   d4800:	00030230 	.word	0x00030230

000d4804 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d4804:	b508      	push	{r3, lr}
   d4806:	4b02      	ldr	r3, [pc, #8]	; (d4810 <hal_spi_is_enabled+0xc>)
   d4808:	681b      	ldr	r3, [r3, #0]
   d480a:	6a1b      	ldr	r3, [r3, #32]
   d480c:	9301      	str	r3, [sp, #4]
   d480e:	bd08      	pop	{r3, pc}
   d4810:	00030230 	.word	0x00030230

000d4814 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4814:	b508      	push	{r3, lr}
   d4816:	4b02      	ldr	r3, [pc, #8]	; (d4820 <HAL_USB_USART_Init+0xc>)
   d4818:	681b      	ldr	r3, [r3, #0]
   d481a:	681b      	ldr	r3, [r3, #0]
   d481c:	9301      	str	r3, [sp, #4]
   d481e:	bd08      	pop	{r3, pc}
   d4820:	0003024c 	.word	0x0003024c

000d4824 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4824:	b508      	push	{r3, lr}
   d4826:	4b02      	ldr	r3, [pc, #8]	; (d4830 <HAL_USB_USART_Begin+0xc>)
   d4828:	681b      	ldr	r3, [r3, #0]
   d482a:	685b      	ldr	r3, [r3, #4]
   d482c:	9301      	str	r3, [sp, #4]
   d482e:	bd08      	pop	{r3, pc}
   d4830:	0003024c 	.word	0x0003024c

000d4834 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   d4834:	b508      	push	{r3, lr}
   d4836:	4b02      	ldr	r3, [pc, #8]	; (d4840 <HAL_USB_USART_End+0xc>)
   d4838:	681b      	ldr	r3, [r3, #0]
   d483a:	689b      	ldr	r3, [r3, #8]
   d483c:	9301      	str	r3, [sp, #4]
   d483e:	bd08      	pop	{r3, pc}
   d4840:	0003024c 	.word	0x0003024c

000d4844 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4844:	b508      	push	{r3, lr}
   d4846:	4b02      	ldr	r3, [pc, #8]	; (d4850 <HAL_USB_USART_Available_Data+0xc>)
   d4848:	681b      	ldr	r3, [r3, #0]
   d484a:	691b      	ldr	r3, [r3, #16]
   d484c:	9301      	str	r3, [sp, #4]
   d484e:	bd08      	pop	{r3, pc}
   d4850:	0003024c 	.word	0x0003024c

000d4854 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4854:	b508      	push	{r3, lr}
   d4856:	4b02      	ldr	r3, [pc, #8]	; (d4860 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4858:	681b      	ldr	r3, [r3, #0]
   d485a:	695b      	ldr	r3, [r3, #20]
   d485c:	9301      	str	r3, [sp, #4]
   d485e:	bd08      	pop	{r3, pc}
   d4860:	0003024c 	.word	0x0003024c

000d4864 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4864:	b508      	push	{r3, lr}
   d4866:	4b02      	ldr	r3, [pc, #8]	; (d4870 <HAL_USB_USART_Receive_Data+0xc>)
   d4868:	681b      	ldr	r3, [r3, #0]
   d486a:	699b      	ldr	r3, [r3, #24]
   d486c:	9301      	str	r3, [sp, #4]
   d486e:	bd08      	pop	{r3, pc}
   d4870:	0003024c 	.word	0x0003024c

000d4874 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4874:	b508      	push	{r3, lr}
   d4876:	4b02      	ldr	r3, [pc, #8]	; (d4880 <HAL_USB_USART_Send_Data+0xc>)
   d4878:	681b      	ldr	r3, [r3, #0]
   d487a:	69db      	ldr	r3, [r3, #28]
   d487c:	9301      	str	r3, [sp, #4]
   d487e:	bd08      	pop	{r3, pc}
   d4880:	0003024c 	.word	0x0003024c

000d4884 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4884:	b508      	push	{r3, lr}
   d4886:	4b02      	ldr	r3, [pc, #8]	; (d4890 <HAL_USB_USART_Flush_Data+0xc>)
   d4888:	681b      	ldr	r3, [r3, #0]
   d488a:	6a1b      	ldr	r3, [r3, #32]
   d488c:	9301      	str	r3, [sp, #4]
   d488e:	bd08      	pop	{r3, pc}
   d4890:	0003024c 	.word	0x0003024c

000d4894 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d4894:	b508      	push	{r3, lr}
   d4896:	4b02      	ldr	r3, [pc, #8]	; (d48a0 <panic_+0xc>)
   d4898:	681b      	ldr	r3, [r3, #0]
   d489a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d489c:	9301      	str	r3, [sp, #4]
   d489e:	bd08      	pop	{r3, pc}
   d48a0:	00030260 	.word	0x00030260

000d48a4 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d48a4:	b508      	push	{r3, lr}
   d48a6:	4b02      	ldr	r3, [pc, #8]	; (d48b0 <log_message_v+0xc>)
   d48a8:	681b      	ldr	r3, [r3, #0]
   d48aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d48ac:	9301      	str	r3, [sp, #4]
   d48ae:	bd08      	pop	{r3, pc}
   d48b0:	00030260 	.word	0x00030260

000d48b4 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   d48b4:	b508      	push	{r3, lr}
   d48b6:	4b02      	ldr	r3, [pc, #8]	; (d48c0 <log_level_name+0xc>)
   d48b8:	681b      	ldr	r3, [r3, #0]
   d48ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d48bc:	9301      	str	r3, [sp, #4]
   d48be:	bd08      	pop	{r3, pc}
   d48c0:	00030260 	.word	0x00030260

000d48c4 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   d48c4:	b508      	push	{r3, lr}
   d48c6:	4b02      	ldr	r3, [pc, #8]	; (d48d0 <log_set_callbacks+0xc>)
   d48c8:	681b      	ldr	r3, [r3, #0]
   d48ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d48cc:	9301      	str	r3, [sp, #4]
   d48ce:	bd08      	pop	{r3, pc}
   d48d0:	00030260 	.word	0x00030260

000d48d4 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d48d4:	b508      	push	{r3, lr}
   d48d6:	4b02      	ldr	r3, [pc, #8]	; (d48e0 <set_system_mode+0xc>)
   d48d8:	681b      	ldr	r3, [r3, #0]
   d48da:	685b      	ldr	r3, [r3, #4]
   d48dc:	9301      	str	r3, [sp, #4]
   d48de:	bd08      	pop	{r3, pc}
   d48e0:	00030220 	.word	0x00030220

000d48e4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d48e4:	b508      	push	{r3, lr}
   d48e6:	4b02      	ldr	r3, [pc, #8]	; (d48f0 <system_delay_ms+0xc>)
   d48e8:	681b      	ldr	r3, [r3, #0]
   d48ea:	695b      	ldr	r3, [r3, #20]
   d48ec:	9301      	str	r3, [sp, #4]
   d48ee:	bd08      	pop	{r3, pc}
   d48f0:	00030220 	.word	0x00030220

000d48f4 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d48f4:	b508      	push	{r3, lr}
   d48f6:	4b02      	ldr	r3, [pc, #8]	; (d4900 <application_thread_current+0xc>)
   d48f8:	681b      	ldr	r3, [r3, #0]
   d48fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d48fc:	9301      	str	r3, [sp, #4]
   d48fe:	bd08      	pop	{r3, pc}
   d4900:	00030220 	.word	0x00030220

000d4904 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4904:	b508      	push	{r3, lr}
   d4906:	4b02      	ldr	r3, [pc, #8]	; (d4910 <application_thread_invoke+0xc>)
   d4908:	681b      	ldr	r3, [r3, #0]
   d490a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d490c:	9301      	str	r3, [sp, #4]
   d490e:	bd08      	pop	{r3, pc}
   d4910:	00030220 	.word	0x00030220

000d4914 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4914:	b508      	push	{r3, lr}
   d4916:	4b03      	ldr	r3, [pc, #12]	; (d4924 <system_ctrl_set_app_request_handler+0x10>)
   d4918:	681b      	ldr	r3, [r3, #0]
   d491a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d491e:	9301      	str	r3, [sp, #4]
   d4920:	bd08      	pop	{r3, pc}
   d4922:	0000      	.short	0x0000
   d4924:	00030220 	.word	0x00030220

000d4928 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4928:	b508      	push	{r3, lr}
   d492a:	4b03      	ldr	r3, [pc, #12]	; (d4938 <system_ctrl_set_result+0x10>)
   d492c:	681b      	ldr	r3, [r3, #0]
   d492e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4932:	9301      	str	r3, [sp, #4]
   d4934:	bd08      	pop	{r3, pc}
   d4936:	0000      	.short	0x0000
   d4938:	00030220 	.word	0x00030220

000d493c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d493c:	b508      	push	{r3, lr}
   d493e:	4b02      	ldr	r3, [pc, #8]	; (d4948 <network_connect+0xc>)
   d4940:	681b      	ldr	r3, [r3, #0]
   d4942:	685b      	ldr	r3, [r3, #4]
   d4944:	9301      	str	r3, [sp, #4]
   d4946:	bd08      	pop	{r3, pc}
   d4948:	00030240 	.word	0x00030240

000d494c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d494c:	b508      	push	{r3, lr}
   d494e:	4b02      	ldr	r3, [pc, #8]	; (d4958 <network_connecting+0xc>)
   d4950:	681b      	ldr	r3, [r3, #0]
   d4952:	689b      	ldr	r3, [r3, #8]
   d4954:	9301      	str	r3, [sp, #4]
   d4956:	bd08      	pop	{r3, pc}
   d4958:	00030240 	.word	0x00030240

000d495c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d495c:	b508      	push	{r3, lr}
   d495e:	4b02      	ldr	r3, [pc, #8]	; (d4968 <network_disconnect+0xc>)
   d4960:	681b      	ldr	r3, [r3, #0]
   d4962:	68db      	ldr	r3, [r3, #12]
   d4964:	9301      	str	r3, [sp, #4]
   d4966:	bd08      	pop	{r3, pc}
   d4968:	00030240 	.word	0x00030240

000d496c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d496c:	b508      	push	{r3, lr}
   d496e:	4b02      	ldr	r3, [pc, #8]	; (d4978 <network_ready+0xc>)
   d4970:	681b      	ldr	r3, [r3, #0]
   d4972:	691b      	ldr	r3, [r3, #16]
   d4974:	9301      	str	r3, [sp, #4]
   d4976:	bd08      	pop	{r3, pc}
   d4978:	00030240 	.word	0x00030240

000d497c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d497c:	b508      	push	{r3, lr}
   d497e:	4b02      	ldr	r3, [pc, #8]	; (d4988 <network_on+0xc>)
   d4980:	681b      	ldr	r3, [r3, #0]
   d4982:	695b      	ldr	r3, [r3, #20]
   d4984:	9301      	str	r3, [sp, #4]
   d4986:	bd08      	pop	{r3, pc}
   d4988:	00030240 	.word	0x00030240

000d498c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d498c:	b508      	push	{r3, lr}
   d498e:	4b02      	ldr	r3, [pc, #8]	; (d4998 <network_off+0xc>)
   d4990:	681b      	ldr	r3, [r3, #0]
   d4992:	699b      	ldr	r3, [r3, #24]
   d4994:	9301      	str	r3, [sp, #4]
   d4996:	bd08      	pop	{r3, pc}
   d4998:	00030240 	.word	0x00030240

000d499c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d499c:	b508      	push	{r3, lr}
   d499e:	4b02      	ldr	r3, [pc, #8]	; (d49a8 <network_listen+0xc>)
   d49a0:	681b      	ldr	r3, [r3, #0]
   d49a2:	69db      	ldr	r3, [r3, #28]
   d49a4:	9301      	str	r3, [sp, #4]
   d49a6:	bd08      	pop	{r3, pc}
   d49a8:	00030240 	.word	0x00030240

000d49ac <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d49ac:	b508      	push	{r3, lr}
   d49ae:	4b02      	ldr	r3, [pc, #8]	; (d49b8 <network_listening+0xc>)
   d49b0:	681b      	ldr	r3, [r3, #0]
   d49b2:	6a1b      	ldr	r3, [r3, #32]
   d49b4:	9301      	str	r3, [sp, #4]
   d49b6:	bd08      	pop	{r3, pc}
   d49b8:	00030240 	.word	0x00030240

000d49bc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d49bc:	b508      	push	{r3, lr}
   d49be:	4b02      	ldr	r3, [pc, #8]	; (d49c8 <network_set_listen_timeout+0xc>)
   d49c0:	681b      	ldr	r3, [r3, #0]
   d49c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d49c4:	9301      	str	r3, [sp, #4]
   d49c6:	bd08      	pop	{r3, pc}
   d49c8:	00030240 	.word	0x00030240

000d49cc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d49cc:	b508      	push	{r3, lr}
   d49ce:	4b02      	ldr	r3, [pc, #8]	; (d49d8 <network_get_listen_timeout+0xc>)
   d49d0:	681b      	ldr	r3, [r3, #0]
   d49d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d49d4:	9301      	str	r3, [sp, #4]
   d49d6:	bd08      	pop	{r3, pc}
   d49d8:	00030240 	.word	0x00030240

000d49dc <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d49dc:	b508      	push	{r3, lr}
   d49de:	4b02      	ldr	r3, [pc, #8]	; (d49e8 <spark_cloud_flag_connected+0xc>)
   d49e0:	681b      	ldr	r3, [r3, #0]
   d49e2:	695b      	ldr	r3, [r3, #20]
   d49e4:	9301      	str	r3, [sp, #4]
   d49e6:	bd08      	pop	{r3, pc}
   d49e8:	00030244 	.word	0x00030244

000d49ec <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d49ec:	b508      	push	{r3, lr}
   d49ee:	4b02      	ldr	r3, [pc, #8]	; (d49f8 <spark_send_event+0xc>)
   d49f0:	681b      	ldr	r3, [r3, #0]
   d49f2:	6a1b      	ldr	r3, [r3, #32]
   d49f4:	9301      	str	r3, [sp, #4]
   d49f6:	bd08      	pop	{r3, pc}
   d49f8:	00030244 	.word	0x00030244

000d49fc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d49fc:	b508      	push	{r3, lr}
   d49fe:	4b02      	ldr	r3, [pc, #8]	; (d4a08 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4a00:	681b      	ldr	r3, [r3, #0]
   d4a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4a04:	9301      	str	r3, [sp, #4]
   d4a06:	bd08      	pop	{r3, pc}
   d4a08:	00030244 	.word	0x00030244

000d4a0c <spark_publish_vitals>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
   d4a0c:	b508      	push	{r3, lr}
   d4a0e:	4b02      	ldr	r3, [pc, #8]	; (d4a18 <spark_publish_vitals+0xc>)
   d4a10:	681b      	ldr	r3, [r3, #0]
   d4a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4a14:	9301      	str	r3, [sp, #4]
   d4a16:	bd08      	pop	{r3, pc}
   d4a18:	00030244 	.word	0x00030244

000d4a1c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4a1c:	b508      	push	{r3, lr}
   d4a1e:	4b02      	ldr	r3, [pc, #8]	; (d4a28 <malloc+0xc>)
   d4a20:	681b      	ldr	r3, [r3, #0]
   d4a22:	681b      	ldr	r3, [r3, #0]
   d4a24:	9301      	str	r3, [sp, #4]
   d4a26:	bd08      	pop	{r3, pc}
   d4a28:	0003021c 	.word	0x0003021c

000d4a2c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4a2c:	b508      	push	{r3, lr}
   d4a2e:	4b02      	ldr	r3, [pc, #8]	; (d4a38 <free+0xc>)
   d4a30:	681b      	ldr	r3, [r3, #0]
   d4a32:	685b      	ldr	r3, [r3, #4]
   d4a34:	9301      	str	r3, [sp, #4]
   d4a36:	bd08      	pop	{r3, pc}
   d4a38:	0003021c 	.word	0x0003021c

000d4a3c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4a3c:	b508      	push	{r3, lr}
   d4a3e:	4b02      	ldr	r3, [pc, #8]	; (d4a48 <realloc+0xc>)
   d4a40:	681b      	ldr	r3, [r3, #0]
   d4a42:	689b      	ldr	r3, [r3, #8]
   d4a44:	9301      	str	r3, [sp, #4]
   d4a46:	bd08      	pop	{r3, pc}
   d4a48:	0003021c 	.word	0x0003021c

000d4a4c <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4a4c:	b508      	push	{r3, lr}
   d4a4e:	4b02      	ldr	r3, [pc, #8]	; (d4a58 <vsnprintf+0xc>)
   d4a50:	681b      	ldr	r3, [r3, #0]
   d4a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4a54:	9301      	str	r3, [sp, #4]
   d4a56:	bd08      	pop	{r3, pc}
   d4a58:	0003021c 	.word	0x0003021c

000d4a5c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4a5c:	b508      	push	{r3, lr}
   d4a5e:	4b02      	ldr	r3, [pc, #8]	; (d4a68 <abort+0xc>)
   d4a60:	681b      	ldr	r3, [r3, #0]
   d4a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4a64:	9301      	str	r3, [sp, #4]
   d4a66:	bd08      	pop	{r3, pc}
   d4a68:	0003021c 	.word	0x0003021c

000d4a6c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d4a6c:	b508      	push	{r3, lr}
   d4a6e:	4b02      	ldr	r3, [pc, #8]	; (d4a78 <_malloc_r+0xc>)
   d4a70:	681b      	ldr	r3, [r3, #0]
   d4a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4a74:	9301      	str	r3, [sp, #4]
   d4a76:	bd08      	pop	{r3, pc}
   d4a78:	0003021c 	.word	0x0003021c

000d4a7c <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d4a7c:	b508      	push	{r3, lr}
   d4a7e:	4b02      	ldr	r3, [pc, #8]	; (d4a88 <newlib_impure_ptr_callback+0xc>)
   d4a80:	681b      	ldr	r3, [r3, #0]
   d4a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4a84:	9301      	str	r3, [sp, #4]
   d4a86:	bd08      	pop	{r3, pc}
   d4a88:	0003021c 	.word	0x0003021c

000d4a8c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4a8c:	2200      	movs	r2, #0
   d4a8e:	6840      	ldr	r0, [r0, #4]
   d4a90:	4611      	mov	r1, r2
   d4a92:	f7ff bf8b 	b.w	d49ac <network_listening>

000d4a96 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d4a96:	2200      	movs	r2, #0
   d4a98:	6840      	ldr	r0, [r0, #4]
   d4a9a:	4611      	mov	r1, r2
   d4a9c:	f7ff bf96 	b.w	d49cc <network_get_listen_timeout>

000d4aa0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d4aa0:	6840      	ldr	r0, [r0, #4]
   d4aa2:	2200      	movs	r2, #0
   d4aa4:	f7ff bf8a 	b.w	d49bc <network_set_listen_timeout>

000d4aa8 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d4aa8:	6840      	ldr	r0, [r0, #4]
   d4aaa:	2200      	movs	r2, #0
   d4aac:	f081 0101 	eor.w	r1, r1, #1
   d4ab0:	f7ff bf74 	b.w	d499c <network_listen>

000d4ab4 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d4ab4:	2300      	movs	r3, #0
   d4ab6:	6840      	ldr	r0, [r0, #4]
   d4ab8:	461a      	mov	r2, r3
   d4aba:	4619      	mov	r1, r3
   d4abc:	f7ff bf66 	b.w	d498c <network_off>

000d4ac0 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d4ac0:	2300      	movs	r3, #0
   d4ac2:	6840      	ldr	r0, [r0, #4]
   d4ac4:	461a      	mov	r2, r3
   d4ac6:	4619      	mov	r1, r3
   d4ac8:	f7ff bf58 	b.w	d497c <network_on>

000d4acc <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4acc:	2200      	movs	r2, #0
   d4ace:	6840      	ldr	r0, [r0, #4]
   d4ad0:	4611      	mov	r1, r2
   d4ad2:	f7ff bf4b 	b.w	d496c <network_ready>

000d4ad6 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d4ad6:	2200      	movs	r2, #0
   d4ad8:	6840      	ldr	r0, [r0, #4]
   d4ada:	4611      	mov	r1, r2
   d4adc:	f7ff bf36 	b.w	d494c <network_connecting>

000d4ae0 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4ae0:	6840      	ldr	r0, [r0, #4]
   d4ae2:	2200      	movs	r2, #0
   d4ae4:	2102      	movs	r1, #2
   d4ae6:	f7ff bf39 	b.w	d495c <network_disconnect>

000d4aea <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d4aea:	2300      	movs	r3, #0
   d4aec:	6840      	ldr	r0, [r0, #4]
   d4aee:	461a      	mov	r2, r3
   d4af0:	f7ff bf24 	b.w	d493c <network_connect>

000d4af4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4af4:	4b02      	ldr	r3, [pc, #8]	; (d4b00 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4af6:	2203      	movs	r2, #3
   d4af8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4afa:	4a02      	ldr	r2, [pc, #8]	; (d4b04 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4afc:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d4afe:	4770      	bx	lr
   d4b00:	2003e70c 	.word	0x2003e70c
   d4b04:	000d7304 	.word	0x000d7304

000d4b08 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d4b08:	b510      	push	{r4, lr}
   d4b0a:	4604      	mov	r4, r0
   d4b0c:	4608      	mov	r0, r1
{
    _spi = spi;
   d4b0e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d4b10:	f7ff fe70 	bl	d47f4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d4b14:	2300      	movs	r3, #0
   d4b16:	6063      	str	r3, [r4, #4]
}
   d4b18:	4620      	mov	r0, r4
   d4b1a:	bd10      	pop	{r4, pc}

000d4b1c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d4b1c:	b510      	push	{r4, lr}
   d4b1e:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d4b20:	6800      	ldr	r0, [r0, #0]
   d4b22:	b118      	cbz	r0, d4b2c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d4b24:	f7ff ff82 	bl	d4a2c <free>
            wakeupSource_ = nullptr;
   d4b28:	2300      	movs	r3, #0
   d4b2a:	6023      	str	r3, [r4, #0]
        }
    }
   d4b2c:	bd10      	pop	{r4, pc}

000d4b2e <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4b2e:	b510      	push	{r4, lr}
   d4b30:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d4b32:	f7ff fff3 	bl	d4b1c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d4b36:	4620      	mov	r0, r4
   d4b38:	bd10      	pop	{r4, pc}
	...

000d4b3c <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4b3c:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4b3e:	4b09      	ldr	r3, [pc, #36]	; (d4b64 <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d4b40:	4c09      	ldr	r4, [pc, #36]	; (d4b68 <_GLOBAL__sub_I_System+0x2c>)
   d4b42:	2202      	movs	r2, #2
   d4b44:	2000      	movs	r0, #0
   d4b46:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d4b48:	4b08      	ldr	r3, [pc, #32]	; (d4b6c <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d4b4a:	6020      	str	r0, [r4, #0]
   d4b4c:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d4b4e:	71a0      	strb	r0, [r4, #6]
   d4b50:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4b52:	f7ff febf 	bl	d48d4 <set_system_mode>
SystemClass System;
   d4b56:	4620      	mov	r0, r4
   d4b58:	4a05      	ldr	r2, [pc, #20]	; (d4b70 <_GLOBAL__sub_I_System+0x34>)
   d4b5a:	4906      	ldr	r1, [pc, #24]	; (d4b74 <_GLOBAL__sub_I_System+0x38>)
   d4b5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d4b60:	f002 ba0e 	b.w	d6f80 <__aeabi_atexit>
   d4b64:	2003e720 	.word	0x2003e720
   d4b68:	2003e714 	.word	0x2003e714
   d4b6c:	ffff0000 	.word	0xffff0000
   d4b70:	2003e6e0 	.word	0x2003e6e0
   d4b74:	000d4b2f 	.word	0x000d4b2f

000d4b78 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d4b78:	b510      	push	{r4, lr}
   d4b7a:	4604      	mov	r4, r0
{
	free(buffer);
   d4b7c:	6800      	ldr	r0, [r0, #0]
   d4b7e:	f7ff ff55 	bl	d4a2c <free>
}
   d4b82:	4620      	mov	r0, r4
   d4b84:	bd10      	pop	{r4, pc}

000d4b86 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d4b86:	b510      	push	{r4, lr}
   d4b88:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d4b8a:	6800      	ldr	r0, [r0, #0]
   d4b8c:	b108      	cbz	r0, d4b92 <_ZN6String10invalidateEv+0xc>
   d4b8e:	f7ff ff4d 	bl	d4a2c <free>
	buffer = NULL;
   d4b92:	2300      	movs	r3, #0
	capacity = len = 0;
   d4b94:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d4b98:	6023      	str	r3, [r4, #0]
}
   d4b9a:	bd10      	pop	{r4, pc}

000d4b9c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d4b9c:	b538      	push	{r3, r4, r5, lr}
   d4b9e:	4604      	mov	r4, r0
   d4ba0:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d4ba2:	6800      	ldr	r0, [r0, #0]
   d4ba4:	3101      	adds	r1, #1
   d4ba6:	f7ff ff49 	bl	d4a3c <realloc>
	if (newbuffer) {
   d4baa:	b110      	cbz	r0, d4bb2 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d4bac:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d4bb0:	2001      	movs	r0, #1
	}
	return 0;
}
   d4bb2:	bd38      	pop	{r3, r4, r5, pc}

000d4bb4 <_ZN6String7reserveEj>:
{
   d4bb4:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d4bb6:	6803      	ldr	r3, [r0, #0]
{
   d4bb8:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d4bba:	b123      	cbz	r3, d4bc6 <_ZN6String7reserveEj+0x12>
   d4bbc:	6843      	ldr	r3, [r0, #4]
   d4bbe:	428b      	cmp	r3, r1
   d4bc0:	d301      	bcc.n	d4bc6 <_ZN6String7reserveEj+0x12>
   d4bc2:	2001      	movs	r0, #1
}
   d4bc4:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d4bc6:	4620      	mov	r0, r4
   d4bc8:	f7ff ffe8 	bl	d4b9c <_ZN6String12changeBufferEj>
   d4bcc:	2800      	cmp	r0, #0
   d4bce:	d0f9      	beq.n	d4bc4 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d4bd0:	68a3      	ldr	r3, [r4, #8]
   d4bd2:	2b00      	cmp	r3, #0
   d4bd4:	d1f5      	bne.n	d4bc2 <_ZN6String7reserveEj+0xe>
   d4bd6:	6822      	ldr	r2, [r4, #0]
   d4bd8:	7013      	strb	r3, [r2, #0]
   d4bda:	e7f2      	b.n	d4bc2 <_ZN6String7reserveEj+0xe>

000d4bdc <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4bdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4bde:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d4be0:	4611      	mov	r1, r2
   d4be2:	9201      	str	r2, [sp, #4]
{
   d4be4:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d4be6:	f7ff ffe5 	bl	d4bb4 <_ZN6String7reserveEj>
   d4bea:	9a01      	ldr	r2, [sp, #4]
   d4bec:	b928      	cbnz	r0, d4bfa <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d4bee:	4620      	mov	r0, r4
   d4bf0:	f7ff ffc9 	bl	d4b86 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d4bf4:	4620      	mov	r0, r4
   d4bf6:	b003      	add	sp, #12
   d4bf8:	bd30      	pop	{r4, r5, pc}
	len = length;
   d4bfa:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d4bfc:	4629      	mov	r1, r5
   d4bfe:	6820      	ldr	r0, [r4, #0]
   d4c00:	f002 f9da 	bl	d6fb8 <memcpy>
	buffer[len] = 0;
   d4c04:	6822      	ldr	r2, [r4, #0]
   d4c06:	68a3      	ldr	r3, [r4, #8]
   d4c08:	2100      	movs	r1, #0
   d4c0a:	54d1      	strb	r1, [r2, r3]
	return *this;
   d4c0c:	e7f2      	b.n	d4bf4 <_ZN6String4copyEPKcj+0x18>

000d4c0e <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d4c0e:	b538      	push	{r3, r4, r5, lr}
   d4c10:	4605      	mov	r5, r0
	if (buffer) {
   d4c12:	6800      	ldr	r0, [r0, #0]
{
   d4c14:	460c      	mov	r4, r1
	if (buffer) {
   d4c16:	b168      	cbz	r0, d4c34 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   d4c18:	686a      	ldr	r2, [r5, #4]
   d4c1a:	688b      	ldr	r3, [r1, #8]
   d4c1c:	429a      	cmp	r2, r3
   d4c1e:	d307      	bcc.n	d4c30 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   d4c20:	6809      	ldr	r1, [r1, #0]
   d4c22:	f002 fa3e 	bl	d70a2 <strcpy>
			len = rhs.len;
   d4c26:	68a3      	ldr	r3, [r4, #8]
   d4c28:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d4c2a:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   d4c2c:	60a3      	str	r3, [r4, #8]
}
   d4c2e:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   d4c30:	f7ff fefc 	bl	d4a2c <free>
	buffer = rhs.buffer;
   d4c34:	6823      	ldr	r3, [r4, #0]
   d4c36:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d4c38:	6863      	ldr	r3, [r4, #4]
   d4c3a:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d4c3c:	68a3      	ldr	r3, [r4, #8]
   d4c3e:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d4c40:	2300      	movs	r3, #0
	rhs.capacity = 0;
   d4c42:	e9c4 3300 	strd	r3, r3, [r4]
   d4c46:	e7f1      	b.n	d4c2c <_ZN6String4moveERS_+0x1e>

000d4c48 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   d4c48:	b510      	push	{r4, lr}
	buffer = NULL;
   d4c4a:	2300      	movs	r3, #0
	capacity = 0;
   d4c4c:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   d4c50:	4604      	mov	r4, r0
	len = 0;
   d4c52:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4c54:	7303      	strb	r3, [r0, #12]
	move(rval);
   d4c56:	f7ff ffda 	bl	d4c0e <_ZN6String4moveERS_>
}
   d4c5a:	4620      	mov	r0, r4
   d4c5c:	bd10      	pop	{r4, pc}

000d4c5e <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d4c5e:	4288      	cmp	r0, r1
{
   d4c60:	b510      	push	{r4, lr}
   d4c62:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d4c64:	d005      	beq.n	d4c72 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d4c66:	680b      	ldr	r3, [r1, #0]
   d4c68:	b12b      	cbz	r3, d4c76 <_ZN6StringaSERKS_+0x18>
   d4c6a:	688a      	ldr	r2, [r1, #8]
   d4c6c:	4619      	mov	r1, r3
   d4c6e:	f7ff ffb5 	bl	d4bdc <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d4c72:	4620      	mov	r0, r4
   d4c74:	bd10      	pop	{r4, pc}
	else invalidate();
   d4c76:	f7ff ff86 	bl	d4b86 <_ZN6String10invalidateEv>
   d4c7a:	e7fa      	b.n	d4c72 <_ZN6StringaSERKS_+0x14>

000d4c7c <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d4c7c:	b510      	push	{r4, lr}
	buffer = NULL;
   d4c7e:	2300      	movs	r3, #0
String::String(const String &value)
   d4c80:	4604      	mov	r4, r0
	capacity = 0;
   d4c82:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d4c86:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4c88:	7303      	strb	r3, [r0, #12]
	*this = value;
   d4c8a:	f7ff ffe8 	bl	d4c5e <_ZN6StringaSERKS_>
}
   d4c8e:	4620      	mov	r0, r4
   d4c90:	bd10      	pop	{r4, pc}

000d4c92 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4c92:	b510      	push	{r4, lr}
          _M_dispose();
   d4c94:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4c96:	4604      	mov	r4, r0
          _M_dispose();
   d4c98:	689b      	ldr	r3, [r3, #8]
   d4c9a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4c9c:	68a3      	ldr	r3, [r4, #8]
   d4c9e:	3b01      	subs	r3, #1
   d4ca0:	60a3      	str	r3, [r4, #8]
   d4ca2:	b92b      	cbnz	r3, d4cb0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d4ca4:	6823      	ldr	r3, [r4, #0]
   d4ca6:	4620      	mov	r0, r4
   d4ca8:	68db      	ldr	r3, [r3, #12]
    }
   d4caa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d4cae:	4718      	bx	r3
    }
   d4cb0:	bd10      	pop	{r4, pc}

000d4cb2 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4cb2:	b510      	push	{r4, lr}
   d4cb4:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4cb6:	6800      	ldr	r0, [r0, #0]
   d4cb8:	b108      	cbz	r0, d4cbe <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4cba:	f7ff fceb 	bl	d4694 <os_mutex_recursive_destroy>
    }
   d4cbe:	4620      	mov	r0, r4
   d4cc0:	bd10      	pop	{r4, pc}

000d4cc2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d4cc2:	680b      	ldr	r3, [r1, #0]
   d4cc4:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d4cc6:	b113      	cbz	r3, d4cce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d4cc8:	685a      	ldr	r2, [r3, #4]
   d4cca:	3201      	adds	r2, #1
   d4ccc:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
   d4cce:	4770      	bx	lr

000d4cd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d4cd0:	b510      	push	{r4, lr}
   d4cd2:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d4cd4:	6800      	ldr	r0, [r0, #0]
   d4cd6:	b128      	cbz	r0, d4ce4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d4cd8:	6843      	ldr	r3, [r0, #4]
   d4cda:	3b01      	subs	r3, #1
   d4cdc:	6043      	str	r3, [r0, #4]
   d4cde:	b90b      	cbnz	r3, d4ce4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d4ce0:	f7ff ffd7 	bl	d4c92 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d4ce4:	4620      	mov	r0, r4
   d4ce6:	bd10      	pop	{r4, pc}

000d4ce8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4ce8:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d4cea:	4c06      	ldr	r4, [pc, #24]	; (d4d04 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4cec:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d4cee:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d4cf0:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d4cf2:	f7ff fcc7 	bl	d4684 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d4cf6:	4620      	mov	r0, r4
   d4cf8:	4a03      	ldr	r2, [pc, #12]	; (d4d08 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d4cfa:	4904      	ldr	r1, [pc, #16]	; (d4d0c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d4cfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d4d00:	f002 b93e 	b.w	d6f80 <__aeabi_atexit>
   d4d04:	2003e724 	.word	0x2003e724
   d4d08:	2003e6e0 	.word	0x2003e6e0
   d4d0c:	000d4cb3 	.word	0x000d4cb3

000d4d10 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4d12:	4606      	mov	r6, r0
   d4d14:	460d      	mov	r5, r1
  size_t n = 0;
   d4d16:	188f      	adds	r7, r1, r2
   d4d18:	2400      	movs	r4, #0
  while (size--) {
   d4d1a:	42bd      	cmp	r5, r7
   d4d1c:	d00c      	beq.n	d4d38 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4d1e:	6833      	ldr	r3, [r6, #0]
   d4d20:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4d24:	689b      	ldr	r3, [r3, #8]
   d4d26:	4630      	mov	r0, r6
   d4d28:	4798      	blx	r3
     if (chunk>=0)
   d4d2a:	1e03      	subs	r3, r0, #0
   d4d2c:	db01      	blt.n	d4d32 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4d2e:	441c      	add	r4, r3
  while (size--) {
   d4d30:	e7f3      	b.n	d4d1a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4d32:	2c00      	cmp	r4, #0
   d4d34:	bf08      	it	eq
   d4d36:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d4d38:	4620      	mov	r0, r4
   d4d3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4d3c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4d3c:	b513      	push	{r0, r1, r4, lr}
   d4d3e:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d4d40:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d4d42:	b159      	cbz	r1, d4d5c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d4d44:	9101      	str	r1, [sp, #4]
   d4d46:	f002 f9d2 	bl	d70ee <strlen>
   d4d4a:	6823      	ldr	r3, [r4, #0]
   d4d4c:	9901      	ldr	r1, [sp, #4]
   d4d4e:	68db      	ldr	r3, [r3, #12]
   d4d50:	4602      	mov	r2, r0
   d4d52:	4620      	mov	r0, r4
    }
   d4d54:	b002      	add	sp, #8
   d4d56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d4d5a:	4718      	bx	r3
    }
   d4d5c:	b002      	add	sp, #8
   d4d5e:	bd10      	pop	{r4, pc}

000d4d60 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4d60:	6803      	ldr	r3, [r0, #0]
   d4d62:	689b      	ldr	r3, [r3, #8]
   d4d64:	4718      	bx	r3

000d4d66 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4d66:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d4d68:	210d      	movs	r1, #13
{
   d4d6a:	4605      	mov	r5, r0
  size_t n = print('\r');
   d4d6c:	f7ff fff8 	bl	d4d60 <_ZN5Print5printEc>
  n += print('\n');
   d4d70:	210a      	movs	r1, #10
  size_t n = print('\r');
   d4d72:	4604      	mov	r4, r0
  n += print('\n');
   d4d74:	4628      	mov	r0, r5
   d4d76:	f7ff fff3 	bl	d4d60 <_ZN5Print5printEc>
  return n;
}
   d4d7a:	4420      	add	r0, r4
   d4d7c:	bd38      	pop	{r3, r4, r5, pc}

000d4d7e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4d7e:	b530      	push	{r4, r5, lr}
   d4d80:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4d82:	2300      	movs	r3, #0
   d4d84:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4d88:	2a01      	cmp	r2, #1
   d4d8a:	bf98      	it	ls
   d4d8c:	220a      	movls	r2, #10
   d4d8e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d4d90:	460d      	mov	r5, r1
   d4d92:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d4d96:	fb01 5312 	mls	r3, r1, r2, r5
   d4d9a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4d9e:	2b09      	cmp	r3, #9
   d4da0:	bf94      	ite	ls
   d4da2:	3330      	addls	r3, #48	; 0x30
   d4da4:	3337      	addhi	r3, #55	; 0x37
   d4da6:	b2db      	uxtb	r3, r3
  } while(n);
   d4da8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4daa:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d4dae:	d9ef      	bls.n	d4d90 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d4db0:	4621      	mov	r1, r4
   d4db2:	f7ff ffc3 	bl	d4d3c <_ZN5Print5writeEPKc>
}
   d4db6:	b00b      	add	sp, #44	; 0x2c
   d4db8:	bd30      	pop	{r4, r5, pc}

000d4dba <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d4dba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4dbe:	b086      	sub	sp, #24
   d4dc0:	af00      	add	r7, sp, #0
   d4dc2:	4605      	mov	r5, r0
   d4dc4:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d4dc6:	1d38      	adds	r0, r7, #4
   d4dc8:	2114      	movs	r1, #20
{
   d4dca:	4614      	mov	r4, r2
    va_copy(args2, args);
   d4dcc:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d4dce:	f7ff fe3d 	bl	d4a4c <vsnprintf>

    if (n<bufsize)
   d4dd2:	2813      	cmp	r0, #19
   d4dd4:	d80e      	bhi.n	d4df4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d4dd6:	1d39      	adds	r1, r7, #4
   d4dd8:	4628      	mov	r0, r5
   d4dda:	f7ff ffaf 	bl	d4d3c <_ZN5Print5writeEPKc>
   d4dde:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d4de0:	b11e      	cbz	r6, d4dea <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d4de2:	4628      	mov	r0, r5
   d4de4:	f7ff ffbf 	bl	d4d66 <_ZN5Print7printlnEv>
   d4de8:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d4dea:	4620      	mov	r0, r4
   d4dec:	3718      	adds	r7, #24
   d4dee:	46bd      	mov	sp, r7
   d4df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d4df4:	f100 0308 	add.w	r3, r0, #8
   d4df8:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d4dfc:	46e8      	mov	r8, sp
        char bigger[n+1];
   d4dfe:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d4e02:	4622      	mov	r2, r4
   d4e04:	1c41      	adds	r1, r0, #1
   d4e06:	683b      	ldr	r3, [r7, #0]
   d4e08:	4668      	mov	r0, sp
   d4e0a:	f7ff fe1f 	bl	d4a4c <vsnprintf>
  return write(str);
   d4e0e:	4669      	mov	r1, sp
   d4e10:	4628      	mov	r0, r5
   d4e12:	f7ff ff93 	bl	d4d3c <_ZN5Print5writeEPKc>
   d4e16:	4604      	mov	r4, r0
   d4e18:	46c5      	mov	sp, r8
   d4e1a:	e7e1      	b.n	d4de0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d4e1c <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   d4e1c:	6880      	ldr	r0, [r0, #8]
   d4e1e:	6803      	ldr	r3, [r0, #0]
   d4e20:	68db      	ldr	r3, [r3, #12]
   d4e22:	4718      	bx	r3

000d4e24 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   d4e24:	4770      	bx	lr

000d4e26 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   d4e26:	4608      	mov	r0, r1
   d4e28:	b111      	cbz	r1, d4e30 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   d4e2a:	680b      	ldr	r3, [r1, #0]
   d4e2c:	685b      	ldr	r3, [r3, #4]
   d4e2e:	4718      	bx	r3
}
   d4e30:	4770      	bx	lr

000d4e32 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   d4e32:	4770      	bx	lr

000d4e34 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   d4e34:	4770      	bx	lr

000d4e36 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   d4e36:	4770      	bx	lr

000d4e38 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
    return s;
}
#endif

// Iterates over subcategory names separated by '.' character
const char* nextSubcategoryName(const char* &category, size_t &size) {
   d4e38:	b538      	push	{r3, r4, r5, lr}
   d4e3a:	4604      	mov	r4, r0
   d4e3c:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   d4e3e:	6800      	ldr	r0, [r0, #0]
   d4e40:	212e      	movs	r1, #46	; 0x2e
   d4e42:	f002 f91a 	bl	d707a <strchrnul>
    size = s - category;
   d4e46:	6823      	ldr	r3, [r4, #0]
   d4e48:	1ac3      	subs	r3, r0, r3
   d4e4a:	602b      	str	r3, [r5, #0]
    if (size) {
   d4e4c:	b123      	cbz	r3, d4e58 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   d4e4e:	7803      	ldrb	r3, [r0, #0]
   d4e50:	b103      	cbz	r3, d4e54 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   d4e52:	3001      	adds	r0, #1
   d4e54:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d4e56:	6020      	str	r0, [r4, #0]
        }
        std::swap(s, category);
        return s;
    }
    return nullptr;
}
   d4e58:	4618      	mov	r0, r3
   d4e5a:	bd38      	pop	{r3, r4, r5, pc}

000d4e5c <_ZN5spark16JSONStreamWriterD0Ev>:
   d4e5c:	b510      	push	{r4, lr}
   d4e5e:	210c      	movs	r1, #12
   d4e60:	4604      	mov	r4, r0
   d4e62:	f002 f892 	bl	d6f8a <_ZdlPvj>
   d4e66:	4620      	mov	r0, r4
   d4e68:	bd10      	pop	{r4, pc}

000d4e6a <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   d4e6a:	b510      	push	{r4, lr}
   d4e6c:	2104      	movs	r1, #4
   d4e6e:	4604      	mov	r4, r0
   d4e70:	f002 f88b 	bl	d6f8a <_ZdlPvj>
   d4e74:	4620      	mov	r0, r4
   d4e76:	bd10      	pop	{r4, pc}

000d4e78 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   d4e78:	b510      	push	{r4, lr}
   d4e7a:	2104      	movs	r1, #4
   d4e7c:	4604      	mov	r4, r0
   d4e7e:	f002 f884 	bl	d6f8a <_ZdlPvj>
   d4e82:	4620      	mov	r0, r4
   d4e84:	bd10      	pop	{r4, pc}

000d4e86 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   d4e86:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   d4e88:	f002 f901 	bl	d708e <strcmp>
}
   d4e8c:	fab0 f080 	clz	r0, r0
   d4e90:	0940      	lsrs	r0, r0, #5
   d4e92:	bd08      	pop	{r3, pc}

000d4e94 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   d4e94:	b510      	push	{r4, lr}
   d4e96:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   d4e98:	f001 fbb2 	bl	d6600 <_Z16_fetch_usbserialv>
   d4e9c:	4284      	cmp	r4, r0
   d4e9e:	d010      	beq.n	d4ec2 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   d4ea0:	f001 fc62 	bl	d6768 <_Z22__fetch_global_Serial1v>
   d4ea4:	4284      	cmp	r4, r0
   d4ea6:	d105      	bne.n	d4eb4 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   d4ea8:	f001 fc5e 	bl	d6768 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   d4eac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   d4eb0:	f001 bc57 	b.w	d6762 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   d4eb4:	b12c      	cbz	r4, d4ec2 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   d4eb6:	6823      	ldr	r3, [r4, #0]
   d4eb8:	4620      	mov	r0, r4
   d4eba:	685b      	ldr	r3, [r3, #4]
}
   d4ebc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4ec0:	4718      	bx	r3
   d4ec2:	bd10      	pop	{r4, pc}

000d4ec4 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d4ec4:	b513      	push	{r0, r1, r4, lr}
   d4ec6:	4604      	mov	r4, r0
    return value(val, strlen(val));
   d4ec8:	4608      	mov	r0, r1
   d4eca:	9101      	str	r1, [sp, #4]
   d4ecc:	f002 f90f 	bl	d70ee <strlen>
   d4ed0:	9901      	ldr	r1, [sp, #4]
   d4ed2:	4602      	mov	r2, r0
   d4ed4:	4620      	mov	r0, r4
}
   d4ed6:	b002      	add	sp, #8
   d4ed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   d4edc:	f001 bf98 	b.w	d6e10 <_ZN5spark10JSONWriter5valueEPKcj>

000d4ee0 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   d4ee0:	b513      	push	{r0, r1, r4, lr}
   d4ee2:	4604      	mov	r4, r0
    write(str, strlen(str));
   d4ee4:	4608      	mov	r0, r1
   d4ee6:	9101      	str	r1, [sp, #4]
   d4ee8:	f002 f901 	bl	d70ee <strlen>
   d4eec:	6823      	ldr	r3, [r4, #0]
   d4eee:	9901      	ldr	r1, [sp, #4]
   d4ef0:	68db      	ldr	r3, [r3, #12]
   d4ef2:	4602      	mov	r2, r0
   d4ef4:	4620      	mov	r0, r4
}
   d4ef6:	b002      	add	sp, #8
   d4ef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   d4efc:	4718      	bx	r3

000d4efe <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   d4efe:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d4f00:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   d4f02:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d4f06:	68db      	ldr	r3, [r3, #12]
   d4f08:	2201      	movs	r2, #1
   d4f0a:	f10d 0107 	add.w	r1, sp, #7
   d4f0e:	4798      	blx	r3
}
   d4f10:	b003      	add	sp, #12
   d4f12:	f85d fb04 	ldr.w	pc, [sp], #4

000d4f16 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   d4f16:	b40e      	push	{r1, r2, r3}
   d4f18:	b503      	push	{r0, r1, lr}
   d4f1a:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   d4f1c:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   d4f1e:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   d4f22:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   d4f24:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   d4f26:	f7ff ff48 	bl	d4dba <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   d4f2a:	b002      	add	sp, #8
   d4f2c:	f85d eb04 	ldr.w	lr, [sp], #4
   d4f30:	b003      	add	sp, #12
   d4f32:	4770      	bx	lr

000d4f34 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d4f34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   d4f38:	e9d0 9500 	ldrd	r9, r5, [r0]
   d4f3c:	f04f 0814 	mov.w	r8, #20
   d4f40:	fb08 f505 	mul.w	r5, r8, r5
   d4f44:	9300      	str	r3, [sp, #0]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d4f46:	10ab      	asrs	r3, r5, #2
   d4f48:	4d18      	ldr	r5, [pc, #96]	; (d4fac <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   d4f4a:	4617      	mov	r7, r2
   d4f4c:	435d      	muls	r5, r3
   d4f4e:	464c      	mov	r4, r9
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   d4f50:	2d00      	cmp	r5, #0
   d4f52:	dd23      	ble.n	d4f9c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x68>
	{
	  _DistanceType __half = __len >> 1;
   d4f54:	106e      	asrs	r6, r5, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   d4f56:	fb08 f006 	mul.w	r0, r8, r6
   d4f5a:	eb04 0a00 	add.w	sl, r4, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   d4f5e:	463a      	mov	r2, r7
   d4f60:	f8ba b004 	ldrh.w	fp, [sl, #4]
   d4f64:	5820      	ldr	r0, [r4, r0]
   d4f66:	9101      	str	r1, [sp, #4]
   d4f68:	455f      	cmp	r7, fp
   d4f6a:	bf28      	it	cs
   d4f6c:	465a      	movcs	r2, fp
   d4f6e:	f002 f8c6 	bl	d70fe <strncmp>
                if (cmp == 0) {
   d4f72:	9901      	ldr	r1, [sp, #4]
   d4f74:	2301      	movs	r3, #1
   d4f76:	b978      	cbnz	r0, d4f98 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
                    if (node.size == value.second) { // Lengths are equal
   d4f78:	455f      	cmp	r7, fp
   d4f7a:	d103      	bne.n	d4f84 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d4f7c:	9a00      	ldr	r2, [sp, #0]
   d4f7e:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d4f80:	4635      	mov	r5, r6
   d4f82:	e7e5      	b.n	d4f50 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
                    return node.size < value.second;
   d4f84:	bf8c      	ite	hi
   d4f86:	2001      	movhi	r0, #1
   d4f88:	2000      	movls	r0, #0
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   d4f8a:	2800      	cmp	r0, #0
   d4f8c:	d0f8      	beq.n	d4f80 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   d4f8e:	1bae      	subs	r6, r5, r6
	      ++__first;
   d4f90:	f10a 0414 	add.w	r4, sl, #20
	      __len = __len - __half - 1;
   d4f94:	3e01      	subs	r6, #1
   d4f96:	e7f3      	b.n	d4f80 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
                return cmp < 0;
   d4f98:	0fc0      	lsrs	r0, r0, #31
   d4f9a:	e7f6      	b.n	d4f8a <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
      return __last - __first;
   d4f9c:	eba4 0409 	sub.w	r4, r4, r9
}
   d4fa0:	4802      	ldr	r0, [pc, #8]	; (d4fac <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   d4fa2:	10a4      	asrs	r4, r4, #2
   d4fa4:	4360      	muls	r0, r4
   d4fa6:	b003      	add	sp, #12
   d4fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4fac:	cccccccd 	.word	0xcccccccd

000d4fb0 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   d4fb0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   d4fb2:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   d4fb4:	7e06      	ldrb	r6, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   d4fb6:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   d4fb8:	b30b      	cbz	r3, d4ffe <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
   d4fba:	b301      	cbz	r1, d4ffe <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
        size_t size = 0; // Name length
   d4fbc:	2500      	movs	r5, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   d4fbe:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   d4fc2:	9503      	str	r5, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   d4fc4:	a903      	add	r1, sp, #12
   d4fc6:	a801      	add	r0, sp, #4
   d4fc8:	f7ff ff36 	bl	d4e38 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d4fcc:	4601      	mov	r1, r0
   d4fce:	b1b0      	cbz	r0, d4ffe <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
            const int index = nodeIndex(*pNodes, name, size, found);
   d4fd0:	f10d 030b 	add.w	r3, sp, #11
   d4fd4:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   d4fd6:	f88d 500b 	strb.w	r5, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   d4fda:	4620      	mov	r0, r4
   d4fdc:	f7ff ffaa 	bl	d4f34 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   d4fe0:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d4fe4:	b15b      	cbz	r3, d4ffe <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
    return data_[i];
   d4fe6:	6824      	ldr	r4, [r4, #0]
   d4fe8:	2314      	movs	r3, #20
   d4fea:	fb03 4000 	mla	r0, r3, r0, r4
            pNodes = &node.nodes;
   d4fee:	f100 0408 	add.w	r4, r0, #8
            if (node.level >= 0) {
   d4ff2:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
   d4ff6:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   d4ff8:	bfa8      	it	ge
   d4ffa:	b2de      	uxtbge	r6, r3
        while ((name = nextSubcategoryName(category, size))) {
   d4ffc:	e7e2      	b.n	d4fc4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   d4ffe:	4630      	mov	r0, r6
   d5000:	b004      	add	sp, #16
   d5002:	bd70      	pop	{r4, r5, r6, pc}

000d5004 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   d5004:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   d5006:	4c0a      	ldr	r4, [pc, #40]	; (d5030 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   d5008:	7823      	ldrb	r3, [r4, #0]
   d500a:	f3bf 8f5b 	dmb	ish
   d500e:	07db      	lsls	r3, r3, #31
   d5010:	d40b      	bmi.n	d502a <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x26>
   d5012:	4620      	mov	r0, r4
   d5014:	f7ff f84e 	bl	d40b4 <__cxa_guard_acquire>
   d5018:	b138      	cbz	r0, d502a <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x26>
   d501a:	4620      	mov	r0, r4
   d501c:	f7ff f84f 	bl	d40be <__cxa_guard_release>
   d5020:	4a04      	ldr	r2, [pc, #16]	; (d5034 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   d5022:	4905      	ldr	r1, [pc, #20]	; (d5038 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d5024:	4805      	ldr	r0, [pc, #20]	; (d503c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x38>)
   d5026:	f001 ffab 	bl	d6f80 <__aeabi_atexit>
}
   d502a:	4804      	ldr	r0, [pc, #16]	; (d503c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x38>)
   d502c:	bd10      	pop	{r4, pc}
   d502e:	bf00      	nop
   d5030:	2003e72c 	.word	0x2003e72c
   d5034:	2003e6e0 	.word	0x2003e6e0
   d5038:	000d4e35 	.word	0x000d4e35
   d503c:	2003e670 	.word	0x2003e670

000d5040 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   d5040:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   d5042:	4c0a      	ldr	r4, [pc, #40]	; (d506c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   d5044:	7823      	ldrb	r3, [r4, #0]
   d5046:	f3bf 8f5b 	dmb	ish
   d504a:	07db      	lsls	r3, r3, #31
   d504c:	d40b      	bmi.n	d5066 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x26>
   d504e:	4620      	mov	r0, r4
   d5050:	f7ff f830 	bl	d40b4 <__cxa_guard_acquire>
   d5054:	b138      	cbz	r0, d5066 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x26>
   d5056:	4620      	mov	r0, r4
   d5058:	f7ff f831 	bl	d40be <__cxa_guard_release>
   d505c:	4a04      	ldr	r2, [pc, #16]	; (d5070 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   d505e:	4905      	ldr	r1, [pc, #20]	; (d5074 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d5060:	4805      	ldr	r0, [pc, #20]	; (d5078 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x38>)
   d5062:	f001 ff8d 	bl	d6f80 <__aeabi_atexit>
    return &factory;
}
   d5066:	4804      	ldr	r0, [pc, #16]	; (d5078 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x38>)
   d5068:	bd10      	pop	{r4, pc}
   d506a:	bf00      	nop
   d506c:	2003e730 	.word	0x2003e730
   d5070:	2003e6e0 	.word	0x2003e6e0
   d5074:	000d4e33 	.word	0x000d4e33
   d5078:	2003e674 	.word	0x2003e674

000d507c <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   d507c:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   d507e:	2500      	movs	r5, #0
   d5080:	4604      	mov	r4, r0
   d5082:	e9c0 5500 	strd	r5, r5, [r0]
   d5086:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d508a:	6085      	str	r5, [r0, #8]
   d508c:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   d508e:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   d5092:	f7ff faf7 	bl	d4684 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   d5096:	f7ff ffb5 	bl	d5004 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   d509a:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d509c:	f7ff ffd0 	bl	d5040 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   d50a0:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d50a2:	6220      	str	r0, [r4, #32]
}
   d50a4:	4620      	mov	r0, r4
   d50a6:	bd38      	pop	{r3, r4, r5, pc}

000d50a8 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   d50a8:	b510      	push	{r4, lr}
    static LogManager mgr;
   d50aa:	4c0b      	ldr	r4, [pc, #44]	; (d50d8 <_ZN5spark10LogManager8instanceEv+0x30>)
   d50ac:	7823      	ldrb	r3, [r4, #0]
   d50ae:	f3bf 8f5b 	dmb	ish
   d50b2:	07db      	lsls	r3, r3, #31
   d50b4:	d40e      	bmi.n	d50d4 <_ZN5spark10LogManager8instanceEv+0x2c>
   d50b6:	4620      	mov	r0, r4
   d50b8:	f7fe fffc 	bl	d40b4 <__cxa_guard_acquire>
   d50bc:	b150      	cbz	r0, d50d4 <_ZN5spark10LogManager8instanceEv+0x2c>
   d50be:	4807      	ldr	r0, [pc, #28]	; (d50dc <_ZN5spark10LogManager8instanceEv+0x34>)
   d50c0:	f7ff ffdc 	bl	d507c <_ZN5spark10LogManagerC1Ev>
   d50c4:	4620      	mov	r0, r4
   d50c6:	f7fe fffa 	bl	d40be <__cxa_guard_release>
   d50ca:	4a05      	ldr	r2, [pc, #20]	; (d50e0 <_ZN5spark10LogManager8instanceEv+0x38>)
   d50cc:	4905      	ldr	r1, [pc, #20]	; (d50e4 <_ZN5spark10LogManager8instanceEv+0x3c>)
   d50ce:	4803      	ldr	r0, [pc, #12]	; (d50dc <_ZN5spark10LogManager8instanceEv+0x34>)
   d50d0:	f001 ff56 	bl	d6f80 <__aeabi_atexit>
    return &mgr;
}
   d50d4:	4801      	ldr	r0, [pc, #4]	; (d50dc <_ZN5spark10LogManager8instanceEv+0x34>)
   d50d6:	bd10      	pop	{r4, pc}
   d50d8:	2003e728 	.word	0x2003e728
   d50dc:	2003e738 	.word	0x2003e738
   d50e0:	2003e6e0 	.word	0x2003e6e0
   d50e4:	000d553d 	.word	0x000d553d

000d50e8 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   d50e8:	4a02      	ldr	r2, [pc, #8]	; (d50f4 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   d50ea:	4903      	ldr	r1, [pc, #12]	; (d50f8 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   d50ec:	4803      	ldr	r0, [pc, #12]	; (d50fc <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   d50ee:	2300      	movs	r3, #0
   d50f0:	f7ff bbe8 	b.w	d48c4 <log_set_callbacks>
   d50f4:	000d5419 	.word	0x000d5419
   d50f8:	000d53a5 	.word	0x000d53a5
   d50fc:	000d5325 	.word	0x000d5325

000d5100 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   d5100:	2300      	movs	r3, #0
   d5102:	461a      	mov	r2, r3
   d5104:	4619      	mov	r1, r3
   d5106:	4618      	mov	r0, r3
   d5108:	f7ff bbdc 	b.w	d48c4 <log_set_callbacks>

000d510c <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d510c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   d510e:	690d      	ldr	r5, [r1, #16]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5110:	f851 3b04 	ldr.w	r3, [r1], #4
   d5114:	9300      	str	r3, [sp, #0]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d5116:	4604      	mov	r4, r0
   d5118:	a801      	add	r0, sp, #4
   d511a:	f7ff fdd2 	bl	d4cc2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONValue(v_, d_);
   d511e:	466a      	mov	r2, sp
   d5120:	4629      	mov	r1, r5
   d5122:	4620      	mov	r0, r4
   d5124:	f001 fd1e 	bl	d6b64 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5128:	a801      	add	r0, sp, #4
   d512a:	f7ff fdd1 	bl	d4cd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d512e:	4620      	mov	r0, r4
   d5130:	b003      	add	sp, #12
   d5132:	bd30      	pop	{r4, r5, pc}

000d5134 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d5134:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   d5136:	688d      	ldr	r5, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5138:	f851 3b04 	ldr.w	r3, [r1], #4
   d513c:	9300      	str	r3, [sp, #0]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d513e:	4604      	mov	r4, r0
   d5140:	a801      	add	r0, sp, #4
   d5142:	f7ff fdbe 	bl	d4cc2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        JSONObjectIterator(value.t_, value.d_) {
   d5146:	466a      	mov	r2, sp
   d5148:	4629      	mov	r1, r5
   d514a:	4620      	mov	r0, r4
   d514c:	f001 fd86 	bl	d6c5c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d5150:	a801      	add	r0, sp, #4
   d5152:	f7ff fdbd 	bl	d4cd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5156:	4620      	mov	r0, r4
   d5158:	b003      	add	sp, #12
   d515a:	bd30      	pop	{r4, r5, pc}

000d515c <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d515c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   d515e:	68cd      	ldr	r5, [r1, #12]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5160:	f851 3b04 	ldr.w	r3, [r1], #4
   d5164:	9300      	str	r3, [sp, #0]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d5166:	4604      	mov	r4, r0
   d5168:	a801      	add	r0, sp, #4
   d516a:	f7ff fdaa 	bl	d4cc2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONString(k_, d_);
   d516e:	466a      	mov	r2, sp
   d5170:	4629      	mov	r1, r5
   d5172:	4620      	mov	r0, r4
   d5174:	f001 fd4e 	bl	d6c14 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d5178:	a801      	add	r0, sp, #4
   d517a:	f7ff fda9 	bl	d4cd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d517e:	4620      	mov	r0, r4
   d5180:	b003      	add	sp, #12
   d5182:	bd30      	pop	{r4, r5, pc}

000d5184 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   d5184:	b570      	push	{r4, r5, r6, lr}
   d5186:	b08a      	sub	sp, #40	; 0x28
   d5188:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   d518a:	4601      	mov	r1, r0
   d518c:	a804      	add	r0, sp, #16
   d518e:	f7ff ffd1 	bl	d5134 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   d5192:	4e14      	ldr	r6, [pc, #80]	; (d51e4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   d5194:	a804      	add	r0, sp, #16
   d5196:	f001 fd79 	bl	d6c8c <_ZN5spark18JSONObjectIterator4nextEv>
   d519a:	b1e8      	cbz	r0, d51d8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   d519c:	a904      	add	r1, sp, #16
   d519e:	4668      	mov	r0, sp
   d51a0:	f7ff ffdc 	bl	d515c <_ZNK5spark18JSONObjectIterator4nameEv>
   d51a4:	9802      	ldr	r0, [sp, #8]
   d51a6:	4631      	mov	r1, r6
   d51a8:	f7ff fe6d 	bl	d4e86 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   d51ac:	4604      	mov	r4, r0
   d51ae:	b110      	cbz	r0, d51b6 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   d51b0:	1e2c      	subs	r4, r5, #0
   d51b2:	bf18      	it	ne
   d51b4:	2401      	movne	r4, #1
   d51b6:	a801      	add	r0, sp, #4
   d51b8:	f7ff fd8a 	bl	d4cd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d51bc:	2c00      	cmp	r4, #0
   d51be:	d0e9      	beq.n	d5194 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   d51c0:	a904      	add	r1, sp, #16
   d51c2:	4668      	mov	r0, sp
   d51c4:	f7ff ffa2 	bl	d510c <_ZNK5spark18JSONObjectIterator5valueEv>
   d51c8:	4668      	mov	r0, sp
   d51ca:	f001 fd01 	bl	d6bd0 <_ZNK5spark9JSONValue5toIntEv>
   d51ce:	6028      	str	r0, [r5, #0]
   d51d0:	a801      	add	r0, sp, #4
   d51d2:	f7ff fd7d 	bl	d4cd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d51d6:	e7dd      	b.n	d5194 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   d51d8:	a805      	add	r0, sp, #20
   d51da:	f7ff fd79 	bl	d4cd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d51de:	b00a      	add	sp, #40	; 0x28
   d51e0:	bd70      	pop	{r4, r5, r6, pc}
   d51e2:	bf00      	nop
   d51e4:	000d7330 	.word	0x000d7330

000d51e8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d51e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d51ea:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   d51ec:	4620      	mov	r0, r4
   d51ee:	4912      	ldr	r1, [pc, #72]	; (d5238 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d51f0:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   d51f2:	f001 ff4c 	bl	d708e <strcmp>
   d51f6:	b948      	cbnz	r0, d520c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x24>
        Serial.begin();
   d51f8:	f001 fa02 	bl	d6600 <_Z16_fetch_usbserialv>
   d51fc:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d5200:	f001 f9ee 	bl	d65e0 <_ZN9USBSerial5beginEl>
        return &Serial;
   d5204:	f001 f9fc 	bl	d6600 <_Z16_fetch_usbserialv>
}
   d5208:	b003      	add	sp, #12
   d520a:	bd30      	pop	{r4, r5, pc}
    if (strcmp(type, "Serial1") == 0) {
   d520c:	490b      	ldr	r1, [pc, #44]	; (d523c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
   d520e:	4620      	mov	r0, r4
   d5210:	f001 ff3d 	bl	d708e <strcmp>
   d5214:	b970      	cbnz	r0, d5234 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   d5216:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   d521a:	a901      	add	r1, sp, #4
   d521c:	4628      	mov	r0, r5
        int baud = 9600;
   d521e:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   d5220:	f7ff ffb0 	bl	d5184 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   d5224:	f001 faa0 	bl	d6768 <_Z22__fetch_global_Serial1v>
   d5228:	9901      	ldr	r1, [sp, #4]
   d522a:	f001 fa97 	bl	d675c <_ZN11USARTSerial5beginEm>
        return &Serial1;
   d522e:	f001 fa9b 	bl	d6768 <_Z22__fetch_global_Serial1v>
   d5232:	e7e9      	b.n	d5208 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    return nullptr;
   d5234:	2000      	movs	r0, #0
   d5236:	e7e7      	b.n	d5208 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
   d5238:	000d7335 	.word	0x000d7335
   d523c:	000d733c 	.word	0x000d733c

000d5240 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5240:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d5242:	e9d0 5300 	ldrd	r5, r3, [r0]
   d5246:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5248:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d524a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d524e:	42ae      	cmp	r6, r5
   d5250:	d005      	beq.n	d525e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   d5252:	f105 0008 	add.w	r0, r5, #8
   d5256:	f7ff fff3 	bl	d5240 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d525a:	3514      	adds	r5, #20
   d525c:	e7f7      	b.n	d524e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d525e:	6820      	ldr	r0, [r4, #0]
   d5260:	f7ff fbe4 	bl	d4a2c <free>
}
   d5264:	4620      	mov	r0, r4
   d5266:	bd70      	pop	{r4, r5, r6, pc}

000d5268 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5268:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d526a:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d526e:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d5270:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   d5274:	42ae      	cmp	r6, r5
   d5276:	d004      	beq.n	d5282 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   d5278:	4628      	mov	r0, r5
   d527a:	f7ff fc7d 	bl	d4b78 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   d527e:	3510      	adds	r5, #16
   d5280:	e7f8      	b.n	d5274 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d5282:	6820      	ldr	r0, [r4, #0]
   d5284:	f7ff fbd2 	bl	d4a2c <free>
}
   d5288:	4620      	mov	r0, r4
   d528a:	bd70      	pop	{r4, r5, r6, pc}

000d528c <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   d528c:	b510      	push	{r4, lr}
   d528e:	4604      	mov	r4, r0
   d5290:	300c      	adds	r0, #12
   d5292:	f7ff ffd5 	bl	d5240 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d5296:	4620      	mov	r0, r4
   d5298:	f7ff ffe6 	bl	d5268 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d529c:	4620      	mov	r0, r4
   d529e:	bd10      	pop	{r4, pc}

000d52a0 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   d52a0:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   d52a2:	4b04      	ldr	r3, [pc, #16]	; (d52b4 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   d52a4:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   d52a6:	f840 3b04 	str.w	r3, [r0], #4
   d52aa:	f7ff ffef 	bl	d528c <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   d52ae:	4620      	mov	r0, r4
   d52b0:	bd10      	pop	{r4, pc}
   d52b2:	bf00      	nop
   d52b4:	000d72d4 	.word	0x000d72d4

000d52b8 <_ZN5spark16StreamLogHandlerD0Ev>:
   d52b8:	b510      	push	{r4, lr}
   d52ba:	4604      	mov	r4, r0
   d52bc:	f7ff fff0 	bl	d52a0 <_ZN5spark16StreamLogHandlerD1Ev>
   d52c0:	4620      	mov	r0, r4
   d52c2:	2124      	movs	r1, #36	; 0x24
   d52c4:	f001 fe61 	bl	d6f8a <_ZdlPvj>
   d52c8:	4620      	mov	r0, r4
   d52ca:	bd10      	pop	{r4, pc}

000d52cc <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   d52cc:	b510      	push	{r4, lr}
   d52ce:	4b03      	ldr	r3, [pc, #12]	; (d52dc <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   d52d0:	6003      	str	r3, [r0, #0]
   d52d2:	4604      	mov	r4, r0
   d52d4:	f7ff ffe4 	bl	d52a0 <_ZN5spark16StreamLogHandlerD1Ev>
   d52d8:	4620      	mov	r0, r4
   d52da:	bd10      	pop	{r4, pc}
   d52dc:	000d73e0 	.word	0x000d73e0

000d52e0 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   d52e0:	b510      	push	{r4, lr}
   d52e2:	4604      	mov	r4, r0
   d52e4:	f7ff fff2 	bl	d52cc <_ZN5spark20JSONStreamLogHandlerD1Ev>
   d52e8:	4620      	mov	r0, r4
   d52ea:	2124      	movs	r1, #36	; 0x24
   d52ec:	f001 fe4d 	bl	d6f8a <_ZdlPvj>
   d52f0:	4620      	mov	r0, r4
   d52f2:	bd10      	pop	{r4, pc}

000d52f4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   d52f4:	2200      	movs	r2, #0
   d52f6:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d52fa:	b510      	push	{r4, lr}
        capacity_(0) {
   d52fc:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   d52fe:	680c      	ldr	r4, [r1, #0]
   d5300:	6004      	str	r4, [r0, #0]
   d5302:	684c      	ldr	r4, [r1, #4]
   d5304:	6044      	str	r4, [r0, #4]
   d5306:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5308:	600a      	str	r2, [r1, #0]
   d530a:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d530c:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d530e:	608a      	str	r2, [r1, #8]
}
   d5310:	bd10      	pop	{r4, pc}

000d5312 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d5312:	b510      	push	{r4, lr}
      { _M_device.unlock(); }
   d5314:	6803      	ldr	r3, [r0, #0]
      ~lock_guard()
   d5316:	4604      	mov	r4, r0
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d5318:	6818      	ldr	r0, [r3, #0]
   d531a:	f7ff f9cb 	bl	d46b4 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   d531e:	4620      	mov	r0, r4
   d5320:	bd10      	pop	{r4, pc}
	...

000d5324 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d5324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5328:	b087      	sub	sp, #28
   d532a:	4680      	mov	r8, r0
   d532c:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   d532e:	4b1c      	ldr	r3, [pc, #112]	; (d53a0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   d5330:	685b      	ldr	r3, [r3, #4]
   d5332:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d5336:	4689      	mov	r9, r1
   d5338:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d533a:	b96b      	cbnz	r3, d5358 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   d533c:	f7ff feb4 	bl	d50a8 <_ZN5spark10LogManager8instanceEv>
   d5340:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d5342:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
   d5346:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5348:	9305      	str	r3, [sp, #20]
   d534a:	f7ff f9ab 	bl	d46a4 <os_mutex_recursive_lock>
        // prevent re-entry
        if (that->isActive()) {
   d534e:	7b23      	ldrb	r3, [r4, #12]
   d5350:	b12b      	cbz	r3, d535e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   d5352:	a805      	add	r0, sp, #20
   d5354:	f7ff ffdd 	bl	d5312 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   d5358:	b007      	add	sp, #28
   d535a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d535e:	2301      	movs	r3, #1
   d5360:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   d5362:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   d5366:	fa5f f989 	uxtb.w	r9, r9
   d536a:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d536e:	45aa      	cmp	sl, r5
   d5370:	d012      	beq.n	d5398 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   d5372:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   d5376:	4631      	mov	r1, r6
   d5378:	1d38      	adds	r0, r7, #4
   d537a:	f7ff fe19 	bl	d4fb0 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d537e:	4581      	cmp	r9, r0
   d5380:	d3f5      	bcc.n	d536e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   d5382:	683b      	ldr	r3, [r7, #0]
   d5384:	9a03      	ldr	r2, [sp, #12]
   d5386:	9200      	str	r2, [sp, #0]
   d5388:	f8d3 b008 	ldr.w	fp, [r3, #8]
   d538c:	464a      	mov	r2, r9
   d538e:	4633      	mov	r3, r6
   d5390:	4641      	mov	r1, r8
   d5392:	4638      	mov	r0, r7
   d5394:	47d8      	blx	fp
   d5396:	e7ea      	b.n	d536e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   d5398:	2300      	movs	r3, #0
   d539a:	7323      	strb	r3, [r4, #12]
   d539c:	e7d9      	b.n	d5352 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   d539e:	bf00      	nop
   d53a0:	e000ed00 	.word	0xe000ed00

000d53a4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d53a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d53a8:	469b      	mov	fp, r3
   d53aa:	4b1a      	ldr	r3, [pc, #104]	; (d5414 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   d53ac:	685b      	ldr	r3, [r3, #4]
   d53ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d53b2:	4680      	mov	r8, r0
   d53b4:	4689      	mov	r9, r1
   d53b6:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   d53b8:	b96b      	cbnz	r3, d53d6 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   d53ba:	f7ff fe75 	bl	d50a8 <_ZN5spark10LogManager8instanceEv>
   d53be:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d53c0:	f100 0324 	add.w	r3, r0, #36	; 0x24
   d53c4:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d53c6:	9301      	str	r3, [sp, #4]
   d53c8:	f7ff f96c 	bl	d46a4 <os_mutex_recursive_lock>
        if (that->isActive()) {
   d53cc:	7b23      	ldrb	r3, [r4, #12]
   d53ce:	b12b      	cbz	r3, d53dc <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   d53d0:	a801      	add	r0, sp, #4
   d53d2:	f7ff ff9e 	bl	d5312 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   d53d6:	b003      	add	sp, #12
   d53d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   d53dc:	2301      	movs	r3, #1
   d53de:	7323      	strb	r3, [r4, #12]
   d53e0:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   d53e4:	b2f6      	uxtb	r6, r6
   d53e6:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d53ea:	4555      	cmp	r5, sl
   d53ec:	d00e      	beq.n	d540c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   d53ee:	f855 7b04 	ldr.w	r7, [r5], #4
   d53f2:	4659      	mov	r1, fp
   d53f4:	1d38      	adds	r0, r7, #4
   d53f6:	f7ff fddb 	bl	d4fb0 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d53fa:	4286      	cmp	r6, r0
   d53fc:	d3f5      	bcc.n	d53ea <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   d53fe:	683b      	ldr	r3, [r7, #0]
   d5400:	464a      	mov	r2, r9
   d5402:	68db      	ldr	r3, [r3, #12]
   d5404:	4641      	mov	r1, r8
   d5406:	4638      	mov	r0, r7
   d5408:	4798      	blx	r3
   d540a:	e7ee      	b.n	d53ea <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   d540c:	2300      	movs	r3, #0
   d540e:	7323      	strb	r3, [r4, #12]
   d5410:	e7de      	b.n	d53d0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   d5412:	bf00      	nop
   d5414:	e000ed00 	.word	0xe000ed00

000d5418 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d5418:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d541c:	4b16      	ldr	r3, [pc, #88]	; (d5478 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   d541e:	685b      	ldr	r3, [r3, #4]
   d5420:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d5424:	4605      	mov	r5, r0
   d5426:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   d5428:	bb1b      	cbnz	r3, d5472 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   d542a:	f7ff fe3d 	bl	d50a8 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   d542e:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   d5432:	4604      	mov	r4, r0
   d5434:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d5436:	9301      	str	r3, [sp, #4]
   d5438:	f7ff f934 	bl	d46a4 <os_mutex_recursive_lock>
   d543c:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   d5440:	2446      	movs	r4, #70	; 0x46
   d5442:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d5446:	45b0      	cmp	r8, r6
   d5448:	d109      	bne.n	d545e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   d544a:	a801      	add	r0, sp, #4
   d544c:	f7ff ff61 	bl	d5312 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   d5450:	42a5      	cmp	r5, r4
   d5452:	bfb4      	ite	lt
   d5454:	2000      	movlt	r0, #0
   d5456:	2001      	movge	r0, #1
}
   d5458:	b002      	add	sp, #8
   d545a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   d545e:	f856 0b04 	ldr.w	r0, [r6], #4
   d5462:	4639      	mov	r1, r7
   d5464:	3004      	adds	r0, #4
   d5466:	f7ff fda3 	bl	d4fb0 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   d546a:	4284      	cmp	r4, r0
   d546c:	bfa8      	it	ge
   d546e:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   d5470:	e7e9      	b.n	d5446 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   d5472:	2000      	movs	r0, #0
   d5474:	e7f0      	b.n	d5458 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   d5476:	bf00      	nop
   d5478:	e000ed00 	.word	0xe000ed00

000d547c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d547c:	b570      	push	{r4, r5, r6, lr}
   d547e:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   d5480:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d5484:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   d5486:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   d548a:	4282      	cmp	r2, r0
   d548c:	d007      	beq.n	d549e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x22>
   d548e:	4601      	mov	r1, r0
            if (*p == value) {
   d5490:	681d      	ldr	r5, [r3, #0]
   d5492:	f851 6b04 	ldr.w	r6, [r1], #4
   d5496:	42ae      	cmp	r6, r5
   d5498:	d003      	beq.n	d54a2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x26>
   d549a:	4608      	mov	r0, r1
   d549c:	e7f5      	b.n	d548a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   d549e:	2000      	movs	r0, #0
}
   d54a0:	bd70      	pop	{r4, r5, r6, pc}
        ::memmove(dest, p, (end - p) * sizeof(T));
   d54a2:	1a52      	subs	r2, r2, r1
   d54a4:	f001 fd96 	bl	d6fd4 <memmove>
    --size_;
   d54a8:	6863      	ldr	r3, [r4, #4]
   d54aa:	3b01      	subs	r3, #1
   d54ac:	6063      	str	r3, [r4, #4]
    return true;
   d54ae:	2001      	movs	r0, #1
   d54b0:	e7f6      	b.n	d54a0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>

000d54b2 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   d54b2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   d54b4:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   d54b8:	4604      	mov	r4, r0
   d54ba:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d54bc:	9101      	str	r1, [sp, #4]
   d54be:	9303      	str	r3, [sp, #12]
   d54c0:	f7ff f8f0 	bl	d46a4 <os_mutex_recursive_lock>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d54c4:	a901      	add	r1, sp, #4
   d54c6:	4620      	mov	r0, r4
   d54c8:	f7ff ffd8 	bl	d547c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   d54cc:	b118      	cbz	r0, d54d6 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   d54ce:	6863      	ldr	r3, [r4, #4]
   d54d0:	b90b      	cbnz	r3, d54d6 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   d54d2:	f7ff fe15 	bl	d5100 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d54d6:	a803      	add	r0, sp, #12
   d54d8:	f7ff ff1b 	bl	d5312 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   d54dc:	b004      	add	sp, #16
   d54de:	bd10      	pop	{r4, pc}

000d54e0 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   d54e0:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   d54e2:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   d54e6:	2318      	movs	r3, #24
   d54e8:	4604      	mov	r4, r0
   d54ea:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   d54ee:	42ae      	cmp	r6, r5
   d54f0:	d015      	beq.n	d551e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   d54f2:	f105 0110 	add.w	r1, r5, #16
   d54f6:	4620      	mov	r0, r4
   d54f8:	f7ff ffc0 	bl	d547c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   d54fc:	6863      	ldr	r3, [r4, #4]
   d54fe:	b90b      	cbnz	r3, d5504 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   d5500:	f7ff fdfe 	bl	d5100 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   d5504:	69e0      	ldr	r0, [r4, #28]
   d5506:	6929      	ldr	r1, [r5, #16]
   d5508:	6803      	ldr	r3, [r0, #0]
   d550a:	68db      	ldr	r3, [r3, #12]
   d550c:	4798      	blx	r3
        if (h.stream) {
   d550e:	6969      	ldr	r1, [r5, #20]
   d5510:	b119      	cbz	r1, d551a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   d5512:	6a20      	ldr	r0, [r4, #32]
   d5514:	6803      	ldr	r3, [r0, #0]
   d5516:	68db      	ldr	r3, [r3, #12]
   d5518:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   d551a:	3518      	adds	r5, #24
   d551c:	e7e7      	b.n	d54ee <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   d551e:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   d5522:	2618      	movs	r6, #24
   d5524:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d5528:	42ae      	cmp	r6, r5
   d552a:	d004      	beq.n	d5536 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   d552c:	4628      	mov	r0, r5
   d552e:	f7ff fb23 	bl	d4b78 <_ZN6StringD1Ev>
   d5532:	3518      	adds	r5, #24
   d5534:	e7f8      	b.n	d5528 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   d5536:	2300      	movs	r3, #0
   d5538:	6163      	str	r3, [r4, #20]
}
   d553a:	bd70      	pop	{r4, r5, r6, pc}

000d553c <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   d553c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d553e:	4604      	mov	r4, r0
    resetSystemCallbacks();
   d5540:	f7ff fdde 	bl	d5100 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d5544:	f104 0324 	add.w	r3, r4, #36	; 0x24
   d5548:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d554a:	9301      	str	r3, [sp, #4]
   d554c:	f7ff f8aa 	bl	d46a4 <os_mutex_recursive_lock>
         destroyFactoryHandlers();
   d5550:	4620      	mov	r0, r4
   d5552:	f7ff ffc5 	bl	d54e0 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   d5556:	a801      	add	r0, sp, #4
   d5558:	f7ff fedb 	bl	d5312 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   d555c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d555e:	b108      	cbz	r0, d5564 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   d5560:	f7ff f898 	bl	d4694 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   d5564:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   d5568:	2618      	movs	r6, #24
   d556a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d556e:	42ae      	cmp	r6, r5
   d5570:	d004      	beq.n	d557c <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   d5572:	4628      	mov	r0, r5
   d5574:	f7ff fb00 	bl	d4b78 <_ZN6StringD1Ev>
   d5578:	3518      	adds	r5, #24
   d557a:	e7f8      	b.n	d556e <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   d557c:	6920      	ldr	r0, [r4, #16]
   d557e:	f7ff fa55 	bl	d4a2c <free>
   d5582:	6820      	ldr	r0, [r4, #0]
   d5584:	f7ff fa52 	bl	d4a2c <free>
}
   d5588:	4620      	mov	r0, r4
   d558a:	b002      	add	sp, #8
   d558c:	bd70      	pop	{r4, r5, r6, pc}

000d558e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   d558e:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d5590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5592:	4606      	mov	r6, r0
   d5594:	460c      	mov	r4, r1
   d5596:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d5598:	d927      	bls.n	d55ea <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5c>
   d559a:	4290      	cmp	r0, r2
   d559c:	d226      	bcs.n	d55ec <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
            --end;
   d559e:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
   d55a2:	1a6c      	subs	r4, r5, r1
   d55a4:	f1a1 0714 	sub.w	r7, r1, #20
   d55a8:	4404      	add	r4, r0
        capacity_(0) {
   d55aa:	2600      	movs	r6, #0
            for (; end != p; --end, --dest) {
   d55ac:	42af      	cmp	r7, r5
   d55ae:	d03d      	beq.n	d562c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*end));
   d55b0:	b1a4      	cbz	r4, d55dc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4e>
struct spark::detail::LogFilter::Node {
   d55b2:	682b      	ldr	r3, [r5, #0]
   d55b4:	6023      	str	r3, [r4, #0]
   d55b6:	88ab      	ldrh	r3, [r5, #4]
   d55b8:	80a3      	strh	r3, [r4, #4]
   d55ba:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
   d55be:	80e3      	strh	r3, [r4, #6]
        capacity_(0) {
   d55c0:	e9c4 6602 	strd	r6, r6, [r4, #8]
   d55c4:	6126      	str	r6, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d55c6:	68ab      	ldr	r3, [r5, #8]
   d55c8:	60a3      	str	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d55ca:	60ae      	str	r6, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d55cc:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d55ce:	68ea      	ldr	r2, [r5, #12]
   d55d0:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d55d2:	60eb      	str	r3, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d55d4:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d55d6:	692a      	ldr	r2, [r5, #16]
   d55d8:	6122      	str	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d55da:	612b      	str	r3, [r5, #16]
   d55dc:	f105 0008 	add.w	r0, r5, #8
   d55e0:	f7ff fe2e 	bl	d5240 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   d55e4:	3d14      	subs	r5, #20
   d55e6:	3c14      	subs	r4, #20
   d55e8:	e7e0      	b.n	d55ac <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
        } else if (dest != p) {
   d55ea:	d01f      	beq.n	d562c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
        capacity_(0) {
   d55ec:	2700      	movs	r7, #0
            for (; p != end; ++p, ++dest) {
   d55ee:	42ac      	cmp	r4, r5
   d55f0:	d01c      	beq.n	d562c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*p));
   d55f2:	b1a6      	cbz	r6, d561e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x90>
   d55f4:	6823      	ldr	r3, [r4, #0]
   d55f6:	6033      	str	r3, [r6, #0]
   d55f8:	88a3      	ldrh	r3, [r4, #4]
   d55fa:	80b3      	strh	r3, [r6, #4]
   d55fc:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   d5600:	80f3      	strh	r3, [r6, #6]
        capacity_(0) {
   d5602:	e9c6 7702 	strd	r7, r7, [r6, #8]
   d5606:	6137      	str	r7, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5608:	68a3      	ldr	r3, [r4, #8]
   d560a:	60b3      	str	r3, [r6, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d560c:	60a7      	str	r7, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d560e:	68f3      	ldr	r3, [r6, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5610:	68e2      	ldr	r2, [r4, #12]
   d5612:	60f2      	str	r2, [r6, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5614:	60e3      	str	r3, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5616:	6933      	ldr	r3, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5618:	6922      	ldr	r2, [r4, #16]
   d561a:	6132      	str	r2, [r6, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d561c:	6123      	str	r3, [r4, #16]
   d561e:	f104 0008 	add.w	r0, r4, #8
   d5622:	f7ff fe0d 	bl	d5240 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   d5626:	3414      	adds	r4, #20
   d5628:	3614      	adds	r6, #20
   d562a:	e7e0      	b.n	d55ee <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x60>
    }
   d562c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d562e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d562e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5630:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   d5634:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d5636:	4604      	mov	r4, r0
   d5638:	460e      	mov	r6, r1
   d563a:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d563c:	db0d      	blt.n	d565a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2c>
   d563e:	3501      	adds	r5, #1
        if (n > 0) {
   d5640:	2d00      	cmp	r5, #0
   d5642:	6800      	ldr	r0, [r0, #0]
   d5644:	dd04      	ble.n	d5650 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
    return ::realloc(ptr, size);
   d5646:	00a9      	lsls	r1, r5, #2
   d5648:	f7ff f9f8 	bl	d4a3c <realloc>
            if (!d) {
   d564c:	b918      	cbnz	r0, d5656 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x28>
}
   d564e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   d5650:	f7ff f9ec 	bl	d4a2c <free>
        T* d = nullptr;
   d5654:	2000      	movs	r0, #0
        data_ = d;
   d5656:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d5658:	60a5      	str	r5, [r4, #8]
    T* const p = data_ + i;
   d565a:	6825      	ldr	r5, [r4, #0]
    move(p + 1, p, data_ + size_);
   d565c:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d565e:	eb05 0186 	add.w	r1, r5, r6, lsl #2
    move(p + 1, p, data_ + size_);
   d5662:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   d5664:	eba2 0286 	sub.w	r2, r2, r6, lsl #2
   d5668:	1d08      	adds	r0, r1, #4
   d566a:	f001 fcb3 	bl	d6fd4 <memmove>
    new(p) T(std::move(value));
   d566e:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   d5672:	6863      	ldr	r3, [r4, #4]
   d5674:	3301      	adds	r3, #1
   d5676:	6063      	str	r3, [r4, #4]
    return true;
   d5678:	2001      	movs	r0, #1
   d567a:	e7e8      	b.n	d564e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x20>

000d567c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   d567c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   d567e:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   d5682:	4604      	mov	r4, r0
    void lock() { os_mutex_recursive_lock(handle_); }
   d5684:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d5686:	9301      	str	r3, [sp, #4]
   d5688:	460d      	mov	r5, r1
   d568a:	f7ff f80b 	bl	d46a4 <os_mutex_recursive_lock>
    return find(data_, data_ + size_, value);
   d568e:	e9d4 3100 	ldrd	r3, r1, [r4]
   d5692:	eb03 0081 	add.w	r0, r3, r1, lsl #2
        for (; p != end; ++p) {
   d5696:	4283      	cmp	r3, r0
   d5698:	461a      	mov	r2, r3
   d569a:	d00b      	beq.n	d56b4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   d569c:	6812      	ldr	r2, [r2, #0]
   d569e:	42aa      	cmp	r2, r5
   d56a0:	f103 0304 	add.w	r3, r3, #4
   d56a4:	d1f7      	bne.n	d5696 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
    LOG_WITH_LOCK(mutex_) {
   d56a6:	a801      	add	r0, sp, #4
   d56a8:	f7ff fe33 	bl	d5312 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            return false;
   d56ac:	2500      	movs	r5, #0
}
   d56ae:	4628      	mov	r0, r5
   d56b0:	b003      	add	sp, #12
   d56b2:	bd30      	pop	{r4, r5, pc}
    return insert(size_, std::move(value));
   d56b4:	462a      	mov	r2, r5
   d56b6:	4620      	mov	r0, r4
   d56b8:	f7ff ffb9 	bl	d562e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   d56bc:	4605      	mov	r5, r0
   d56be:	2800      	cmp	r0, #0
   d56c0:	d0f1      	beq.n	d56a6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   d56c2:	6863      	ldr	r3, [r4, #4]
   d56c4:	2b01      	cmp	r3, #1
   d56c6:	d101      	bne.n	d56cc <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   d56c8:	f7ff fd0e 	bl	d50e8 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d56cc:	a801      	add	r0, sp, #4
   d56ce:	f7ff fe20 	bl	d5312 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   d56d2:	e7ec      	b.n	d56ae <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000d56d4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d56d4:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d56d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d56d8:	4604      	mov	r4, r0
   d56da:	460d      	mov	r5, r1
   d56dc:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d56de:	d914      	bls.n	d570a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   d56e0:	4290      	cmp	r0, r2
   d56e2:	d213      	bcs.n	d570c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   d56e4:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   d56e8:	1a75      	subs	r5, r6, r1
   d56ea:	f1a1 0710 	sub.w	r7, r1, #16
   d56ee:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d56f0:	42b7      	cmp	r7, r6
   d56f2:	d018      	beq.n	d5726 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   d56f4:	b11c      	cbz	r4, d56fe <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   d56f6:	4631      	mov	r1, r6
   d56f8:	4620      	mov	r0, r4
   d56fa:	f7ff faa5 	bl	d4c48 <_ZN6StringC1EOS_>
                end->~T();
   d56fe:	4630      	mov	r0, r6
   d5700:	f7ff fa3a 	bl	d4b78 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d5704:	3e10      	subs	r6, #16
   d5706:	3c10      	subs	r4, #16
   d5708:	e7f2      	b.n	d56f0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d570a:	d00c      	beq.n	d5726 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   d570c:	42b5      	cmp	r5, r6
   d570e:	d00a      	beq.n	d5726 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   d5710:	b11c      	cbz	r4, d571a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   d5712:	4629      	mov	r1, r5
   d5714:	4620      	mov	r0, r4
   d5716:	f7ff fa97 	bl	d4c48 <_ZN6StringC1EOS_>
                p->~T();
   d571a:	4628      	mov	r0, r5
   d571c:	f7ff fa2c 	bl	d4b78 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d5720:	3510      	adds	r5, #16
   d5722:	3410      	adds	r4, #16
   d5724:	e7f2      	b.n	d570c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   d5726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5728 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   d5728:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d572a:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d572c:	4605      	mov	r5, r0
        if (n > 0) {
   d572e:	dd11      	ble.n	d5754 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   d5730:	0130      	lsls	r0, r6, #4
   d5732:	f7ff f973 	bl	d4a1c <malloc>
            if (!d) {
   d5736:	4604      	mov	r4, r0
   d5738:	b158      	cbz	r0, d5752 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d573a:	e9d5 1200 	ldrd	r1, r2, [r5]
   d573e:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   d5742:	f7ff ffc7 	bl	d56d4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d5746:	6828      	ldr	r0, [r5, #0]
   d5748:	f7ff f970 	bl	d4a2c <free>
        data_ = d;
   d574c:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d574e:	60ae      	str	r6, [r5, #8]
        return true;
   d5750:	2001      	movs	r0, #1
    }
   d5752:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d5754:	2400      	movs	r4, #0
   d5756:	e7f6      	b.n	d5746 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000d5758 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d5758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d575c:	4691      	mov	r9, r2
   d575e:	b097      	sub	sp, #92	; 0x5c
        capacity_(0) {
   d5760:	2300      	movs	r3, #0
   d5762:	9103      	str	r1, [sp, #12]
    if (!cats.reserve(filters.size())) {
   d5764:	f8d9 1004 	ldr.w	r1, [r9, #4]
   d5768:	930c      	str	r3, [sp, #48]	; 0x30
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d576a:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   d576c:	4299      	cmp	r1, r3
        capacity_(0) {
   d576e:	e9c0 3300 	strd	r3, r3, [r0]
   d5772:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d5776:	e9c0 3304 	strd	r3, r3, [r0, #16]
   d577a:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d577e:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d5780:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   d5782:	dc23      	bgt.n	d57cc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   d5784:	e9d9 5700 	ldrd	r5, r7, [r9]
   d5788:	2314      	movs	r3, #20
   d578a:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   d578e:	42af      	cmp	r7, r5
   d5790:	d03b      	beq.n	d580a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   d5792:	4629      	mov	r1, r5
   d5794:	a80d      	add	r0, sp, #52	; 0x34
   d5796:	f7ff fa57 	bl	d4c48 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   d579a:	a90d      	add	r1, sp, #52	; 0x34
   d579c:	a811      	add	r0, sp, #68	; 0x44
   d579e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   d57a0:	f7ff fa52 	bl	d4c48 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d57a4:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
   d57a8:	4299      	cmp	r1, r3
   d57aa:	da1b      	bge.n	d57e4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   d57ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    move(p + 1, p, data_ + size_);
   d57ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    T* const p = data_ + i;
   d57b0:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   d57b4:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   d57b8:	4631      	mov	r1, r6
   d57ba:	f106 0010 	add.w	r0, r6, #16
   d57be:	f7ff ff89 	bl	d56d4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   d57c2:	b9ee      	cbnz	r6, d5800 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   d57c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d57c6:	3301      	adds	r3, #1
   d57c8:	930b      	str	r3, [sp, #44]	; 0x2c
    return true;
   d57ca:	e011      	b.n	d57f0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   d57cc:	a80a      	add	r0, sp, #40	; 0x28
   d57ce:	f7ff ffab 	bl	d5728 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d57d2:	2800      	cmp	r0, #0
   d57d4:	d1d6      	bne.n	d5784 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
    Vector<String> cats;
   d57d6:	a80a      	add	r0, sp, #40	; 0x28
   d57d8:	f7ff fd46 	bl	d5268 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d57dc:	4620      	mov	r0, r4
   d57de:	b017      	add	sp, #92	; 0x5c
   d57e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d57e4:	3101      	adds	r1, #1
   d57e6:	a80a      	add	r0, sp, #40	; 0x28
   d57e8:	f7ff ff9e 	bl	d5728 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d57ec:	2800      	cmp	r0, #0
   d57ee:	d1dd      	bne.n	d57ac <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   d57f0:	a811      	add	r0, sp, #68	; 0x44
   d57f2:	f7ff f9c1 	bl	d4b78 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   d57f6:	a80d      	add	r0, sp, #52	; 0x34
   d57f8:	f7ff f9be 	bl	d4b78 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   d57fc:	3514      	adds	r5, #20
   d57fe:	e7c6      	b.n	d578e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   d5800:	a911      	add	r1, sp, #68	; 0x44
   d5802:	4630      	mov	r0, r6
   d5804:	f7ff fa20 	bl	d4c48 <_ZN6StringC1EOS_>
   d5808:	e7dc      	b.n	d57c4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   d580a:	2600      	movs	r6, #0
   d580c:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
   d5810:	960f      	str	r6, [sp, #60]	; 0x3c
        size_t size = 0; // Name length
   d5812:	4637      	mov	r7, r6
   d5814:	f04f 0a14 	mov.w	sl, #20
    for (int i = 0; i < cats.size(); ++i) {
   d5818:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d581c:	429e      	cmp	r6, r3
   d581e:	f280 8097 	bge.w	d5950 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f8>
        const char *category = cats.at(i).c_str();
   d5822:	0133      	lsls	r3, r6, #4
   d5824:	58d3      	ldr	r3, [r2, r3]
   d5826:	9308      	str	r3, [sp, #32]
        if (!category) {
   d5828:	b90b      	cbnz	r3, d582e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd6>
    for (int i = 0; i < cats.size(); ++i) {
   d582a:	3601      	adds	r6, #1
   d582c:	e7f4      	b.n	d5818 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xc0>
        size_t size = 0; // Name length
   d582e:	fb0a f306 	mul.w	r3, sl, r6
   d5832:	9709      	str	r7, [sp, #36]	; 0x24
   d5834:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   d5836:	ad0d      	add	r5, sp, #52	; 0x34
        while ((name = nextSubcategoryName(category, size))) {
   d5838:	a909      	add	r1, sp, #36	; 0x24
   d583a:	a808      	add	r0, sp, #32
   d583c:	f7ff fafc 	bl	d4e38 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d5840:	4683      	mov	fp, r0
   d5842:	2800      	cmp	r0, #0
   d5844:	d0f1      	beq.n	d582a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
            const int index = nodeIndex(*pNodes, name, size, found);
   d5846:	4601      	mov	r1, r0
   d5848:	9a09      	ldr	r2, [sp, #36]	; 0x24
            bool found = false;
   d584a:	f88d 701f 	strb.w	r7, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   d584e:	f10d 031f 	add.w	r3, sp, #31
   d5852:	4628      	mov	r0, r5
   d5854:	f7ff fb6e 	bl	d4f34 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d5858:	f89d 801f 	ldrb.w	r8, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   d585c:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d585e:	f1b8 0f00 	cmp.w	r8, #0
   d5862:	d166      	bne.n	d5932 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   d5864:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
            level(-1) {
   d5868:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
   d586c:	e9cd 8813 	strd	r8, r8, [sp, #76]	; 0x4c
   d5870:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d5874:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
   d5878:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
   d587c:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5880:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   d5884:	4293      	cmp	r3, r2
   d5886:	db1a      	blt.n	d58be <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x166>
   d5888:	f103 0b01 	add.w	fp, r3, #1
        if (n > 0) {
   d588c:	f1bb 0f00 	cmp.w	fp, #0
   d5890:	dd4a      	ble.n	d5928 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d0>
    return ::malloc(size);
   d5892:	fb0a f00b 	mul.w	r0, sl, fp
   d5896:	f7ff f8c1 	bl	d4a1c <malloc>
            if (!d) {
   d589a:	9004      	str	r0, [sp, #16]
   d589c:	2800      	cmp	r0, #0
   d589e:	d045      	beq.n	d592c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d4>
            move(d, data_, data_ + size_);
   d58a0:	e9d5 1200 	ldrd	r1, r2, [r5]
   d58a4:	fb0a 1202 	mla	r2, sl, r2, r1
   d58a8:	f7ff fe71 	bl	d558e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   d58ac:	9b04      	ldr	r3, [sp, #16]
    ::free(ptr);
   d58ae:	6828      	ldr	r0, [r5, #0]
   d58b0:	9304      	str	r3, [sp, #16]
   d58b2:	f7ff f8bb 	bl	d4a2c <free>
        data_ = d;
   d58b6:	9b04      	ldr	r3, [sp, #16]
   d58b8:	602b      	str	r3, [r5, #0]
        capacity_ = n;
   d58ba:	f8c5 b008 	str.w	fp, [r5, #8]
    T* const p = data_ + i;
   d58be:	9b01      	ldr	r3, [sp, #4]
   d58c0:	f8d5 b000 	ldr.w	fp, [r5]
    move(p + 1, p, data_ + size_);
   d58c4:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   d58c6:	fb0a f303 	mul.w	r3, sl, r3
   d58ca:	eb0b 0103 	add.w	r1, fp, r3
    move(p + 1, p, data_ + size_);
   d58ce:	f101 0014 	add.w	r0, r1, #20
   d58d2:	fb0a b202 	mla	r2, sl, r2, fp
   d58d6:	9104      	str	r1, [sp, #16]
    T* const p = data_ + i;
   d58d8:	9305      	str	r3, [sp, #20]
    move(p + 1, p, data_ + size_);
   d58da:	f7ff fe58 	bl	d558e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   d58de:	9904      	ldr	r1, [sp, #16]
   d58e0:	b1a9      	cbz	r1, d590e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1b6>
struct spark::detail::LogFilter::Node {
   d58e2:	9b05      	ldr	r3, [sp, #20]
   d58e4:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d58e6:	f84b 2003 	str.w	r2, [fp, r3]
   d58ea:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   d58ee:	808b      	strh	r3, [r1, #4]
   d58f0:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
   d58f4:	80cb      	strh	r3, [r1, #6]
        capacity_(0) {
   d58f6:	e9c1 7702 	strd	r7, r7, [r1, #8]
   d58fa:	610f      	str	r7, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
   d58fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d58fe:	608b      	str	r3, [r1, #8]
   d5900:	9b14      	ldr	r3, [sp, #80]	; 0x50
      __b = _GLIBCXX_MOVE(__tmp);
   d5902:	9713      	str	r7, [sp, #76]	; 0x4c
      __a = _GLIBCXX_MOVE(__b);
   d5904:	60cb      	str	r3, [r1, #12]
   d5906:	9b15      	ldr	r3, [sp, #84]	; 0x54
      __b = _GLIBCXX_MOVE(__tmp);
   d5908:	9714      	str	r7, [sp, #80]	; 0x50
      __a = _GLIBCXX_MOVE(__b);
   d590a:	610b      	str	r3, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d590c:	9715      	str	r7, [sp, #84]	; 0x54
    ++size_;
   d590e:	686b      	ldr	r3, [r5, #4]
   d5910:	3301      	adds	r3, #1
   d5912:	606b      	str	r3, [r5, #4]
   d5914:	a813      	add	r0, sp, #76	; 0x4c
   d5916:	f7ff fc93 	bl	d5240 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d591a:	f1b8 0f00 	cmp.w	r8, #0
   d591e:	d008      	beq.n	d5932 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
    Vector<Node> nodes;
   d5920:	a80d      	add	r0, sp, #52	; 0x34
   d5922:	f7ff fc8d 	bl	d5240 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d5926:	e756      	b.n	d57d6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   d5928:	4643      	mov	r3, r8
   d592a:	e7c0      	b.n	d58ae <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x156>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d592c:	f04f 0801 	mov.w	r8, #1
   d5930:	e7f0      	b.n	d5914 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
    return data_[i];
   d5932:	9b01      	ldr	r3, [sp, #4]
   d5934:	682d      	ldr	r5, [r5, #0]
   d5936:	fb0a 5503 	mla	r5, sl, r3, r5
            if (!*category) { // Check if it's last subcategory
   d593a:	9b08      	ldr	r3, [sp, #32]
   d593c:	781b      	ldrb	r3, [r3, #0]
   d593e:	b92b      	cbnz	r3, d594c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
                node.level = filters.at(i).level_;
   d5940:	f8d9 3000 	ldr.w	r3, [r9]
   d5944:	9a02      	ldr	r2, [sp, #8]
   d5946:	4413      	add	r3, r2
   d5948:	7c1b      	ldrb	r3, [r3, #16]
   d594a:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   d594c:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   d594e:	e773      	b.n	d5838 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xe0>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5950:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5952:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5954:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   d5956:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5958:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d595a:	920b      	str	r2, [sp, #44]	; 0x2c
      __a = _GLIBCXX_MOVE(__b);
   d595c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   d595e:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5960:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5962:	60a2      	str	r2, [r4, #8]
   d5964:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   d5966:	930d      	str	r3, [sp, #52]	; 0x34
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5968:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d596a:	60e2      	str	r2, [r4, #12]
   d596c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
      __b = _GLIBCXX_MOVE(__tmp);
   d596e:	930e      	str	r3, [sp, #56]	; 0x38
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5970:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5972:	6122      	str	r2, [r4, #16]
   d5974:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   d5976:	930f      	str	r3, [sp, #60]	; 0x3c
    level_ = level;
   d5978:	9b03      	ldr	r3, [sp, #12]
   d597a:	910a      	str	r1, [sp, #40]	; 0x28
      __a = _GLIBCXX_MOVE(__b);
   d597c:	6162      	str	r2, [r4, #20]
   d597e:	7623      	strb	r3, [r4, #24]
   d5980:	e7ce      	b.n	d5920 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c8>
	...

000d5984 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d5984:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   d5986:	4605      	mov	r5, r0
   d5988:	4b09      	ldr	r3, [pc, #36]	; (d59b0 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   d598a:	f845 3b04 	str.w	r3, [r5], #4
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d598e:	4604      	mov	r4, r0
   d5990:	460e      	mov	r6, r1
        filter_(level, filters) {
   d5992:	a801      	add	r0, sp, #4
   d5994:	4611      	mov	r1, r2
   d5996:	f7fe fd6e 	bl	d4476 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d599a:	aa01      	add	r2, sp, #4
   d599c:	4631      	mov	r1, r6
   d599e:	4628      	mov	r0, r5
   d59a0:	f7ff feda 	bl	d5758 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d59a4:	a801      	add	r0, sp, #4
   d59a6:	f7fe fd25 	bl	d43f4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   d59aa:	4620      	mov	r0, r4
   d59ac:	b004      	add	sp, #16
   d59ae:	bd70      	pop	{r4, r5, r6, pc}
   d59b0:	000d72d4 	.word	0x000d72d4

000d59b4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   d59b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d59b6:	460f      	mov	r7, r1
   d59b8:	b087      	sub	sp, #28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d59ba:	4926      	ldr	r1, [pc, #152]	; (d5a54 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>)
            Print *stream, const JSONValue &params) {
   d59bc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d59be:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   d59c0:	4616      	mov	r6, r2
   d59c2:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d59c4:	f001 fb63 	bl	d708e <strcmp>
   d59c8:	bb00      	cbnz	r0, d5a0c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x58>
        if (!stream) {
   d59ca:	b1e4      	cbz	r4, d5a06 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   d59cc:	4629      	mov	r1, r5
   d59ce:	4668      	mov	r0, sp
   d59d0:	f7ff fc90 	bl	d52f4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d59d4:	4920      	ldr	r1, [pc, #128]	; (d5a58 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   d59d6:	2024      	movs	r0, #36	; 0x24
   d59d8:	f001 fad9 	bl	d6f8e <_ZnwjRKSt9nothrow_t>
   d59dc:	4605      	mov	r5, r0
   d59de:	b170      	cbz	r0, d59fe <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   d59e0:	4669      	mov	r1, sp
   d59e2:	a803      	add	r0, sp, #12
   d59e4:	f7fe fd47 	bl	d4476 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d59e8:	aa03      	add	r2, sp, #12
   d59ea:	4631      	mov	r1, r6
   d59ec:	4628      	mov	r0, r5
   d59ee:	f7ff ffc9 	bl	d5984 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d59f2:	a803      	add	r0, sp, #12
   d59f4:	f7fe fcfe 	bl	d43f4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
    using StreamLogHandler::StreamLogHandler;
   d59f8:	4b18      	ldr	r3, [pc, #96]	; (d5a5c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa8>)
        stream_(&stream) {
   d59fa:	622c      	str	r4, [r5, #32]
    using StreamLogHandler::StreamLogHandler;
   d59fc:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d59fe:	4668      	mov	r0, sp
   d5a00:	f7fe fcf8 	bl	d43f4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d5a04:	462c      	mov	r4, r5
}
   d5a06:	4620      	mov	r0, r4
   d5a08:	b007      	add	sp, #28
   d5a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   d5a0c:	4914      	ldr	r1, [pc, #80]	; (d5a60 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xac>)
   d5a0e:	4638      	mov	r0, r7
   d5a10:	f001 fb3d 	bl	d708e <strcmp>
   d5a14:	b9e0      	cbnz	r0, d5a50 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x9c>
        if (!stream) {
   d5a16:	2c00      	cmp	r4, #0
   d5a18:	d0f5      	beq.n	d5a06 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d5a1a:	4629      	mov	r1, r5
   d5a1c:	4668      	mov	r0, sp
   d5a1e:	f7ff fc69 	bl	d52f4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d5a22:	490d      	ldr	r1, [pc, #52]	; (d5a58 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   d5a24:	2024      	movs	r0, #36	; 0x24
   d5a26:	f001 fab2 	bl	d6f8e <_ZnwjRKSt9nothrow_t>
   d5a2a:	4605      	mov	r5, r0
   d5a2c:	2800      	cmp	r0, #0
   d5a2e:	d0e6      	beq.n	d59fe <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   d5a30:	4669      	mov	r1, sp
   d5a32:	a803      	add	r0, sp, #12
   d5a34:	f7fe fd1f 	bl	d4476 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d5a38:	aa03      	add	r2, sp, #12
   d5a3a:	4631      	mov	r1, r6
   d5a3c:	4628      	mov	r0, r5
   d5a3e:	f7ff ffa1 	bl	d5984 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d5a42:	a803      	add	r0, sp, #12
   d5a44:	f7fe fcd6 	bl	d43f4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d5a48:	4b06      	ldr	r3, [pc, #24]	; (d5a64 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>)
   d5a4a:	602b      	str	r3, [r5, #0]
   d5a4c:	622c      	str	r4, [r5, #32]
}
   d5a4e:	e7d6      	b.n	d59fe <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
            return nullptr; // Output stream is not specified
   d5a50:	2400      	movs	r4, #0
   d5a52:	e7d8      	b.n	d5a06 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
   d5a54:	000d7344 	.word	0x000d7344
   d5a58:	000d7565 	.word	0x000d7565
   d5a5c:	000d73e0 	.word	0x000d73e0
   d5a60:	000d7348 	.word	0x000d7348
   d5a64:	000d73c8 	.word	0x000d73c8

000d5a68 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   d5a68:	4b01      	ldr	r3, [pc, #4]	; (d5a70 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5a6a:	4a02      	ldr	r2, [pc, #8]	; (d5a74 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5a6c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d5a6e:	4770      	bx	lr
   d5a70:	2003e734 	.word	0x2003e734
   d5a74:	000d7359 	.word	0x000d7359

000d5a78 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d5a78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5a7c:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   d5a7e:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d5a82:	4604      	mov	r4, r0
   d5a84:	460e      	mov	r6, r1
   d5a86:	4617      	mov	r7, r2
   d5a88:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   d5a8a:	f000 fdb9 	bl	d6600 <_Z16_fetch_usbserialv>
   d5a8e:	4581      	cmp	r9, r0
   d5a90:	d04c      	beq.n	d5b2c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   d5a92:	792b      	ldrb	r3, [r5, #4]
   d5a94:	0719      	lsls	r1, r3, #28
   d5a96:	d504      	bpl.n	d5aa2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   d5a98:	696a      	ldr	r2, [r5, #20]
   d5a9a:	4954      	ldr	r1, [pc, #336]	; (d5bec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   d5a9c:	4620      	mov	r0, r4
   d5a9e:	f7ff fa3a 	bl	d4f16 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   d5aa2:	f1b8 0f00 	cmp.w	r8, #0
   d5aa6:	d00d      	beq.n	d5ac4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   d5aa8:	215b      	movs	r1, #91	; 0x5b
   d5aaa:	4620      	mov	r0, r4
   d5aac:	f7ff fa27 	bl	d4efe <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   d5ab0:	4641      	mov	r1, r8
   d5ab2:	4620      	mov	r0, r4
   d5ab4:	f7ff fa14 	bl	d4ee0 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   d5ab8:	6823      	ldr	r3, [r4, #0]
   d5aba:	494d      	ldr	r1, [pc, #308]	; (d5bf0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   d5abc:	68db      	ldr	r3, [r3, #12]
   d5abe:	2202      	movs	r2, #2
   d5ac0:	4620      	mov	r0, r4
   d5ac2:	4798      	blx	r3
    if (attr.has_file) {
   d5ac4:	792b      	ldrb	r3, [r5, #4]
   d5ac6:	07da      	lsls	r2, r3, #31
   d5ac8:	d523      	bpl.n	d5b12 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   d5aca:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   d5ace:	212f      	movs	r1, #47	; 0x2f
   d5ad0:	4640      	mov	r0, r8
   d5ad2:	f001 fb26 	bl	d7122 <strrchr>
    if (s1) {
   d5ad6:	b108      	cbz	r0, d5adc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   d5ad8:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   d5adc:	4641      	mov	r1, r8
   d5ade:	4620      	mov	r0, r4
   d5ae0:	f7ff f9fe 	bl	d4ee0 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   d5ae4:	792b      	ldrb	r3, [r5, #4]
   d5ae6:	079b      	lsls	r3, r3, #30
   d5ae8:	d508      	bpl.n	d5afc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   d5aea:	213a      	movs	r1, #58	; 0x3a
   d5aec:	4620      	mov	r0, r4
   d5aee:	f7ff fa06 	bl	d4efe <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   d5af2:	68ea      	ldr	r2, [r5, #12]
   d5af4:	493f      	ldr	r1, [pc, #252]	; (d5bf4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   d5af6:	4620      	mov	r0, r4
   d5af8:	f7ff fa0d 	bl	d4f16 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   d5afc:	792a      	ldrb	r2, [r5, #4]
   d5afe:	6823      	ldr	r3, [r4, #0]
   d5b00:	f012 0f04 	tst.w	r2, #4
   d5b04:	68db      	ldr	r3, [r3, #12]
            write(", ", 2);
   d5b06:	bf14      	ite	ne
   d5b08:	493b      	ldrne	r1, [pc, #236]	; (d5bf8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   d5b0a:	493c      	ldreq	r1, [pc, #240]	; (d5bfc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   d5b0c:	2202      	movs	r2, #2
            write(": ", 2);
   d5b0e:	4620      	mov	r0, r4
   d5b10:	4798      	blx	r3
    if (attr.has_function) {
   d5b12:	792b      	ldrb	r3, [r5, #4]
   d5b14:	0758      	lsls	r0, r3, #29
   d5b16:	d51d      	bpl.n	d5b54 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d5b18:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   d5b1a:	460b      	mov	r3, r1
   d5b1c:	461a      	mov	r2, r3
    for (; *s; ++s) {
   d5b1e:	f813 0b01 	ldrb.w	r0, [r3], #1
   d5b22:	b160      	cbz	r0, d5b3e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   d5b24:	2820      	cmp	r0, #32
   d5b26:	d108      	bne.n	d5b3a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   d5b28:	4619      	mov	r1, r3
   d5b2a:	e7f7      	b.n	d5b1c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   d5b2c:	4834      	ldr	r0, [pc, #208]	; (d5c00 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   d5b2e:	f000 ff1e 	bl	d696e <_ZN5spark12NetworkClass9listeningEv>
   d5b32:	2800      	cmp	r0, #0
   d5b34:	d0ad      	beq.n	d5a92 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   d5b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   d5b3a:	2828      	cmp	r0, #40	; 0x28
   d5b3c:	d1ee      	bne.n	d5b1c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   d5b3e:	6823      	ldr	r3, [r4, #0]
   d5b40:	1a52      	subs	r2, r2, r1
   d5b42:	68db      	ldr	r3, [r3, #12]
   d5b44:	4620      	mov	r0, r4
   d5b46:	4798      	blx	r3
        write("(): ", 4);
   d5b48:	6823      	ldr	r3, [r4, #0]
   d5b4a:	492e      	ldr	r1, [pc, #184]	; (d5c04 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   d5b4c:	68db      	ldr	r3, [r3, #12]
   d5b4e:	2204      	movs	r2, #4
   d5b50:	4620      	mov	r0, r4
   d5b52:	4798      	blx	r3
    return log_level_name(level, nullptr);
   d5b54:	2100      	movs	r1, #0
   d5b56:	4638      	mov	r0, r7
   d5b58:	f7fe feac 	bl	d48b4 <log_level_name>
   d5b5c:	4601      	mov	r1, r0
    write(s);
   d5b5e:	4620      	mov	r0, r4
   d5b60:	f7ff f9be 	bl	d4ee0 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   d5b64:	6823      	ldr	r3, [r4, #0]
   d5b66:	4925      	ldr	r1, [pc, #148]	; (d5bfc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   d5b68:	68db      	ldr	r3, [r3, #12]
   d5b6a:	2202      	movs	r2, #2
   d5b6c:	4620      	mov	r0, r4
   d5b6e:	4798      	blx	r3
    if (msg) {
   d5b70:	b11e      	cbz	r6, d5b7a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   d5b72:	4631      	mov	r1, r6
   d5b74:	4620      	mov	r0, r4
   d5b76:	f7ff f9b3 	bl	d4ee0 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   d5b7a:	792b      	ldrb	r3, [r5, #4]
   d5b7c:	f013 0f30 	tst.w	r3, #48	; 0x30
   d5b80:	d02c      	beq.n	d5bdc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   d5b82:	6823      	ldr	r3, [r4, #0]
   d5b84:	4920      	ldr	r1, [pc, #128]	; (d5c08 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   d5b86:	68db      	ldr	r3, [r3, #12]
   d5b88:	2202      	movs	r2, #2
   d5b8a:	4620      	mov	r0, r4
   d5b8c:	4798      	blx	r3
        if (attr.has_code) {
   d5b8e:	792b      	ldrb	r3, [r5, #4]
   d5b90:	06d9      	lsls	r1, r3, #27
   d5b92:	d50a      	bpl.n	d5baa <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   d5b94:	6823      	ldr	r3, [r4, #0]
   d5b96:	491d      	ldr	r1, [pc, #116]	; (d5c0c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d5b98:	68db      	ldr	r3, [r3, #12]
   d5b9a:	2207      	movs	r2, #7
   d5b9c:	4620      	mov	r0, r4
   d5b9e:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   d5ba0:	69aa      	ldr	r2, [r5, #24]
   d5ba2:	491b      	ldr	r1, [pc, #108]	; (d5c10 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   d5ba4:	4620      	mov	r0, r4
   d5ba6:	f7ff f9b6 	bl	d4f16 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   d5baa:	792b      	ldrb	r3, [r5, #4]
   d5bac:	069a      	lsls	r2, r3, #26
   d5bae:	d511      	bpl.n	d5bd4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   d5bb0:	06db      	lsls	r3, r3, #27
   d5bb2:	d505      	bpl.n	d5bc0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   d5bb4:	6823      	ldr	r3, [r4, #0]
   d5bb6:	4910      	ldr	r1, [pc, #64]	; (d5bf8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   d5bb8:	68db      	ldr	r3, [r3, #12]
   d5bba:	2202      	movs	r2, #2
   d5bbc:	4620      	mov	r0, r4
   d5bbe:	4798      	blx	r3
            write("details = ", 10);
   d5bc0:	6823      	ldr	r3, [r4, #0]
   d5bc2:	4914      	ldr	r1, [pc, #80]	; (d5c14 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   d5bc4:	68db      	ldr	r3, [r3, #12]
   d5bc6:	4620      	mov	r0, r4
   d5bc8:	220a      	movs	r2, #10
   d5bca:	4798      	blx	r3
            write(attr.details);
   d5bcc:	69e9      	ldr	r1, [r5, #28]
   d5bce:	4620      	mov	r0, r4
   d5bd0:	f7ff f986 	bl	d4ee0 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   d5bd4:	215d      	movs	r1, #93	; 0x5d
   d5bd6:	4620      	mov	r0, r4
   d5bd8:	f7ff f991 	bl	d4efe <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   d5bdc:	6823      	ldr	r3, [r4, #0]
   d5bde:	490e      	ldr	r1, [pc, #56]	; (d5c18 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   d5be0:	68db      	ldr	r3, [r3, #12]
   d5be2:	4620      	mov	r0, r4
   d5be4:	2202      	movs	r2, #2
}
   d5be6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   d5bea:	4718      	bx	r3
   d5bec:	000d735d 	.word	0x000d735d
   d5bf0:	000d7364 	.word	0x000d7364
   d5bf4:	000d7367 	.word	0x000d7367
   d5bf8:	000d736a 	.word	0x000d736a
   d5bfc:	000d736f 	.word	0x000d736f
   d5c00:	2003e7bc 	.word	0x2003e7bc
   d5c04:	000d736d 	.word	0x000d736d
   d5c08:	000d7372 	.word	0x000d7372
   d5c0c:	000d7375 	.word	0x000d7375
   d5c10:	000d737d 	.word	0x000d737d
   d5c14:	000d7380 	.word	0x000d7380
   d5c18:	000d738b 	.word	0x000d738b

000d5c1c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d5c1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5c20:	b085      	sub	sp, #20
    if (this->stream() == &Serial && Network.listening()) {
   d5c22:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d5c26:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   d5c28:	4605      	mov	r5, r0
   d5c2a:	460f      	mov	r7, r1
   d5c2c:	4690      	mov	r8, r2
   d5c2e:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   d5c30:	f000 fce6 	bl	d6600 <_Z16_fetch_usbserialv>
   d5c34:	4581      	cmp	r9, r0
   d5c36:	d105      	bne.n	d5c44 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   d5c38:	4849      	ldr	r0, [pc, #292]	; (d5d60 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   d5c3a:	f000 fe98 	bl	d696e <_ZN5spark12NetworkClass9listeningEv>
   d5c3e:	2800      	cmp	r0, #0
   d5c40:	f040 808a 	bne.w	d5d58 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
    JSONStreamWriter json(*this->stream());
   d5c44:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   d5c46:	4a47      	ldr	r2, [pc, #284]	; (d5d64 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   d5c48:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   d5c4a:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   d5c4e:	a801      	add	r0, sp, #4
        strm_(stream) {
   d5c50:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   d5c52:	f88d 9008 	strb.w	r9, [sp, #8]
   d5c56:	f001 f842 	bl	d6cde <_ZN5spark10JSONWriter11beginObjectEv>
   d5c5a:	4649      	mov	r1, r9
   d5c5c:	4640      	mov	r0, r8
   d5c5e:	f7fe fe29 	bl	d48b4 <log_level_name>
    json.name("l", 1).value(s);
   d5c62:	4941      	ldr	r1, [pc, #260]	; (d5d68 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   d5c64:	4680      	mov	r8, r0
   d5c66:	2201      	movs	r2, #1
   d5c68:	a801      	add	r0, sp, #4
   d5c6a:	f001 f8c1 	bl	d6df0 <_ZN5spark10JSONWriter4nameEPKcj>
   d5c6e:	4641      	mov	r1, r8
   d5c70:	f7ff f928 	bl	d4ec4 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   d5c74:	b13f      	cbz	r7, d5c86 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   d5c76:	493d      	ldr	r1, [pc, #244]	; (d5d6c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   d5c78:	2201      	movs	r2, #1
   d5c7a:	a801      	add	r0, sp, #4
   d5c7c:	f001 f8b8 	bl	d6df0 <_ZN5spark10JSONWriter4nameEPKcj>
   d5c80:	4639      	mov	r1, r7
   d5c82:	f7ff f91f 	bl	d4ec4 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   d5c86:	b13e      	cbz	r6, d5c98 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   d5c88:	4939      	ldr	r1, [pc, #228]	; (d5d70 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   d5c8a:	2201      	movs	r2, #1
   d5c8c:	a801      	add	r0, sp, #4
   d5c8e:	f001 f8af 	bl	d6df0 <_ZN5spark10JSONWriter4nameEPKcj>
   d5c92:	4631      	mov	r1, r6
   d5c94:	f7ff f916 	bl	d4ec4 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   d5c98:	7923      	ldrb	r3, [r4, #4]
   d5c9a:	07df      	lsls	r7, r3, #31
   d5c9c:	d50e      	bpl.n	d5cbc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   d5c9e:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   d5ca0:	212f      	movs	r1, #47	; 0x2f
   d5ca2:	4630      	mov	r0, r6
   d5ca4:	f001 fa3d 	bl	d7122 <strrchr>
    if (s1) {
   d5ca8:	b100      	cbz	r0, d5cac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   d5caa:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   d5cac:	4931      	ldr	r1, [pc, #196]	; (d5d74 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   d5cae:	2201      	movs	r2, #1
   d5cb0:	a801      	add	r0, sp, #4
   d5cb2:	f001 f89d 	bl	d6df0 <_ZN5spark10JSONWriter4nameEPKcj>
   d5cb6:	4631      	mov	r1, r6
   d5cb8:	f7ff f904 	bl	d4ec4 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   d5cbc:	7923      	ldrb	r3, [r4, #4]
   d5cbe:	079e      	lsls	r6, r3, #30
   d5cc0:	d507      	bpl.n	d5cd2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   d5cc2:	492d      	ldr	r1, [pc, #180]	; (d5d78 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   d5cc4:	2202      	movs	r2, #2
   d5cc6:	a801      	add	r0, sp, #4
   d5cc8:	f001 f892 	bl	d6df0 <_ZN5spark10JSONWriter4nameEPKcj>
   d5ccc:	68e1      	ldr	r1, [r4, #12]
   d5cce:	f001 f813 	bl	d6cf8 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   d5cd2:	7923      	ldrb	r3, [r4, #4]
   d5cd4:	0758      	lsls	r0, r3, #29
   d5cd6:	d514      	bpl.n	d5d02 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d5cd8:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   d5cda:	4633      	mov	r3, r6
   d5cdc:	461f      	mov	r7, r3
    for (; *s; ++s) {
   d5cde:	f813 2b01 	ldrb.w	r2, [r3], #1
   d5ce2:	b12a      	cbz	r2, d5cf0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   d5ce4:	2a20      	cmp	r2, #32
   d5ce6:	d101      	bne.n	d5cec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   d5ce8:	461e      	mov	r6, r3
   d5cea:	e7f7      	b.n	d5cdc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   d5cec:	2a28      	cmp	r2, #40	; 0x28
   d5cee:	d1f5      	bne.n	d5cdc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   d5cf0:	4922      	ldr	r1, [pc, #136]	; (d5d7c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   d5cf2:	2202      	movs	r2, #2
   d5cf4:	a801      	add	r0, sp, #4
   d5cf6:	f001 f87b 	bl	d6df0 <_ZN5spark10JSONWriter4nameEPKcj>
   d5cfa:	1bba      	subs	r2, r7, r6
   d5cfc:	4631      	mov	r1, r6
   d5cfe:	f001 f887 	bl	d6e10 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   d5d02:	7923      	ldrb	r3, [r4, #4]
   d5d04:	0719      	lsls	r1, r3, #28
   d5d06:	d507      	bpl.n	d5d18 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   d5d08:	491d      	ldr	r1, [pc, #116]	; (d5d80 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   d5d0a:	2201      	movs	r2, #1
   d5d0c:	a801      	add	r0, sp, #4
   d5d0e:	f001 f86f 	bl	d6df0 <_ZN5spark10JSONWriter4nameEPKcj>
   d5d12:	6961      	ldr	r1, [r4, #20]
   d5d14:	f001 f802 	bl	d6d1c <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   d5d18:	7923      	ldrb	r3, [r4, #4]
   d5d1a:	06da      	lsls	r2, r3, #27
   d5d1c:	d508      	bpl.n	d5d30 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   d5d1e:	2204      	movs	r2, #4
   d5d20:	4918      	ldr	r1, [pc, #96]	; (d5d84 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   d5d22:	eb0d 0002 	add.w	r0, sp, r2
   d5d26:	f001 f863 	bl	d6df0 <_ZN5spark10JSONWriter4nameEPKcj>
   d5d2a:	69a1      	ldr	r1, [r4, #24]
   d5d2c:	f000 ffe4 	bl	d6cf8 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   d5d30:	7923      	ldrb	r3, [r4, #4]
   d5d32:	069b      	lsls	r3, r3, #26
   d5d34:	d507      	bpl.n	d5d46 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   d5d36:	4914      	ldr	r1, [pc, #80]	; (d5d88 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   d5d38:	2206      	movs	r2, #6
   d5d3a:	a801      	add	r0, sp, #4
   d5d3c:	f001 f858 	bl	d6df0 <_ZN5spark10JSONWriter4nameEPKcj>
   d5d40:	69e1      	ldr	r1, [r4, #28]
   d5d42:	f7ff f8bf 	bl	d4ec4 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   d5d46:	a801      	add	r0, sp, #4
   d5d48:	f000 ffb3 	bl	d6cb2 <_ZN5spark10JSONWriter9endObjectEv>
    this->stream()->write((const uint8_t*)"\r\n", 2);
   d5d4c:	6a28      	ldr	r0, [r5, #32]
   d5d4e:	490f      	ldr	r1, [pc, #60]	; (d5d8c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   d5d50:	6803      	ldr	r3, [r0, #0]
   d5d52:	2202      	movs	r2, #2
   d5d54:	68db      	ldr	r3, [r3, #12]
   d5d56:	4798      	blx	r3
}
   d5d58:	b005      	add	sp, #20
   d5d5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d5d5e:	bf00      	nop
   d5d60:	2003e7bc 	.word	0x2003e7bc
   d5d64:	000d73b0 	.word	0x000d73b0
   d5d68:	000d733a 	.word	0x000d733a
   d5d6c:	000d738e 	.word	0x000d738e
   d5d70:	000d7390 	.word	0x000d7390
   d5d74:	000d7392 	.word	0x000d7392
   d5d78:	000d7394 	.word	0x000d7394
   d5d7c:	000d7397 	.word	0x000d7397
   d5d80:	000d739a 	.word	0x000d739a
   d5d84:	000d739c 	.word	0x000d739c
   d5d88:	000d73a1 	.word	0x000d73a1
   d5d8c:	000d738b 	.word	0x000d738b

000d5d90 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5d90:	4b02      	ldr	r3, [pc, #8]	; (d5d9c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5d92:	681a      	ldr	r2, [r3, #0]
   d5d94:	4b02      	ldr	r3, [pc, #8]	; (d5da0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5d96:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d5d98:	4770      	bx	lr
   d5d9a:	bf00      	nop
   d5d9c:	2003e678 	.word	0x2003e678
   d5da0:	2003e760 	.word	0x2003e760

000d5da4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5da4:	2100      	movs	r1, #0
   d5da6:	f7fe bd9d 	b.w	d48e4 <system_delay_ms>

000d5daa <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5daa:	b510      	push	{r4, lr}
   d5dac:	4604      	mov	r4, r0
   d5dae:	f7fe f9f3 	bl	d4198 <_ZNSt14_Function_baseD1Ev>
   d5db2:	4620      	mov	r0, r4
   d5db4:	bd10      	pop	{r4, pc}

000d5db6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d5db6:	b513      	push	{r0, r1, r4, lr}
   d5db8:	460b      	mov	r3, r1
   d5dba:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5dbc:	e9d0 0100 	ldrd	r0, r1, [r0]
   d5dc0:	466c      	mov	r4, sp
   d5dc2:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5dc6:	e893 0003 	ldmia.w	r3, {r0, r1}
   d5dca:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d5dce:	e894 0003 	ldmia.w	r4, {r0, r1}
   d5dd2:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d5dd6:	b002      	add	sp, #8
   d5dd8:	bd10      	pop	{r4, pc}
	...

000d5ddc <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d5ddc:	4803      	ldr	r0, [pc, #12]	; (d5dec <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5dde:	4a04      	ldr	r2, [pc, #16]	; (d5df0 <_GLOBAL__sub_I_RGB+0x14>)
   d5de0:	4904      	ldr	r1, [pc, #16]	; (d5df4 <_GLOBAL__sub_I_RGB+0x18>)
   d5de2:	2300      	movs	r3, #0
   d5de4:	6083      	str	r3, [r0, #8]
   d5de6:	f001 b8cb 	b.w	d6f80 <__aeabi_atexit>
   d5dea:	bf00      	nop
   d5dec:	2003e764 	.word	0x2003e764
   d5df0:	2003e6e0 	.word	0x2003e6e0
   d5df4:	000d5dab 	.word	0x000d5dab

000d5df8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d5df8:	4b01      	ldr	r3, [pc, #4]	; (d5e00 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d5dfa:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d5dfc:	4770      	bx	lr
   d5dfe:	bf00      	nop
   d5e00:	2003e67c 	.word	0x2003e67c

000d5e04 <serialEventRun>:
{
   d5e04:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5e06:	4b0b      	ldr	r3, [pc, #44]	; (d5e34 <serialEventRun+0x30>)
   d5e08:	b143      	cbz	r3, d5e1c <serialEventRun+0x18>
   d5e0a:	f000 fbf9 	bl	d6600 <_Z16_fetch_usbserialv>
   d5e0e:	6803      	ldr	r3, [r0, #0]
   d5e10:	691b      	ldr	r3, [r3, #16]
   d5e12:	4798      	blx	r3
   d5e14:	2800      	cmp	r0, #0
   d5e16:	dd01      	ble.n	d5e1c <serialEventRun+0x18>
        serialEvent();
   d5e18:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d5e1c:	4b06      	ldr	r3, [pc, #24]	; (d5e38 <serialEventRun+0x34>)
   d5e1e:	b143      	cbz	r3, d5e32 <serialEventRun+0x2e>
   d5e20:	f000 fca2 	bl	d6768 <_Z22__fetch_global_Serial1v>
   d5e24:	6803      	ldr	r3, [r0, #0]
   d5e26:	691b      	ldr	r3, [r3, #16]
   d5e28:	4798      	blx	r3
   d5e2a:	2800      	cmp	r0, #0
   d5e2c:	dd01      	ble.n	d5e32 <serialEventRun+0x2e>
        serialEvent1();
   d5e2e:	f3af 8000 	nop.w
}
   d5e32:	bd08      	pop	{r3, pc}
	...

000d5e3c <_post_loop>:
{
   d5e3c:	b508      	push	{r3, lr}
	serialEventRun();
   d5e3e:	f7ff ffe1 	bl	d5e04 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5e42:	f7fe fbe7 	bl	d4614 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5e46:	4b01      	ldr	r3, [pc, #4]	; (d5e4c <_post_loop+0x10>)
   d5e48:	6018      	str	r0, [r3, #0]
}
   d5e4a:	bd08      	pop	{r3, pc}
   d5e4c:	2003e7d0 	.word	0x2003e7d0

000d5e50 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5e50:	4802      	ldr	r0, [pc, #8]	; (d5e5c <_Z33system_initialize_user_backup_ramv+0xc>)
   d5e52:	4a03      	ldr	r2, [pc, #12]	; (d5e60 <_Z33system_initialize_user_backup_ramv+0x10>)
   d5e54:	4903      	ldr	r1, [pc, #12]	; (d5e64 <_Z33system_initialize_user_backup_ramv+0x14>)
   d5e56:	1a12      	subs	r2, r2, r0
   d5e58:	f001 b8ae 	b.w	d6fb8 <memcpy>
   d5e5c:	2003f400 	.word	0x2003f400
   d5e60:	2003f404 	.word	0x2003f404
   d5e64:	000d7690 	.word	0x000d7690

000d5e68 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5e68:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5e6a:	2300      	movs	r3, #0
   d5e6c:	9300      	str	r3, [sp, #0]
   d5e6e:	461a      	mov	r2, r3
   d5e70:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5e74:	f7fe fd58 	bl	d4928 <system_ctrl_set_result>
}
   d5e78:	b003      	add	sp, #12
   d5e7a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5e80 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d5e80:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5e82:	8843      	ldrh	r3, [r0, #2]
   d5e84:	2b0a      	cmp	r3, #10
   d5e86:	d008      	beq.n	d5e9a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5e88:	2b50      	cmp	r3, #80	; 0x50
   d5e8a:	d10b      	bne.n	d5ea4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d5e8c:	4b09      	ldr	r3, [pc, #36]	; (d5eb4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5e8e:	681b      	ldr	r3, [r3, #0]
   d5e90:	b14b      	cbz	r3, d5ea6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d5e92:	b003      	add	sp, #12
   d5e94:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d5e98:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d5e9a:	f7ff ffe5 	bl	d5e68 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d5e9e:	b003      	add	sp, #12
   d5ea0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5ea4:	2300      	movs	r3, #0
   d5ea6:	9300      	str	r3, [sp, #0]
   d5ea8:	461a      	mov	r2, r3
   d5eaa:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5eae:	f7fe fd3b 	bl	d4928 <system_ctrl_set_result>
}
   d5eb2:	e7f4      	b.n	d5e9e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d5eb4:	2003e778 	.word	0x2003e778

000d5eb8 <module_user_init_hook>:
{
   d5eb8:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5eba:	4c12      	ldr	r4, [pc, #72]	; (d5f04 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d5ebc:	4812      	ldr	r0, [pc, #72]	; (d5f08 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5ebe:	4d13      	ldr	r5, [pc, #76]	; (d5f0c <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d5ec0:	2100      	movs	r1, #0
   d5ec2:	f7fe fddb 	bl	d4a7c <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5ec6:	6823      	ldr	r3, [r4, #0]
   d5ec8:	42ab      	cmp	r3, r5
   d5eca:	4b11      	ldr	r3, [pc, #68]	; (d5f10 <module_user_init_hook+0x58>)
   d5ecc:	bf0c      	ite	eq
   d5ece:	2201      	moveq	r2, #1
   d5ed0:	2200      	movne	r2, #0
   d5ed2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d5ed4:	d002      	beq.n	d5edc <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d5ed6:	f7ff ffbb 	bl	d5e50 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d5eda:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5edc:	f7fe fb8a 	bl	d45f4 <HAL_RNG_GetRandomNumber>
   d5ee0:	4604      	mov	r4, r0
    srand(seed);
   d5ee2:	f001 f899 	bl	d7018 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5ee6:	4b0b      	ldr	r3, [pc, #44]	; (d5f14 <module_user_init_hook+0x5c>)
   d5ee8:	b113      	cbz	r3, d5ef0 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d5eea:	4620      	mov	r0, r4
   d5eec:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5ef0:	2100      	movs	r1, #0
   d5ef2:	4808      	ldr	r0, [pc, #32]	; (d5f14 <module_user_init_hook+0x5c>)
   d5ef4:	f7fe fd82 	bl	d49fc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d5ef8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5efc:	4806      	ldr	r0, [pc, #24]	; (d5f18 <module_user_init_hook+0x60>)
   d5efe:	2100      	movs	r1, #0
   d5f00:	f7fe bd08 	b.w	d4914 <system_ctrl_set_app_request_handler>
   d5f04:	2003f400 	.word	0x2003f400
   d5f08:	000d5df9 	.word	0x000d5df9
   d5f0c:	9a271c1e 	.word	0x9a271c1e
   d5f10:	2003e774 	.word	0x2003e774
   d5f14:	00000000 	.word	0x00000000
   d5f18:	000d5e81 	.word	0x000d5e81

000d5f1c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5f1c:	4770      	bx	lr

000d5f1e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d5f1e:	2000      	movs	r0, #0
   d5f20:	4770      	bx	lr

000d5f22 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5f22:	b510      	push	{r4, lr}
   d5f24:	2110      	movs	r1, #16
   d5f26:	4604      	mov	r4, r0
   d5f28:	f001 f82f 	bl	d6f8a <_ZdlPvj>
   d5f2c:	4620      	mov	r0, r4
   d5f2e:	bd10      	pop	{r4, pc}

000d5f30 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d5f30:	b508      	push	{r3, lr}
      { delete this; }
   d5f32:	f7ff fff6 	bl	d5f22 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d5f36:	bd08      	pop	{r3, pc}

000d5f38 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d5f38:	b530      	push	{r4, r5, lr}
        type_(type) {
   d5f3a:	2200      	movs	r2, #0
   d5f3c:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d5f40:	6002      	str	r2, [r0, #0]
   d5f42:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d5f44:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d5f46:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d5f48:	680c      	ldr	r4, [r1, #0]
   d5f4a:	8085      	strh	r5, [r0, #4]
   d5f4c:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d5f4e:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d5f50:	bd30      	pop	{r4, r5, pc}

000d5f52 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d5f52:	b510      	push	{r4, lr}
   d5f54:	4604      	mov	r4, r0
    free((void*)msg_);
   d5f56:	6800      	ldr	r0, [r0, #0]
   d5f58:	f7fe fd68 	bl	d4a2c <free>
}
   d5f5c:	4620      	mov	r0, r4
   d5f5e:	bd10      	pop	{r4, pc}

000d5f60 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d5f60:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d5f62:	68c4      	ldr	r4, [r0, #12]
   d5f64:	b1f4      	cbz	r4, d5fa4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d5f66:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d5f68:	2b02      	cmp	r3, #2
   d5f6a:	d103      	bne.n	d5f74 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d5f6c:	f104 000c 	add.w	r0, r4, #12
   d5f70:	f7ff ffef 	bl	d5f52 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d5f74:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d5f76:	b135      	cbz	r5, d5f86 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d5f78:	4628      	mov	r0, r5
   d5f7a:	f7fe f90d 	bl	d4198 <_ZNSt14_Function_baseD1Ev>
   d5f7e:	2110      	movs	r1, #16
   d5f80:	4628      	mov	r0, r5
   d5f82:	f001 f802 	bl	d6f8a <_ZdlPvj>
   d5f86:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d5f88:	b135      	cbz	r5, d5f98 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d5f8a:	4628      	mov	r0, r5
   d5f8c:	f7fe f904 	bl	d4198 <_ZNSt14_Function_baseD1Ev>
   d5f90:	2110      	movs	r1, #16
   d5f92:	4628      	mov	r0, r5
   d5f94:	f000 fff9 	bl	d6f8a <_ZdlPvj>
   d5f98:	4620      	mov	r0, r4
   d5f9a:	2114      	movs	r1, #20
   d5f9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d5fa0:	f000 bff3 	b.w	d6f8a <_ZdlPvj>
   d5fa4:	bd38      	pop	{r3, r4, r5, pc}

000d5fa6 <_ZN10CloudClass13publishVitalsEm>:
    }

    return p.future();
}

int CloudClass::publishVitals(system_tick_t period_s_) {
   d5fa6:	4608      	mov	r0, r1
    return spark_publish_vitals(period_s_, nullptr);
   d5fa8:	2100      	movs	r1, #0
   d5faa:	f7fe bd2f 	b.w	d4a0c <spark_publish_vitals>

000d5fae <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d5fae:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5fb0:	460e      	mov	r6, r1
   d5fb2:	4604      	mov	r4, r0
   d5fb4:	f856 3b04 	ldr.w	r3, [r6], #4
   d5fb8:	9300      	str	r3, [sp, #0]
   d5fba:	460d      	mov	r5, r1
   d5fbc:	a801      	add	r0, sp, #4
   d5fbe:	4631      	mov	r1, r6
   d5fc0:	f7fe fe7f 	bl	d4cc2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5fc4:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5fc6:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d5fc8:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5fca:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d5fcc:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d5fce:	2300      	movs	r3, #0
   d5fd0:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5fd2:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d5fd4:	f7fe fe7c 	bl	d4cd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5fd8:	4630      	mov	r0, r6
   d5fda:	f7fe fe79 	bl	d4cd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d5fde:	4628      	mov	r0, r5
   d5fe0:	2108      	movs	r1, #8
   d5fe2:	f000 ffd2 	bl	d6f8a <_ZdlPvj>
        return p;
    }
   d5fe6:	4620      	mov	r0, r4
   d5fe8:	b002      	add	sp, #8
   d5fea:	bd70      	pop	{r4, r5, r6, pc}

000d5fec <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d5fec:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d5fee:	b510      	push	{r4, lr}
      if (_M_empty())
   d5ff0:	b90a      	cbnz	r2, d5ff6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d5ff2:	f000 ffd0 	bl	d6f96 <_ZSt25__throw_bad_function_callv>
    }
   d5ff6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5ffa:	68c3      	ldr	r3, [r0, #12]
   d5ffc:	4718      	bx	r3

000d5ffe <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5ffe:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d6000:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d6002:	f100 0110 	add.w	r1, r0, #16
   d6006:	f7ff fff1 	bl	d5fec <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d600a:	bd08      	pop	{r3, pc}

000d600c <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d600c:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d600e:	b510      	push	{r4, lr}
      if (_M_empty())
   d6010:	b90a      	cbnz	r2, d6016 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d6012:	f000 ffc0 	bl	d6f96 <_ZSt25__throw_bad_function_callv>
    }
   d6016:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d601a:	68c3      	ldr	r3, [r0, #12]
   d601c:	4718      	bx	r3

000d601e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d601e:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d6020:	6800      	ldr	r0, [r0, #0]
   d6022:	f100 0110 	add.w	r1, r0, #16
   d6026:	f7ff fff1 	bl	d600c <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d602a:	bd08      	pop	{r3, pc}

000d602c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d602c:	b538      	push	{r3, r4, r5, lr}
   d602e:	2300      	movs	r3, #0
   d6030:	4604      	mov	r4, r0
   d6032:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6034:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d6036:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6038:	f7fe f82b 	bl	d4092 <_Znwj>
   d603c:	b128      	cbz	r0, d604a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d603e:	2301      	movs	r3, #1
   d6040:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d6044:	4b02      	ldr	r3, [pc, #8]	; (d6050 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d6046:	6003      	str	r3, [r0, #0]
   d6048:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d604a:	6020      	str	r0, [r4, #0]
	}
   d604c:	4620      	mov	r0, r4
   d604e:	bd38      	pop	{r3, r4, r5, pc}
   d6050:	000d7444 	.word	0x000d7444

000d6054 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d6054:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d6056:	2300      	movs	r3, #0
   d6058:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d605a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d605c:	4604      	mov	r4, r0
   d605e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d6060:	b12b      	cbz	r3, d606e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6062:	2202      	movs	r2, #2
   d6064:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d6066:	68eb      	ldr	r3, [r5, #12]
   d6068:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d606a:	68ab      	ldr	r3, [r5, #8]
   d606c:	60a3      	str	r3, [r4, #8]
    }
   d606e:	4620      	mov	r0, r4
   d6070:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6074 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d6074:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6076:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d6078:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d607a:	4668      	mov	r0, sp
   d607c:	f7ff ff5c 	bl	d5f38 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d6080:	f04f 0302 	mov.w	r3, #2
   d6084:	e8d4 2f4f 	ldrexb	r2, [r4]
   d6088:	2a00      	cmp	r2, #0
   d608a:	d103      	bne.n	d6094 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d608c:	e8c4 3f41 	strexb	r1, r3, [r4]
   d6090:	2900      	cmp	r1, #0
   d6092:	d1f7      	bne.n	d6084 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d6094:	d125      	bne.n	d60e2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d6096:	f104 050c 	add.w	r5, r4, #12
   d609a:	4669      	mov	r1, sp
   d609c:	4628      	mov	r0, r5
   d609e:	f7ff ff4b 	bl	d5f38 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d60a2:	f3bf 8f5b 	dmb	ish
   d60a6:	2301      	movs	r3, #1
   d60a8:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d60aa:	2000      	movs	r0, #0
   d60ac:	f104 0308 	add.w	r3, r4, #8
   d60b0:	f3bf 8f5b 	dmb	ish
   d60b4:	e853 6f00 	ldrex	r6, [r3]
   d60b8:	e843 0200 	strex	r2, r0, [r3]
   d60bc:	2a00      	cmp	r2, #0
   d60be:	d1f9      	bne.n	d60b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d60c0:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d60c4:	b16e      	cbz	r6, d60e2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d60c6:	f7fe fc15 	bl	d48f4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d60ca:	b178      	cbz	r0, d60ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d60cc:	4629      	mov	r1, r5
   d60ce:	4630      	mov	r0, r6
   d60d0:	f7ff ff8c 	bl	d5fec <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d60d4:	4630      	mov	r0, r6
   d60d6:	f7fe f85f 	bl	d4198 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d60da:	2110      	movs	r1, #16
   d60dc:	4630      	mov	r0, r6
   d60de:	f000 ff54 	bl	d6f8a <_ZdlPvj>
        p_->setError(std::move(error));
   d60e2:	4668      	mov	r0, sp
   d60e4:	f7ff ff35 	bl	d5f52 <_ZN8particle5ErrorD1Ev>
    }
   d60e8:	b009      	add	sp, #36	; 0x24
   d60ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d60ec:	4631      	mov	r1, r6
   d60ee:	a802      	add	r0, sp, #8
   d60f0:	f7ff ffb0 	bl	d6054 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d60f4:	68e0      	ldr	r0, [r4, #12]
   d60f6:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d60fa:	b108      	cbz	r0, d6100 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d60fc:	f000 ffda 	bl	d70b4 <strdup>
        type_(type) {
   d6100:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d6102:	2010      	movs	r0, #16
   d6104:	f8ad 501c 	strh.w	r5, [sp, #28]
   d6108:	f7fd ffc3 	bl	d4092 <_Znwj>
   d610c:	4605      	mov	r5, r0
   d610e:	b1e8      	cbz	r0, d614c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d6110:	2700      	movs	r7, #0
   d6112:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6114:	2018      	movs	r0, #24
   d6116:	f7fd ffbc 	bl	d4092 <_Znwj>
   d611a:	4604      	mov	r4, r0
   d611c:	b188      	cbz	r0, d6142 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d611e:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d6120:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d6122:	a802      	add	r0, sp, #8
   d6124:	f7ff fe47 	bl	d5db6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6128:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d612a:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d612c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d612e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d6130:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6132:	a906      	add	r1, sp, #24
   d6134:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6136:	60e3      	str	r3, [r4, #12]
   d6138:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d613c:	9205      	str	r2, [sp, #20]
   d613e:	f7ff fefb 	bl	d5f38 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d6142:	4b08      	ldr	r3, [pc, #32]	; (d6164 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d6144:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6146:	4b08      	ldr	r3, [pc, #32]	; (d6168 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6148:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d614a:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d614c:	a806      	add	r0, sp, #24
   d614e:	f7ff ff00 	bl	d5f52 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d6152:	a802      	add	r0, sp, #8
   d6154:	f7fe f820 	bl	d4198 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6158:	2200      	movs	r2, #0
   d615a:	4629      	mov	r1, r5
   d615c:	4803      	ldr	r0, [pc, #12]	; (d616c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d615e:	f7fe fbd1 	bl	d4904 <application_thread_invoke>
   d6162:	e7b7      	b.n	d60d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d6164:	000d5fff 	.word	0x000d5fff
   d6168:	000d6295 	.word	0x000d6295
   d616c:	000d67f1 	.word	0x000d67f1

000d6170 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d6170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6174:	b08a      	sub	sp, #40	; 0x28
   d6176:	4605      	mov	r5, r0
   d6178:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d617c:	460c      	mov	r4, r1
   d617e:	4617      	mov	r7, r2
   d6180:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6182:	f7fe fc2b 	bl	d49dc <spark_cloud_flag_connected>
   d6186:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d6188:	4682      	mov	sl, r0
   d618a:	bb38      	cbnz	r0, d61dc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d618c:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d6190:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d6192:	a905      	add	r1, sp, #20
   d6194:	4630      	mov	r0, r6
   d6196:	f8ad 3018 	strh.w	r3, [sp, #24]
   d619a:	f7ff fecd 	bl	d5f38 <_ZN8particle5ErrorC1EOS0_>
   d619e:	2014      	movs	r0, #20
   d61a0:	f7fd ff77 	bl	d4092 <_Znwj>
   d61a4:	4604      	mov	r4, r0
   d61a6:	b148      	cbz	r0, d61bc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d61a8:	2302      	movs	r3, #2
   d61aa:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d61ac:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d61ae:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d61b2:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d61b4:	4631      	mov	r1, r6
   d61b6:	300c      	adds	r0, #12
   d61b8:	f7ff febe 	bl	d5f38 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d61bc:	4628      	mov	r0, r5
	: __shared_count(__p)
   d61be:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d61c0:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d61c4:	f7ff ff32 	bl	d602c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d61c8:	4630      	mov	r0, r6
   d61ca:	f7ff fec2 	bl	d5f52 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d61ce:	a805      	add	r0, sp, #20
   d61d0:	f7ff febf 	bl	d5f52 <_ZN8particle5ErrorD1Ev>
}
   d61d4:	4628      	mov	r0, r5
   d61d6:	b00a      	add	sp, #40	; 0x28
   d61d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d61dc:	230c      	movs	r3, #12
   d61de:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d61e2:	2014      	movs	r0, #20
   d61e4:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d61e8:	9307      	str	r3, [sp, #28]
   d61ea:	f7fd ff52 	bl	d4092 <_Znwj>
   d61ee:	4601      	mov	r1, r0
   d61f0:	b128      	cbz	r0, d61fe <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d61f2:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d61f6:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d61fa:	f880 a001 	strb.w	sl, [r0, #1]
   d61fe:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d6200:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d6202:	f7ff ff13 	bl	d602c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d6206:	4b22      	ldr	r3, [pc, #136]	; (d6290 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d6208:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d620a:	2008      	movs	r0, #8
   d620c:	f7fd ff41 	bl	d4092 <_Znwj>
   d6210:	4682      	mov	sl, r0
   d6212:	b128      	cbz	r0, d6220 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6214:	9b03      	ldr	r3, [sp, #12]
   d6216:	f840 3b04 	str.w	r3, [r0], #4
   d621a:	a904      	add	r1, sp, #16
   d621c:	f7fe fd51 	bl	d4cc2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d6220:	9600      	str	r6, [sp, #0]
   d6222:	fa5f f389 	uxtb.w	r3, r9
   d6226:	4642      	mov	r2, r8
   d6228:	4639      	mov	r1, r7
   d622a:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d622c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d6230:	f7fe fbdc 	bl	d49ec <spark_send_event>
   d6234:	b9b8      	cbnz	r0, d6266 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d6236:	9b03      	ldr	r3, [sp, #12]
   d6238:	785b      	ldrb	r3, [r3, #1]
   d623a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d623e:	b993      	cbnz	r3, d6266 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d6240:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d6244:	a905      	add	r1, sp, #20
   d6246:	a803      	add	r0, sp, #12
   d6248:	9205      	str	r2, [sp, #20]
   d624a:	f8ad 3018 	strh.w	r3, [sp, #24]
   d624e:	f7ff ff11 	bl	d6074 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d6252:	a805      	add	r0, sp, #20
   d6254:	f7ff fe7d 	bl	d5f52 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d6258:	a805      	add	r0, sp, #20
   d625a:	9909      	ldr	r1, [sp, #36]	; 0x24
   d625c:	f7ff fea7 	bl	d5fae <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d6260:	a806      	add	r0, sp, #24
   d6262:	f7fe fd35 	bl	d4cd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6266:	9b03      	ldr	r3, [sp, #12]
   d6268:	9305      	str	r3, [sp, #20]
   d626a:	a904      	add	r1, sp, #16
   d626c:	a806      	add	r0, sp, #24
   d626e:	f7fe fd28 	bl	d4cc2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6272:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6274:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6276:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d6278:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d627a:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d627c:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d627e:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d6280:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d6282:	f7fe fd25 	bl	d4cd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6286:	a804      	add	r0, sp, #16
   d6288:	f7fe fd22 	bl	d4cd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d628c:	e7a2      	b.n	d61d4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d628e:	bf00      	nop
   d6290:	000d6359 	.word	0x000d6359

000d6294 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d6294:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6296:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6298:	4605      	mov	r5, r0
	  switch (__op)
   d629a:	d007      	beq.n	d62ac <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d629c:	2a03      	cmp	r2, #3
   d629e:	d018      	beq.n	d62d2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d62a0:	2a01      	cmp	r2, #1
   d62a2:	d101      	bne.n	d62a8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d62a4:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d62a6:	6003      	str	r3, [r0, #0]
	}
   d62a8:	2000      	movs	r0, #0
   d62aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d62ac:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d62ae:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d62b0:	f7fd feef 	bl	d4092 <_Znwj>
   d62b4:	4604      	mov	r4, r0
   d62b6:	b150      	cbz	r0, d62ce <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d62b8:	4631      	mov	r1, r6
   d62ba:	f7ff fecb 	bl	d6054 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d62be:	6930      	ldr	r0, [r6, #16]
   d62c0:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d62c4:	b108      	cbz	r0, d62ca <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d62c6:	f000 fef5 	bl	d70b4 <strdup>
        type_(type) {
   d62ca:	6120      	str	r0, [r4, #16]
   d62cc:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d62ce:	602c      	str	r4, [r5, #0]
	}
   d62d0:	e7ea      	b.n	d62a8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d62d2:	6804      	ldr	r4, [r0, #0]
   d62d4:	2c00      	cmp	r4, #0
   d62d6:	d0e7      	beq.n	d62a8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d62d8:	f104 0010 	add.w	r0, r4, #16
   d62dc:	f7ff fe39 	bl	d5f52 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d62e0:	4620      	mov	r0, r4
   d62e2:	f7fd ff59 	bl	d4198 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d62e6:	2118      	movs	r1, #24
   d62e8:	4620      	mov	r0, r4
   d62ea:	f000 fe4e 	bl	d6f8a <_ZdlPvj>
   d62ee:	e7db      	b.n	d62a8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d62f0 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d62f0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d62f2:	2300      	movs	r3, #0
   d62f4:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d62f6:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d62f8:	4604      	mov	r4, r0
   d62fa:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d62fc:	b12b      	cbz	r3, d630a <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d62fe:	2202      	movs	r2, #2
   d6300:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d6302:	68eb      	ldr	r3, [r5, #12]
   d6304:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d6306:	68ab      	ldr	r3, [r5, #8]
   d6308:	60a3      	str	r3, [r4, #8]
    }
   d630a:	4620      	mov	r0, r4
   d630c:	bd38      	pop	{r3, r4, r5, pc}

000d630e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d630e:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6310:	b570      	push	{r4, r5, r6, lr}
   d6312:	4604      	mov	r4, r0
	  switch (__op)
   d6314:	d007      	beq.n	d6326 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d6316:	2a03      	cmp	r2, #3
   d6318:	d012      	beq.n	d6340 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d631a:	2a01      	cmp	r2, #1
   d631c:	d101      	bne.n	d6322 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d631e:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6320:	6003      	str	r3, [r0, #0]
	}
   d6322:	2000      	movs	r0, #0
   d6324:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d6326:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d6328:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d632a:	f7fd feb2 	bl	d4092 <_Znwj>
   d632e:	4605      	mov	r5, r0
   d6330:	b120      	cbz	r0, d633c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d6332:	4631      	mov	r1, r6
   d6334:	f7ff ffdc 	bl	d62f0 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d6338:	7c33      	ldrb	r3, [r6, #16]
   d633a:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d633c:	6025      	str	r5, [r4, #0]
	}
   d633e:	e7f0      	b.n	d6322 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d6340:	6804      	ldr	r4, [r0, #0]
   d6342:	2c00      	cmp	r4, #0
   d6344:	d0ed      	beq.n	d6322 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d6346:	4620      	mov	r0, r4
   d6348:	f7fd ff26 	bl	d4198 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d634c:	2114      	movs	r1, #20
   d634e:	4620      	mov	r0, r4
   d6350:	f000 fe1b 	bl	d6f8a <_ZdlPvj>
   d6354:	e7e5      	b.n	d6322 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d6358 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d6358:	b5f0      	push	{r4, r5, r6, r7, lr}
   d635a:	b089      	sub	sp, #36	; 0x24
   d635c:	4604      	mov	r4, r0
   d635e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d6360:	a801      	add	r0, sp, #4
   d6362:	4611      	mov	r1, r2
   d6364:	f7ff fe23 	bl	d5fae <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d6368:	b1a4      	cbz	r4, d6394 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d636a:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d636c:	b11d      	cbz	r5, d6376 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d636e:	4628      	mov	r0, r5
   d6370:	f000 fea0 	bl	d70b4 <strdup>
   d6374:	4605      	mov	r5, r0
   d6376:	a801      	add	r0, sp, #4
   d6378:	a903      	add	r1, sp, #12
        type_(type) {
   d637a:	9503      	str	r5, [sp, #12]
   d637c:	f8ad 4010 	strh.w	r4, [sp, #16]
   d6380:	f7ff fe78 	bl	d6074 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d6384:	a803      	add	r0, sp, #12
   d6386:	f7ff fde4 	bl	d5f52 <_ZN8particle5ErrorD1Ev>
   d638a:	a802      	add	r0, sp, #8
   d638c:	f7fe fca0 	bl	d4cd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6390:	b009      	add	sp, #36	; 0x24
   d6392:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d6394:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d6396:	2301      	movs	r3, #1
   d6398:	e8d5 2f4f 	ldrexb	r2, [r5]
   d639c:	2a00      	cmp	r2, #0
   d639e:	d103      	bne.n	d63a8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d63a0:	e8c5 3f41 	strexb	r1, r3, [r5]
   d63a4:	2900      	cmp	r1, #0
   d63a6:	d1f7      	bne.n	d6398 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d63a8:	d1ef      	bne.n	d638a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d63aa:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d63ac:	f3bf 8f5b 	dmb	ish
   d63b0:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d63b2:	1d2b      	adds	r3, r5, #4
   d63b4:	f3bf 8f5b 	dmb	ish
   d63b8:	e853 6f00 	ldrex	r6, [r3]
   d63bc:	e843 4200 	strex	r2, r4, [r3]
   d63c0:	2a00      	cmp	r2, #0
   d63c2:	d1f9      	bne.n	d63b8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d63c4:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d63c8:	2e00      	cmp	r6, #0
   d63ca:	d0de      	beq.n	d638a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d63cc:	4620      	mov	r0, r4
   d63ce:	f7fe fa91 	bl	d48f4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d63d2:	4607      	mov	r7, r0
   d63d4:	b160      	cbz	r0, d63f0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d63d6:	f105 010c 	add.w	r1, r5, #12
   d63da:	4630      	mov	r0, r6
   d63dc:	f7ff fe16 	bl	d600c <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d63e0:	4630      	mov	r0, r6
   d63e2:	f7fd fed9 	bl	d4198 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d63e6:	2110      	movs	r1, #16
   d63e8:	4630      	mov	r0, r6
   d63ea:	f000 fdce 	bl	d6f8a <_ZdlPvj>
   d63ee:	e7cc      	b.n	d638a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d63f0:	4631      	mov	r1, r6
   d63f2:	a803      	add	r0, sp, #12
   d63f4:	f7ff ff7c 	bl	d62f0 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d63f8:	7b2b      	ldrb	r3, [r5, #12]
   d63fa:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d63fe:	2010      	movs	r0, #16
   d6400:	f7fd fe47 	bl	d4092 <_Znwj>
   d6404:	4605      	mov	r5, r0
   d6406:	b1d0      	cbz	r0, d643e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d6408:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d640a:	2014      	movs	r0, #20
   d640c:	f7fd fe41 	bl	d4092 <_Znwj>
   d6410:	4604      	mov	r4, r0
   d6412:	b178      	cbz	r0, d6434 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d6414:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d6416:	4601      	mov	r1, r0
   d6418:	a803      	add	r0, sp, #12
   d641a:	f7ff fccc 	bl	d5db6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d641e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d6420:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6422:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6424:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d6426:	9205      	str	r2, [sp, #20]
   d6428:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d642a:	60e3      	str	r3, [r4, #12]
   d642c:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d6430:	9206      	str	r2, [sp, #24]
   d6432:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d6434:	4b06      	ldr	r3, [pc, #24]	; (d6450 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d6436:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6438:	4b06      	ldr	r3, [pc, #24]	; (d6454 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d643a:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d643c:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d643e:	a803      	add	r0, sp, #12
   d6440:	f7fd feaa 	bl	d4198 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6444:	2200      	movs	r2, #0
   d6446:	4629      	mov	r1, r5
   d6448:	4803      	ldr	r0, [pc, #12]	; (d6458 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d644a:	f7fe fa5b 	bl	d4904 <application_thread_invoke>
   d644e:	e7c7      	b.n	d63e0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d6450:	000d601f 	.word	0x000d601f
   d6454:	000d630f 	.word	0x000d630f
   d6458:	000d67f1 	.word	0x000d67f1

000d645c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d645c:	4770      	bx	lr

000d645e <_ZN9IPAddressD0Ev>:
   d645e:	b510      	push	{r4, lr}
   d6460:	2118      	movs	r1, #24
   d6462:	4604      	mov	r4, r0
   d6464:	f000 fd91 	bl	d6f8a <_ZdlPvj>
   d6468:	4620      	mov	r0, r4
   d646a:	bd10      	pop	{r4, pc}

000d646c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d646c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d646e:	7d03      	ldrb	r3, [r0, #20]
   d6470:	2b06      	cmp	r3, #6
{
   d6472:	b08d      	sub	sp, #52	; 0x34
   d6474:	460e      	mov	r6, r1
   d6476:	f100 0704 	add.w	r7, r0, #4
   d647a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d647e:	d012      	beq.n	d64a6 <_ZNK9IPAddress7printToER5Print+0x3a>
   d6480:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d6484:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d6488:	220a      	movs	r2, #10
   d648a:	4630      	mov	r0, r6
   d648c:	f7fe fc77 	bl	d4d7e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6490:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6492:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d6494:	d019      	beq.n	d64ca <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d6496:	2c00      	cmp	r4, #0
   d6498:	d0f4      	beq.n	d6484 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d649a:	212e      	movs	r1, #46	; 0x2e
   d649c:	4630      	mov	r0, r6
   d649e:	f7fe fc5f 	bl	d4d60 <_ZN5Print5printEc>
   d64a2:	4404      	add	r4, r0
   d64a4:	e7ee      	b.n	d6484 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d64a6:	232f      	movs	r3, #47	; 0x2f
   d64a8:	466a      	mov	r2, sp
   d64aa:	4639      	mov	r1, r7
   d64ac:	200a      	movs	r0, #10
		buf[0] = 0;
   d64ae:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d64b2:	f7fe f90f 	bl	d46d4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d64b6:	4668      	mov	r0, sp
   d64b8:	f000 fe19 	bl	d70ee <strlen>
   d64bc:	6833      	ldr	r3, [r6, #0]
   d64be:	4602      	mov	r2, r0
   d64c0:	68db      	ldr	r3, [r3, #12]
   d64c2:	4669      	mov	r1, sp
   d64c4:	4630      	mov	r0, r6
   d64c6:	4798      	blx	r3
   d64c8:	4604      	mov	r4, r0
    }
    return n;
}
   d64ca:	4620      	mov	r0, r4
   d64cc:	b00d      	add	sp, #52	; 0x34
   d64ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d64d0 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d64d0:	b510      	push	{r4, lr}
   d64d2:	4b05      	ldr	r3, [pc, #20]	; (d64e8 <_ZN9IPAddressC1Ev+0x18>)
   d64d4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d64d6:	2211      	movs	r2, #17
   d64d8:	f840 3b04 	str.w	r3, [r0], #4
   d64dc:	2100      	movs	r1, #0
   d64de:	f000 fd93 	bl	d7008 <memset>
}
   d64e2:	4620      	mov	r0, r4
   d64e4:	bd10      	pop	{r4, pc}
   d64e6:	bf00      	nop
   d64e8:	000d7460 	.word	0x000d7460

000d64ec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d64ec:	4603      	mov	r3, r0
   d64ee:	4a07      	ldr	r2, [pc, #28]	; (d650c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d64f0:	b510      	push	{r4, lr}
   d64f2:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d64f6:	f101 0210 	add.w	r2, r1, #16
   d64fa:	f851 4b04 	ldr.w	r4, [r1], #4
   d64fe:	f843 4b04 	str.w	r4, [r3], #4
   d6502:	4291      	cmp	r1, r2
   d6504:	d1f9      	bne.n	d64fa <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d6506:	780a      	ldrb	r2, [r1, #0]
   d6508:	701a      	strb	r2, [r3, #0]
}
   d650a:	bd10      	pop	{r4, pc}
   d650c:	000d7460 	.word	0x000d7460

000d6510 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d6510:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d6512:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d6516:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d651a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d651e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d6522:	2304      	movs	r3, #4
   d6524:	6041      	str	r1, [r0, #4]
   d6526:	7503      	strb	r3, [r0, #20]
}
   d6528:	bd10      	pop	{r4, pc}

000d652a <_ZN9IPAddressaSEPKh>:
{
   d652a:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d652c:	78cb      	ldrb	r3, [r1, #3]
   d652e:	9300      	str	r3, [sp, #0]
   d6530:	788b      	ldrb	r3, [r1, #2]
   d6532:	784a      	ldrb	r2, [r1, #1]
   d6534:	7809      	ldrb	r1, [r1, #0]
   d6536:	f7ff ffeb 	bl	d6510 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d653a:	b002      	add	sp, #8
   d653c:	bd10      	pop	{r4, pc}

000d653e <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d653e:	7441      	strb	r1, [r0, #17]
}
   d6540:	4770      	bx	lr

000d6542 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d6542:	4770      	bx	lr

000d6544 <_ZN9USBSerial4readEv>:
{
   d6544:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d6546:	2100      	movs	r1, #0
   d6548:	7c00      	ldrb	r0, [r0, #16]
   d654a:	f7fe f98b 	bl	d4864 <HAL_USB_USART_Receive_Data>
}
   d654e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6552:	bd08      	pop	{r3, pc}

000d6554 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d6554:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d6556:	2101      	movs	r1, #1
   d6558:	7c00      	ldrb	r0, [r0, #16]
   d655a:	f7fe f983 	bl	d4864 <HAL_USB_USART_Receive_Data>
}
   d655e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6562:	bd08      	pop	{r3, pc}

000d6564 <_ZN9USBSerial17availableForWriteEv>:
{
   d6564:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d6566:	7c00      	ldrb	r0, [r0, #16]
   d6568:	f7fe f974 	bl	d4854 <HAL_USB_USART_Available_Data_For_Write>
}
   d656c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6570:	bd08      	pop	{r3, pc}

000d6572 <_ZN9USBSerial9availableEv>:
{
   d6572:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d6574:	7c00      	ldrb	r0, [r0, #16]
   d6576:	f7fe f965 	bl	d4844 <HAL_USB_USART_Available_Data>
}
   d657a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d657e:	bd08      	pop	{r3, pc}

000d6580 <_ZN9USBSerial5writeEh>:
{
   d6580:	b513      	push	{r0, r1, r4, lr}
   d6582:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6584:	7c00      	ldrb	r0, [r0, #16]
{
   d6586:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6588:	f7fe f964 	bl	d4854 <HAL_USB_USART_Available_Data_For_Write>
   d658c:	2800      	cmp	r0, #0
   d658e:	9901      	ldr	r1, [sp, #4]
   d6590:	dc01      	bgt.n	d6596 <_ZN9USBSerial5writeEh+0x16>
   d6592:	7c60      	ldrb	r0, [r4, #17]
   d6594:	b120      	cbz	r0, d65a0 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d6596:	7c20      	ldrb	r0, [r4, #16]
   d6598:	f7fe f96c 	bl	d4874 <HAL_USB_USART_Send_Data>
   d659c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d65a0:	b002      	add	sp, #8
   d65a2:	bd10      	pop	{r4, pc}

000d65a4 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d65a4:	7c00      	ldrb	r0, [r0, #16]
   d65a6:	f7fe b96d 	b.w	d4884 <HAL_USB_USART_Flush_Data>

000d65aa <_ZN9USBSerialD0Ev>:
   d65aa:	b510      	push	{r4, lr}
   d65ac:	2114      	movs	r1, #20
   d65ae:	4604      	mov	r4, r0
   d65b0:	f000 fceb 	bl	d6f8a <_ZdlPvj>
   d65b4:	4620      	mov	r0, r4
   d65b6:	bd10      	pop	{r4, pc}

000d65b8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d65b8:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d65ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d65be:	4604      	mov	r4, r0
   d65c0:	4608      	mov	r0, r1
   d65c2:	2100      	movs	r1, #0
   d65c4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d65c8:	4b04      	ldr	r3, [pc, #16]	; (d65dc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d65ca:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d65cc:	2301      	movs	r3, #1
  _serial = serial;
   d65ce:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d65d0:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d65d2:	4611      	mov	r1, r2
   d65d4:	f7fe f91e 	bl	d4814 <HAL_USB_USART_Init>
}
   d65d8:	4620      	mov	r0, r4
   d65da:	bd10      	pop	{r4, pc}
   d65dc:	000d7474 	.word	0x000d7474

000d65e0 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d65e0:	7c00      	ldrb	r0, [r0, #16]
   d65e2:	2200      	movs	r2, #0
   d65e4:	f7fe b91e 	b.w	d4824 <HAL_USB_USART_Begin>

000d65e8 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   d65e8:	7c00      	ldrb	r0, [r0, #16]
   d65ea:	f7fe b923 	b.w	d4834 <HAL_USB_USART_End>

000d65ee <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d65ee:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d65f0:	2214      	movs	r2, #20
{
   d65f2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d65f4:	2100      	movs	r1, #0
   d65f6:	f000 fd07 	bl	d7008 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d65fa:	4620      	mov	r0, r4
   d65fc:	bd10      	pop	{r4, pc}
	...

000d6600 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d6600:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6602:	4c10      	ldr	r4, [pc, #64]	; (d6644 <_Z16_fetch_usbserialv+0x44>)
{
   d6604:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d6606:	a803      	add	r0, sp, #12
   d6608:	f7ff fff1 	bl	d65ee <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d660c:	7821      	ldrb	r1, [r4, #0]
   d660e:	f3bf 8f5b 	dmb	ish
   d6612:	f011 0101 	ands.w	r1, r1, #1
   d6616:	d111      	bne.n	d663c <_Z16_fetch_usbserialv+0x3c>
   d6618:	4620      	mov	r0, r4
   d661a:	9101      	str	r1, [sp, #4]
   d661c:	f7fd fd4a 	bl	d40b4 <__cxa_guard_acquire>
   d6620:	9901      	ldr	r1, [sp, #4]
   d6622:	b158      	cbz	r0, d663c <_Z16_fetch_usbserialv+0x3c>
   d6624:	aa03      	add	r2, sp, #12
   d6626:	4808      	ldr	r0, [pc, #32]	; (d6648 <_Z16_fetch_usbserialv+0x48>)
   d6628:	f7ff ffc6 	bl	d65b8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d662c:	4620      	mov	r0, r4
   d662e:	f7fd fd46 	bl	d40be <__cxa_guard_release>
   d6632:	4a06      	ldr	r2, [pc, #24]	; (d664c <_Z16_fetch_usbserialv+0x4c>)
   d6634:	4906      	ldr	r1, [pc, #24]	; (d6650 <_Z16_fetch_usbserialv+0x50>)
   d6636:	4804      	ldr	r0, [pc, #16]	; (d6648 <_Z16_fetch_usbserialv+0x48>)
   d6638:	f000 fca2 	bl	d6f80 <__aeabi_atexit>
	return _usbserial;
}
   d663c:	4802      	ldr	r0, [pc, #8]	; (d6648 <_Z16_fetch_usbserialv+0x48>)
   d663e:	b008      	add	sp, #32
   d6640:	bd10      	pop	{r4, pc}
   d6642:	bf00      	nop
   d6644:	2003e77c 	.word	0x2003e77c
   d6648:	2003e780 	.word	0x2003e780
   d664c:	2003e6e0 	.word	0x2003e6e0
   d6650:	000d6543 	.word	0x000d6543

000d6654 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d6654:	4700      	bx	r0
	...

000d6658 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d6658:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d665c:	2400      	movs	r4, #0
{
   d665e:	461d      	mov	r5, r3
   d6660:	460f      	mov	r7, r1
   d6662:	4690      	mov	r8, r2
   d6664:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   d6666:	f7fd ffbd 	bl	d45e4 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   d666a:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d666c:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {0};
   d6670:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d6674:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {0};
   d6678:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   d667c:	bfa2      	ittt	ge
   d667e:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d6682:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   d6686:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d6688:	4907      	ldr	r1, [pc, #28]	; (d66a8 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   d668a:	9400      	str	r4, [sp, #0]
   d668c:	4643      	mov	r3, r8
   d668e:	463a      	mov	r2, r7
   d6690:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d6692:	bfa8      	it	ge
   d6694:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d6698:	f7fd ff9c 	bl	d45d4 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d669c:	fab0 f080 	clz	r0, r0
   d66a0:	0940      	lsrs	r0, r0, #5
   d66a2:	b004      	add	sp, #16
   d66a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d66a8:	000d6655 	.word	0x000d6655

000d66ac <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d66ac:	4770      	bx	lr

000d66ae <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d66ae:	7441      	strb	r1, [r0, #17]
}
   d66b0:	4770      	bx	lr

000d66b2 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d66b2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d66b4:	7c00      	ldrb	r0, [r0, #16]
   d66b6:	f7fe f855 	bl	d4764 <hal_usart_available_data_for_write>
}
   d66ba:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d66be:	bd08      	pop	{r3, pc}

000d66c0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d66c0:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d66c2:	7c00      	ldrb	r0, [r0, #16]
   d66c4:	f7fe f826 	bl	d4714 <hal_usart_available>
}
   d66c8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d66cc:	bd08      	pop	{r3, pc}

000d66ce <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d66ce:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d66d0:	7c00      	ldrb	r0, [r0, #16]
   d66d2:	f7fe f82f 	bl	d4734 <hal_usart_peek>
}
   d66d6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d66da:	bd08      	pop	{r3, pc}

000d66dc <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d66dc:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d66de:	7c00      	ldrb	r0, [r0, #16]
   d66e0:	f7fe f820 	bl	d4724 <hal_usart_read>
}
   d66e4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d66e8:	bd08      	pop	{r3, pc}

000d66ea <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d66ea:	7c00      	ldrb	r0, [r0, #16]
   d66ec:	f7fe b82a 	b.w	d4744 <hal_usart_flush>

000d66f0 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d66f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d66f2:	7c45      	ldrb	r5, [r0, #17]
{
   d66f4:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d66f6:	b12d      	cbz	r5, d6704 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d66f8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d66fa:	b003      	add	sp, #12
   d66fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d6700:	f7fe b800 	b.w	d4704 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6704:	7c00      	ldrb	r0, [r0, #16]
   d6706:	9101      	str	r1, [sp, #4]
   d6708:	f7fe f82c 	bl	d4764 <hal_usart_available_data_for_write>
   d670c:	2800      	cmp	r0, #0
   d670e:	9901      	ldr	r1, [sp, #4]
   d6710:	dcf2      	bgt.n	d66f8 <_ZN11USARTSerial5writeEh+0x8>
}
   d6712:	4628      	mov	r0, r5
   d6714:	b003      	add	sp, #12
   d6716:	bd30      	pop	{r4, r5, pc}

000d6718 <_ZN11USARTSerialD0Ev>:
   d6718:	b510      	push	{r4, lr}
   d671a:	2114      	movs	r1, #20
   d671c:	4604      	mov	r4, r0
   d671e:	f000 fc34 	bl	d6f8a <_ZdlPvj>
   d6722:	4620      	mov	r0, r4
   d6724:	bd10      	pop	{r4, pc}
	...

000d6728 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d6728:	b510      	push	{r4, lr}
   d672a:	f04f 0c00 	mov.w	ip, #0
   d672e:	4604      	mov	r4, r0
   d6730:	4608      	mov	r0, r1
   d6732:	4611      	mov	r1, r2
   d6734:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6738:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d673c:	4a04      	ldr	r2, [pc, #16]	; (d6750 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d673e:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d6740:	2201      	movs	r2, #1
  _serial = serial;
   d6742:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d6744:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d6746:	461a      	mov	r2, r3
   d6748:	f7fd ffcc 	bl	d46e4 <hal_usart_init>
}
   d674c:	4620      	mov	r0, r4
   d674e:	bd10      	pop	{r4, pc}
   d6750:	000d74a4 	.word	0x000d74a4

000d6754 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   d6754:	7c00      	ldrb	r0, [r0, #16]
   d6756:	2300      	movs	r3, #0
   d6758:	f7fe b80c 	b.w	d4774 <hal_usart_begin_config>

000d675c <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   d675c:	2200      	movs	r2, #0
   d675e:	f7ff bff9 	b.w	d6754 <_ZN11USARTSerial5beginEmm>

000d6762 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   d6762:	7c00      	ldrb	r0, [r0, #16]
   d6764:	f7fd bfc6 	b.w	d46f4 <hal_usart_end>

000d6768 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6768:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
   d676a:	4c1b      	ldr	r4, [pc, #108]	; (d67d8 <_Z22__fetch_global_Serial1v+0x70>)
   d676c:	6826      	ldr	r6, [r4, #0]
   d676e:	b94e      	cbnz	r6, d6784 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new hal_usart_ring_buffer_t();
   d6770:	2084      	movs	r0, #132	; 0x84
   d6772:	f7fd fc8e 	bl	d4092 <_Znwj>
   d6776:	4605      	mov	r5, r0
   d6778:	b118      	cbz	r0, d6782 <_Z22__fetch_global_Serial1v+0x1a>
   d677a:	2284      	movs	r2, #132	; 0x84
   d677c:	4631      	mov	r1, r6
   d677e:	f000 fc43 	bl	d7008 <memset>
   d6782:	6025      	str	r5, [r4, #0]
  }
  if (!serial1_tx_buffer) {
   d6784:	4d15      	ldr	r5, [pc, #84]	; (d67dc <_Z22__fetch_global_Serial1v+0x74>)
   d6786:	682f      	ldr	r7, [r5, #0]
   d6788:	b94f      	cbnz	r7, d679e <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
   d678a:	2084      	movs	r0, #132	; 0x84
   d678c:	f7fd fc81 	bl	d4092 <_Znwj>
   d6790:	4606      	mov	r6, r0
   d6792:	b118      	cbz	r0, d679c <_Z22__fetch_global_Serial1v+0x34>
   d6794:	2284      	movs	r2, #132	; 0x84
   d6796:	4639      	mov	r1, r7
   d6798:	f000 fc36 	bl	d7008 <memset>
   d679c:	602e      	str	r6, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   d679e:	4e10      	ldr	r6, [pc, #64]	; (d67e0 <_Z22__fetch_global_Serial1v+0x78>)
   d67a0:	7831      	ldrb	r1, [r6, #0]
   d67a2:	f3bf 8f5b 	dmb	ish
   d67a6:	f011 0101 	ands.w	r1, r1, #1
   d67aa:	d112      	bne.n	d67d2 <_Z22__fetch_global_Serial1v+0x6a>
   d67ac:	4630      	mov	r0, r6
   d67ae:	9101      	str	r1, [sp, #4]
   d67b0:	f7fd fc80 	bl	d40b4 <__cxa_guard_acquire>
   d67b4:	9901      	ldr	r1, [sp, #4]
   d67b6:	b160      	cbz	r0, d67d2 <_Z22__fetch_global_Serial1v+0x6a>
   d67b8:	6822      	ldr	r2, [r4, #0]
   d67ba:	682b      	ldr	r3, [r5, #0]
   d67bc:	4809      	ldr	r0, [pc, #36]	; (d67e4 <_Z22__fetch_global_Serial1v+0x7c>)
   d67be:	f7ff ffb3 	bl	d6728 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d67c2:	4630      	mov	r0, r6
   d67c4:	f7fd fc7b 	bl	d40be <__cxa_guard_release>
   d67c8:	4a07      	ldr	r2, [pc, #28]	; (d67e8 <_Z22__fetch_global_Serial1v+0x80>)
   d67ca:	4908      	ldr	r1, [pc, #32]	; (d67ec <_Z22__fetch_global_Serial1v+0x84>)
   d67cc:	4805      	ldr	r0, [pc, #20]	; (d67e4 <_Z22__fetch_global_Serial1v+0x7c>)
   d67ce:	f000 fbd7 	bl	d6f80 <__aeabi_atexit>
#endif
	return serial1;
}
   d67d2:	4804      	ldr	r0, [pc, #16]	; (d67e4 <_Z22__fetch_global_Serial1v+0x7c>)
   d67d4:	b003      	add	sp, #12
   d67d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d67d8:	2003e798 	.word	0x2003e798
   d67dc:	2003e79c 	.word	0x2003e79c
   d67e0:	2003e794 	.word	0x2003e794
   d67e4:	2003e7a0 	.word	0x2003e7a0
   d67e8:	2003e6e0 	.word	0x2003e6e0
   d67ec:	000d66ad 	.word	0x000d66ad

000d67f0 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d67f0:	b510      	push	{r4, lr}
      if (_M_empty())
   d67f2:	6883      	ldr	r3, [r0, #8]
   d67f4:	4604      	mov	r4, r0
   d67f6:	b90b      	cbnz	r3, d67fc <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d67f8:	f000 fbcd 	bl	d6f96 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d67fc:	68c3      	ldr	r3, [r0, #12]
   d67fe:	4798      	blx	r3
      if (_M_manager)
   d6800:	68a3      	ldr	r3, [r4, #8]
   d6802:	b11b      	cbz	r3, d680c <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6804:	2203      	movs	r2, #3
   d6806:	4621      	mov	r1, r4
   d6808:	4620      	mov	r0, r4
   d680a:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d680c:	4620      	mov	r0, r4
   d680e:	2110      	movs	r1, #16
}
   d6810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d6814:	f000 bbb9 	b.w	d6f8a <_ZdlPvj>

000d6818 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d6818:	4770      	bx	lr

000d681a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d681a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d681c:	4606      	mov	r6, r0
   d681e:	4615      	mov	r5, r2
   d6820:	460c      	mov	r4, r1
   d6822:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6824:	42bc      	cmp	r4, r7
   d6826:	d006      	beq.n	d6836 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6828:	6833      	ldr	r3, [r6, #0]
   d682a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d682e:	689b      	ldr	r3, [r3, #8]
   d6830:	4630      	mov	r0, r6
   d6832:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d6834:	e7f6      	b.n	d6824 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d6836:	4628      	mov	r0, r5
   d6838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d683a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d683a:	7c00      	ldrb	r0, [r0, #16]
   d683c:	2200      	movs	r2, #0
   d683e:	f7fd bfa1 	b.w	d4784 <hal_i2c_write>

000d6842 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d6842:	7c00      	ldrb	r0, [r0, #16]
   d6844:	2100      	movs	r1, #0
   d6846:	f7fd bfa5 	b.w	d4794 <hal_i2c_available>

000d684a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d684a:	7c00      	ldrb	r0, [r0, #16]
   d684c:	2100      	movs	r1, #0
   d684e:	f7fd bfa9 	b.w	d47a4 <hal_i2c_read>

000d6852 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d6852:	7c00      	ldrb	r0, [r0, #16]
   d6854:	2100      	movs	r1, #0
   d6856:	f7fd bfad 	b.w	d47b4 <hal_i2c_peek>

000d685a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d685a:	7c00      	ldrb	r0, [r0, #16]
   d685c:	2100      	movs	r1, #0
   d685e:	f7fd bfb1 	b.w	d47c4 <hal_i2c_flush>

000d6862 <_ZN7TwoWireD0Ev>:
   d6862:	b510      	push	{r4, lr}
   d6864:	2114      	movs	r1, #20
   d6866:	4604      	mov	r4, r0
   d6868:	f000 fb8f 	bl	d6f8a <_ZdlPvj>
   d686c:	4620      	mov	r0, r4
   d686e:	bd10      	pop	{r4, pc}

000d6870 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d6870:	b510      	push	{r4, lr}
   d6872:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6876:	4604      	mov	r4, r0
   d6878:	4608      	mov	r0, r1
   d687a:	2100      	movs	r1, #0
   d687c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d6880:	4b03      	ldr	r3, [pc, #12]	; (d6890 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d6882:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d6884:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d6886:	4611      	mov	r1, r2
   d6888:	f7fd ffac 	bl	d47e4 <hal_i2c_init>
}
   d688c:	4620      	mov	r0, r4
   d688e:	bd10      	pop	{r4, pc}
   d6890:	000d74d4 	.word	0x000d74d4

000d6894 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d6894:	2200      	movs	r2, #0
   d6896:	6840      	ldr	r0, [r0, #4]
   d6898:	4611      	mov	r1, r2
   d689a:	f7fe b867 	b.w	d496c <network_ready>

000d689e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d689e:	2200      	movs	r2, #0
   d68a0:	6840      	ldr	r0, [r0, #4]
   d68a2:	4611      	mov	r1, r2
   d68a4:	f7fe b882 	b.w	d49ac <network_listening>

000d68a8 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d68a8:	2200      	movs	r2, #0
   d68aa:	6840      	ldr	r0, [r0, #4]
   d68ac:	4611      	mov	r1, r2
   d68ae:	f7fe b88d 	b.w	d49cc <network_get_listen_timeout>

000d68b2 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d68b2:	6840      	ldr	r0, [r0, #4]
   d68b4:	2200      	movs	r2, #0
   d68b6:	f7fe b881 	b.w	d49bc <network_set_listen_timeout>

000d68ba <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d68ba:	6840      	ldr	r0, [r0, #4]
   d68bc:	2200      	movs	r2, #0
   d68be:	f081 0101 	eor.w	r1, r1, #1
   d68c2:	f7fe b86b 	b.w	d499c <network_listen>

000d68c6 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d68c6:	2300      	movs	r3, #0
   d68c8:	6840      	ldr	r0, [r0, #4]
   d68ca:	461a      	mov	r2, r3
   d68cc:	4619      	mov	r1, r3
   d68ce:	f7fe b85d 	b.w	d498c <network_off>

000d68d2 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d68d2:	2300      	movs	r3, #0
   d68d4:	6840      	ldr	r0, [r0, #4]
   d68d6:	461a      	mov	r2, r3
   d68d8:	4619      	mov	r1, r3
   d68da:	f7fe b84f 	b.w	d497c <network_on>

000d68de <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d68de:	2200      	movs	r2, #0
   d68e0:	6840      	ldr	r0, [r0, #4]
   d68e2:	4611      	mov	r1, r2
   d68e4:	f7fe b832 	b.w	d494c <network_connecting>

000d68e8 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d68e8:	6840      	ldr	r0, [r0, #4]
   d68ea:	2200      	movs	r2, #0
   d68ec:	2102      	movs	r1, #2
   d68ee:	f7fe b835 	b.w	d495c <network_disconnect>

000d68f2 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d68f2:	2300      	movs	r3, #0
   d68f4:	6840      	ldr	r0, [r0, #4]
   d68f6:	461a      	mov	r2, r3
   d68f8:	f7fe b820 	b.w	d493c <network_connect>

000d68fc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d68fc:	4b02      	ldr	r3, [pc, #8]	; (d6908 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d68fe:	2204      	movs	r2, #4
   d6900:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d6902:	4a02      	ldr	r2, [pc, #8]	; (d690c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d6904:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d6906:	4770      	bx	lr
   d6908:	2003e7b4 	.word	0x2003e7b4
   d690c:	000d74fc 	.word	0x000d74fc

000d6910 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6910:	2300      	movs	r3, #0
   d6912:	6840      	ldr	r0, [r0, #4]
   d6914:	461a      	mov	r2, r3
   d6916:	f7fe b811 	b.w	d493c <network_connect>

000d691a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d691a:	6840      	ldr	r0, [r0, #4]
   d691c:	2200      	movs	r2, #0
   d691e:	2102      	movs	r1, #2
   d6920:	f7fe b81c 	b.w	d495c <network_disconnect>

000d6924 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6924:	2200      	movs	r2, #0
   d6926:	6840      	ldr	r0, [r0, #4]
   d6928:	4611      	mov	r1, r2
   d692a:	f7fe b80f 	b.w	d494c <network_connecting>

000d692e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d692e:	2200      	movs	r2, #0
   d6930:	6840      	ldr	r0, [r0, #4]
   d6932:	4611      	mov	r1, r2
   d6934:	f7fe b81a 	b.w	d496c <network_ready>

000d6938 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6938:	2300      	movs	r3, #0
   d693a:	6840      	ldr	r0, [r0, #4]
   d693c:	461a      	mov	r2, r3
   d693e:	4619      	mov	r1, r3
   d6940:	f7fe b81c 	b.w	d497c <network_on>

000d6944 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6944:	2300      	movs	r3, #0
   d6946:	6840      	ldr	r0, [r0, #4]
   d6948:	461a      	mov	r2, r3
   d694a:	4619      	mov	r1, r3
   d694c:	f7fe b81e 	b.w	d498c <network_off>

000d6950 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6950:	6840      	ldr	r0, [r0, #4]
   d6952:	2200      	movs	r2, #0
   d6954:	f081 0101 	eor.w	r1, r1, #1
   d6958:	f7fe b820 	b.w	d499c <network_listen>

000d695c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d695c:	6840      	ldr	r0, [r0, #4]
   d695e:	2200      	movs	r2, #0
   d6960:	f7fe b82c 	b.w	d49bc <network_set_listen_timeout>

000d6964 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6964:	2200      	movs	r2, #0
   d6966:	6840      	ldr	r0, [r0, #4]
   d6968:	4611      	mov	r1, r2
   d696a:	f7fe b82f 	b.w	d49cc <network_get_listen_timeout>

000d696e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d696e:	2200      	movs	r2, #0
   d6970:	6840      	ldr	r0, [r0, #4]
   d6972:	4611      	mov	r1, r2
   d6974:	f7fe b81a 	b.w	d49ac <network_listening>

000d6978 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6978:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d697c:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d697e:	b095      	sub	sp, #84	; 0x54
   d6980:	4616      	mov	r6, r2
   d6982:	460d      	mov	r5, r1
   d6984:	4607      	mov	r7, r0
    IPAddress addr;
   d6986:	f7ff fda3 	bl	d64d0 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d698a:	4621      	mov	r1, r4
   d698c:	2218      	movs	r2, #24
   d698e:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d6990:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d6992:	f000 fb39 	bl	d7008 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d6996:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d6998:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d699c:	4621      	mov	r1, r4
   d699e:	466b      	mov	r3, sp
   d69a0:	aa0c      	add	r2, sp, #48	; 0x30
   d69a2:	4630      	mov	r0, r6
   d69a4:	f7fd fdf6 	bl	d4594 <netdb_getaddrinfo>
    if (!r) {
   d69a8:	4604      	mov	r4, r0
   d69aa:	2800      	cmp	r0, #0
   d69ac:	d146      	bne.n	d6a3c <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d69ae:	4602      	mov	r2, r0
   d69b0:	2101      	movs	r1, #1
   d69b2:	6868      	ldr	r0, [r5, #4]
   d69b4:	f7fd ffda 	bl	d496c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d69b8:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d69ba:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d69bc:	4622      	mov	r2, r4
   d69be:	6868      	ldr	r0, [r5, #4]
   d69c0:	f7fd ffd4 	bl	d496c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d69c4:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d69c6:	4681      	mov	r9, r0
        bool ok = false;
   d69c8:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d69ca:	2e00      	cmp	r6, #0
   d69cc:	d036      	beq.n	d6a3c <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d69ce:	2900      	cmp	r1, #0
   d69d0:	d134      	bne.n	d6a3c <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d69d2:	6873      	ldr	r3, [r6, #4]
   d69d4:	2b02      	cmp	r3, #2
   d69d6:	d003      	beq.n	d69e0 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d69d8:	2b0a      	cmp	r3, #10
   d69da:	d00b      	beq.n	d69f4 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d69dc:	69f6      	ldr	r6, [r6, #28]
   d69de:	e7f4      	b.n	d69ca <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d69e0:	f1b8 0f00 	cmp.w	r8, #0
   d69e4:	d004      	beq.n	d69f0 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d69e6:	6971      	ldr	r1, [r6, #20]
   d69e8:	4638      	mov	r0, r7
   d69ea:	3104      	adds	r1, #4
   d69ec:	f7ff fd9d 	bl	d652a <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d69f0:	4641      	mov	r1, r8
   d69f2:	e7f3      	b.n	d69dc <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d69f4:	f1b9 0f00 	cmp.w	r9, #0
   d69f8:	d101      	bne.n	d69fe <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d69fa:	4649      	mov	r1, r9
   d69fc:	e7ee      	b.n	d69dc <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d69fe:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d6a00:	2210      	movs	r2, #16
   d6a02:	a801      	add	r0, sp, #4
   d6a04:	f000 fb00 	bl	d7008 <memset>
                    a.v = 6;
   d6a08:	2306      	movs	r3, #6
   d6a0a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6a0e:	ad01      	add	r5, sp, #4
   d6a10:	f104 0308 	add.w	r3, r4, #8
   d6a14:	3418      	adds	r4, #24
   d6a16:	6818      	ldr	r0, [r3, #0]
   d6a18:	6859      	ldr	r1, [r3, #4]
   d6a1a:	462a      	mov	r2, r5
   d6a1c:	c203      	stmia	r2!, {r0, r1}
   d6a1e:	3308      	adds	r3, #8
   d6a20:	42a3      	cmp	r3, r4
   d6a22:	4615      	mov	r5, r2
   d6a24:	d1f7      	bne.n	d6a16 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d6a26:	a901      	add	r1, sp, #4
   d6a28:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d6a2a:	ad07      	add	r5, sp, #28
   d6a2c:	f7ff fd5e 	bl	d64ec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6a30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6a32:	1d3c      	adds	r4, r7, #4
   d6a34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6a36:	682b      	ldr	r3, [r5, #0]
   d6a38:	7023      	strb	r3, [r4, #0]
   d6a3a:	e7de      	b.n	d69fa <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d6a3c:	9800      	ldr	r0, [sp, #0]
   d6a3e:	f7fd fda1 	bl	d4584 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6a42:	4638      	mov	r0, r7
   d6a44:	b015      	add	sp, #84	; 0x54
   d6a46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d6a4c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6a4c:	4b02      	ldr	r3, [pc, #8]	; (d6a58 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d6a4e:	4a03      	ldr	r2, [pc, #12]	; (d6a5c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6a50:	601a      	str	r2, [r3, #0]
   d6a52:	2200      	movs	r2, #0
   d6a54:	605a      	str	r2, [r3, #4]

} // spark
   d6a56:	4770      	bx	lr
   d6a58:	2003e7bc 	.word	0x2003e7bc
   d6a5c:	000d7530 	.word	0x000d7530

000d6a60 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   d6a60:	f100 0310 	add.w	r3, r0, #16
   d6a64:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d6a66:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   d6a6a:	2901      	cmp	r1, #1
   d6a6c:	4618      	mov	r0, r3
   d6a6e:	d108      	bne.n	d6a82 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   d6a70:	f853 1c04 	ldr.w	r1, [r3, #-4]
   d6a74:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   d6a78:	3a01      	subs	r2, #1
   d6a7a:	f103 0310 	add.w	r3, r3, #16
   d6a7e:	d1f2      	bne.n	d6a66 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   d6a80:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   d6a82:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d6a84:	bf04      	itt	eq
   d6a86:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   d6a8a:	1852      	addeq	r2, r2, r1
   d6a8c:	e7f4      	b.n	d6a78 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000d6a8e <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   d6a8e:	b40e      	push	{r1, r2, r3}
   d6a90:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6a92:	b088      	sub	sp, #32
   d6a94:	af00      	add	r7, sp, #0
   d6a96:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6a9a:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   d6a9c:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6aa0:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   d6aa2:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6aa4:	462b      	mov	r3, r5
   d6aa6:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   d6aa8:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6aaa:	f7fd ffcf 	bl	d4a4c <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   d6aae:	280f      	cmp	r0, #15
   d6ab0:	687a      	ldr	r2, [r7, #4]
   d6ab2:	d91a      	bls.n	d6aea <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   d6ab4:	f100 0308 	add.w	r3, r0, #8
   d6ab8:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   d6abc:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   d6abe:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6ac2:	1c41      	adds	r1, r0, #1
   d6ac4:	462b      	mov	r3, r5
   d6ac6:	4668      	mov	r0, sp
        va_start(args, fmt);
   d6ac8:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6aca:	f7fd ffbf 	bl	d4a4c <vsnprintf>
        if (n > 0) {
   d6ace:	1e02      	subs	r2, r0, #0
   d6ad0:	dd04      	ble.n	d6adc <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   d6ad2:	6823      	ldr	r3, [r4, #0]
   d6ad4:	4669      	mov	r1, sp
   d6ad6:	689b      	ldr	r3, [r3, #8]
   d6ad8:	4620      	mov	r0, r4
   d6ada:	4798      	blx	r3
   d6adc:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   d6ade:	3720      	adds	r7, #32
   d6ae0:	46bd      	mov	sp, r7
   d6ae2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d6ae6:	b003      	add	sp, #12
   d6ae8:	4770      	bx	lr
    } else if (n > 0) {
   d6aea:	2800      	cmp	r0, #0
   d6aec:	d0f7      	beq.n	d6ade <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   d6aee:	6823      	ldr	r3, [r4, #0]
   d6af0:	4602      	mov	r2, r0
   d6af2:	689b      	ldr	r3, [r3, #8]
   d6af4:	f107 0110 	add.w	r1, r7, #16
   d6af8:	4620      	mov	r0, r4
   d6afa:	4798      	blx	r3
}
   d6afc:	e7ef      	b.n	d6ade <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000d6afe <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6afe:	b510      	push	{r4, lr}
          _M_dispose();
   d6b00:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6b02:	4604      	mov	r4, r0
          _M_dispose();
   d6b04:	689b      	ldr	r3, [r3, #8]
   d6b06:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d6b08:	68a3      	ldr	r3, [r4, #8]
   d6b0a:	3b01      	subs	r3, #1
   d6b0c:	60a3      	str	r3, [r4, #8]
   d6b0e:	b92b      	cbnz	r3, d6b1c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d6b10:	6823      	ldr	r3, [r4, #0]
   d6b12:	4620      	mov	r0, r4
   d6b14:	68db      	ldr	r3, [r3, #12]
    }
   d6b16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d6b1a:	4718      	bx	r3
    }
   d6b1c:	bd10      	pop	{r4, pc}

000d6b1e <_ZN5spark10JSONWriter5writeEc>:
inline void spark::JSONWriter::write(char c) {
   d6b1e:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d6b20:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   d6b22:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d6b26:	689b      	ldr	r3, [r3, #8]
   d6b28:	2201      	movs	r2, #1
   d6b2a:	f10d 0107 	add.w	r1, sp, #7
   d6b2e:	4798      	blx	r3
}
   d6b30:	b003      	add	sp, #12
   d6b32:	f85d fb04 	ldr.w	pc, [sp], #4

000d6b36 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
    class __shared_ptr
   d6b36:	b538      	push	{r3, r4, r5, lr}
   d6b38:	680b      	ldr	r3, [r1, #0]
   d6b3a:	6003      	str	r3, [r0, #0]
   d6b3c:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   d6b3e:	6843      	ldr	r3, [r0, #4]
   d6b40:	429d      	cmp	r5, r3
    class __shared_ptr
   d6b42:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   d6b44:	d00c      	beq.n	d6b60 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
   d6b46:	b115      	cbz	r5, d6b4e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
   d6b48:	686b      	ldr	r3, [r5, #4]
   d6b4a:	3301      	adds	r3, #1
   d6b4c:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   d6b4e:	6860      	ldr	r0, [r4, #4]
   d6b50:	b128      	cbz	r0, d6b5e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
   d6b52:	6843      	ldr	r3, [r0, #4]
   d6b54:	3b01      	subs	r3, #1
   d6b56:	6043      	str	r3, [r0, #4]
   d6b58:	b90b      	cbnz	r3, d6b5e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
   d6b5a:	f7ff ffd0 	bl	d6afe <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
   d6b5e:	6065      	str	r5, [r4, #4]
    class __shared_ptr
   d6b60:	4620      	mov	r0, r4
   d6b62:	bd38      	pop	{r3, r4, r5, pc}

000d6b64 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d6b64:	460b      	mov	r3, r1
   d6b66:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   d6b68:	2200      	movs	r2, #0
   d6b6a:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   d6b6c:	e9c0 2200 	strd	r2, r2, [r0]
   d6b70:	4604      	mov	r4, r0
        t_ = t;
   d6b72:	6083      	str	r3, [r0, #8]
    if (t) {
   d6b74:	b90b      	cbnz	r3, d6b7a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   d6b76:	4620      	mov	r0, r4
   d6b78:	bd10      	pop	{r4, pc}
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
   d6b7a:	f7ff ffdc 	bl	d6b36 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
   d6b7e:	e7fa      	b.n	d6b76 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000d6b80 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   d6b80:	6883      	ldr	r3, [r0, #8]
   d6b82:	b1eb      	cbz	r3, d6bc0 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   d6b84:	781a      	ldrb	r2, [r3, #0]
   d6b86:	2a03      	cmp	r2, #3
   d6b88:	d81a      	bhi.n	d6bc0 <_ZNK5spark9JSONValue4typeEv+0x40>
   d6b8a:	e8df f002 	tbb	[pc, r2]
   d6b8e:	1704      	.short	0x1704
   d6b90:	1b02      	.short	0x1b02
   d6b92:	2005      	movs	r0, #5
   d6b94:	4770      	bx	lr
        const char c = d_->json[t_->start];
   d6b96:	6802      	ldr	r2, [r0, #0]
   d6b98:	685b      	ldr	r3, [r3, #4]
   d6b9a:	6852      	ldr	r2, [r2, #4]
   d6b9c:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d6b9e:	282d      	cmp	r0, #45	; 0x2d
   d6ba0:	d012      	beq.n	d6bc8 <_ZNK5spark9JSONValue4typeEv+0x48>
   d6ba2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d6ba6:	2b09      	cmp	r3, #9
   d6ba8:	d90e      	bls.n	d6bc8 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d6baa:	2874      	cmp	r0, #116	; 0x74
   d6bac:	d00e      	beq.n	d6bcc <_ZNK5spark9JSONValue4typeEv+0x4c>
   d6bae:	2866      	cmp	r0, #102	; 0x66
   d6bb0:	d00c      	beq.n	d6bcc <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   d6bb2:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d6bb6:	4258      	negs	r0, r3
   d6bb8:	4158      	adcs	r0, r3
   d6bba:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   d6bbc:	2006      	movs	r0, #6
   d6bbe:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   d6bc0:	2000      	movs	r0, #0
   d6bc2:	4770      	bx	lr
        return JSON_TYPE_STRING;
   d6bc4:	2004      	movs	r0, #4
   d6bc6:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   d6bc8:	2003      	movs	r0, #3
   d6bca:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   d6bcc:	2002      	movs	r0, #2
}
   d6bce:	4770      	bx	lr

000d6bd0 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   d6bd0:	b510      	push	{r4, lr}
   d6bd2:	4604      	mov	r4, r0
    switch (type()) {
   d6bd4:	f7ff ffd4 	bl	d6b80 <_ZNK5spark9JSONValue4typeEv>
   d6bd8:	2802      	cmp	r0, #2
   d6bda:	d00e      	beq.n	d6bfa <_ZNK5spark9JSONValue5toIntEv+0x2a>
   d6bdc:	1ec3      	subs	r3, r0, #3
   d6bde:	b2db      	uxtb	r3, r3
   d6be0:	2b01      	cmp	r3, #1
   d6be2:	d814      	bhi.n	d6c0e <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   d6be4:	6822      	ldr	r2, [r4, #0]
   d6be6:	68a3      	ldr	r3, [r4, #8]
   d6be8:	6850      	ldr	r0, [r2, #4]
   d6bea:	685b      	ldr	r3, [r3, #4]
}
   d6bec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   d6bf0:	220a      	movs	r2, #10
   d6bf2:	2100      	movs	r1, #0
   d6bf4:	4418      	add	r0, r3
   d6bf6:	f000 bb23 	b.w	d7240 <strtol>
        const char* const s = d_->json + t_->start;
   d6bfa:	6822      	ldr	r2, [r4, #0]
   d6bfc:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d6bfe:	6852      	ldr	r2, [r2, #4]
   d6c00:	685b      	ldr	r3, [r3, #4]
   d6c02:	5cd0      	ldrb	r0, [r2, r3]
   d6c04:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d6c08:	4258      	negs	r0, r3
   d6c0a:	4158      	adcs	r0, r3
}
   d6c0c:	bd10      	pop	{r4, pc}
    switch (type()) {
   d6c0e:	2000      	movs	r0, #0
   d6c10:	e7fc      	b.n	d6c0c <_ZNK5spark9JSONValue5toIntEv+0x3c>
	...

000d6c14 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d6c14:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d6c16:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d6c18:	e9c0 3300 	strd	r3, r3, [r0]
   d6c1c:	4604      	mov	r4, r0
        n_(0) {
   d6c1e:	480e      	ldr	r0, [pc, #56]	; (d6c58 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   d6c20:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d6c24:	b1a9      	cbz	r1, d6c52 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   d6c26:	780b      	ldrb	r3, [r1, #0]
   d6c28:	2b03      	cmp	r3, #3
   d6c2a:	d006      	beq.n	d6c3a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d6c2c:	b98b      	cbnz	r3, d6c52 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d6c2e:	6813      	ldr	r3, [r2, #0]
   d6c30:	6858      	ldr	r0, [r3, #4]
   d6c32:	684b      	ldr	r3, [r1, #4]
   d6c34:	5cc3      	ldrb	r3, [r0, r3]
   d6c36:	2b6e      	cmp	r3, #110	; 0x6e
   d6c38:	d007      	beq.n	d6c4a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   d6c3a:	6813      	ldr	r3, [r2, #0]
   d6c3c:	684d      	ldr	r5, [r1, #4]
   d6c3e:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   d6c40:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   d6c42:	4428      	add	r0, r5
            n_ = t->end - t->start;
   d6c44:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   d6c46:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   d6c48:	60e3      	str	r3, [r4, #12]
   d6c4a:	4611      	mov	r1, r2
   d6c4c:	4620      	mov	r0, r4
   d6c4e:	f7ff ff72 	bl	d6b36 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d6c52:	4620      	mov	r0, r4
   d6c54:	bd38      	pop	{r3, r4, r5, pc}
   d6c56:	bf00      	nop
   d6c58:	000d738d 	.word	0x000d738d

000d6c5c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d6c5c:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d6c5e:	2500      	movs	r5, #0
   d6c60:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   d6c62:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   d6c66:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d6c6a:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d6c6e:	4604      	mov	r4, r0
   d6c70:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   d6c72:	b14b      	cbz	r3, d6c88 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   d6c74:	781a      	ldrb	r2, [r3, #0]
   d6c76:	2a01      	cmp	r2, #1
   d6c78:	d106      	bne.n	d6c88 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   d6c7a:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   d6c7e:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   d6c80:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   d6c82:	6143      	str	r3, [r0, #20]
   d6c84:	f7ff ff57 	bl	d6b36 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d6c88:	4620      	mov	r0, r4
   d6c8a:	bd38      	pop	{r3, r4, r5, pc}

000d6c8c <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   d6c8c:	b510      	push	{r4, lr}
    if (!n_) {
   d6c8e:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   d6c90:	4604      	mov	r4, r0
    if (!n_) {
   d6c92:	b163      	cbz	r3, d6cae <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   d6c94:	6880      	ldr	r0, [r0, #8]
   d6c96:	60e0      	str	r0, [r4, #12]
    --n_;
   d6c98:	3b01      	subs	r3, #1
    ++t_;
   d6c9a:	3010      	adds	r0, #16
   d6c9c:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d6c9e:	6120      	str	r0, [r4, #16]
    --n_;
   d6ca0:	6163      	str	r3, [r4, #20]
    if (n_) {
   d6ca2:	b113      	cbz	r3, d6caa <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   d6ca4:	f7ff fedc 	bl	d6a60 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d6ca8:	60a0      	str	r0, [r4, #8]
    return true;
   d6caa:	2001      	movs	r0, #1
   d6cac:	e000      	b.n	d6cb0 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   d6cae:	4618      	mov	r0, r3
}
   d6cb0:	bd10      	pop	{r4, pc}

000d6cb2 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   d6cb2:	b510      	push	{r4, lr}
    write('}');
   d6cb4:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   d6cb6:	4604      	mov	r4, r0
    write('}');
   d6cb8:	f7ff ff31 	bl	d6b1e <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   d6cbc:	2301      	movs	r3, #1
   d6cbe:	7123      	strb	r3, [r4, #4]
}
   d6cc0:	4620      	mov	r0, r4
   d6cc2:	bd10      	pop	{r4, pc}

000d6cc4 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   d6cc4:	b508      	push	{r3, lr}
    switch (state_) {
   d6cc6:	7903      	ldrb	r3, [r0, #4]
   d6cc8:	2b01      	cmp	r3, #1
   d6cca:	d002      	beq.n	d6cd2 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   d6ccc:	2b02      	cmp	r3, #2
   d6cce:	d004      	beq.n	d6cda <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   d6cd0:	bd08      	pop	{r3, pc}
        write(',');
   d6cd2:	212c      	movs	r1, #44	; 0x2c
        write(':');
   d6cd4:	f7ff ff23 	bl	d6b1e <_ZN5spark10JSONWriter5writeEc>
}
   d6cd8:	e7fa      	b.n	d6cd0 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   d6cda:	213a      	movs	r1, #58	; 0x3a
   d6cdc:	e7fa      	b.n	d6cd4 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000d6cde <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   d6cde:	b510      	push	{r4, lr}
   d6ce0:	4604      	mov	r4, r0
    writeSeparator();
   d6ce2:	f7ff ffef 	bl	d6cc4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   d6ce6:	4620      	mov	r0, r4
   d6ce8:	217b      	movs	r1, #123	; 0x7b
   d6cea:	f7ff ff18 	bl	d6b1e <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   d6cee:	2300      	movs	r3, #0
   d6cf0:	7123      	strb	r3, [r4, #4]
}
   d6cf2:	4620      	mov	r0, r4
   d6cf4:	bd10      	pop	{r4, pc}
	...

000d6cf8 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   d6cf8:	b513      	push	{r0, r1, r4, lr}
   d6cfa:	4604      	mov	r4, r0
   d6cfc:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d6cfe:	f7ff ffe1 	bl	d6cc4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   d6d02:	6823      	ldr	r3, [r4, #0]
   d6d04:	9a01      	ldr	r2, [sp, #4]
   d6d06:	68db      	ldr	r3, [r3, #12]
   d6d08:	4903      	ldr	r1, [pc, #12]	; (d6d18 <_ZN5spark10JSONWriter5valueEi+0x20>)
   d6d0a:	4620      	mov	r0, r4
   d6d0c:	4798      	blx	r3
    state_ = NEXT;
   d6d0e:	2301      	movs	r3, #1
}
   d6d10:	4620      	mov	r0, r4
    state_ = NEXT;
   d6d12:	7123      	strb	r3, [r4, #4]
}
   d6d14:	b002      	add	sp, #8
   d6d16:	bd10      	pop	{r4, pc}
   d6d18:	000d7367 	.word	0x000d7367

000d6d1c <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   d6d1c:	b513      	push	{r0, r1, r4, lr}
   d6d1e:	4604      	mov	r4, r0
   d6d20:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d6d22:	f7ff ffcf 	bl	d6cc4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   d6d26:	6823      	ldr	r3, [r4, #0]
   d6d28:	9a01      	ldr	r2, [sp, #4]
   d6d2a:	68db      	ldr	r3, [r3, #12]
   d6d2c:	4903      	ldr	r1, [pc, #12]	; (d6d3c <_ZN5spark10JSONWriter5valueEj+0x20>)
   d6d2e:	4620      	mov	r0, r4
   d6d30:	4798      	blx	r3
    state_ = NEXT;
   d6d32:	2301      	movs	r3, #1
}
   d6d34:	4620      	mov	r0, r4
    state_ = NEXT;
   d6d36:	7123      	strb	r3, [r4, #4]
}
   d6d38:	b002      	add	sp, #8
   d6d3a:	bd10      	pop	{r4, pc}
   d6d3c:	000d755c 	.word	0x000d755c

000d6d40 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d6d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6d44:	460d      	mov	r5, r1
   d6d46:	4617      	mov	r7, r2
    write('"');
   d6d48:	2122      	movs	r1, #34	; 0x22
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   d6d4a:	f8df 80a0 	ldr.w	r8, [pc, #160]	; d6dec <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xac>
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d6d4e:	4604      	mov	r4, r0
    const char* const end = str + size;
   d6d50:	442f      	add	r7, r5
    write('"');
   d6d52:	f7ff fee4 	bl	d6b1e <_ZN5spark10JSONWriter5writeEc>
    const char* const end = str + size;
   d6d56:	4629      	mov	r1, r5
    while (s != end) {
   d6d58:	42bd      	cmp	r5, r7
   d6d5a:	462a      	mov	r2, r5
   d6d5c:	d038      	beq.n	d6dd0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x90>
        const char c = *s;
   d6d5e:	f815 6b01 	ldrb.w	r6, [r5], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   d6d62:	2e22      	cmp	r6, #34	; 0x22
   d6d64:	d003      	beq.n	d6d6e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d6d66:	2e5c      	cmp	r6, #92	; 0x5c
   d6d68:	d001      	beq.n	d6d6e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d6d6a:	2e1f      	cmp	r6, #31
   d6d6c:	d8f4      	bhi.n	d6d58 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   d6d6e:	6823      	ldr	r3, [r4, #0]
   d6d70:	1a52      	subs	r2, r2, r1
   d6d72:	689b      	ldr	r3, [r3, #8]
   d6d74:	4620      	mov	r0, r4
   d6d76:	4798      	blx	r3
            write('\\');
   d6d78:	215c      	movs	r1, #92	; 0x5c
   d6d7a:	4620      	mov	r0, r4
   d6d7c:	f7ff fecf 	bl	d6b1e <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   d6d80:	2e0d      	cmp	r6, #13
   d6d82:	d80a      	bhi.n	d6d9a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x5a>
   d6d84:	2e07      	cmp	r6, #7
   d6d86:	d91c      	bls.n	d6dc2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d6d88:	f1a6 0308 	sub.w	r3, r6, #8
   d6d8c:	2b05      	cmp	r3, #5
   d6d8e:	d818      	bhi.n	d6dc2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d6d90:	e8df f003 	tbb	[pc, r3]
   d6d94:	17110f0d 	.word	0x17110f0d
   d6d98:	1513      	.short	0x1513
   d6d9a:	2e22      	cmp	r6, #34	; 0x22
   d6d9c:	d001      	beq.n	d6da2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d6d9e:	2e5c      	cmp	r6, #92	; 0x5c
   d6da0:	d10f      	bne.n	d6dc2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
                write(c);
   d6da2:	4631      	mov	r1, r6
                write('b');
   d6da4:	4620      	mov	r0, r4
   d6da6:	f7ff feba 	bl	d6b1e <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   d6daa:	4629      	mov	r1, r5
    while (s != end) {
   d6dac:	e7d4      	b.n	d6d58 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   d6dae:	2162      	movs	r1, #98	; 0x62
   d6db0:	e7f8      	b.n	d6da4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('t');
   d6db2:	2174      	movs	r1, #116	; 0x74
   d6db4:	e7f6      	b.n	d6da4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('n');
   d6db6:	216e      	movs	r1, #110	; 0x6e
   d6db8:	e7f4      	b.n	d6da4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('f');
   d6dba:	2166      	movs	r1, #102	; 0x66
   d6dbc:	e7f2      	b.n	d6da4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('r');
   d6dbe:	2172      	movs	r1, #114	; 0x72
   d6dc0:	e7f0      	b.n	d6da4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                printf("u%04x", (unsigned)c);
   d6dc2:	6823      	ldr	r3, [r4, #0]
   d6dc4:	4632      	mov	r2, r6
   d6dc6:	68db      	ldr	r3, [r3, #12]
   d6dc8:	4641      	mov	r1, r8
   d6dca:	4620      	mov	r0, r4
   d6dcc:	4798      	blx	r3
                break;
   d6dce:	e7ec      	b.n	d6daa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6a>
        }
        ++s;
    }
    if (s != str) {
   d6dd0:	428d      	cmp	r5, r1
   d6dd2:	d004      	beq.n	d6dde <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9e>
        write(str, s - str); // Write remaining characters
   d6dd4:	6823      	ldr	r3, [r4, #0]
   d6dd6:	1a6a      	subs	r2, r5, r1
   d6dd8:	689b      	ldr	r3, [r3, #8]
   d6dda:	4620      	mov	r0, r4
   d6ddc:	4798      	blx	r3
    }
    write('"');
   d6dde:	2122      	movs	r1, #34	; 0x22
   d6de0:	4620      	mov	r0, r4
   d6de2:	f7ff fe9c 	bl	d6b1e <_ZN5spark10JSONWriter5writeEc>
}
   d6de6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6dea:	bf00      	nop
   d6dec:	000d755f 	.word	0x000d755f

000d6df0 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   d6df0:	b513      	push	{r0, r1, r4, lr}
   d6df2:	4604      	mov	r4, r0
   d6df4:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d6df8:	f7ff ff64 	bl	d6cc4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   d6dfc:	4620      	mov	r0, r4
   d6dfe:	e9dd 2100 	ldrd	r2, r1, [sp]
   d6e02:	f7ff ff9d 	bl	d6d40 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   d6e06:	2302      	movs	r3, #2
}
   d6e08:	4620      	mov	r0, r4
    state_ = VALUE;
   d6e0a:	7123      	strb	r3, [r4, #4]
}
   d6e0c:	b002      	add	sp, #8
   d6e0e:	bd10      	pop	{r4, pc}

000d6e10 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   d6e10:	b513      	push	{r0, r1, r4, lr}
   d6e12:	4604      	mov	r4, r0
   d6e14:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d6e18:	f7ff ff54 	bl	d6cc4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   d6e1c:	4620      	mov	r0, r4
   d6e1e:	e9dd 2100 	ldrd	r2, r1, [sp]
   d6e22:	f7ff ff8d 	bl	d6d40 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   d6e26:	2301      	movs	r3, #1
}
   d6e28:	4620      	mov	r0, r4
    state_ = NEXT;
   d6e2a:	7123      	strb	r3, [r4, #4]
}
   d6e2c:	b002      	add	sp, #8
   d6e2e:	bd10      	pop	{r4, pc}

000d6e30 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d6e30:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d6e32:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d6e34:	d902      	bls.n	d6e3c <pinAvailable+0xc>
    return false;
   d6e36:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d6e38:	b002      	add	sp, #8
   d6e3a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d6e3c:	f1a0 030b 	sub.w	r3, r0, #11
   d6e40:	2b02      	cmp	r3, #2
   d6e42:	d81a      	bhi.n	d6e7a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d6e44:	4c17      	ldr	r4, [pc, #92]	; (d6ea4 <pinAvailable+0x74>)
   d6e46:	7821      	ldrb	r1, [r4, #0]
   d6e48:	f3bf 8f5b 	dmb	ish
   d6e4c:	f011 0101 	ands.w	r1, r1, #1
   d6e50:	d10b      	bne.n	d6e6a <pinAvailable+0x3a>
   d6e52:	4620      	mov	r0, r4
   d6e54:	9101      	str	r1, [sp, #4]
   d6e56:	f7fd f92d 	bl	d40b4 <__cxa_guard_acquire>
   d6e5a:	9901      	ldr	r1, [sp, #4]
   d6e5c:	b128      	cbz	r0, d6e6a <pinAvailable+0x3a>
   d6e5e:	4812      	ldr	r0, [pc, #72]	; (d6ea8 <pinAvailable+0x78>)
   d6e60:	f7fd fe52 	bl	d4b08 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d6e64:	4620      	mov	r0, r4
   d6e66:	f7fd f92a 	bl	d40be <__cxa_guard_release>
   d6e6a:	4b0f      	ldr	r3, [pc, #60]	; (d6ea8 <pinAvailable+0x78>)
   d6e6c:	7818      	ldrb	r0, [r3, #0]
   d6e6e:	f7fd fcc9 	bl	d4804 <hal_spi_is_enabled>
   d6e72:	2800      	cmp	r0, #0
   d6e74:	d1df      	bne.n	d6e36 <pinAvailable+0x6>
  return true; // 'pin' is available
   d6e76:	2001      	movs	r0, #1
   d6e78:	e7de      	b.n	d6e38 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d6e7a:	2801      	cmp	r0, #1
   d6e7c:	d809      	bhi.n	d6e92 <pinAvailable+0x62>
   d6e7e:	f000 f857 	bl	d6f30 <_Z19__fetch_global_Wirev>
   d6e82:	2100      	movs	r1, #0
   d6e84:	7c00      	ldrb	r0, [r0, #16]
   d6e86:	f7fd fca5 	bl	d47d4 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d6e8a:	f080 0001 	eor.w	r0, r0, #1
   d6e8e:	b2c0      	uxtb	r0, r0
   d6e90:	e7d2      	b.n	d6e38 <pinAvailable+0x8>
   d6e92:	3809      	subs	r0, #9
   d6e94:	2801      	cmp	r0, #1
   d6e96:	d8ee      	bhi.n	d6e76 <pinAvailable+0x46>
   d6e98:	f7ff fc66 	bl	d6768 <_Z22__fetch_global_Serial1v>
   d6e9c:	7c00      	ldrb	r0, [r0, #16]
   d6e9e:	f7fd fc59 	bl	d4754 <hal_usart_is_enabled>
   d6ea2:	e7f2      	b.n	d6e8a <pinAvailable+0x5a>
   d6ea4:	2003e7c4 	.word	0x2003e7c4
   d6ea8:	2003e7c8 	.word	0x2003e7c8

000d6eac <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6eac:	2823      	cmp	r0, #35	; 0x23
{
   d6eae:	b538      	push	{r3, r4, r5, lr}
   d6eb0:	4604      	mov	r4, r0
   d6eb2:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6eb4:	d80a      	bhi.n	d6ecc <pinMode+0x20>
   d6eb6:	29ff      	cmp	r1, #255	; 0xff
   d6eb8:	d008      	beq.n	d6ecc <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d6eba:	f7ff ffb9 	bl	d6e30 <pinAvailable>
   d6ebe:	b128      	cbz	r0, d6ecc <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d6ec0:	4629      	mov	r1, r5
   d6ec2:	4620      	mov	r0, r4
}
   d6ec4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d6ec8:	f7fd bb6c 	b.w	d45a4 <HAL_Pin_Mode>
}
   d6ecc:	bd38      	pop	{r3, r4, r5, pc}

000d6ece <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d6ece:	b538      	push	{r3, r4, r5, lr}
   d6ed0:	4604      	mov	r4, r0
   d6ed2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6ed4:	f7fd fb6e 	bl	d45b4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d6ed8:	28ff      	cmp	r0, #255	; 0xff
   d6eda:	d010      	beq.n	d6efe <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d6edc:	2806      	cmp	r0, #6
   d6ede:	d804      	bhi.n	d6eea <digitalWrite+0x1c>
   d6ee0:	234d      	movs	r3, #77	; 0x4d
   d6ee2:	fa23 f000 	lsr.w	r0, r3, r0
   d6ee6:	07c3      	lsls	r3, r0, #31
   d6ee8:	d409      	bmi.n	d6efe <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d6eea:	4620      	mov	r0, r4
   d6eec:	f7ff ffa0 	bl	d6e30 <pinAvailable>
   d6ef0:	b128      	cbz	r0, d6efe <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6ef2:	4629      	mov	r1, r5
   d6ef4:	4620      	mov	r0, r4
}
   d6ef6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d6efa:	f7fd bb63 	b.w	d45c4 <HAL_GPIO_Write>
}
   d6efe:	bd38      	pop	{r3, r4, r5, pc}

000d6f00 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d6f00:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d6f02:	2300      	movs	r3, #0
   d6f04:	2520      	movs	r5, #32
   d6f06:	8043      	strh	r3, [r0, #2]
   d6f08:	2314      	movs	r3, #20
{
   d6f0a:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d6f0c:	8003      	strh	r3, [r0, #0]
   d6f0e:	6085      	str	r5, [r0, #8]
   d6f10:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6f12:	4906      	ldr	r1, [pc, #24]	; (d6f2c <_Z17acquireWireBufferv+0x2c>)
   d6f14:	4628      	mov	r0, r5
   d6f16:	f000 f83c 	bl	d6f92 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6f1a:	4904      	ldr	r1, [pc, #16]	; (d6f2c <_Z17acquireWireBufferv+0x2c>)
	};
   d6f1c:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6f1e:	4628      	mov	r0, r5
   d6f20:	f000 f837 	bl	d6f92 <_ZnajRKSt9nothrow_t>
	};
   d6f24:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d6f26:	4620      	mov	r0, r4
   d6f28:	bd38      	pop	{r3, r4, r5, pc}
   d6f2a:	bf00      	nop
   d6f2c:	000d7565 	.word	0x000d7565

000d6f30 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d6f30:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6f32:	4d0f      	ldr	r5, [pc, #60]	; (d6f70 <_Z19__fetch_global_Wirev+0x40>)
   d6f34:	7829      	ldrb	r1, [r5, #0]
   d6f36:	f3bf 8f5b 	dmb	ish
   d6f3a:	f011 0401 	ands.w	r4, r1, #1
{
   d6f3e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6f40:	d113      	bne.n	d6f6a <_Z19__fetch_global_Wirev+0x3a>
   d6f42:	4628      	mov	r0, r5
   d6f44:	f7fd f8b6 	bl	d40b4 <__cxa_guard_acquire>
   d6f48:	b178      	cbz	r0, d6f6a <_Z19__fetch_global_Wirev+0x3a>
   d6f4a:	a801      	add	r0, sp, #4
   d6f4c:	f7ff ffd8 	bl	d6f00 <_Z17acquireWireBufferv>
   d6f50:	aa01      	add	r2, sp, #4
   d6f52:	4621      	mov	r1, r4
   d6f54:	4807      	ldr	r0, [pc, #28]	; (d6f74 <_Z19__fetch_global_Wirev+0x44>)
   d6f56:	f7ff fc8b 	bl	d6870 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d6f5a:	4628      	mov	r0, r5
   d6f5c:	f7fd f8af 	bl	d40be <__cxa_guard_release>
   d6f60:	4a05      	ldr	r2, [pc, #20]	; (d6f78 <_Z19__fetch_global_Wirev+0x48>)
   d6f62:	4906      	ldr	r1, [pc, #24]	; (d6f7c <_Z19__fetch_global_Wirev+0x4c>)
   d6f64:	4803      	ldr	r0, [pc, #12]	; (d6f74 <_Z19__fetch_global_Wirev+0x44>)
   d6f66:	f000 f80b 	bl	d6f80 <__aeabi_atexit>
	return wire;
}
   d6f6a:	4802      	ldr	r0, [pc, #8]	; (d6f74 <_Z19__fetch_global_Wirev+0x44>)
   d6f6c:	b007      	add	sp, #28
   d6f6e:	bd30      	pop	{r4, r5, pc}
   d6f70:	2003e7d8 	.word	0x2003e7d8
   d6f74:	2003e7dc 	.word	0x2003e7dc
   d6f78:	2003e6e0 	.word	0x2003e6e0
   d6f7c:	000d6819 	.word	0x000d6819

000d6f80 <__aeabi_atexit>:
   d6f80:	460b      	mov	r3, r1
   d6f82:	4601      	mov	r1, r0
   d6f84:	4618      	mov	r0, r3
   d6f86:	f000 b809 	b.w	d6f9c <__cxa_atexit>

000d6f8a <_ZdlPvj>:
   d6f8a:	f7fd b886 	b.w	d409a <_ZdlPv>

000d6f8e <_ZnwjRKSt9nothrow_t>:
   d6f8e:	f7fd b880 	b.w	d4092 <_Znwj>

000d6f92 <_ZnajRKSt9nothrow_t>:
   d6f92:	f7fd b880 	b.w	d4096 <_Znaj>

000d6f96 <_ZSt25__throw_bad_function_callv>:
   d6f96:	b508      	push	{r3, lr}
   d6f98:	f7fd fd60 	bl	d4a5c <abort>

000d6f9c <__cxa_atexit>:
   d6f9c:	b510      	push	{r4, lr}
   d6f9e:	4c05      	ldr	r4, [pc, #20]	; (d6fb4 <__cxa_atexit+0x18>)
   d6fa0:	4613      	mov	r3, r2
   d6fa2:	b12c      	cbz	r4, d6fb0 <__cxa_atexit+0x14>
   d6fa4:	460a      	mov	r2, r1
   d6fa6:	4601      	mov	r1, r0
   d6fa8:	2002      	movs	r0, #2
   d6faa:	f3af 8000 	nop.w
   d6fae:	bd10      	pop	{r4, pc}
   d6fb0:	4620      	mov	r0, r4
   d6fb2:	e7fc      	b.n	d6fae <__cxa_atexit+0x12>
   d6fb4:	00000000 	.word	0x00000000

000d6fb8 <memcpy>:
   d6fb8:	440a      	add	r2, r1
   d6fba:	4291      	cmp	r1, r2
   d6fbc:	f100 33ff 	add.w	r3, r0, #4294967295
   d6fc0:	d100      	bne.n	d6fc4 <memcpy+0xc>
   d6fc2:	4770      	bx	lr
   d6fc4:	b510      	push	{r4, lr}
   d6fc6:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6fca:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6fce:	4291      	cmp	r1, r2
   d6fd0:	d1f9      	bne.n	d6fc6 <memcpy+0xe>
   d6fd2:	bd10      	pop	{r4, pc}

000d6fd4 <memmove>:
   d6fd4:	4288      	cmp	r0, r1
   d6fd6:	b510      	push	{r4, lr}
   d6fd8:	eb01 0402 	add.w	r4, r1, r2
   d6fdc:	d902      	bls.n	d6fe4 <memmove+0x10>
   d6fde:	4284      	cmp	r4, r0
   d6fe0:	4623      	mov	r3, r4
   d6fe2:	d807      	bhi.n	d6ff4 <memmove+0x20>
   d6fe4:	1e43      	subs	r3, r0, #1
   d6fe6:	42a1      	cmp	r1, r4
   d6fe8:	d008      	beq.n	d6ffc <memmove+0x28>
   d6fea:	f811 2b01 	ldrb.w	r2, [r1], #1
   d6fee:	f803 2f01 	strb.w	r2, [r3, #1]!
   d6ff2:	e7f8      	b.n	d6fe6 <memmove+0x12>
   d6ff4:	4402      	add	r2, r0
   d6ff6:	4601      	mov	r1, r0
   d6ff8:	428a      	cmp	r2, r1
   d6ffa:	d100      	bne.n	d6ffe <memmove+0x2a>
   d6ffc:	bd10      	pop	{r4, pc}
   d6ffe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d7002:	f802 4d01 	strb.w	r4, [r2, #-1]!
   d7006:	e7f7      	b.n	d6ff8 <memmove+0x24>

000d7008 <memset>:
   d7008:	4402      	add	r2, r0
   d700a:	4603      	mov	r3, r0
   d700c:	4293      	cmp	r3, r2
   d700e:	d100      	bne.n	d7012 <memset+0xa>
   d7010:	4770      	bx	lr
   d7012:	f803 1b01 	strb.w	r1, [r3], #1
   d7016:	e7f9      	b.n	d700c <memset+0x4>

000d7018 <srand>:
   d7018:	b538      	push	{r3, r4, r5, lr}
   d701a:	4b0d      	ldr	r3, [pc, #52]	; (d7050 <srand+0x38>)
   d701c:	681d      	ldr	r5, [r3, #0]
   d701e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d7020:	4604      	mov	r4, r0
   d7022:	b97b      	cbnz	r3, d7044 <srand+0x2c>
   d7024:	2018      	movs	r0, #24
   d7026:	f7fd fcf9 	bl	d4a1c <malloc>
   d702a:	4a0a      	ldr	r2, [pc, #40]	; (d7054 <srand+0x3c>)
   d702c:	4b0a      	ldr	r3, [pc, #40]	; (d7058 <srand+0x40>)
   d702e:	63a8      	str	r0, [r5, #56]	; 0x38
   d7030:	e9c0 2300 	strd	r2, r3, [r0]
   d7034:	4b09      	ldr	r3, [pc, #36]	; (d705c <srand+0x44>)
   d7036:	6083      	str	r3, [r0, #8]
   d7038:	230b      	movs	r3, #11
   d703a:	8183      	strh	r3, [r0, #12]
   d703c:	2201      	movs	r2, #1
   d703e:	2300      	movs	r3, #0
   d7040:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d7044:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d7046:	2200      	movs	r2, #0
   d7048:	611c      	str	r4, [r3, #16]
   d704a:	615a      	str	r2, [r3, #20]
   d704c:	bd38      	pop	{r3, r4, r5, pc}
   d704e:	bf00      	nop
   d7050:	2003e67c 	.word	0x2003e67c
   d7054:	abcd330e 	.word	0xabcd330e
   d7058:	e66d1234 	.word	0xe66d1234
   d705c:	0005deec 	.word	0x0005deec

000d7060 <strchr>:
   d7060:	b2c9      	uxtb	r1, r1
   d7062:	4603      	mov	r3, r0
   d7064:	f810 2b01 	ldrb.w	r2, [r0], #1
   d7068:	b11a      	cbz	r2, d7072 <strchr+0x12>
   d706a:	428a      	cmp	r2, r1
   d706c:	d1f9      	bne.n	d7062 <strchr+0x2>
   d706e:	4618      	mov	r0, r3
   d7070:	4770      	bx	lr
   d7072:	2900      	cmp	r1, #0
   d7074:	bf18      	it	ne
   d7076:	2300      	movne	r3, #0
   d7078:	e7f9      	b.n	d706e <strchr+0xe>

000d707a <strchrnul>:
   d707a:	b510      	push	{r4, lr}
   d707c:	4604      	mov	r4, r0
   d707e:	f7ff ffef 	bl	d7060 <strchr>
   d7082:	b918      	cbnz	r0, d708c <strchrnul+0x12>
   d7084:	4620      	mov	r0, r4
   d7086:	f000 f832 	bl	d70ee <strlen>
   d708a:	4420      	add	r0, r4
   d708c:	bd10      	pop	{r4, pc}

000d708e <strcmp>:
   d708e:	f810 2b01 	ldrb.w	r2, [r0], #1
   d7092:	f811 3b01 	ldrb.w	r3, [r1], #1
   d7096:	2a01      	cmp	r2, #1
   d7098:	bf28      	it	cs
   d709a:	429a      	cmpcs	r2, r3
   d709c:	d0f7      	beq.n	d708e <strcmp>
   d709e:	1ad0      	subs	r0, r2, r3
   d70a0:	4770      	bx	lr

000d70a2 <strcpy>:
   d70a2:	4603      	mov	r3, r0
   d70a4:	f811 2b01 	ldrb.w	r2, [r1], #1
   d70a8:	f803 2b01 	strb.w	r2, [r3], #1
   d70ac:	2a00      	cmp	r2, #0
   d70ae:	d1f9      	bne.n	d70a4 <strcpy+0x2>
   d70b0:	4770      	bx	lr
	...

000d70b4 <strdup>:
   d70b4:	4b02      	ldr	r3, [pc, #8]	; (d70c0 <strdup+0xc>)
   d70b6:	4601      	mov	r1, r0
   d70b8:	6818      	ldr	r0, [r3, #0]
   d70ba:	f000 b803 	b.w	d70c4 <_strdup_r>
   d70be:	bf00      	nop
   d70c0:	2003e67c 	.word	0x2003e67c

000d70c4 <_strdup_r>:
   d70c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d70c6:	4604      	mov	r4, r0
   d70c8:	4608      	mov	r0, r1
   d70ca:	460d      	mov	r5, r1
   d70cc:	f000 f80f 	bl	d70ee <strlen>
   d70d0:	1c42      	adds	r2, r0, #1
   d70d2:	4611      	mov	r1, r2
   d70d4:	4620      	mov	r0, r4
   d70d6:	9201      	str	r2, [sp, #4]
   d70d8:	f7fd fcc8 	bl	d4a6c <_malloc_r>
   d70dc:	4604      	mov	r4, r0
   d70de:	b118      	cbz	r0, d70e8 <_strdup_r+0x24>
   d70e0:	9a01      	ldr	r2, [sp, #4]
   d70e2:	4629      	mov	r1, r5
   d70e4:	f7ff ff68 	bl	d6fb8 <memcpy>
   d70e8:	4620      	mov	r0, r4
   d70ea:	b003      	add	sp, #12
   d70ec:	bd30      	pop	{r4, r5, pc}

000d70ee <strlen>:
   d70ee:	4603      	mov	r3, r0
   d70f0:	f813 2b01 	ldrb.w	r2, [r3], #1
   d70f4:	2a00      	cmp	r2, #0
   d70f6:	d1fb      	bne.n	d70f0 <strlen+0x2>
   d70f8:	1a18      	subs	r0, r3, r0
   d70fa:	3801      	subs	r0, #1
   d70fc:	4770      	bx	lr

000d70fe <strncmp>:
   d70fe:	b510      	push	{r4, lr}
   d7100:	b16a      	cbz	r2, d711e <strncmp+0x20>
   d7102:	3901      	subs	r1, #1
   d7104:	1884      	adds	r4, r0, r2
   d7106:	f810 3b01 	ldrb.w	r3, [r0], #1
   d710a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   d710e:	4293      	cmp	r3, r2
   d7110:	d103      	bne.n	d711a <strncmp+0x1c>
   d7112:	42a0      	cmp	r0, r4
   d7114:	d001      	beq.n	d711a <strncmp+0x1c>
   d7116:	2b00      	cmp	r3, #0
   d7118:	d1f5      	bne.n	d7106 <strncmp+0x8>
   d711a:	1a98      	subs	r0, r3, r2
   d711c:	bd10      	pop	{r4, pc}
   d711e:	4610      	mov	r0, r2
   d7120:	e7fc      	b.n	d711c <strncmp+0x1e>

000d7122 <strrchr>:
   d7122:	b538      	push	{r3, r4, r5, lr}
   d7124:	4603      	mov	r3, r0
   d7126:	460c      	mov	r4, r1
   d7128:	b969      	cbnz	r1, d7146 <strrchr+0x24>
   d712a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d712e:	f7ff bf97 	b.w	d7060 <strchr>
   d7132:	1c43      	adds	r3, r0, #1
   d7134:	4605      	mov	r5, r0
   d7136:	4621      	mov	r1, r4
   d7138:	4618      	mov	r0, r3
   d713a:	f7ff ff91 	bl	d7060 <strchr>
   d713e:	2800      	cmp	r0, #0
   d7140:	d1f7      	bne.n	d7132 <strrchr+0x10>
   d7142:	4628      	mov	r0, r5
   d7144:	bd38      	pop	{r3, r4, r5, pc}
   d7146:	2500      	movs	r5, #0
   d7148:	e7f5      	b.n	d7136 <strrchr+0x14>
	...

000d714c <_strtol_l.isra.0>:
   d714c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7150:	4e3a      	ldr	r6, [pc, #232]	; (d723c <_strtol_l.isra.0+0xf0>)
   d7152:	4686      	mov	lr, r0
   d7154:	468c      	mov	ip, r1
   d7156:	4660      	mov	r0, ip
   d7158:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d715c:	5da5      	ldrb	r5, [r4, r6]
   d715e:	f015 0508 	ands.w	r5, r5, #8
   d7162:	d1f8      	bne.n	d7156 <_strtol_l.isra.0+0xa>
   d7164:	2c2d      	cmp	r4, #45	; 0x2d
   d7166:	d133      	bne.n	d71d0 <_strtol_l.isra.0+0x84>
   d7168:	f89c 4000 	ldrb.w	r4, [ip]
   d716c:	f04f 0801 	mov.w	r8, #1
   d7170:	f100 0c02 	add.w	ip, r0, #2
   d7174:	2b00      	cmp	r3, #0
   d7176:	d05c      	beq.n	d7232 <_strtol_l.isra.0+0xe6>
   d7178:	2b10      	cmp	r3, #16
   d717a:	d10c      	bne.n	d7196 <_strtol_l.isra.0+0x4a>
   d717c:	2c30      	cmp	r4, #48	; 0x30
   d717e:	d10a      	bne.n	d7196 <_strtol_l.isra.0+0x4a>
   d7180:	f89c 0000 	ldrb.w	r0, [ip]
   d7184:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d7188:	2858      	cmp	r0, #88	; 0x58
   d718a:	d14d      	bne.n	d7228 <_strtol_l.isra.0+0xdc>
   d718c:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d7190:	2310      	movs	r3, #16
   d7192:	f10c 0c02 	add.w	ip, ip, #2
   d7196:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   d719a:	3f01      	subs	r7, #1
   d719c:	2600      	movs	r6, #0
   d719e:	fbb7 f9f3 	udiv	r9, r7, r3
   d71a2:	4630      	mov	r0, r6
   d71a4:	fb03 7a19 	mls	sl, r3, r9, r7
   d71a8:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   d71ac:	2d09      	cmp	r5, #9
   d71ae:	d818      	bhi.n	d71e2 <_strtol_l.isra.0+0x96>
   d71b0:	462c      	mov	r4, r5
   d71b2:	42a3      	cmp	r3, r4
   d71b4:	dd24      	ble.n	d7200 <_strtol_l.isra.0+0xb4>
   d71b6:	1c75      	adds	r5, r6, #1
   d71b8:	d007      	beq.n	d71ca <_strtol_l.isra.0+0x7e>
   d71ba:	4581      	cmp	r9, r0
   d71bc:	d31d      	bcc.n	d71fa <_strtol_l.isra.0+0xae>
   d71be:	d101      	bne.n	d71c4 <_strtol_l.isra.0+0x78>
   d71c0:	45a2      	cmp	sl, r4
   d71c2:	db1a      	blt.n	d71fa <_strtol_l.isra.0+0xae>
   d71c4:	fb00 4003 	mla	r0, r0, r3, r4
   d71c8:	2601      	movs	r6, #1
   d71ca:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d71ce:	e7eb      	b.n	d71a8 <_strtol_l.isra.0+0x5c>
   d71d0:	2c2b      	cmp	r4, #43	; 0x2b
   d71d2:	bf08      	it	eq
   d71d4:	f89c 4000 	ldrbeq.w	r4, [ip]
   d71d8:	46a8      	mov	r8, r5
   d71da:	bf08      	it	eq
   d71dc:	f100 0c02 	addeq.w	ip, r0, #2
   d71e0:	e7c8      	b.n	d7174 <_strtol_l.isra.0+0x28>
   d71e2:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   d71e6:	2d19      	cmp	r5, #25
   d71e8:	d801      	bhi.n	d71ee <_strtol_l.isra.0+0xa2>
   d71ea:	3c37      	subs	r4, #55	; 0x37
   d71ec:	e7e1      	b.n	d71b2 <_strtol_l.isra.0+0x66>
   d71ee:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   d71f2:	2d19      	cmp	r5, #25
   d71f4:	d804      	bhi.n	d7200 <_strtol_l.isra.0+0xb4>
   d71f6:	3c57      	subs	r4, #87	; 0x57
   d71f8:	e7db      	b.n	d71b2 <_strtol_l.isra.0+0x66>
   d71fa:	f04f 36ff 	mov.w	r6, #4294967295
   d71fe:	e7e4      	b.n	d71ca <_strtol_l.isra.0+0x7e>
   d7200:	1c73      	adds	r3, r6, #1
   d7202:	d106      	bne.n	d7212 <_strtol_l.isra.0+0xc6>
   d7204:	2322      	movs	r3, #34	; 0x22
   d7206:	f8ce 3000 	str.w	r3, [lr]
   d720a:	4638      	mov	r0, r7
   d720c:	b942      	cbnz	r2, d7220 <_strtol_l.isra.0+0xd4>
   d720e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7212:	f1b8 0f00 	cmp.w	r8, #0
   d7216:	d000      	beq.n	d721a <_strtol_l.isra.0+0xce>
   d7218:	4240      	negs	r0, r0
   d721a:	2a00      	cmp	r2, #0
   d721c:	d0f7      	beq.n	d720e <_strtol_l.isra.0+0xc2>
   d721e:	b10e      	cbz	r6, d7224 <_strtol_l.isra.0+0xd8>
   d7220:	f10c 31ff 	add.w	r1, ip, #4294967295
   d7224:	6011      	str	r1, [r2, #0]
   d7226:	e7f2      	b.n	d720e <_strtol_l.isra.0+0xc2>
   d7228:	2430      	movs	r4, #48	; 0x30
   d722a:	2b00      	cmp	r3, #0
   d722c:	d1b3      	bne.n	d7196 <_strtol_l.isra.0+0x4a>
   d722e:	2308      	movs	r3, #8
   d7230:	e7b1      	b.n	d7196 <_strtol_l.isra.0+0x4a>
   d7232:	2c30      	cmp	r4, #48	; 0x30
   d7234:	d0a4      	beq.n	d7180 <_strtol_l.isra.0+0x34>
   d7236:	230a      	movs	r3, #10
   d7238:	e7ad      	b.n	d7196 <_strtol_l.isra.0+0x4a>
   d723a:	bf00      	nop
   d723c:	000d7567 	.word	0x000d7567

000d7240 <strtol>:
   d7240:	4613      	mov	r3, r2
   d7242:	460a      	mov	r2, r1
   d7244:	4601      	mov	r1, r0
   d7246:	4802      	ldr	r0, [pc, #8]	; (d7250 <strtol+0x10>)
   d7248:	6800      	ldr	r0, [r0, #0]
   d724a:	f7ff bf7f 	b.w	d714c <_strtol_l.isra.0>
   d724e:	bf00      	nop
   d7250:	2003e67c 	.word	0x2003e67c

000d7254 <dynalib_user>:
   d7254:	000d401d 000d4059 000d4081 000d4085     .@..Y@...@...@..
   d7264:	00000000 74747542 70206e6f 73736572     ....Button press
   d7274:	00216465 74747562 702d6e6f 73736572     ed!.button-press
   d7284:	54006465 72656d69 72757320 73736170     ed.Timer surpass
   d7294:	00216465 656d6974 75732d72 73617072     ed!.timer-surpas
   d72a4:	00646573 6e6e7552 21676e69 74655300     sed.Running!.Set
   d72b4:	00217075                                up!.

000d72b8 <_ZTV5Timer>:
	...
   d72c0:	000d41c9 000d4211 000d40e9              .A...B...@..

000d72cc <_ZTVN5spark10LogHandlerE>:
	...
   d72dc:	000d40a1 000d40c5                       .@...@..

000d72e4 <_ZTVN5spark16SerialLogHandlerE>:
	...
   d72ec:	000d4151 000d4185 000d5a79 000d40c7     QA...A..yZ...@..

000d72fc <_ZTVN5spark13EthernetClassE>:
	...
   d7304:	000d4aeb 000d4ae1 000d4ad7 000d4acd     .J...J...J...J..
   d7314:	000d4ac1 000d4ab5 000d4aa9 000d4aa1     .J...J...J...J..
   d7324:	000d4a97 000d4a8d 000d6979 64756162     .J...J..yi..baud
   d7334:	72655300 006c6169 69726553 00316c61     .Serial.Serial1.
   d7344:	4e4f534a 65727453 6f4c6d61 6e614867     JSONStreamLogHan
   d7354:	72656c64 70706100 31302500 00207530     dler.app.%010u .
   d7364:	2500205d 202c0064 3a292800 5b200020     ] .%d., .(): . [
   d7374:	646f6300 203d2065 00692500 61746564     .code = .%i.deta
   d7384:	20736c69 0d00203d 006d000a 00660063     ils = ....m.c.f.
   d7394:	66006e6c 0074006e 65646f63 74656400     ln.fn.t.code.det
   d73a4:	006c6961                                ail.

000d73a8 <_ZTVN5spark16JSONStreamWriterE>:
	...
   d73b0:	000d4e37 000d4e5d 000d4e1d 000d6a8f     7N..]N...N...j..

000d73c0 <_ZTVN5spark16StreamLogHandlerE>:
	...
   d73c8:	000d52a1 000d52b9 000d5a79 000d40c7     .R...R..yZ...@..

000d73d8 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   d73e0:	000d52cd 000d52e1 000d5c1d 000d4e25     .R...R...\..%N..

000d73f0 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   d73f8:	000d4e35 000d4e6b 000d59b5 000d4e27     5N..kN...Y..'N..

000d7408 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   d7410:	000d4e33 000d4e79 000d51e9 000d4e95     3N..yN...Q...N..
   d7420:	252d5925 64252d6d 3a482554 253a4d25     %Y-%m-%dT%H:%M:%
   d7430:	007a2553 74637361 00656d69              S%z.asctime.

000d743c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d7444:	000d5f1d 000d5f23 000d5f61 000d5f31     ._..#_..a_..1_..
   d7454:	000d5f1f                                ._..

000d7458 <_ZTV9IPAddress>:
	...
   d7460:	000d646d 000d645d 000d645f              md..]d.._d..

000d746c <_ZTV9USBSerial>:
	...
   d7474:	000d6543 000d65ab 000d6581 000d4d11     Ce...e...e...M..
   d7484:	000d6573 000d6545 000d6555 000d65a5     se..Ee..Ue...e..
   d7494:	000d6565 000d653f                       ee..?e..

000d749c <_ZTV11USARTSerial>:
	...
   d74a4:	000d66ad 000d6719 000d66f1 000d4d11     .f...g...f...M..
   d74b4:	000d66c1 000d66dd 000d66cf 000d66eb     .f...f...f...f..
   d74c4:	000d66af 000d66b3                       .f...f..

000d74cc <_ZTV7TwoWire>:
	...
   d74d4:	000d6819 000d6863 000d683b 000d681b     .h..ch..;h...h..
   d74e4:	000d6843 000d684b 000d6853 000d685b     Ch..Kh..Sh..[h..

000d74f4 <_ZTVN5spark9WiFiClassE>:
	...
   d74fc:	000d68f3 000d68e9 000d68df 000d6895     .h...h...h...h..
   d750c:	000d68d3 000d68c7 000d68bb 000d68b3     .h...h...h...h..
   d751c:	000d68a9 000d689f 000d6979              .h...h..yi..

000d7528 <_ZTVN5spark12NetworkClassE>:
	...
   d7530:	000d6911 000d691b 000d6925 000d692f     .i...i..%i../i..
   d7540:	000d6939 000d6945 000d6951 000d695d     9i..Ei..Qi..]i..
   d7550:	000d6965 000d696f 000d6979 75007525     ei..oi..yi..%u.u
   d7560:	78343025                                 %04x.

000d7565 <_ZSt7nothrow>:
	...

000d7566 <_ctype_>:
   d7566:	20202000 20202020 28282020 20282828     .         ((((( 
   d7576:	20202020 20202020 20202020 20202020                     
   d7586:	10108820 10101010 10101010 10101010      ...............
   d7596:	04040410 04040404 10040404 10101010     ................
   d75a6:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d75b6:	01010101 01010101 01010101 10101010     ................
   d75c6:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d75d6:	02020202 02020202 02020202 10101010     ................
   d75e6:	00000020 00000000 00000000 00000000      ...............
	...

000d7667 <link_const_variable_data_end>:
	...

000d7668 <link_constructors_location>:
   d7668:	000d44dd 	.word	0x000d44dd
   d766c:	000d4af5 	.word	0x000d4af5
   d7670:	000d4b3d 	.word	0x000d4b3d
   d7674:	000d4ce9 	.word	0x000d4ce9
   d7678:	000d5a69 	.word	0x000d5a69
   d767c:	000d5d91 	.word	0x000d5d91
   d7680:	000d5ddd 	.word	0x000d5ddd
   d7684:	000d68fd 	.word	0x000d68fd
   d7688:	000d6a4d 	.word	0x000d6a4d

000d768c <link_constructors_end>:
   d768c:	00000000 	.word	0x00000000
