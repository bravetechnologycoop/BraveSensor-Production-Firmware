
c:/Users/phela/brave/traffic_light/BraveSensor-Production-Firmware/target/2.0.1/argon/BraveSensor-Production-Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001fd4  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d5ff0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  2003e620  000d5ff4  0001e620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000168  2003e688  2003e688  0002e688  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d605c  000d605c  0002605c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d6084  000d6084  00026084  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0012f327  00000000  00000000  00026088  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00014f9c  00000000  00000000  001553af  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00029d84  00000000  00000000  0016a34b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000025c8  00000000  00000000  001940cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000074c0  00000000  00000000  00196697  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000361b4  00000000  00000000  0019db57  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0003421b  00000000  00000000  001d3d0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001085f4  00000000  00000000  00207f26  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000066c4  00000000  00000000  0031051c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f001 fd2f 	bl	d5a90 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f001 fd37 	bl	d5aac <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e620 	.word	0x2003e620
   d4048:	000d5ff4 	.word	0x000d5ff4
   d404c:	2003e688 	.word	0x2003e688
   d4050:	2003e688 	.word	0x2003e688
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f000 fe4d 	bl	d4cfc <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d5fcc 	.word	0x000d5fcc
   d407c:	000d5ff0 	.word	0x000d5ff0

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b8f8 	b.w	d4274 <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f9bf 	bl	d4408 <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f000 bdf7 	b.w	d4c80 <_post_loop>

000d4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4092:	f000 bbfd 	b.w	d4890 <malloc>

000d4096 <_Znaj>:
   d4096:	f000 bbfb 	b.w	d4890 <malloc>

000d409a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409a:	f000 bc01 	b.w	d48a0 <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr

000d40ae <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d40ae:	6803      	ldr	r3, [r0, #0]
   d40b0:	4718      	bx	r3

000d40b2 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	  switch (__op)
   d40b2:	2a01      	cmp	r2, #1
   d40b4:	d003      	beq.n	d40be <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xc>
   d40b6:	2a02      	cmp	r2, #2
   d40b8:	d003      	beq.n	d40c2 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x10>
	}
   d40ba:	2000      	movs	r0, #0
   d40bc:	4770      	bx	lr
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d40be:	6001      	str	r1, [r0, #0]
	      break;
   d40c0:	e7fb      	b.n	d40ba <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d40c2:	680b      	ldr	r3, [r1, #0]
   d40c4:	6003      	str	r3, [r0, #0]
	}
   d40c6:	e7f8      	b.n	d40ba <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>

000d40c8 <_Z19change_timer_length6String>:
{
    publish_messages();
}

int change_timer_length(String command)
{
   d40c8:	b5b0      	push	{r4, r5, r7, lr}
   d40ca:	b082      	sub	sp, #8
    char command_arr[command.length() + 1];
   d40cc:	6884      	ldr	r4, [r0, #8]
    strcpy(command_arr, command.c_str());
   d40ce:	6805      	ldr	r5, [r0, #0]
    char command_arr[command.length() + 1];
   d40d0:	f104 0308 	add.w	r3, r4, #8
   d40d4:	f023 0307 	bic.w	r3, r3, #7
{
   d40d8:	af02      	add	r7, sp, #8
    char command_arr[command.length() + 1];
   d40da:	ebad 0d03 	sub.w	sp, sp, r3
   d40de:	ab02      	add	r3, sp, #8
    strcpy(command_arr, command.c_str());
   d40e0:	4629      	mov	r1, r5
   d40e2:	4618      	mov	r0, r3
   d40e4:	f001 fd18 	bl	d5b18 <strcpy>
    for (unsigned int i = 0; i < command.length(); i++)
   d40e8:	4404      	add	r4, r0
   d40ea:	42a0      	cmp	r0, r4
   d40ec:	d00b      	beq.n	d4106 <_Z19change_timer_length6String+0x3e>
    {
        char temp = command_arr[i];
   d40ee:	f810 3b01 	ldrb.w	r3, [r0], #1
        if (temp != '0' && temp != '1' && temp != '2' && temp != '3' && temp != '4' && temp != '5' && temp != '6' && temp != '7' && temp != '8' && temp != '9')
   d40f2:	3b30      	subs	r3, #48	; 0x30
   d40f4:	2b09      	cmp	r3, #9
   d40f6:	d9f8      	bls.n	d40ea <_Z19change_timer_length6String+0x22>
        {
            flag = 4;
   d40f8:	4b0d      	ldr	r3, [pc, #52]	; (d4130 <_Z19change_timer_length6String+0x68>)
   d40fa:	2204      	movs	r2, #4
   d40fc:	601a      	str	r2, [r3, #0]
            return -1;
   d40fe:	f04f 30ff 	mov.w	r0, #4294967295
        }
    }
    timer.changePeriod(atoi(command));
    flag = 5;
    return 1;
}
   d4102:	46bd      	mov	sp, r7
   d4104:	bdb0      	pop	{r4, r5, r7, pc}
    timer.changePeriod(atoi(command));
   d4106:	4628      	mov	r0, r5
   d4108:	f001 fcb0 	bl	d5a6c <atoi>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_RESET, fromISR, 0, block, nullptr) : false;
    }

    bool _changePeriod(unsigned period, unsigned block, bool fromISR=false)
    {
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
   d410c:	4a09      	ldr	r2, [pc, #36]	; (d4134 <_Z19change_timer_length6String+0x6c>)
   d410e:	4603      	mov	r3, r0
   d4110:	6890      	ldr	r0, [r2, #8]
   d4112:	b138      	cbz	r0, d4124 <_Z19change_timer_length6String+0x5c>
   d4114:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d4118:	2200      	movs	r2, #0
   d411a:	e9cd 1200 	strd	r1, r2, [sp]
   d411e:	2103      	movs	r1, #3
   d4120:	f000 fa32 	bl	d4588 <os_timer_change>
    flag = 5;
   d4124:	4b02      	ldr	r3, [pc, #8]	; (d4130 <_Z19change_timer_length6String+0x68>)
   d4126:	2205      	movs	r2, #5
   d4128:	601a      	str	r2, [r3, #0]
    return 1;
   d412a:	2001      	movs	r0, #1
   d412c:	e7e9      	b.n	d4102 <_Z19change_timer_length6String+0x3a>
   d412e:	bf00      	nop
   d4130:	2003e690 	.word	0x2003e690
   d4134:	2003e694 	.word	0x2003e694

000d4138 <_Z14timer_overflowv>:
    flag = 3; // alarm sounded msg
    return 1;
}

void timer_overflow()
{
   d4138:	b508      	push	{r3, lr}
    detachInterrupt(BUTTON);
   d413a:	2005      	movs	r0, #5
   d413c:	f001 f9f8 	bl	d5530 <_Z15detachInterruptt>
    digitalWrite(BUZZER, LOW);
   d4140:	2100      	movs	r1, #0
   d4142:	2006      	movs	r0, #6
   d4144:	f001 fc2d 	bl	d59a2 <digitalWrite>
    flag = 2; // escalate response msg
   d4148:	4b01      	ldr	r3, [pc, #4]	; (d4150 <_Z14timer_overflowv+0x18>)
   d414a:	2202      	movs	r2, #2
   d414c:	601a      	str	r2, [r3, #0]
}
   d414e:	bd08      	pop	{r3, pc}
   d4150:	2003e690 	.word	0x2003e690

000d4154 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   d4154:	6943      	ldr	r3, [r0, #20]
   d4156:	b113      	cbz	r3, d415e <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4158:	6983      	ldr	r3, [r0, #24]
   d415a:	300c      	adds	r0, #12
   d415c:	4718      	bx	r3
            callback();
        }
    }
   d415e:	4770      	bx	lr

000d4160 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   d4160:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d4162:	2100      	movs	r1, #0
   d4164:	4604      	mov	r4, r0
   d4166:	4608      	mov	r0, r1
   d4168:	f000 f9ee 	bl	d4548 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d416c:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   d416e:	4620      	mov	r0, r4
   d4170:	a901      	add	r1, sp, #4
            void* id = nullptr;
   d4172:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   d4174:	f000 fa00 	bl	d4578 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   d4178:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   d417a:	b10c      	cbz	r4, d4180 <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   d417c:	2301      	movs	r3, #1
   d417e:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d4180:	2100      	movs	r1, #0
   d4182:	2001      	movs	r0, #1
   d4184:	f000 f9e0 	bl	d4548 <os_thread_scheduling>
            }
        }
        if (t) {
   d4188:	b12c      	cbz	r4, d4196 <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   d418a:	6823      	ldr	r3, [r4, #0]
   d418c:	4620      	mov	r0, r4
   d418e:	689b      	ldr	r3, [r3, #8]
   d4190:	4798      	blx	r3
            t->running = false;
   d4192:	2300      	movs	r3, #0
   d4194:	7123      	strb	r3, [r4, #4]
        }
    }
   d4196:	b002      	add	sp, #8
   d4198:	bd10      	pop	{r4, pc}
	...

000d419c <_ZN10CloudClass7publishEPKc.isra.0>:

inline bool CloudDisconnectOptions::isTimeoutSet() const {
    return (flags_ & OptionFlag::TIMEOUT);
}

inline particle::Future<bool> CloudClass::publish(const char* name) {
   d419c:	b513      	push	{r0, r1, r4, lr}
   d419e:	4b06      	ldr	r3, [pc, #24]	; (d41b8 <_ZN10CloudClass7publishEPKc.isra.0+0x1c>)
   d41a0:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d41a2:	f88d 3000 	strb.w	r3, [sp]
   d41a6:	2200      	movs	r2, #0
   d41a8:	233c      	movs	r3, #60	; 0x3c
inline particle::Future<bool> CloudClass::publish(const char* name) {
   d41aa:	4604      	mov	r4, r0
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d41ac:	f000 ff2a 	bl	d5004 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    return publish(name, PUBLIC);
}
   d41b0:	4620      	mov	r0, r4
   d41b2:	b002      	add	sp, #8
   d41b4:	bd10      	pop	{r4, pc}
   d41b6:	bf00      	nop
   d41b8:	2003e68c 	.word	0x2003e68c

000d41bc <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d41bc:	b510      	push	{r4, lr}
      if (_M_manager)
   d41be:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d41c0:	4604      	mov	r4, r0
      if (_M_manager)
   d41c2:	b113      	cbz	r3, d41ca <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d41c4:	2203      	movs	r2, #3
   d41c6:	4601      	mov	r1, r0
   d41c8:	4798      	blx	r3
    }
   d41ca:	4620      	mov	r0, r4
   d41cc:	bd10      	pop	{r4, pc}

000d41ce <_ZN5Timer5_stopEjb>:
    bool _stop(unsigned block, bool fromISR=false)
   d41ce:	b507      	push	{r0, r1, r2, lr}
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   d41d0:	6880      	ldr	r0, [r0, #8]
   d41d2:	2300      	movs	r3, #0
   d41d4:	b138      	cbz	r0, d41e6 <_ZN5Timer5_stopEjb+0x18>
   d41d6:	e9cd 1300 	strd	r1, r3, [sp]
   d41da:	2102      	movs	r1, #2
   d41dc:	f000 f9d4 	bl	d4588 <os_timer_change>
   d41e0:	fab0 f080 	clz	r0, r0
   d41e4:	0940      	lsrs	r0, r0, #5
    }
   d41e6:	b003      	add	sp, #12
   d41e8:	f85d fb04 	ldr.w	pc, [sp], #4

000d41ec <_Z16button_interruptv>:

void button_interrupt()
{
   d41ec:	b508      	push	{r3, lr}
    detachInterrupt(BUTTON);
   d41ee:	2005      	movs	r0, #5
   d41f0:	f001 f99e 	bl	d5530 <_Z15detachInterruptt>
    digitalWrite(BUZZER, LOW);
   d41f4:	2100      	movs	r1, #0
   d41f6:	2006      	movs	r0, #6
   d41f8:	f001 fbd3 	bl	d59a2 <digitalWrite>
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d41fc:	2200      	movs	r2, #0
   d41fe:	4804      	ldr	r0, [pc, #16]	; (d4210 <_Z16button_interruptv+0x24>)
   d4200:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d4204:	f7ff ffe3 	bl	d41ce <_ZN5Timer5_stopEjb>
    timer.stop();
    flag = 1; // button pressed msg
   d4208:	4b02      	ldr	r3, [pc, #8]	; (d4214 <_Z16button_interruptv+0x28>)
   d420a:	2201      	movs	r2, #1
   d420c:	601a      	str	r2, [r3, #0]
}
   d420e:	bd08      	pop	{r3, pc}
   d4210:	2003e694 	.word	0x2003e694
   d4214:	2003e690 	.word	0x2003e690

000d4218 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   d4218:	b538      	push	{r3, r4, r5, lr}
   d421a:	4b10      	ldr	r3, [pc, #64]	; (d425c <_ZN5TimerD1Ev+0x44>)
   d421c:	6003      	str	r3, [r0, #0]
        if (handle) {
   d421e:	6883      	ldr	r3, [r0, #8]
    virtual ~Timer() {
   d4220:	4604      	mov	r4, r0
        if (handle) {
   d4222:	b1a3      	cbz	r3, d424e <_ZN5TimerD1Ev+0x36>
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d4224:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d4228:	2200      	movs	r2, #0
   d422a:	f7ff ffd0 	bl	d41ce <_ZN5Timer5_stopEjb>
            os_timer_set_id(handle, nullptr);
   d422e:	68a0      	ldr	r0, [r4, #8]
   d4230:	2100      	movs	r1, #0
   d4232:	f000 f9c1 	bl	d45b8 <os_timer_set_id>
            while (running) {
   d4236:	7923      	ldrb	r3, [r4, #4]
   d4238:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d423c:	b113      	cbz	r3, d4244 <_ZN5TimerD1Ev+0x2c>
                os_thread_yield();
   d423e:	f000 f97b 	bl	d4538 <os_thread_yield>
            while (running) {
   d4242:	e7f8      	b.n	d4236 <_ZN5TimerD1Ev+0x1e>
            os_timer_destroy(handle, nullptr);
   d4244:	68a0      	ldr	r0, [r4, #8]
   d4246:	4629      	mov	r1, r5
   d4248:	f000 f98e 	bl	d4568 <os_timer_destroy>
            handle = nullptr;
   d424c:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   d424e:	f104 000c 	add.w	r0, r4, #12
   d4252:	f7ff ffb3 	bl	d41bc <_ZNSt14_Function_baseD1Ev>
    }
   d4256:	4620      	mov	r0, r4
   d4258:	bd38      	pop	{r3, r4, r5, pc}
   d425a:	bf00      	nop
   d425c:	000d5d48 	.word	0x000d5d48

000d4260 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   d4260:	b510      	push	{r4, lr}
   d4262:	4604      	mov	r4, r0
    }
   d4264:	f7ff ffd8 	bl	d4218 <_ZN5TimerD1Ev>
   d4268:	4620      	mov	r0, r4
   d426a:	211c      	movs	r1, #28
   d426c:	f001 fbf7 	bl	d5a5e <_ZdlPvj>
   d4270:	4620      	mov	r0, r4
   d4272:	bd10      	pop	{r4, pc}

000d4274 <setup>:
{
   d4274:	b510      	push	{r4, lr}
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d4276:	4c0c      	ldr	r4, [pc, #48]	; (d42a8 <setup+0x34>)
    Particle.publishVitals(60);
   d4278:	480c      	ldr	r0, [pc, #48]	; (d42ac <setup+0x38>)
   d427a:	213c      	movs	r1, #60	; 0x3c
   d427c:	f000 fddc 	bl	d4e38 <_ZN10CloudClass13publishVitalsEm>
   d4280:	4a0b      	ldr	r2, [pc, #44]	; (d42b0 <setup+0x3c>)
   d4282:	490c      	ldr	r1, [pc, #48]	; (d42b4 <setup+0x40>)
   d4284:	4620      	mov	r0, r4
   d4286:	f000 fdc6 	bl	d4e16 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d428a:	4a0b      	ldr	r2, [pc, #44]	; (d42b8 <setup+0x44>)
   d428c:	490b      	ldr	r1, [pc, #44]	; (d42bc <setup+0x48>)
   d428e:	4620      	mov	r0, r4
   d4290:	f000 fdc1 	bl	d4e16 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
    pinMode(BUTTON, INPUT);
   d4294:	2100      	movs	r1, #0
   d4296:	2005      	movs	r0, #5
   d4298:	f001 fb72 	bl	d5980 <pinMode>
}
   d429c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    pinMode(BUZZER, OUTPUT);
   d42a0:	2101      	movs	r1, #1
   d42a2:	2006      	movs	r0, #6
   d42a4:	f001 bb6c 	b.w	d5980 <pinMode>
   d42a8:	000d4deb 	.word	0x000d4deb
   d42ac:	2003e7d4 	.word	0x2003e7d4
   d42b0:	000d5c90 	.word	0x000d5c90
   d42b4:	000d42ed 	.word	0x000d42ed
   d42b8:	000d5caa 	.word	0x000d5caa
   d42bc:	000d40c9 	.word	0x000d40c9

000d42c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d42c0:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d42c2:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d42c4:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d42c6:	b17c      	cbz	r4, d42e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d42c8:	6863      	ldr	r3, [r4, #4]
   d42ca:	3b01      	subs	r3, #1
   d42cc:	6063      	str	r3, [r4, #4]
   d42ce:	b95b      	cbnz	r3, d42e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d42d0:	6823      	ldr	r3, [r4, #0]
   d42d2:	4620      	mov	r0, r4
   d42d4:	689b      	ldr	r3, [r3, #8]
   d42d6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d42d8:	68a3      	ldr	r3, [r4, #8]
   d42da:	3b01      	subs	r3, #1
   d42dc:	60a3      	str	r3, [r4, #8]
   d42de:	b91b      	cbnz	r3, d42e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d42e0:	6823      	ldr	r3, [r4, #0]
   d42e2:	4620      	mov	r0, r4
   d42e4:	68db      	ldr	r3, [r3, #12]
   d42e6:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d42e8:	4628      	mov	r0, r5
   d42ea:	bd38      	pop	{r3, r4, r5, pc}

000d42ec <_Z11start_siren6String>:
{
   d42ec:	b530      	push	{r4, r5, lr}
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d42ee:	4919      	ldr	r1, [pc, #100]	; (d4354 <_Z11start_siren6String+0x68>)
   d42f0:	b085      	sub	sp, #20
   d42f2:	f000 fbec 	bl	d4ace <_ZNK6String6equalsEPKc>
    if (command != "start")
   d42f6:	b950      	cbnz	r0, d430e <_Z11start_siren6String+0x22>
        Particle.publish("wrong-command");
   d42f8:	4917      	ldr	r1, [pc, #92]	; (d4358 <_Z11start_siren6String+0x6c>)
   d42fa:	a802      	add	r0, sp, #8
   d42fc:	f7ff ff4e 	bl	d419c <_ZN10CloudClass7publishEPKc.isra.0>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4300:	a803      	add	r0, sp, #12
   d4302:	f7ff ffdd 	bl	d42c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4306:	f04f 30ff 	mov.w	r0, #4294967295
}
   d430a:	b005      	add	sp, #20
   d430c:	bd30      	pop	{r4, r5, pc}
    attachInterrupt(BUTTON, button_interrupt, RISING);
   d430e:	2400      	movs	r4, #0
   d4310:	f04f 33ff 	mov.w	r3, #4294967295
   d4314:	2201      	movs	r2, #1
   d4316:	4911      	ldr	r1, [pc, #68]	; (d435c <_Z11start_siren6String+0x70>)
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d4318:	4d11      	ldr	r5, [pc, #68]	; (d4360 <_Z11start_siren6String+0x74>)
   d431a:	9400      	str	r4, [sp, #0]
   d431c:	2005      	movs	r0, #5
   d431e:	f001 f8dd 	bl	d54dc <_Z15attachInterrupttPFvvE13InterruptModeah>
    digitalWrite(BUZZER, HIGH);
   d4322:	2101      	movs	r1, #1
   d4324:	2006      	movs	r0, #6
   d4326:	f001 fb3c 	bl	d59a2 <digitalWrite>
   d432a:	4622      	mov	r2, r4
   d432c:	4621      	mov	r1, r4
   d432e:	4628      	mov	r0, r5
   d4330:	f7ff ff4d 	bl	d41ce <_ZN5Timer5_stopEjb>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   d4334:	68a8      	ldr	r0, [r5, #8]
   d4336:	b140      	cbz	r0, d434a <_Z11start_siren6String+0x5e>
   d4338:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   d433c:	9300      	str	r3, [sp, #0]
   d433e:	9401      	str	r4, [sp, #4]
   d4340:	4623      	mov	r3, r4
   d4342:	4622      	mov	r2, r4
   d4344:	4621      	mov	r1, r4
   d4346:	f000 f91f 	bl	d4588 <os_timer_change>
    flag = 3; // alarm sounded msg
   d434a:	4b06      	ldr	r3, [pc, #24]	; (d4364 <_Z11start_siren6String+0x78>)
   d434c:	2203      	movs	r2, #3
   d434e:	601a      	str	r2, [r3, #0]
    return 1;
   d4350:	2001      	movs	r0, #1
   d4352:	e7da      	b.n	d430a <_Z11start_siren6String+0x1e>
   d4354:	000d5cc7 	.word	0x000d5cc7
   d4358:	000d5ccd 	.word	0x000d5ccd
   d435c:	000d41ed 	.word	0x000d41ed
   d4360:	2003e694 	.word	0x2003e694
   d4364:	2003e690 	.word	0x2003e690

000d4368 <_Z16publish_messagesv>:

void publish_messages()
{
   d4368:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (flag == 0)
   d436a:	4c1e      	ldr	r4, [pc, #120]	; (d43e4 <_Z16publish_messagesv+0x7c>)
   d436c:	6823      	ldr	r3, [r4, #0]
   d436e:	b1bb      	cbz	r3, d43a0 <_Z16publish_messagesv+0x38>
    {
    }
    else if (flag == 1)
   d4370:	2b01      	cmp	r3, #1
   d4372:	d117      	bne.n	d43a4 <_Z16publish_messagesv+0x3c>
    {
        Particle.publish("siren-addressed");
   d4374:	491c      	ldr	r1, [pc, #112]	; (d43e8 <_Z16publish_messagesv+0x80>)
   d4376:	a802      	add	r0, sp, #8
   d4378:	f7ff ff10 	bl	d419c <_ZN10CloudClass7publishEPKc.isra.0>
   d437c:	a803      	add	r0, sp, #12
   d437e:	f7ff ff9f 	bl	d42c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d4382:	4b1a      	ldr	r3, [pc, #104]	; (d43ec <_Z16publish_messagesv+0x84>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4384:	4a18      	ldr	r2, [pc, #96]	; (d43e8 <_Z16publish_messagesv+0x80>)
   d4386:	781b      	ldrb	r3, [r3, #0]
   d4388:	4919      	ldr	r1, [pc, #100]	; (d43f0 <_Z16publish_messagesv+0x88>)
   d438a:	f88d 3000 	strb.w	r3, [sp]
   d438e:	233c      	movs	r3, #60	; 0x3c
   d4390:	a802      	add	r0, sp, #8
   d4392:	f000 fe37 	bl	d5004 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d4396:	a803      	add	r0, sp, #12
   d4398:	f7ff ff92 	bl	d42c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        flag = 0;
    }
    else if (flag == 5)
    {
        Particle.publish("timer-length-updated");
        flag = 0;
   d439c:	2300      	movs	r3, #0
   d439e:	6023      	str	r3, [r4, #0]
    }
}
   d43a0:	b004      	add	sp, #16
   d43a2:	bd10      	pop	{r4, pc}
    else if (flag == 2)
   d43a4:	2b02      	cmp	r3, #2
   d43a6:	d10e      	bne.n	d43c6 <_Z16publish_messagesv+0x5e>
        Particle.publish("escalate-siren");
   d43a8:	4912      	ldr	r1, [pc, #72]	; (d43f4 <_Z16publish_messagesv+0x8c>)
   d43aa:	a802      	add	r0, sp, #8
   d43ac:	f7ff fef6 	bl	d419c <_ZN10CloudClass7publishEPKc.isra.0>
   d43b0:	a803      	add	r0, sp, #12
   d43b2:	f7ff ff85 	bl	d42c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d43b6:	4b0d      	ldr	r3, [pc, #52]	; (d43ec <_Z16publish_messagesv+0x84>)
   d43b8:	4a0e      	ldr	r2, [pc, #56]	; (d43f4 <_Z16publish_messagesv+0x8c>)
   d43ba:	781b      	ldrb	r3, [r3, #0]
   d43bc:	f88d 3000 	strb.w	r3, [sp]
   d43c0:	490d      	ldr	r1, [pc, #52]	; (d43f8 <_Z16publish_messagesv+0x90>)
   d43c2:	233c      	movs	r3, #60	; 0x3c
   d43c4:	e7e4      	b.n	d4390 <_Z16publish_messagesv+0x28>
    else if (flag == 3)
   d43c6:	2b03      	cmp	r3, #3
   d43c8:	d104      	bne.n	d43d4 <_Z16publish_messagesv+0x6c>
        Particle.publish("alarm-sounded");
   d43ca:	490c      	ldr	r1, [pc, #48]	; (d43fc <_Z16publish_messagesv+0x94>)
        Particle.publish("timer-length-updated");
   d43cc:	a802      	add	r0, sp, #8
   d43ce:	f7ff fee5 	bl	d419c <_ZN10CloudClass7publishEPKc.isra.0>
   d43d2:	e7e0      	b.n	d4396 <_Z16publish_messagesv+0x2e>
    else if (flag == 4)
   d43d4:	2b04      	cmp	r3, #4
   d43d6:	d101      	bne.n	d43dc <_Z16publish_messagesv+0x74>
        Particle.publish("positive-integer-please");
   d43d8:	4909      	ldr	r1, [pc, #36]	; (d4400 <_Z16publish_messagesv+0x98>)
   d43da:	e7f7      	b.n	d43cc <_Z16publish_messagesv+0x64>
    else if (flag == 5)
   d43dc:	2b05      	cmp	r3, #5
   d43de:	d1df      	bne.n	d43a0 <_Z16publish_messagesv+0x38>
        Particle.publish("timer-length-updated");
   d43e0:	4908      	ldr	r1, [pc, #32]	; (d4404 <_Z16publish_messagesv+0x9c>)
   d43e2:	e7f3      	b.n	d43cc <_Z16publish_messagesv+0x64>
   d43e4:	2003e690 	.word	0x2003e690
   d43e8:	000d5cdb 	.word	0x000d5cdb
   d43ec:	2003e68d 	.word	0x2003e68d
   d43f0:	000d5ce1 	.word	0x000d5ce1
   d43f4:	000d5ceb 	.word	0x000d5ceb
   d43f8:	000d5cfa 	.word	0x000d5cfa
   d43fc:	000d5d03 	.word	0x000d5d03
   d4400:	000d5d11 	.word	0x000d5d11
   d4404:	000d5d29 	.word	0x000d5d29

000d4408 <loop>:
    publish_messages();
   d4408:	f7ff bfae 	b.w	d4368 <_Z16publish_messagesv>

000d440c <_GLOBAL__sub_I_flag>:
}
   d440c:	b5f0      	push	{r4, r5, r6, r7, lr}
        val_(val) {
   d440e:	4a1c      	ldr	r2, [pc, #112]	; (d4480 <_GLOBAL__sub_I_flag+0x74>)
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d4410:	4c1c      	ldr	r4, [pc, #112]	; (d4484 <_GLOBAL__sub_I_flag+0x78>)
   d4412:	2300      	movs	r3, #0
   d4414:	7013      	strb	r3, [r2, #0]
   d4416:	4a1c      	ldr	r2, [pc, #112]	; (d4488 <_GLOBAL__sub_I_flag+0x7c>)
   d4418:	7123      	strb	r3, [r4, #4]
   d441a:	b089      	sub	sp, #36	; 0x24
   d441c:	2701      	movs	r7, #1
   d441e:	7017      	strb	r7, [r2, #0]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d4420:	4a1a      	ldr	r2, [pc, #104]	; (d448c <_GLOBAL__sub_I_flag+0x80>)
   d4422:	9204      	str	r2, [sp, #16]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4424:	ad04      	add	r5, sp, #16
   d4426:	e895 0003 	ldmia.w	r5, {r0, r1}
   d442a:	4a19      	ldr	r2, [pc, #100]	; (d4490 <_GLOBAL__sub_I_flag+0x84>)
   d442c:	6022      	str	r2, [r4, #0]
   d442e:	ae02      	add	r6, sp, #8
      __a = _GLIBCXX_MOVE(__b);
   d4430:	f104 020c 	add.w	r2, r4, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4434:	e886 0003 	stmia.w	r6, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4438:	e892 0003 	ldmia.w	r2, {r0, r1}
   d443c:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4440:	e896 0003 	ldmia.w	r6, {r0, r1}
   d4444:	e882 0003 	stmia.w	r2, {r0, r1}
   d4448:	4a12      	ldr	r2, [pc, #72]	; (d4494 <_GLOBAL__sub_I_flag+0x88>)
   d444a:	6162      	str	r2, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   d444c:	69a2      	ldr	r2, [r4, #24]
   d444e:	9207      	str	r2, [sp, #28]
      __b = _GLIBCXX_MOVE(__tmp);
   d4450:	4a11      	ldr	r2, [pc, #68]	; (d4498 <_GLOBAL__sub_I_flag+0x8c>)
   d4452:	60a3      	str	r3, [r4, #8]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d4454:	e9cd 7300 	strd	r7, r3, [sp]
      __a = _GLIBCXX_MOVE(__b);
   d4458:	9306      	str	r3, [sp, #24]
      __b = _GLIBCXX_MOVE(__tmp);
   d445a:	61a2      	str	r2, [r4, #24]
   d445c:	4623      	mov	r3, r4
   d445e:	4a0f      	ldr	r2, [pc, #60]	; (d449c <_GLOBAL__sub_I_flag+0x90>)
   d4460:	f241 3188 	movw	r1, #5000	; 0x1388
   d4464:	f104 0008 	add.w	r0, r4, #8
   d4468:	f000 f876 	bl	d4558 <os_timer_create>
    class function<_Res(_ArgTypes...)>
   d446c:	4628      	mov	r0, r5
   d446e:	f7ff fea5 	bl	d41bc <_ZNSt14_Function_baseD1Ev>
Timer timer(5000, timer_overflow, true);
   d4472:	4a0b      	ldr	r2, [pc, #44]	; (d44a0 <_GLOBAL__sub_I_flag+0x94>)
   d4474:	490b      	ldr	r1, [pc, #44]	; (d44a4 <_GLOBAL__sub_I_flag+0x98>)
   d4476:	4620      	mov	r0, r4
   d4478:	f001 faec 	bl	d5a54 <__aeabi_atexit>
}
   d447c:	b009      	add	sp, #36	; 0x24
   d447e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4480:	2003e68c 	.word	0x2003e68c
   d4484:	2003e694 	.word	0x2003e694
   d4488:	2003e68d 	.word	0x2003e68d
   d448c:	000d4139 	.word	0x000d4139
   d4490:	000d5d48 	.word	0x000d5d48
   d4494:	000d40b3 	.word	0x000d40b3
   d4498:	000d40af 	.word	0x000d40af
   d449c:	000d4161 	.word	0x000d4161
   d44a0:	2003e688 	.word	0x2003e688
   d44a4:	000d4219 	.word	0x000d4219

000d44a8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d44a8:	b508      	push	{r3, lr}
   d44aa:	4b02      	ldr	r3, [pc, #8]	; (d44b4 <netdb_freeaddrinfo+0xc>)
   d44ac:	681b      	ldr	r3, [r3, #0]
   d44ae:	689b      	ldr	r3, [r3, #8]
   d44b0:	9301      	str	r3, [sp, #4]
   d44b2:	bd08      	pop	{r3, pc}
   d44b4:	00030268 	.word	0x00030268

000d44b8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d44b8:	b508      	push	{r3, lr}
   d44ba:	4b02      	ldr	r3, [pc, #8]	; (d44c4 <netdb_getaddrinfo+0xc>)
   d44bc:	681b      	ldr	r3, [r3, #0]
   d44be:	68db      	ldr	r3, [r3, #12]
   d44c0:	9301      	str	r3, [sp, #4]
   d44c2:	bd08      	pop	{r3, pc}
   d44c4:	00030268 	.word	0x00030268

000d44c8 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d44c8:	b508      	push	{r3, lr}
   d44ca:	4b02      	ldr	r3, [pc, #8]	; (d44d4 <HAL_Pin_Mode+0xc>)
   d44cc:	681b      	ldr	r3, [r3, #0]
   d44ce:	689b      	ldr	r3, [r3, #8]
   d44d0:	9301      	str	r3, [sp, #4]
   d44d2:	bd08      	pop	{r3, pc}
   d44d4:	0003022c 	.word	0x0003022c

000d44d8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d44d8:	b508      	push	{r3, lr}
   d44da:	4b02      	ldr	r3, [pc, #8]	; (d44e4 <HAL_Get_Pin_Mode+0xc>)
   d44dc:	681b      	ldr	r3, [r3, #0]
   d44de:	68db      	ldr	r3, [r3, #12]
   d44e0:	9301      	str	r3, [sp, #4]
   d44e2:	bd08      	pop	{r3, pc}
   d44e4:	0003022c 	.word	0x0003022c

000d44e8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d44e8:	b508      	push	{r3, lr}
   d44ea:	4b02      	ldr	r3, [pc, #8]	; (d44f4 <HAL_GPIO_Write+0xc>)
   d44ec:	681b      	ldr	r3, [r3, #0]
   d44ee:	691b      	ldr	r3, [r3, #16]
   d44f0:	9301      	str	r3, [sp, #4]
   d44f2:	bd08      	pop	{r3, pc}
   d44f4:	0003022c 	.word	0x0003022c

000d44f8 <HAL_Interrupts_Attach>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d44f8:	b508      	push	{r3, lr}
   d44fa:	4b02      	ldr	r3, [pc, #8]	; (d4504 <HAL_Interrupts_Attach+0xc>)
   d44fc:	681b      	ldr	r3, [r3, #0]
   d44fe:	699b      	ldr	r3, [r3, #24]
   d4500:	9301      	str	r3, [sp, #4]
   d4502:	bd08      	pop	{r3, pc}
   d4504:	0003022c 	.word	0x0003022c

000d4508 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d4508:	b508      	push	{r3, lr}
   d450a:	4b02      	ldr	r3, [pc, #8]	; (d4514 <HAL_Interrupts_Detach+0xc>)
   d450c:	681b      	ldr	r3, [r3, #0]
   d450e:	69db      	ldr	r3, [r3, #28]
   d4510:	9301      	str	r3, [sp, #4]
   d4512:	bd08      	pop	{r3, pc}
   d4514:	0003022c 	.word	0x0003022c

000d4518 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4518:	b508      	push	{r3, lr}
   d451a:	4b02      	ldr	r3, [pc, #8]	; (d4524 <HAL_RNG_GetRandomNumber+0xc>)
   d451c:	681b      	ldr	r3, [r3, #0]
   d451e:	685b      	ldr	r3, [r3, #4]
   d4520:	9301      	str	r3, [sp, #4]
   d4522:	bd08      	pop	{r3, pc}
   d4524:	00030218 	.word	0x00030218

000d4528 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4528:	b508      	push	{r3, lr}
   d452a:	4b02      	ldr	r3, [pc, #8]	; (d4534 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d452c:	681b      	ldr	r3, [r3, #0]
   d452e:	695b      	ldr	r3, [r3, #20]
   d4530:	9301      	str	r3, [sp, #4]
   d4532:	bd08      	pop	{r3, pc}
   d4534:	00030218 	.word	0x00030218

000d4538 <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d4538:	b508      	push	{r3, lr}
   d453a:	4b02      	ldr	r3, [pc, #8]	; (d4544 <os_thread_yield+0xc>)
   d453c:	681b      	ldr	r3, [r3, #0]
   d453e:	68db      	ldr	r3, [r3, #12]
   d4540:	9301      	str	r3, [sp, #4]
   d4542:	bd08      	pop	{r3, pc}
   d4544:	00030248 	.word	0x00030248

000d4548 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   d4548:	b508      	push	{r3, lr}
   d454a:	4b02      	ldr	r3, [pc, #8]	; (d4554 <os_thread_scheduling+0xc>)
   d454c:	681b      	ldr	r3, [r3, #0]
   d454e:	69db      	ldr	r3, [r3, #28]
   d4550:	9301      	str	r3, [sp, #4]
   d4552:	bd08      	pop	{r3, pc}
   d4554:	00030248 	.word	0x00030248

000d4558 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   d4558:	b508      	push	{r3, lr}
   d455a:	4b02      	ldr	r3, [pc, #8]	; (d4564 <os_timer_create+0xc>)
   d455c:	681b      	ldr	r3, [r3, #0]
   d455e:	6a1b      	ldr	r3, [r3, #32]
   d4560:	9301      	str	r3, [sp, #4]
   d4562:	bd08      	pop	{r3, pc}
   d4564:	00030248 	.word	0x00030248

000d4568 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   d4568:	b508      	push	{r3, lr}
   d456a:	4b02      	ldr	r3, [pc, #8]	; (d4574 <os_timer_destroy+0xc>)
   d456c:	681b      	ldr	r3, [r3, #0]
   d456e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4570:	9301      	str	r3, [sp, #4]
   d4572:	bd08      	pop	{r3, pc}
   d4574:	00030248 	.word	0x00030248

000d4578 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   d4578:	b508      	push	{r3, lr}
   d457a:	4b02      	ldr	r3, [pc, #8]	; (d4584 <os_timer_get_id+0xc>)
   d457c:	681b      	ldr	r3, [r3, #0]
   d457e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4580:	9301      	str	r3, [sp, #4]
   d4582:	bd08      	pop	{r3, pc}
   d4584:	00030248 	.word	0x00030248

000d4588 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   d4588:	b508      	push	{r3, lr}
   d458a:	4b02      	ldr	r3, [pc, #8]	; (d4594 <os_timer_change+0xc>)
   d458c:	681b      	ldr	r3, [r3, #0]
   d458e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4590:	9301      	str	r3, [sp, #4]
   d4592:	bd08      	pop	{r3, pc}
   d4594:	00030248 	.word	0x00030248

000d4598 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4598:	b508      	push	{r3, lr}
   d459a:	4b02      	ldr	r3, [pc, #8]	; (d45a4 <os_mutex_recursive_create+0xc>)
   d459c:	681b      	ldr	r3, [r3, #0]
   d459e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d45a0:	9301      	str	r3, [sp, #4]
   d45a2:	bd08      	pop	{r3, pc}
   d45a4:	00030248 	.word	0x00030248

000d45a8 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d45a8:	b508      	push	{r3, lr}
   d45aa:	4b02      	ldr	r3, [pc, #8]	; (d45b4 <os_mutex_recursive_destroy+0xc>)
   d45ac:	681b      	ldr	r3, [r3, #0]
   d45ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d45b0:	9301      	str	r3, [sp, #4]
   d45b2:	bd08      	pop	{r3, pc}
   d45b4:	00030248 	.word	0x00030248

000d45b8 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   d45b8:	b508      	push	{r3, lr}
   d45ba:	4b02      	ldr	r3, [pc, #8]	; (d45c4 <os_timer_set_id+0xc>)
   d45bc:	681b      	ldr	r3, [r3, #0]
   d45be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d45c0:	9301      	str	r3, [sp, #4]
   d45c2:	bd08      	pop	{r3, pc}
   d45c4:	00030248 	.word	0x00030248

000d45c8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d45c8:	b508      	push	{r3, lr}
   d45ca:	4b02      	ldr	r3, [pc, #8]	; (d45d4 <inet_inet_ntop+0xc>)
   d45cc:	681b      	ldr	r3, [r3, #0]
   d45ce:	695b      	ldr	r3, [r3, #20]
   d45d0:	9301      	str	r3, [sp, #4]
   d45d2:	bd08      	pop	{r3, pc}
   d45d4:	00030264 	.word	0x00030264

000d45d8 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d45d8:	b508      	push	{r3, lr}
   d45da:	4b02      	ldr	r3, [pc, #8]	; (d45e4 <hal_usart_init+0xc>)
   d45dc:	681b      	ldr	r3, [r3, #0]
   d45de:	681b      	ldr	r3, [r3, #0]
   d45e0:	9301      	str	r3, [sp, #4]
   d45e2:	bd08      	pop	{r3, pc}
   d45e4:	0003023c 	.word	0x0003023c

000d45e8 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d45e8:	b508      	push	{r3, lr}
   d45ea:	4b02      	ldr	r3, [pc, #8]	; (d45f4 <hal_usart_write+0xc>)
   d45ec:	681b      	ldr	r3, [r3, #0]
   d45ee:	68db      	ldr	r3, [r3, #12]
   d45f0:	9301      	str	r3, [sp, #4]
   d45f2:	bd08      	pop	{r3, pc}
   d45f4:	0003023c 	.word	0x0003023c

000d45f8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d45f8:	b508      	push	{r3, lr}
   d45fa:	4b02      	ldr	r3, [pc, #8]	; (d4604 <hal_usart_available+0xc>)
   d45fc:	681b      	ldr	r3, [r3, #0]
   d45fe:	691b      	ldr	r3, [r3, #16]
   d4600:	9301      	str	r3, [sp, #4]
   d4602:	bd08      	pop	{r3, pc}
   d4604:	0003023c 	.word	0x0003023c

000d4608 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d4608:	b508      	push	{r3, lr}
   d460a:	4b02      	ldr	r3, [pc, #8]	; (d4614 <hal_usart_read+0xc>)
   d460c:	681b      	ldr	r3, [r3, #0]
   d460e:	695b      	ldr	r3, [r3, #20]
   d4610:	9301      	str	r3, [sp, #4]
   d4612:	bd08      	pop	{r3, pc}
   d4614:	0003023c 	.word	0x0003023c

000d4618 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d4618:	b508      	push	{r3, lr}
   d461a:	4b02      	ldr	r3, [pc, #8]	; (d4624 <hal_usart_peek+0xc>)
   d461c:	681b      	ldr	r3, [r3, #0]
   d461e:	699b      	ldr	r3, [r3, #24]
   d4620:	9301      	str	r3, [sp, #4]
   d4622:	bd08      	pop	{r3, pc}
   d4624:	0003023c 	.word	0x0003023c

000d4628 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d4628:	b508      	push	{r3, lr}
   d462a:	4b02      	ldr	r3, [pc, #8]	; (d4634 <hal_usart_flush+0xc>)
   d462c:	681b      	ldr	r3, [r3, #0]
   d462e:	69db      	ldr	r3, [r3, #28]
   d4630:	9301      	str	r3, [sp, #4]
   d4632:	bd08      	pop	{r3, pc}
   d4634:	0003023c 	.word	0x0003023c

000d4638 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d4638:	b508      	push	{r3, lr}
   d463a:	4b02      	ldr	r3, [pc, #8]	; (d4644 <hal_usart_is_enabled+0xc>)
   d463c:	681b      	ldr	r3, [r3, #0]
   d463e:	6a1b      	ldr	r3, [r3, #32]
   d4640:	9301      	str	r3, [sp, #4]
   d4642:	bd08      	pop	{r3, pc}
   d4644:	0003023c 	.word	0x0003023c

000d4648 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d4648:	b508      	push	{r3, lr}
   d464a:	4b02      	ldr	r3, [pc, #8]	; (d4654 <hal_usart_available_data_for_write+0xc>)
   d464c:	681b      	ldr	r3, [r3, #0]
   d464e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4650:	9301      	str	r3, [sp, #4]
   d4652:	bd08      	pop	{r3, pc}
   d4654:	0003023c 	.word	0x0003023c

000d4658 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d4658:	b508      	push	{r3, lr}
   d465a:	4b02      	ldr	r3, [pc, #8]	; (d4664 <hal_i2c_write+0xc>)
   d465c:	681b      	ldr	r3, [r3, #0]
   d465e:	6a1b      	ldr	r3, [r3, #32]
   d4660:	9301      	str	r3, [sp, #4]
   d4662:	bd08      	pop	{r3, pc}
   d4664:	00030228 	.word	0x00030228

000d4668 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d4668:	b508      	push	{r3, lr}
   d466a:	4b02      	ldr	r3, [pc, #8]	; (d4674 <hal_i2c_available+0xc>)
   d466c:	681b      	ldr	r3, [r3, #0]
   d466e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4670:	9301      	str	r3, [sp, #4]
   d4672:	bd08      	pop	{r3, pc}
   d4674:	00030228 	.word	0x00030228

000d4678 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d4678:	b508      	push	{r3, lr}
   d467a:	4b02      	ldr	r3, [pc, #8]	; (d4684 <hal_i2c_read+0xc>)
   d467c:	681b      	ldr	r3, [r3, #0]
   d467e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4680:	9301      	str	r3, [sp, #4]
   d4682:	bd08      	pop	{r3, pc}
   d4684:	00030228 	.word	0x00030228

000d4688 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d4688:	b508      	push	{r3, lr}
   d468a:	4b02      	ldr	r3, [pc, #8]	; (d4694 <hal_i2c_peek+0xc>)
   d468c:	681b      	ldr	r3, [r3, #0]
   d468e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4690:	9301      	str	r3, [sp, #4]
   d4692:	bd08      	pop	{r3, pc}
   d4694:	00030228 	.word	0x00030228

000d4698 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d4698:	b508      	push	{r3, lr}
   d469a:	4b02      	ldr	r3, [pc, #8]	; (d46a4 <hal_i2c_flush+0xc>)
   d469c:	681b      	ldr	r3, [r3, #0]
   d469e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d46a0:	9301      	str	r3, [sp, #4]
   d46a2:	bd08      	pop	{r3, pc}
   d46a4:	00030228 	.word	0x00030228

000d46a8 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d46a8:	b508      	push	{r3, lr}
   d46aa:	4b02      	ldr	r3, [pc, #8]	; (d46b4 <hal_i2c_is_enabled+0xc>)
   d46ac:	681b      	ldr	r3, [r3, #0]
   d46ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d46b0:	9301      	str	r3, [sp, #4]
   d46b2:	bd08      	pop	{r3, pc}
   d46b4:	00030228 	.word	0x00030228

000d46b8 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d46b8:	b508      	push	{r3, lr}
   d46ba:	4b02      	ldr	r3, [pc, #8]	; (d46c4 <hal_i2c_init+0xc>)
   d46bc:	681b      	ldr	r3, [r3, #0]
   d46be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d46c0:	9301      	str	r3, [sp, #4]
   d46c2:	bd08      	pop	{r3, pc}
   d46c4:	00030228 	.word	0x00030228

000d46c8 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d46c8:	b508      	push	{r3, lr}
   d46ca:	4b02      	ldr	r3, [pc, #8]	; (d46d4 <hal_spi_init+0xc>)
   d46cc:	681b      	ldr	r3, [r3, #0]
   d46ce:	69db      	ldr	r3, [r3, #28]
   d46d0:	9301      	str	r3, [sp, #4]
   d46d2:	bd08      	pop	{r3, pc}
   d46d4:	00030230 	.word	0x00030230

000d46d8 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d46d8:	b508      	push	{r3, lr}
   d46da:	4b02      	ldr	r3, [pc, #8]	; (d46e4 <hal_spi_is_enabled+0xc>)
   d46dc:	681b      	ldr	r3, [r3, #0]
   d46de:	6a1b      	ldr	r3, [r3, #32]
   d46e0:	9301      	str	r3, [sp, #4]
   d46e2:	bd08      	pop	{r3, pc}
   d46e4:	00030230 	.word	0x00030230

000d46e8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d46e8:	b508      	push	{r3, lr}
   d46ea:	4b02      	ldr	r3, [pc, #8]	; (d46f4 <HAL_USB_USART_Init+0xc>)
   d46ec:	681b      	ldr	r3, [r3, #0]
   d46ee:	681b      	ldr	r3, [r3, #0]
   d46f0:	9301      	str	r3, [sp, #4]
   d46f2:	bd08      	pop	{r3, pc}
   d46f4:	0003024c 	.word	0x0003024c

000d46f8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d46f8:	b508      	push	{r3, lr}
   d46fa:	4b02      	ldr	r3, [pc, #8]	; (d4704 <HAL_USB_USART_Available_Data+0xc>)
   d46fc:	681b      	ldr	r3, [r3, #0]
   d46fe:	691b      	ldr	r3, [r3, #16]
   d4700:	9301      	str	r3, [sp, #4]
   d4702:	bd08      	pop	{r3, pc}
   d4704:	0003024c 	.word	0x0003024c

000d4708 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4708:	b508      	push	{r3, lr}
   d470a:	4b02      	ldr	r3, [pc, #8]	; (d4714 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d470c:	681b      	ldr	r3, [r3, #0]
   d470e:	695b      	ldr	r3, [r3, #20]
   d4710:	9301      	str	r3, [sp, #4]
   d4712:	bd08      	pop	{r3, pc}
   d4714:	0003024c 	.word	0x0003024c

000d4718 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4718:	b508      	push	{r3, lr}
   d471a:	4b02      	ldr	r3, [pc, #8]	; (d4724 <HAL_USB_USART_Receive_Data+0xc>)
   d471c:	681b      	ldr	r3, [r3, #0]
   d471e:	699b      	ldr	r3, [r3, #24]
   d4720:	9301      	str	r3, [sp, #4]
   d4722:	bd08      	pop	{r3, pc}
   d4724:	0003024c 	.word	0x0003024c

000d4728 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4728:	b508      	push	{r3, lr}
   d472a:	4b02      	ldr	r3, [pc, #8]	; (d4734 <HAL_USB_USART_Send_Data+0xc>)
   d472c:	681b      	ldr	r3, [r3, #0]
   d472e:	69db      	ldr	r3, [r3, #28]
   d4730:	9301      	str	r3, [sp, #4]
   d4732:	bd08      	pop	{r3, pc}
   d4734:	0003024c 	.word	0x0003024c

000d4738 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4738:	b508      	push	{r3, lr}
   d473a:	4b02      	ldr	r3, [pc, #8]	; (d4744 <HAL_USB_USART_Flush_Data+0xc>)
   d473c:	681b      	ldr	r3, [r3, #0]
   d473e:	6a1b      	ldr	r3, [r3, #32]
   d4740:	9301      	str	r3, [sp, #4]
   d4742:	bd08      	pop	{r3, pc}
   d4744:	0003024c 	.word	0x0003024c

000d4748 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4748:	b508      	push	{r3, lr}
   d474a:	4b02      	ldr	r3, [pc, #8]	; (d4754 <set_system_mode+0xc>)
   d474c:	681b      	ldr	r3, [r3, #0]
   d474e:	685b      	ldr	r3, [r3, #4]
   d4750:	9301      	str	r3, [sp, #4]
   d4752:	bd08      	pop	{r3, pc}
   d4754:	00030220 	.word	0x00030220

000d4758 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d4758:	b508      	push	{r3, lr}
   d475a:	4b02      	ldr	r3, [pc, #8]	; (d4764 <application_thread_current+0xc>)
   d475c:	681b      	ldr	r3, [r3, #0]
   d475e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4760:	9301      	str	r3, [sp, #4]
   d4762:	bd08      	pop	{r3, pc}
   d4764:	00030220 	.word	0x00030220

000d4768 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4768:	b508      	push	{r3, lr}
   d476a:	4b02      	ldr	r3, [pc, #8]	; (d4774 <application_thread_invoke+0xc>)
   d476c:	681b      	ldr	r3, [r3, #0]
   d476e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4770:	9301      	str	r3, [sp, #4]
   d4772:	bd08      	pop	{r3, pc}
   d4774:	00030220 	.word	0x00030220

000d4778 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4778:	b508      	push	{r3, lr}
   d477a:	4b03      	ldr	r3, [pc, #12]	; (d4788 <system_ctrl_set_app_request_handler+0x10>)
   d477c:	681b      	ldr	r3, [r3, #0]
   d477e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4782:	9301      	str	r3, [sp, #4]
   d4784:	bd08      	pop	{r3, pc}
   d4786:	0000      	.short	0x0000
   d4788:	00030220 	.word	0x00030220

000d478c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d478c:	b508      	push	{r3, lr}
   d478e:	4b03      	ldr	r3, [pc, #12]	; (d479c <system_ctrl_set_result+0x10>)
   d4790:	681b      	ldr	r3, [r3, #0]
   d4792:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4796:	9301      	str	r3, [sp, #4]
   d4798:	bd08      	pop	{r3, pc}
   d479a:	0000      	.short	0x0000
   d479c:	00030220 	.word	0x00030220

000d47a0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d47a0:	b508      	push	{r3, lr}
   d47a2:	4b02      	ldr	r3, [pc, #8]	; (d47ac <network_connect+0xc>)
   d47a4:	681b      	ldr	r3, [r3, #0]
   d47a6:	685b      	ldr	r3, [r3, #4]
   d47a8:	9301      	str	r3, [sp, #4]
   d47aa:	bd08      	pop	{r3, pc}
   d47ac:	00030240 	.word	0x00030240

000d47b0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d47b0:	b508      	push	{r3, lr}
   d47b2:	4b02      	ldr	r3, [pc, #8]	; (d47bc <network_connecting+0xc>)
   d47b4:	681b      	ldr	r3, [r3, #0]
   d47b6:	689b      	ldr	r3, [r3, #8]
   d47b8:	9301      	str	r3, [sp, #4]
   d47ba:	bd08      	pop	{r3, pc}
   d47bc:	00030240 	.word	0x00030240

000d47c0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d47c0:	b508      	push	{r3, lr}
   d47c2:	4b02      	ldr	r3, [pc, #8]	; (d47cc <network_disconnect+0xc>)
   d47c4:	681b      	ldr	r3, [r3, #0]
   d47c6:	68db      	ldr	r3, [r3, #12]
   d47c8:	9301      	str	r3, [sp, #4]
   d47ca:	bd08      	pop	{r3, pc}
   d47cc:	00030240 	.word	0x00030240

000d47d0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d47d0:	b508      	push	{r3, lr}
   d47d2:	4b02      	ldr	r3, [pc, #8]	; (d47dc <network_ready+0xc>)
   d47d4:	681b      	ldr	r3, [r3, #0]
   d47d6:	691b      	ldr	r3, [r3, #16]
   d47d8:	9301      	str	r3, [sp, #4]
   d47da:	bd08      	pop	{r3, pc}
   d47dc:	00030240 	.word	0x00030240

000d47e0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d47e0:	b508      	push	{r3, lr}
   d47e2:	4b02      	ldr	r3, [pc, #8]	; (d47ec <network_on+0xc>)
   d47e4:	681b      	ldr	r3, [r3, #0]
   d47e6:	695b      	ldr	r3, [r3, #20]
   d47e8:	9301      	str	r3, [sp, #4]
   d47ea:	bd08      	pop	{r3, pc}
   d47ec:	00030240 	.word	0x00030240

000d47f0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d47f0:	b508      	push	{r3, lr}
   d47f2:	4b02      	ldr	r3, [pc, #8]	; (d47fc <network_off+0xc>)
   d47f4:	681b      	ldr	r3, [r3, #0]
   d47f6:	699b      	ldr	r3, [r3, #24]
   d47f8:	9301      	str	r3, [sp, #4]
   d47fa:	bd08      	pop	{r3, pc}
   d47fc:	00030240 	.word	0x00030240

000d4800 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4800:	b508      	push	{r3, lr}
   d4802:	4b02      	ldr	r3, [pc, #8]	; (d480c <network_listen+0xc>)
   d4804:	681b      	ldr	r3, [r3, #0]
   d4806:	69db      	ldr	r3, [r3, #28]
   d4808:	9301      	str	r3, [sp, #4]
   d480a:	bd08      	pop	{r3, pc}
   d480c:	00030240 	.word	0x00030240

000d4810 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4810:	b508      	push	{r3, lr}
   d4812:	4b02      	ldr	r3, [pc, #8]	; (d481c <network_listening+0xc>)
   d4814:	681b      	ldr	r3, [r3, #0]
   d4816:	6a1b      	ldr	r3, [r3, #32]
   d4818:	9301      	str	r3, [sp, #4]
   d481a:	bd08      	pop	{r3, pc}
   d481c:	00030240 	.word	0x00030240

000d4820 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4820:	b508      	push	{r3, lr}
   d4822:	4b02      	ldr	r3, [pc, #8]	; (d482c <network_set_listen_timeout+0xc>)
   d4824:	681b      	ldr	r3, [r3, #0]
   d4826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4828:	9301      	str	r3, [sp, #4]
   d482a:	bd08      	pop	{r3, pc}
   d482c:	00030240 	.word	0x00030240

000d4830 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4830:	b508      	push	{r3, lr}
   d4832:	4b02      	ldr	r3, [pc, #8]	; (d483c <network_get_listen_timeout+0xc>)
   d4834:	681b      	ldr	r3, [r3, #0]
   d4836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4838:	9301      	str	r3, [sp, #4]
   d483a:	bd08      	pop	{r3, pc}
   d483c:	00030240 	.word	0x00030240

000d4840 <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d4840:	b508      	push	{r3, lr}
   d4842:	4b02      	ldr	r3, [pc, #8]	; (d484c <spark_function+0xc>)
   d4844:	681b      	ldr	r3, [r3, #0]
   d4846:	685b      	ldr	r3, [r3, #4]
   d4848:	9301      	str	r3, [sp, #4]
   d484a:	bd08      	pop	{r3, pc}
   d484c:	00030244 	.word	0x00030244

000d4850 <spark_cloud_flag_connected>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d4850:	b508      	push	{r3, lr}
   d4852:	4b02      	ldr	r3, [pc, #8]	; (d485c <spark_cloud_flag_connected+0xc>)
   d4854:	681b      	ldr	r3, [r3, #0]
   d4856:	695b      	ldr	r3, [r3, #20]
   d4858:	9301      	str	r3, [sp, #4]
   d485a:	bd08      	pop	{r3, pc}
   d485c:	00030244 	.word	0x00030244

000d4860 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d4860:	b508      	push	{r3, lr}
   d4862:	4b02      	ldr	r3, [pc, #8]	; (d486c <spark_send_event+0xc>)
   d4864:	681b      	ldr	r3, [r3, #0]
   d4866:	6a1b      	ldr	r3, [r3, #32]
   d4868:	9301      	str	r3, [sp, #4]
   d486a:	bd08      	pop	{r3, pc}
   d486c:	00030244 	.word	0x00030244

000d4870 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4870:	b508      	push	{r3, lr}
   d4872:	4b02      	ldr	r3, [pc, #8]	; (d487c <spark_set_random_seed_from_cloud_handler+0xc>)
   d4874:	681b      	ldr	r3, [r3, #0]
   d4876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4878:	9301      	str	r3, [sp, #4]
   d487a:	bd08      	pop	{r3, pc}
   d487c:	00030244 	.word	0x00030244

000d4880 <spark_publish_vitals>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
   d4880:	b508      	push	{r3, lr}
   d4882:	4b02      	ldr	r3, [pc, #8]	; (d488c <spark_publish_vitals+0xc>)
   d4884:	681b      	ldr	r3, [r3, #0]
   d4886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4888:	9301      	str	r3, [sp, #4]
   d488a:	bd08      	pop	{r3, pc}
   d488c:	00030244 	.word	0x00030244

000d4890 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4890:	b508      	push	{r3, lr}
   d4892:	4b02      	ldr	r3, [pc, #8]	; (d489c <malloc+0xc>)
   d4894:	681b      	ldr	r3, [r3, #0]
   d4896:	681b      	ldr	r3, [r3, #0]
   d4898:	9301      	str	r3, [sp, #4]
   d489a:	bd08      	pop	{r3, pc}
   d489c:	0003021c 	.word	0x0003021c

000d48a0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d48a0:	b508      	push	{r3, lr}
   d48a2:	4b02      	ldr	r3, [pc, #8]	; (d48ac <free+0xc>)
   d48a4:	681b      	ldr	r3, [r3, #0]
   d48a6:	685b      	ldr	r3, [r3, #4]
   d48a8:	9301      	str	r3, [sp, #4]
   d48aa:	bd08      	pop	{r3, pc}
   d48ac:	0003021c 	.word	0x0003021c

000d48b0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d48b0:	b508      	push	{r3, lr}
   d48b2:	4b02      	ldr	r3, [pc, #8]	; (d48bc <realloc+0xc>)
   d48b4:	681b      	ldr	r3, [r3, #0]
   d48b6:	689b      	ldr	r3, [r3, #8]
   d48b8:	9301      	str	r3, [sp, #4]
   d48ba:	bd08      	pop	{r3, pc}
   d48bc:	0003021c 	.word	0x0003021c

000d48c0 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d48c0:	b508      	push	{r3, lr}
   d48c2:	4b02      	ldr	r3, [pc, #8]	; (d48cc <abort+0xc>)
   d48c4:	681b      	ldr	r3, [r3, #0]
   d48c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d48c8:	9301      	str	r3, [sp, #4]
   d48ca:	bd08      	pop	{r3, pc}
   d48cc:	0003021c 	.word	0x0003021c

000d48d0 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d48d0:	b508      	push	{r3, lr}
   d48d2:	4b02      	ldr	r3, [pc, #8]	; (d48dc <_malloc_r+0xc>)
   d48d4:	681b      	ldr	r3, [r3, #0]
   d48d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d48d8:	9301      	str	r3, [sp, #4]
   d48da:	bd08      	pop	{r3, pc}
   d48dc:	0003021c 	.word	0x0003021c

000d48e0 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d48e0:	b508      	push	{r3, lr}
   d48e2:	4b02      	ldr	r3, [pc, #8]	; (d48ec <newlib_impure_ptr_callback+0xc>)
   d48e4:	681b      	ldr	r3, [r3, #0]
   d48e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d48e8:	9301      	str	r3, [sp, #4]
   d48ea:	bd08      	pop	{r3, pc}
   d48ec:	0003021c 	.word	0x0003021c

000d48f0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d48f0:	2200      	movs	r2, #0
   d48f2:	6840      	ldr	r0, [r0, #4]
   d48f4:	4611      	mov	r1, r2
   d48f6:	f7ff bf8b 	b.w	d4810 <network_listening>

000d48fa <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d48fa:	2200      	movs	r2, #0
   d48fc:	6840      	ldr	r0, [r0, #4]
   d48fe:	4611      	mov	r1, r2
   d4900:	f7ff bf96 	b.w	d4830 <network_get_listen_timeout>

000d4904 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d4904:	6840      	ldr	r0, [r0, #4]
   d4906:	2200      	movs	r2, #0
   d4908:	f7ff bf8a 	b.w	d4820 <network_set_listen_timeout>

000d490c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d490c:	6840      	ldr	r0, [r0, #4]
   d490e:	2200      	movs	r2, #0
   d4910:	f081 0101 	eor.w	r1, r1, #1
   d4914:	f7ff bf74 	b.w	d4800 <network_listen>

000d4918 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d4918:	2300      	movs	r3, #0
   d491a:	6840      	ldr	r0, [r0, #4]
   d491c:	461a      	mov	r2, r3
   d491e:	4619      	mov	r1, r3
   d4920:	f7ff bf66 	b.w	d47f0 <network_off>

000d4924 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d4924:	2300      	movs	r3, #0
   d4926:	6840      	ldr	r0, [r0, #4]
   d4928:	461a      	mov	r2, r3
   d492a:	4619      	mov	r1, r3
   d492c:	f7ff bf58 	b.w	d47e0 <network_on>

000d4930 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4930:	2200      	movs	r2, #0
   d4932:	6840      	ldr	r0, [r0, #4]
   d4934:	4611      	mov	r1, r2
   d4936:	f7ff bf4b 	b.w	d47d0 <network_ready>

000d493a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d493a:	2200      	movs	r2, #0
   d493c:	6840      	ldr	r0, [r0, #4]
   d493e:	4611      	mov	r1, r2
   d4940:	f7ff bf36 	b.w	d47b0 <network_connecting>

000d4944 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4944:	6840      	ldr	r0, [r0, #4]
   d4946:	2200      	movs	r2, #0
   d4948:	2102      	movs	r1, #2
   d494a:	f7ff bf39 	b.w	d47c0 <network_disconnect>

000d494e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d494e:	2300      	movs	r3, #0
   d4950:	6840      	ldr	r0, [r0, #4]
   d4952:	461a      	mov	r2, r3
   d4954:	f7ff bf24 	b.w	d47a0 <network_connect>

000d4958 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4958:	4b02      	ldr	r3, [pc, #8]	; (d4964 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d495a:	2203      	movs	r2, #3
   d495c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d495e:	4a02      	ldr	r2, [pc, #8]	; (d4968 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4960:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d4962:	4770      	bx	lr
   d4964:	2003e6b0 	.word	0x2003e6b0
   d4968:	000d5d5c 	.word	0x000d5d5c

000d496c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d496c:	b510      	push	{r4, lr}
   d496e:	4604      	mov	r4, r0
   d4970:	4608      	mov	r0, r1
{
    _spi = spi;
   d4972:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d4974:	f7ff fea8 	bl	d46c8 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d4978:	2300      	movs	r3, #0
   d497a:	6063      	str	r3, [r4, #4]
}
   d497c:	4620      	mov	r0, r4
   d497e:	bd10      	pop	{r4, pc}

000d4980 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d4980:	b510      	push	{r4, lr}
   d4982:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d4984:	6800      	ldr	r0, [r0, #0]
   d4986:	b118      	cbz	r0, d4990 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d4988:	f7ff ff8a 	bl	d48a0 <free>
            wakeupSource_ = nullptr;
   d498c:	2300      	movs	r3, #0
   d498e:	6023      	str	r3, [r4, #0]
        }
    }
   d4990:	bd10      	pop	{r4, pc}

000d4992 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4992:	b510      	push	{r4, lr}
   d4994:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d4996:	f7ff fff3 	bl	d4980 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d499a:	4620      	mov	r0, r4
   d499c:	bd10      	pop	{r4, pc}
	...

000d49a0 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d49a0:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d49a2:	4b09      	ldr	r3, [pc, #36]	; (d49c8 <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d49a4:	4c09      	ldr	r4, [pc, #36]	; (d49cc <_GLOBAL__sub_I_System+0x2c>)
   d49a6:	2202      	movs	r2, #2
   d49a8:	2000      	movs	r0, #0
   d49aa:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d49ac:	4b08      	ldr	r3, [pc, #32]	; (d49d0 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d49ae:	6020      	str	r0, [r4, #0]
   d49b0:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d49b2:	71a0      	strb	r0, [r4, #6]
   d49b4:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d49b6:	f7ff fec7 	bl	d4748 <set_system_mode>
SystemClass System;
   d49ba:	4620      	mov	r0, r4
   d49bc:	4a05      	ldr	r2, [pc, #20]	; (d49d4 <_GLOBAL__sub_I_System+0x34>)
   d49be:	4906      	ldr	r1, [pc, #24]	; (d49d8 <_GLOBAL__sub_I_System+0x38>)
   d49c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d49c4:	f001 b846 	b.w	d5a54 <__aeabi_atexit>
   d49c8:	2003e6c4 	.word	0x2003e6c4
   d49cc:	2003e6b8 	.word	0x2003e6b8
   d49d0:	ffff0000 	.word	0xffff0000
   d49d4:	2003e688 	.word	0x2003e688
   d49d8:	000d4993 	.word	0x000d4993

000d49dc <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d49dc:	b510      	push	{r4, lr}
   d49de:	4604      	mov	r4, r0
{
	free(buffer);
   d49e0:	6800      	ldr	r0, [r0, #0]
   d49e2:	f7ff ff5d 	bl	d48a0 <free>
}
   d49e6:	4620      	mov	r0, r4
   d49e8:	bd10      	pop	{r4, pc}

000d49ea <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d49ea:	b510      	push	{r4, lr}
   d49ec:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d49ee:	6800      	ldr	r0, [r0, #0]
   d49f0:	b108      	cbz	r0, d49f6 <_ZN6String10invalidateEv+0xc>
   d49f2:	f7ff ff55 	bl	d48a0 <free>
	buffer = NULL;
   d49f6:	2300      	movs	r3, #0
	capacity = len = 0;
   d49f8:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d49fc:	6023      	str	r3, [r4, #0]
}
   d49fe:	bd10      	pop	{r4, pc}

000d4a00 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d4a00:	b538      	push	{r3, r4, r5, lr}
   d4a02:	4604      	mov	r4, r0
   d4a04:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d4a06:	6800      	ldr	r0, [r0, #0]
   d4a08:	3101      	adds	r1, #1
   d4a0a:	f7ff ff51 	bl	d48b0 <realloc>
	if (newbuffer) {
   d4a0e:	b110      	cbz	r0, d4a16 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d4a10:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d4a14:	2001      	movs	r0, #1
	}
	return 0;
}
   d4a16:	bd38      	pop	{r3, r4, r5, pc}

000d4a18 <_ZN6String7reserveEj>:
{
   d4a18:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d4a1a:	6803      	ldr	r3, [r0, #0]
{
   d4a1c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d4a1e:	b123      	cbz	r3, d4a2a <_ZN6String7reserveEj+0x12>
   d4a20:	6843      	ldr	r3, [r0, #4]
   d4a22:	428b      	cmp	r3, r1
   d4a24:	d301      	bcc.n	d4a2a <_ZN6String7reserveEj+0x12>
   d4a26:	2001      	movs	r0, #1
}
   d4a28:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d4a2a:	4620      	mov	r0, r4
   d4a2c:	f7ff ffe8 	bl	d4a00 <_ZN6String12changeBufferEj>
   d4a30:	2800      	cmp	r0, #0
   d4a32:	d0f9      	beq.n	d4a28 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d4a34:	68a3      	ldr	r3, [r4, #8]
   d4a36:	2b00      	cmp	r3, #0
   d4a38:	d1f5      	bne.n	d4a26 <_ZN6String7reserveEj+0xe>
   d4a3a:	6822      	ldr	r2, [r4, #0]
   d4a3c:	7013      	strb	r3, [r2, #0]
   d4a3e:	e7f2      	b.n	d4a26 <_ZN6String7reserveEj+0xe>

000d4a40 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4a40:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4a42:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d4a44:	4611      	mov	r1, r2
   d4a46:	9201      	str	r2, [sp, #4]
{
   d4a48:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d4a4a:	f7ff ffe5 	bl	d4a18 <_ZN6String7reserveEj>
   d4a4e:	9a01      	ldr	r2, [sp, #4]
   d4a50:	b928      	cbnz	r0, d4a5e <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d4a52:	4620      	mov	r0, r4
   d4a54:	f7ff ffc9 	bl	d49ea <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d4a58:	4620      	mov	r0, r4
   d4a5a:	b003      	add	sp, #12
   d4a5c:	bd30      	pop	{r4, r5, pc}
	len = length;
   d4a5e:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d4a60:	4629      	mov	r1, r5
   d4a62:	6820      	ldr	r0, [r4, #0]
   d4a64:	f001 f814 	bl	d5a90 <memcpy>
	buffer[len] = 0;
   d4a68:	6822      	ldr	r2, [r4, #0]
   d4a6a:	68a3      	ldr	r3, [r4, #8]
   d4a6c:	2100      	movs	r1, #0
   d4a6e:	54d1      	strb	r1, [r2, r3]
	return *this;
   d4a70:	e7f2      	b.n	d4a58 <_ZN6String4copyEPKcj+0x18>

000d4a72 <_ZN6StringC1EPKc>:
	buffer = NULL;
   d4a72:	2300      	movs	r3, #0
String::String(const char *cstr)
   d4a74:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d4a76:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d4a7a:	4604      	mov	r4, r0
	len = 0;
   d4a7c:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4a7e:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d4a80:	b141      	cbz	r1, d4a94 <_ZN6StringC1EPKc+0x22>
   d4a82:	4608      	mov	r0, r1
   d4a84:	9101      	str	r1, [sp, #4]
   d4a86:	f001 f86c 	bl	d5b62 <strlen>
   d4a8a:	9901      	ldr	r1, [sp, #4]
   d4a8c:	4602      	mov	r2, r0
   d4a8e:	4620      	mov	r0, r4
   d4a90:	f7ff ffd6 	bl	d4a40 <_ZN6String4copyEPKcj>
}
   d4a94:	4620      	mov	r0, r4
   d4a96:	b002      	add	sp, #8
   d4a98:	bd10      	pop	{r4, pc}

000d4a9a <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d4a9a:	4288      	cmp	r0, r1
{
   d4a9c:	b510      	push	{r4, lr}
   d4a9e:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d4aa0:	d005      	beq.n	d4aae <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d4aa2:	680b      	ldr	r3, [r1, #0]
   d4aa4:	b12b      	cbz	r3, d4ab2 <_ZN6StringaSERKS_+0x18>
   d4aa6:	688a      	ldr	r2, [r1, #8]
   d4aa8:	4619      	mov	r1, r3
   d4aaa:	f7ff ffc9 	bl	d4a40 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d4aae:	4620      	mov	r0, r4
   d4ab0:	bd10      	pop	{r4, pc}
	else invalidate();
   d4ab2:	f7ff ff9a 	bl	d49ea <_ZN6String10invalidateEv>
   d4ab6:	e7fa      	b.n	d4aae <_ZN6StringaSERKS_+0x14>

000d4ab8 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d4ab8:	b510      	push	{r4, lr}
	buffer = NULL;
   d4aba:	2300      	movs	r3, #0
String::String(const String &value)
   d4abc:	4604      	mov	r4, r0
	capacity = 0;
   d4abe:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d4ac2:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4ac4:	7303      	strb	r3, [r0, #12]
	*this = value;
   d4ac6:	f7ff ffe8 	bl	d4a9a <_ZN6StringaSERKS_>
}
   d4aca:	4620      	mov	r0, r4
   d4acc:	bd10      	pop	{r4, pc}

000d4ace <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d4ace:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d4ad0:	6882      	ldr	r2, [r0, #8]
   d4ad2:	b93a      	cbnz	r2, d4ae4 <_ZNK6String6equalsEPKc+0x16>
   d4ad4:	b121      	cbz	r1, d4ae0 <_ZNK6String6equalsEPKc+0x12>
   d4ad6:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   d4ad8:	fab0 f080 	clz	r0, r0
   d4adc:	0940      	lsrs	r0, r0, #5
   d4ade:	e000      	b.n	d4ae2 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d4ae0:	2001      	movs	r0, #1
}
   d4ae2:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d4ae4:	6800      	ldr	r0, [r0, #0]
   d4ae6:	b909      	cbnz	r1, d4aec <_ZNK6String6equalsEPKc+0x1e>
   d4ae8:	7800      	ldrb	r0, [r0, #0]
   d4aea:	e7f5      	b.n	d4ad8 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   d4aec:	f001 f80a 	bl	d5b04 <strcmp>
   d4af0:	e7f2      	b.n	d4ad8 <_ZNK6String6equalsEPKc+0xa>

000d4af2 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4af2:	b510      	push	{r4, lr}
   d4af4:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4af6:	6800      	ldr	r0, [r0, #0]
   d4af8:	b108      	cbz	r0, d4afe <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4afa:	f7ff fd55 	bl	d45a8 <os_mutex_recursive_destroy>
    }
   d4afe:	4620      	mov	r0, r4
   d4b00:	bd10      	pop	{r4, pc}

000d4b02 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d4b02:	680b      	ldr	r3, [r1, #0]
   d4b04:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d4b06:	b113      	cbz	r3, d4b0e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d4b08:	685a      	ldr	r2, [r3, #4]
   d4b0a:	3201      	adds	r2, #1
   d4b0c:	605a      	str	r2, [r3, #4]
      }
   d4b0e:	4770      	bx	lr

000d4b10 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4b10:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d4b12:	4c06      	ldr	r4, [pc, #24]	; (d4b2c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4b14:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d4b16:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d4b18:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d4b1a:	f7ff fd3d 	bl	d4598 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d4b1e:	4620      	mov	r0, r4
   d4b20:	4a03      	ldr	r2, [pc, #12]	; (d4b30 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d4b22:	4904      	ldr	r1, [pc, #16]	; (d4b34 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d4b24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d4b28:	f000 bf94 	b.w	d5a54 <__aeabi_atexit>
   d4b2c:	2003e6c8 	.word	0x2003e6c8
   d4b30:	2003e688 	.word	0x2003e688
   d4b34:	000d4af3 	.word	0x000d4af3

000d4b38 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4b3a:	4606      	mov	r6, r0
   d4b3c:	460d      	mov	r5, r1
  size_t n = 0;
   d4b3e:	188f      	adds	r7, r1, r2
   d4b40:	2400      	movs	r4, #0
  while (size--) {
   d4b42:	42bd      	cmp	r5, r7
   d4b44:	d00c      	beq.n	d4b60 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4b46:	6833      	ldr	r3, [r6, #0]
   d4b48:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4b4c:	689b      	ldr	r3, [r3, #8]
   d4b4e:	4630      	mov	r0, r6
   d4b50:	4798      	blx	r3
     if (chunk>=0)
   d4b52:	1e03      	subs	r3, r0, #0
   d4b54:	db01      	blt.n	d4b5a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4b56:	441c      	add	r4, r3
  while (size--) {
   d4b58:	e7f3      	b.n	d4b42 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4b5a:	2c00      	cmp	r4, #0
   d4b5c:	bf08      	it	eq
   d4b5e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d4b60:	4620      	mov	r0, r4
   d4b62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4b64 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4b64:	b513      	push	{r0, r1, r4, lr}
   d4b66:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d4b68:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d4b6a:	b159      	cbz	r1, d4b84 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d4b6c:	9101      	str	r1, [sp, #4]
   d4b6e:	f000 fff8 	bl	d5b62 <strlen>
   d4b72:	6823      	ldr	r3, [r4, #0]
   d4b74:	9901      	ldr	r1, [sp, #4]
   d4b76:	68db      	ldr	r3, [r3, #12]
   d4b78:	4602      	mov	r2, r0
   d4b7a:	4620      	mov	r0, r4
    }
   d4b7c:	b002      	add	sp, #8
   d4b7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d4b82:	4718      	bx	r3
    }
   d4b84:	b002      	add	sp, #8
   d4b86:	bd10      	pop	{r4, pc}

000d4b88 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4b88:	6803      	ldr	r3, [r0, #0]
   d4b8a:	689b      	ldr	r3, [r3, #8]
   d4b8c:	4718      	bx	r3

000d4b8e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4b8e:	b530      	push	{r4, r5, lr}
   d4b90:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4b92:	2300      	movs	r3, #0
   d4b94:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4b98:	2a01      	cmp	r2, #1
   d4b9a:	bf98      	it	ls
   d4b9c:	220a      	movls	r2, #10
   d4b9e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d4ba0:	460d      	mov	r5, r1
   d4ba2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d4ba6:	fb01 5312 	mls	r3, r1, r2, r5
   d4baa:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4bae:	2b09      	cmp	r3, #9
   d4bb0:	bf94      	ite	ls
   d4bb2:	3330      	addls	r3, #48	; 0x30
   d4bb4:	3337      	addhi	r3, #55	; 0x37
   d4bb6:	b2db      	uxtb	r3, r3
  } while(n);
   d4bb8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4bba:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d4bbe:	d9ef      	bls.n	d4ba0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d4bc0:	4621      	mov	r1, r4
   d4bc2:	f7ff ffcf 	bl	d4b64 <_ZN5Print5writeEPKc>
}
   d4bc6:	b00b      	add	sp, #44	; 0x2c
   d4bc8:	bd30      	pop	{r4, r5, pc}
	...

000d4bcc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4bcc:	4b01      	ldr	r3, [pc, #4]	; (d4bd4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4bce:	4a02      	ldr	r2, [pc, #8]	; (d4bd8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4bd0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d4bd2:	4770      	bx	lr
   d4bd4:	2003e6cc 	.word	0x2003e6cc
   d4bd8:	000d5d88 	.word	0x000d5d88

000d4bdc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4bdc:	4b02      	ldr	r3, [pc, #8]	; (d4be8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d4bde:	681a      	ldr	r2, [r3, #0]
   d4be0:	4b02      	ldr	r3, [pc, #8]	; (d4bec <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d4be2:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d4be4:	4770      	bx	lr
   d4be6:	bf00      	nop
   d4be8:	2003e620 	.word	0x2003e620
   d4bec:	2003e6d0 	.word	0x2003e6d0

000d4bf0 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4bf0:	b510      	push	{r4, lr}
   d4bf2:	4604      	mov	r4, r0
   d4bf4:	f7ff fae2 	bl	d41bc <_ZNSt14_Function_baseD1Ev>
   d4bf8:	4620      	mov	r0, r4
   d4bfa:	bd10      	pop	{r4, pc}

000d4bfc <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d4bfc:	b513      	push	{r0, r1, r4, lr}
   d4bfe:	460b      	mov	r3, r1
   d4c00:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4c02:	e9d0 0100 	ldrd	r0, r1, [r0]
   d4c06:	466c      	mov	r4, sp
   d4c08:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4c0c:	e893 0003 	ldmia.w	r3, {r0, r1}
   d4c10:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4c14:	e894 0003 	ldmia.w	r4, {r0, r1}
   d4c18:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d4c1c:	b002      	add	sp, #8
   d4c1e:	bd10      	pop	{r4, pc}

000d4c20 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d4c20:	4803      	ldr	r0, [pc, #12]	; (d4c30 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d4c22:	4a04      	ldr	r2, [pc, #16]	; (d4c34 <_GLOBAL__sub_I_RGB+0x14>)
   d4c24:	4904      	ldr	r1, [pc, #16]	; (d4c38 <_GLOBAL__sub_I_RGB+0x18>)
   d4c26:	2300      	movs	r3, #0
   d4c28:	6083      	str	r3, [r0, #8]
   d4c2a:	f000 bf13 	b.w	d5a54 <__aeabi_atexit>
   d4c2e:	bf00      	nop
   d4c30:	2003e6d4 	.word	0x2003e6d4
   d4c34:	2003e688 	.word	0x2003e688
   d4c38:	000d4bf1 	.word	0x000d4bf1

000d4c3c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d4c3c:	4b01      	ldr	r3, [pc, #4]	; (d4c44 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d4c3e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d4c40:	4770      	bx	lr
   d4c42:	bf00      	nop
   d4c44:	2003e624 	.word	0x2003e624

000d4c48 <serialEventRun>:
{
   d4c48:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d4c4a:	4b0b      	ldr	r3, [pc, #44]	; (d4c78 <serialEventRun+0x30>)
   d4c4c:	b143      	cbz	r3, d4c60 <serialEventRun+0x18>
   d4c4e:	f000 fc19 	bl	d5484 <_Z16_fetch_usbserialv>
   d4c52:	6803      	ldr	r3, [r0, #0]
   d4c54:	691b      	ldr	r3, [r3, #16]
   d4c56:	4798      	blx	r3
   d4c58:	2800      	cmp	r0, #0
   d4c5a:	dd01      	ble.n	d4c60 <serialEventRun+0x18>
        serialEvent();
   d4c5c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d4c60:	4b06      	ldr	r3, [pc, #24]	; (d4c7c <serialEventRun+0x34>)
   d4c62:	b143      	cbz	r3, d4c76 <serialEventRun+0x2e>
   d4c64:	f000 fcd2 	bl	d560c <_Z22__fetch_global_Serial1v>
   d4c68:	6803      	ldr	r3, [r0, #0]
   d4c6a:	691b      	ldr	r3, [r3, #16]
   d4c6c:	4798      	blx	r3
   d4c6e:	2800      	cmp	r0, #0
   d4c70:	dd01      	ble.n	d4c76 <serialEventRun+0x2e>
        serialEvent1();
   d4c72:	f3af 8000 	nop.w
}
   d4c76:	bd08      	pop	{r3, pc}
	...

000d4c80 <_post_loop>:
{
   d4c80:	b508      	push	{r3, lr}
	serialEventRun();
   d4c82:	f7ff ffe1 	bl	d4c48 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4c86:	f7ff fc4f 	bl	d4528 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4c8a:	4b01      	ldr	r3, [pc, #4]	; (d4c90 <_post_loop+0x10>)
   d4c8c:	6018      	str	r0, [r3, #0]
}
   d4c8e:	bd08      	pop	{r3, pc}
   d4c90:	2003e7d0 	.word	0x2003e7d0

000d4c94 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d4c94:	4802      	ldr	r0, [pc, #8]	; (d4ca0 <_Z33system_initialize_user_backup_ramv+0xc>)
   d4c96:	4a03      	ldr	r2, [pc, #12]	; (d4ca4 <_Z33system_initialize_user_backup_ramv+0x10>)
   d4c98:	4903      	ldr	r1, [pc, #12]	; (d4ca8 <_Z33system_initialize_user_backup_ramv+0x14>)
   d4c9a:	1a12      	subs	r2, r2, r0
   d4c9c:	f000 bef8 	b.w	d5a90 <memcpy>
   d4ca0:	2003f400 	.word	0x2003f400
   d4ca4:	2003f404 	.word	0x2003f404
   d4ca8:	000d5ff0 	.word	0x000d5ff0

000d4cac <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d4cac:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4cae:	2300      	movs	r3, #0
   d4cb0:	9300      	str	r3, [sp, #0]
   d4cb2:	461a      	mov	r2, r3
   d4cb4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4cb8:	f7ff fd68 	bl	d478c <system_ctrl_set_result>
}
   d4cbc:	b003      	add	sp, #12
   d4cbe:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4cc4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d4cc4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d4cc6:	8843      	ldrh	r3, [r0, #2]
   d4cc8:	2b0a      	cmp	r3, #10
   d4cca:	d008      	beq.n	d4cde <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d4ccc:	2b50      	cmp	r3, #80	; 0x50
   d4cce:	d10b      	bne.n	d4ce8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d4cd0:	4b09      	ldr	r3, [pc, #36]	; (d4cf8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d4cd2:	681b      	ldr	r3, [r3, #0]
   d4cd4:	b14b      	cbz	r3, d4cea <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d4cd6:	b003      	add	sp, #12
   d4cd8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d4cdc:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d4cde:	f7ff ffe5 	bl	d4cac <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d4ce2:	b003      	add	sp, #12
   d4ce4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4ce8:	2300      	movs	r3, #0
   d4cea:	9300      	str	r3, [sp, #0]
   d4cec:	461a      	mov	r2, r3
   d4cee:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4cf2:	f7ff fd4b 	bl	d478c <system_ctrl_set_result>
}
   d4cf6:	e7f4      	b.n	d4ce2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d4cf8:	2003e6e8 	.word	0x2003e6e8

000d4cfc <module_user_init_hook>:
{
   d4cfc:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4cfe:	4c12      	ldr	r4, [pc, #72]	; (d4d48 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d4d00:	4812      	ldr	r0, [pc, #72]	; (d4d4c <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4d02:	4d13      	ldr	r5, [pc, #76]	; (d4d50 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d4d04:	2100      	movs	r1, #0
   d4d06:	f7ff fdeb 	bl	d48e0 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4d0a:	6823      	ldr	r3, [r4, #0]
   d4d0c:	42ab      	cmp	r3, r5
   d4d0e:	4b11      	ldr	r3, [pc, #68]	; (d4d54 <module_user_init_hook+0x58>)
   d4d10:	bf0c      	ite	eq
   d4d12:	2201      	moveq	r2, #1
   d4d14:	2200      	movne	r2, #0
   d4d16:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d4d18:	d002      	beq.n	d4d20 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d4d1a:	f7ff ffbb 	bl	d4c94 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d4d1e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d4d20:	f7ff fbfa 	bl	d4518 <HAL_RNG_GetRandomNumber>
   d4d24:	4604      	mov	r4, r0
    srand(seed);
   d4d26:	f000 fec9 	bl	d5abc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d4d2a:	4b0b      	ldr	r3, [pc, #44]	; (d4d58 <module_user_init_hook+0x5c>)
   d4d2c:	b113      	cbz	r3, d4d34 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d4d2e:	4620      	mov	r0, r4
   d4d30:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d4d34:	2100      	movs	r1, #0
   d4d36:	4808      	ldr	r0, [pc, #32]	; (d4d58 <module_user_init_hook+0x5c>)
   d4d38:	f7ff fd9a 	bl	d4870 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d4d3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4d40:	4806      	ldr	r0, [pc, #24]	; (d4d5c <module_user_init_hook+0x60>)
   d4d42:	2100      	movs	r1, #0
   d4d44:	f7ff bd18 	b.w	d4778 <system_ctrl_set_app_request_handler>
   d4d48:	2003f400 	.word	0x2003f400
   d4d4c:	000d4c3d 	.word	0x000d4c3d
   d4d50:	9a271c1e 	.word	0x9a271c1e
   d4d54:	2003e6e4 	.word	0x2003e6e4
   d4d58:	00000000 	.word	0x00000000
   d4d5c:	000d4cc5 	.word	0x000d4cc5

000d4d60 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4d60:	4770      	bx	lr

000d4d62 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d4d62:	2000      	movs	r0, #0
   d4d64:	4770      	bx	lr

000d4d66 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4d66:	b510      	push	{r4, lr}
   d4d68:	2110      	movs	r1, #16
   d4d6a:	4604      	mov	r4, r0
   d4d6c:	f000 fe77 	bl	d5a5e <_ZdlPvj>
   d4d70:	4620      	mov	r0, r4
   d4d72:	bd10      	pop	{r4, pc}

000d4d74 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d4d74:	b508      	push	{r3, lr}
      { delete this; }
   d4d76:	f7ff fff6 	bl	d4d66 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d4d7a:	bd08      	pop	{r3, pc}

000d4d7c <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d4d7c:	b530      	push	{r4, r5, lr}
        type_(type) {
   d4d7e:	2200      	movs	r2, #0
   d4d80:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d4d84:	6002      	str	r2, [r0, #0]
   d4d86:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d4d88:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d4d8a:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d4d8c:	680c      	ldr	r4, [r1, #0]
   d4d8e:	8085      	strh	r5, [r0, #4]
   d4d90:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d4d92:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d4d94:	bd30      	pop	{r4, r5, pc}

000d4d96 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d4d96:	b510      	push	{r4, lr}
   d4d98:	4604      	mov	r4, r0
    free((void*)msg_);
   d4d9a:	6800      	ldr	r0, [r0, #0]
   d4d9c:	f7ff fd80 	bl	d48a0 <free>
}
   d4da0:	4620      	mov	r0, r4
   d4da2:	bd10      	pop	{r4, pc}

000d4da4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d4da4:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d4da6:	68c4      	ldr	r4, [r0, #12]
   d4da8:	b1f4      	cbz	r4, d4de8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d4daa:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d4dac:	2b02      	cmp	r3, #2
   d4dae:	d103      	bne.n	d4db8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d4db0:	f104 000c 	add.w	r0, r4, #12
   d4db4:	f7ff ffef 	bl	d4d96 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d4db8:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d4dba:	b135      	cbz	r5, d4dca <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d4dbc:	4628      	mov	r0, r5
   d4dbe:	f7ff f9fd 	bl	d41bc <_ZNSt14_Function_baseD1Ev>
   d4dc2:	2110      	movs	r1, #16
   d4dc4:	4628      	mov	r0, r5
   d4dc6:	f000 fe4a 	bl	d5a5e <_ZdlPvj>
   d4dca:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d4dcc:	b135      	cbz	r5, d4ddc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d4dce:	4628      	mov	r0, r5
   d4dd0:	f7ff f9f4 	bl	d41bc <_ZNSt14_Function_baseD1Ev>
   d4dd4:	2110      	movs	r1, #16
   d4dd6:	4628      	mov	r0, r5
   d4dd8:	f000 fe41 	bl	d5a5e <_ZdlPvj>
   d4ddc:	4620      	mov	r0, r4
   d4dde:	2114      	movs	r1, #20
   d4de0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4de4:	f000 be3b 	b.w	d5a5e <_ZdlPvj>
   d4de8:	bd38      	pop	{r3, r4, r5, pc}

000d4dea <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
{
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d4dea:	b510      	push	{r4, lr}
   d4dec:	b088      	sub	sp, #32
   d4dee:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d4df0:	4668      	mov	r0, sp
   d4df2:	f7ff fe3e 	bl	d4a72 <_ZN6StringC1EPKc>
    return (*fn)(p);
   d4df6:	4669      	mov	r1, sp
   d4df8:	a804      	add	r0, sp, #16
   d4dfa:	f7ff fe5d 	bl	d4ab8 <_ZN6StringC1ERKS_>
   d4dfe:	a804      	add	r0, sp, #16
   d4e00:	47a0      	blx	r4
   d4e02:	4604      	mov	r4, r0
   d4e04:	a804      	add	r0, sp, #16
   d4e06:	f7ff fde9 	bl	d49dc <_ZN6StringD1Ev>
    String p(param);
   d4e0a:	4668      	mov	r0, sp
   d4e0c:	f7ff fde6 	bl	d49dc <_ZN6StringD1Ev>
}
   d4e10:	4620      	mov	r0, r4
   d4e12:	b008      	add	sp, #32
   d4e14:	bd10      	pop	{r4, pc}

000d4e16 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d4e16:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d4e18:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   d4e1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   d4e1e:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   d4e20:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d4e22:	461a      	mov	r2, r3
   d4e24:	4669      	mov	r1, sp
   d4e26:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   d4e28:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   d4e2c:	f8ad 4000 	strh.w	r4, [sp]
   d4e30:	f7ff fd06 	bl	d4840 <spark_function>
}
   d4e34:	b004      	add	sp, #16
   d4e36:	bd10      	pop	{r4, pc}

000d4e38 <_ZN10CloudClass13publishVitalsEm>:
    }

    return p.future();
}

int CloudClass::publishVitals(system_tick_t period_s_) {
   d4e38:	4608      	mov	r0, r1
    return spark_publish_vitals(period_s_, nullptr);
   d4e3a:	2100      	movs	r1, #0
   d4e3c:	f7ff bd20 	b.w	d4880 <spark_publish_vitals>

000d4e40 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d4e40:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4e42:	460e      	mov	r6, r1
   d4e44:	4604      	mov	r4, r0
   d4e46:	f856 3b04 	ldr.w	r3, [r6], #4
   d4e4a:	9300      	str	r3, [sp, #0]
   d4e4c:	460d      	mov	r5, r1
   d4e4e:	a801      	add	r0, sp, #4
   d4e50:	4631      	mov	r1, r6
   d4e52:	f7ff fe56 	bl	d4b02 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d4e56:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4e58:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d4e5a:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4e5c:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d4e5e:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d4e60:	2300      	movs	r3, #0
   d4e62:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4e64:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d4e66:	f7ff fa2b 	bl	d42c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4e6a:	4630      	mov	r0, r6
   d4e6c:	f7ff fa28 	bl	d42c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d4e70:	4628      	mov	r0, r5
   d4e72:	2108      	movs	r1, #8
   d4e74:	f000 fdf3 	bl	d5a5e <_ZdlPvj>
        return p;
    }
   d4e78:	4620      	mov	r0, r4
   d4e7a:	b002      	add	sp, #8
   d4e7c:	bd70      	pop	{r4, r5, r6, pc}

000d4e7e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d4e7e:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d4e80:	b510      	push	{r4, lr}
      if (_M_empty())
   d4e82:	b90a      	cbnz	r2, d4e88 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d4e84:	f000 fdef 	bl	d5a66 <_ZSt25__throw_bad_function_callv>
    }
   d4e88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4e8c:	68c3      	ldr	r3, [r0, #12]
   d4e8e:	4718      	bx	r3

000d4e90 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4e90:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d4e92:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d4e94:	f100 0110 	add.w	r1, r0, #16
   d4e98:	f7ff fff1 	bl	d4e7e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d4e9c:	bd08      	pop	{r3, pc}

000d4e9e <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d4e9e:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d4ea0:	b510      	push	{r4, lr}
      if (_M_empty())
   d4ea2:	b90a      	cbnz	r2, d4ea8 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d4ea4:	f000 fddf 	bl	d5a66 <_ZSt25__throw_bad_function_callv>
    }
   d4ea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4eac:	68c3      	ldr	r3, [r0, #12]
   d4eae:	4718      	bx	r3

000d4eb0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4eb0:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d4eb2:	6800      	ldr	r0, [r0, #0]
   d4eb4:	f100 0110 	add.w	r1, r0, #16
   d4eb8:	f7ff fff1 	bl	d4e9e <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d4ebc:	bd08      	pop	{r3, pc}
	...

000d4ec0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d4ec0:	b538      	push	{r3, r4, r5, lr}
   d4ec2:	2300      	movs	r3, #0
   d4ec4:	4604      	mov	r4, r0
   d4ec6:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4ec8:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d4eca:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4ecc:	f7ff f8e1 	bl	d4092 <_Znwj>
   d4ed0:	b128      	cbz	r0, d4ede <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d4ed2:	2301      	movs	r3, #1
   d4ed4:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d4ed8:	4b02      	ldr	r3, [pc, #8]	; (d4ee4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d4eda:	6003      	str	r3, [r0, #0]
   d4edc:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4ede:	6020      	str	r0, [r4, #0]
	}
   d4ee0:	4620      	mov	r0, r4
   d4ee2:	bd38      	pop	{r3, r4, r5, pc}
   d4ee4:	000d5db0 	.word	0x000d5db0

000d4ee8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d4ee8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d4eea:	2300      	movs	r3, #0
   d4eec:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d4eee:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d4ef0:	4604      	mov	r4, r0
   d4ef2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d4ef4:	b12b      	cbz	r3, d4f02 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4ef6:	2202      	movs	r2, #2
   d4ef8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4efa:	68eb      	ldr	r3, [r5, #12]
   d4efc:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4efe:	68ab      	ldr	r3, [r5, #8]
   d4f00:	60a3      	str	r3, [r4, #8]
    }
   d4f02:	4620      	mov	r0, r4
   d4f04:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4f08 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d4f08:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4f0a:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d4f0c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d4f0e:	4668      	mov	r0, sp
   d4f10:	f7ff ff34 	bl	d4d7c <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d4f14:	f04f 0302 	mov.w	r3, #2
   d4f18:	e8d4 2f4f 	ldrexb	r2, [r4]
   d4f1c:	2a00      	cmp	r2, #0
   d4f1e:	d103      	bne.n	d4f28 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d4f20:	e8c4 3f41 	strexb	r1, r3, [r4]
   d4f24:	2900      	cmp	r1, #0
   d4f26:	d1f7      	bne.n	d4f18 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d4f28:	d125      	bne.n	d4f76 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d4f2a:	f104 050c 	add.w	r5, r4, #12
   d4f2e:	4669      	mov	r1, sp
   d4f30:	4628      	mov	r0, r5
   d4f32:	f7ff ff23 	bl	d4d7c <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d4f36:	f3bf 8f5b 	dmb	ish
   d4f3a:	2301      	movs	r3, #1
   d4f3c:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d4f3e:	2000      	movs	r0, #0
   d4f40:	f104 0308 	add.w	r3, r4, #8
   d4f44:	f3bf 8f5b 	dmb	ish
   d4f48:	e853 6f00 	ldrex	r6, [r3]
   d4f4c:	e843 0200 	strex	r2, r0, [r3]
   d4f50:	2a00      	cmp	r2, #0
   d4f52:	d1f9      	bne.n	d4f48 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d4f54:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d4f58:	b16e      	cbz	r6, d4f76 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d4f5a:	f7ff fbfd 	bl	d4758 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d4f5e:	b178      	cbz	r0, d4f80 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d4f60:	4629      	mov	r1, r5
   d4f62:	4630      	mov	r0, r6
   d4f64:	f7ff ff8b 	bl	d4e7e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d4f68:	4630      	mov	r0, r6
   d4f6a:	f7ff f927 	bl	d41bc <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d4f6e:	2110      	movs	r1, #16
   d4f70:	4630      	mov	r0, r6
   d4f72:	f000 fd74 	bl	d5a5e <_ZdlPvj>
        p_->setError(std::move(error));
   d4f76:	4668      	mov	r0, sp
   d4f78:	f7ff ff0d 	bl	d4d96 <_ZN8particle5ErrorD1Ev>
    }
   d4f7c:	b009      	add	sp, #36	; 0x24
   d4f7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d4f80:	4631      	mov	r1, r6
   d4f82:	a802      	add	r0, sp, #8
   d4f84:	f7ff ffb0 	bl	d4ee8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d4f88:	68e0      	ldr	r0, [r4, #12]
   d4f8a:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d4f8e:	b108      	cbz	r0, d4f94 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d4f90:	f000 fdca 	bl	d5b28 <strdup>
        type_(type) {
   d4f94:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d4f96:	2010      	movs	r0, #16
   d4f98:	f8ad 501c 	strh.w	r5, [sp, #28]
   d4f9c:	f7ff f879 	bl	d4092 <_Znwj>
   d4fa0:	4605      	mov	r5, r0
   d4fa2:	b1e8      	cbz	r0, d4fe0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d4fa4:	2700      	movs	r7, #0
   d4fa6:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4fa8:	2018      	movs	r0, #24
   d4faa:	f7ff f872 	bl	d4092 <_Znwj>
   d4fae:	4604      	mov	r4, r0
   d4fb0:	b188      	cbz	r0, d4fd6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d4fb2:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d4fb4:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d4fb6:	a802      	add	r0, sp, #8
   d4fb8:	f7ff fe20 	bl	d4bfc <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4fbc:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d4fbe:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4fc0:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4fc2:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d4fc4:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d4fc6:	a906      	add	r1, sp, #24
   d4fc8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4fca:	60e3      	str	r3, [r4, #12]
   d4fcc:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d4fd0:	9205      	str	r2, [sp, #20]
   d4fd2:	f7ff fed3 	bl	d4d7c <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d4fd6:	4b08      	ldr	r3, [pc, #32]	; (d4ff8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d4fd8:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d4fda:	4b08      	ldr	r3, [pc, #32]	; (d4ffc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4fdc:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d4fde:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d4fe0:	a806      	add	r0, sp, #24
   d4fe2:	f7ff fed8 	bl	d4d96 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d4fe6:	a802      	add	r0, sp, #8
   d4fe8:	f7ff f8e8 	bl	d41bc <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d4fec:	2200      	movs	r2, #0
   d4fee:	4629      	mov	r1, r5
   d4ff0:	4803      	ldr	r0, [pc, #12]	; (d5000 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d4ff2:	f7ff fbb9 	bl	d4768 <application_thread_invoke>
   d4ff6:	e7b7      	b.n	d4f68 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d4ff8:	000d4e91 	.word	0x000d4e91
   d4ffc:	000d5129 	.word	0x000d5129
   d5000:	000d5695 	.word	0x000d5695

000d5004 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5008:	b08a      	sub	sp, #40	; 0x28
   d500a:	4605      	mov	r5, r0
   d500c:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d5010:	460c      	mov	r4, r1
   d5012:	4617      	mov	r7, r2
   d5014:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5016:	f7ff fc1b 	bl	d4850 <spark_cloud_flag_connected>
   d501a:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d501c:	4682      	mov	sl, r0
   d501e:	bb38      	cbnz	r0, d5070 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d5020:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d5024:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d5026:	a905      	add	r1, sp, #20
   d5028:	4630      	mov	r0, r6
   d502a:	f8ad 3018 	strh.w	r3, [sp, #24]
   d502e:	f7ff fea5 	bl	d4d7c <_ZN8particle5ErrorC1EOS0_>
   d5032:	2014      	movs	r0, #20
   d5034:	f7ff f82d 	bl	d4092 <_Znwj>
   d5038:	4604      	mov	r4, r0
   d503a:	b148      	cbz	r0, d5050 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d503c:	2302      	movs	r3, #2
   d503e:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5040:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5042:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5046:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d5048:	4631      	mov	r1, r6
   d504a:	300c      	adds	r0, #12
   d504c:	f7ff fe96 	bl	d4d7c <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d5050:	4628      	mov	r0, r5
	: __shared_count(__p)
   d5052:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d5054:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d5058:	f7ff ff32 	bl	d4ec0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d505c:	4630      	mov	r0, r6
   d505e:	f7ff fe9a 	bl	d4d96 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d5062:	a805      	add	r0, sp, #20
   d5064:	f7ff fe97 	bl	d4d96 <_ZN8particle5ErrorD1Ev>
}
   d5068:	4628      	mov	r0, r5
   d506a:	b00a      	add	sp, #40	; 0x28
   d506c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d5070:	230c      	movs	r3, #12
   d5072:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d5076:	2014      	movs	r0, #20
   d5078:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d507c:	9307      	str	r3, [sp, #28]
   d507e:	f7ff f808 	bl	d4092 <_Znwj>
   d5082:	4601      	mov	r1, r0
   d5084:	b128      	cbz	r0, d5092 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5086:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d508a:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d508e:	f880 a001 	strb.w	sl, [r0, #1]
   d5092:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d5094:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d5096:	f7ff ff13 	bl	d4ec0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d509a:	4b22      	ldr	r3, [pc, #136]	; (d5124 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d509c:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d509e:	2008      	movs	r0, #8
   d50a0:	f7fe fff7 	bl	d4092 <_Znwj>
   d50a4:	4682      	mov	sl, r0
   d50a6:	b128      	cbz	r0, d50b4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d50a8:	9b03      	ldr	r3, [sp, #12]
   d50aa:	f840 3b04 	str.w	r3, [r0], #4
   d50ae:	a904      	add	r1, sp, #16
   d50b0:	f7ff fd27 	bl	d4b02 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d50b4:	9600      	str	r6, [sp, #0]
   d50b6:	fa5f f389 	uxtb.w	r3, r9
   d50ba:	4642      	mov	r2, r8
   d50bc:	4639      	mov	r1, r7
   d50be:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d50c0:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d50c4:	f7ff fbcc 	bl	d4860 <spark_send_event>
   d50c8:	b9b8      	cbnz	r0, d50fa <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d50ca:	9b03      	ldr	r3, [sp, #12]
   d50cc:	785b      	ldrb	r3, [r3, #1]
   d50ce:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d50d2:	b993      	cbnz	r3, d50fa <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d50d4:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d50d8:	a905      	add	r1, sp, #20
   d50da:	a803      	add	r0, sp, #12
   d50dc:	9205      	str	r2, [sp, #20]
   d50de:	f8ad 3018 	strh.w	r3, [sp, #24]
   d50e2:	f7ff ff11 	bl	d4f08 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d50e6:	a805      	add	r0, sp, #20
   d50e8:	f7ff fe55 	bl	d4d96 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d50ec:	a805      	add	r0, sp, #20
   d50ee:	9909      	ldr	r1, [sp, #36]	; 0x24
   d50f0:	f7ff fea6 	bl	d4e40 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d50f4:	a806      	add	r0, sp, #24
   d50f6:	f7ff f8e3 	bl	d42c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d50fa:	9b03      	ldr	r3, [sp, #12]
   d50fc:	9305      	str	r3, [sp, #20]
   d50fe:	a904      	add	r1, sp, #16
   d5100:	a806      	add	r0, sp, #24
   d5102:	f7ff fcfe 	bl	d4b02 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5106:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5108:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d510a:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d510c:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d510e:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d5110:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d5112:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d5114:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d5116:	f7ff f8d3 	bl	d42c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d511a:	a804      	add	r0, sp, #16
   d511c:	f7ff f8d0 	bl	d42c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d5120:	e7a2      	b.n	d5068 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d5122:	bf00      	nop
   d5124:	000d51ed 	.word	0x000d51ed

000d5128 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d5128:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d512a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d512c:	4605      	mov	r5, r0
	  switch (__op)
   d512e:	d007      	beq.n	d5140 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d5130:	2a03      	cmp	r2, #3
   d5132:	d018      	beq.n	d5166 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d5134:	2a01      	cmp	r2, #1
   d5136:	d101      	bne.n	d513c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d5138:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d513a:	6003      	str	r3, [r0, #0]
	}
   d513c:	2000      	movs	r0, #0
   d513e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d5140:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d5142:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d5144:	f7fe ffa5 	bl	d4092 <_Znwj>
   d5148:	4604      	mov	r4, r0
   d514a:	b150      	cbz	r0, d5162 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d514c:	4631      	mov	r1, r6
   d514e:	f7ff fecb 	bl	d4ee8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d5152:	6930      	ldr	r0, [r6, #16]
   d5154:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d5158:	b108      	cbz	r0, d515e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d515a:	f000 fce5 	bl	d5b28 <strdup>
        type_(type) {
   d515e:	6120      	str	r0, [r4, #16]
   d5160:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d5162:	602c      	str	r4, [r5, #0]
	}
   d5164:	e7ea      	b.n	d513c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d5166:	6804      	ldr	r4, [r0, #0]
   d5168:	2c00      	cmp	r4, #0
   d516a:	d0e7      	beq.n	d513c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d516c:	f104 0010 	add.w	r0, r4, #16
   d5170:	f7ff fe11 	bl	d4d96 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d5174:	4620      	mov	r0, r4
   d5176:	f7ff f821 	bl	d41bc <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d517a:	2118      	movs	r1, #24
   d517c:	4620      	mov	r0, r4
   d517e:	f000 fc6e 	bl	d5a5e <_ZdlPvj>
   d5182:	e7db      	b.n	d513c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d5184 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d5184:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d5186:	2300      	movs	r3, #0
   d5188:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d518a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d518c:	4604      	mov	r4, r0
   d518e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d5190:	b12b      	cbz	r3, d519e <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5192:	2202      	movs	r2, #2
   d5194:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5196:	68eb      	ldr	r3, [r5, #12]
   d5198:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d519a:	68ab      	ldr	r3, [r5, #8]
   d519c:	60a3      	str	r3, [r4, #8]
    }
   d519e:	4620      	mov	r0, r4
   d51a0:	bd38      	pop	{r3, r4, r5, pc}

000d51a2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d51a2:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d51a4:	b570      	push	{r4, r5, r6, lr}
   d51a6:	4604      	mov	r4, r0
	  switch (__op)
   d51a8:	d007      	beq.n	d51ba <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d51aa:	2a03      	cmp	r2, #3
   d51ac:	d012      	beq.n	d51d4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d51ae:	2a01      	cmp	r2, #1
   d51b0:	d101      	bne.n	d51b6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d51b2:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d51b4:	6003      	str	r3, [r0, #0]
	}
   d51b6:	2000      	movs	r0, #0
   d51b8:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d51ba:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d51bc:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d51be:	f7fe ff68 	bl	d4092 <_Znwj>
   d51c2:	4605      	mov	r5, r0
   d51c4:	b120      	cbz	r0, d51d0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d51c6:	4631      	mov	r1, r6
   d51c8:	f7ff ffdc 	bl	d5184 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d51cc:	7c33      	ldrb	r3, [r6, #16]
   d51ce:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d51d0:	6025      	str	r5, [r4, #0]
	}
   d51d2:	e7f0      	b.n	d51b6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d51d4:	6804      	ldr	r4, [r0, #0]
   d51d6:	2c00      	cmp	r4, #0
   d51d8:	d0ed      	beq.n	d51b6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d51da:	4620      	mov	r0, r4
   d51dc:	f7fe ffee 	bl	d41bc <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d51e0:	2114      	movs	r1, #20
   d51e2:	4620      	mov	r0, r4
   d51e4:	f000 fc3b 	bl	d5a5e <_ZdlPvj>
   d51e8:	e7e5      	b.n	d51b6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d51ec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d51ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   d51ee:	b089      	sub	sp, #36	; 0x24
   d51f0:	4604      	mov	r4, r0
   d51f2:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d51f4:	a801      	add	r0, sp, #4
   d51f6:	4611      	mov	r1, r2
   d51f8:	f7ff fe22 	bl	d4e40 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d51fc:	b1a4      	cbz	r4, d5228 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d51fe:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d5200:	b11d      	cbz	r5, d520a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d5202:	4628      	mov	r0, r5
   d5204:	f000 fc90 	bl	d5b28 <strdup>
   d5208:	4605      	mov	r5, r0
   d520a:	a801      	add	r0, sp, #4
   d520c:	a903      	add	r1, sp, #12
        type_(type) {
   d520e:	9503      	str	r5, [sp, #12]
   d5210:	f8ad 4010 	strh.w	r4, [sp, #16]
   d5214:	f7ff fe78 	bl	d4f08 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d5218:	a803      	add	r0, sp, #12
   d521a:	f7ff fdbc 	bl	d4d96 <_ZN8particle5ErrorD1Ev>
   d521e:	a802      	add	r0, sp, #8
   d5220:	f7ff f84e 	bl	d42c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5224:	b009      	add	sp, #36	; 0x24
   d5226:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d5228:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d522a:	2301      	movs	r3, #1
   d522c:	e8d5 2f4f 	ldrexb	r2, [r5]
   d5230:	2a00      	cmp	r2, #0
   d5232:	d103      	bne.n	d523c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d5234:	e8c5 3f41 	strexb	r1, r3, [r5]
   d5238:	2900      	cmp	r1, #0
   d523a:	d1f7      	bne.n	d522c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d523c:	d1ef      	bne.n	d521e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d523e:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d5240:	f3bf 8f5b 	dmb	ish
   d5244:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d5246:	1d2b      	adds	r3, r5, #4
   d5248:	f3bf 8f5b 	dmb	ish
   d524c:	e853 6f00 	ldrex	r6, [r3]
   d5250:	e843 4200 	strex	r2, r4, [r3]
   d5254:	2a00      	cmp	r2, #0
   d5256:	d1f9      	bne.n	d524c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d5258:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d525c:	2e00      	cmp	r6, #0
   d525e:	d0de      	beq.n	d521e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d5260:	4620      	mov	r0, r4
   d5262:	f7ff fa79 	bl	d4758 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d5266:	4607      	mov	r7, r0
   d5268:	b160      	cbz	r0, d5284 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d526a:	f105 010c 	add.w	r1, r5, #12
   d526e:	4630      	mov	r0, r6
   d5270:	f7ff fe15 	bl	d4e9e <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d5274:	4630      	mov	r0, r6
   d5276:	f7fe ffa1 	bl	d41bc <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d527a:	2110      	movs	r1, #16
   d527c:	4630      	mov	r0, r6
   d527e:	f000 fbee 	bl	d5a5e <_ZdlPvj>
   d5282:	e7cc      	b.n	d521e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5284:	4631      	mov	r1, r6
   d5286:	a803      	add	r0, sp, #12
   d5288:	f7ff ff7c 	bl	d5184 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d528c:	7b2b      	ldrb	r3, [r5, #12]
   d528e:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5292:	2010      	movs	r0, #16
   d5294:	f7fe fefd 	bl	d4092 <_Znwj>
   d5298:	4605      	mov	r5, r0
   d529a:	b1d0      	cbz	r0, d52d2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d529c:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d529e:	2014      	movs	r0, #20
   d52a0:	f7fe fef7 	bl	d4092 <_Znwj>
   d52a4:	4604      	mov	r4, r0
   d52a6:	b178      	cbz	r0, d52c8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d52a8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d52aa:	4601      	mov	r1, r0
   d52ac:	a803      	add	r0, sp, #12
   d52ae:	f7ff fca5 	bl	d4bfc <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d52b2:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d52b4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d52b6:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d52b8:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d52ba:	9205      	str	r2, [sp, #20]
   d52bc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d52be:	60e3      	str	r3, [r4, #12]
   d52c0:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d52c4:	9206      	str	r2, [sp, #24]
   d52c6:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d52c8:	4b06      	ldr	r3, [pc, #24]	; (d52e4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d52ca:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d52cc:	4b06      	ldr	r3, [pc, #24]	; (d52e8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d52ce:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d52d0:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d52d2:	a803      	add	r0, sp, #12
   d52d4:	f7fe ff72 	bl	d41bc <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d52d8:	2200      	movs	r2, #0
   d52da:	4629      	mov	r1, r5
   d52dc:	4803      	ldr	r0, [pc, #12]	; (d52ec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d52de:	f7ff fa43 	bl	d4768 <application_thread_invoke>
   d52e2:	e7c7      	b.n	d5274 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d52e4:	000d4eb1 	.word	0x000d4eb1
   d52e8:	000d51a3 	.word	0x000d51a3
   d52ec:	000d5695 	.word	0x000d5695

000d52f0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d52f0:	4770      	bx	lr

000d52f2 <_ZN9IPAddressD0Ev>:
   d52f2:	b510      	push	{r4, lr}
   d52f4:	2118      	movs	r1, #24
   d52f6:	4604      	mov	r4, r0
   d52f8:	f000 fbb1 	bl	d5a5e <_ZdlPvj>
   d52fc:	4620      	mov	r0, r4
   d52fe:	bd10      	pop	{r4, pc}

000d5300 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5300:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5302:	7d03      	ldrb	r3, [r0, #20]
   d5304:	2b06      	cmp	r3, #6
{
   d5306:	b08d      	sub	sp, #52	; 0x34
   d5308:	460e      	mov	r6, r1
   d530a:	f100 0704 	add.w	r7, r0, #4
   d530e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d5312:	d012      	beq.n	d533a <_ZNK9IPAddress7printToER5Print+0x3a>
   d5314:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d5318:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d531c:	220a      	movs	r2, #10
   d531e:	4630      	mov	r0, r6
   d5320:	f7ff fc35 	bl	d4b8e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5324:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5326:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d5328:	d019      	beq.n	d535e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d532a:	2c00      	cmp	r4, #0
   d532c:	d0f4      	beq.n	d5318 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d532e:	212e      	movs	r1, #46	; 0x2e
   d5330:	4630      	mov	r0, r6
   d5332:	f7ff fc29 	bl	d4b88 <_ZN5Print5printEc>
   d5336:	4404      	add	r4, r0
   d5338:	e7ee      	b.n	d5318 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d533a:	232f      	movs	r3, #47	; 0x2f
   d533c:	466a      	mov	r2, sp
   d533e:	4639      	mov	r1, r7
   d5340:	200a      	movs	r0, #10
		buf[0] = 0;
   d5342:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5346:	f7ff f93f 	bl	d45c8 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d534a:	4668      	mov	r0, sp
   d534c:	f000 fc09 	bl	d5b62 <strlen>
   d5350:	6833      	ldr	r3, [r6, #0]
   d5352:	4602      	mov	r2, r0
   d5354:	68db      	ldr	r3, [r3, #12]
   d5356:	4669      	mov	r1, sp
   d5358:	4630      	mov	r0, r6
   d535a:	4798      	blx	r3
   d535c:	4604      	mov	r4, r0
    }
    return n;
}
   d535e:	4620      	mov	r0, r4
   d5360:	b00d      	add	sp, #52	; 0x34
   d5362:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5364 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d5364:	b510      	push	{r4, lr}
   d5366:	4b05      	ldr	r3, [pc, #20]	; (d537c <_ZN9IPAddressC1Ev+0x18>)
   d5368:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d536a:	2211      	movs	r2, #17
   d536c:	f840 3b04 	str.w	r3, [r0], #4
   d5370:	2100      	movs	r1, #0
   d5372:	f000 fb9b 	bl	d5aac <memset>
}
   d5376:	4620      	mov	r0, r4
   d5378:	bd10      	pop	{r4, pc}
   d537a:	bf00      	nop
   d537c:	000d5dcc 	.word	0x000d5dcc

000d5380 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d5380:	4603      	mov	r3, r0
   d5382:	4a07      	ldr	r2, [pc, #28]	; (d53a0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5384:	b510      	push	{r4, lr}
   d5386:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d538a:	f101 0210 	add.w	r2, r1, #16
   d538e:	f851 4b04 	ldr.w	r4, [r1], #4
   d5392:	f843 4b04 	str.w	r4, [r3], #4
   d5396:	4291      	cmp	r1, r2
   d5398:	d1f9      	bne.n	d538e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d539a:	780a      	ldrb	r2, [r1, #0]
   d539c:	701a      	strb	r2, [r3, #0]
}
   d539e:	bd10      	pop	{r4, pc}
   d53a0:	000d5dcc 	.word	0x000d5dcc

000d53a4 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d53a4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d53a6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d53aa:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d53ae:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d53b2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d53b6:	2304      	movs	r3, #4
   d53b8:	6041      	str	r1, [r0, #4]
   d53ba:	7503      	strb	r3, [r0, #20]
}
   d53bc:	bd10      	pop	{r4, pc}

000d53be <_ZN9IPAddressaSEPKh>:
{
   d53be:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d53c0:	78cb      	ldrb	r3, [r1, #3]
   d53c2:	9300      	str	r3, [sp, #0]
   d53c4:	788b      	ldrb	r3, [r1, #2]
   d53c6:	784a      	ldrb	r2, [r1, #1]
   d53c8:	7809      	ldrb	r1, [r1, #0]
   d53ca:	f7ff ffeb 	bl	d53a4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d53ce:	b002      	add	sp, #8
   d53d0:	bd10      	pop	{r4, pc}

000d53d2 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d53d2:	7441      	strb	r1, [r0, #17]
}
   d53d4:	4770      	bx	lr

000d53d6 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d53d6:	4770      	bx	lr

000d53d8 <_ZN9USBSerial4readEv>:
{
   d53d8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d53da:	2100      	movs	r1, #0
   d53dc:	7c00      	ldrb	r0, [r0, #16]
   d53de:	f7ff f99b 	bl	d4718 <HAL_USB_USART_Receive_Data>
}
   d53e2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d53e6:	bd08      	pop	{r3, pc}

000d53e8 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d53e8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d53ea:	2101      	movs	r1, #1
   d53ec:	7c00      	ldrb	r0, [r0, #16]
   d53ee:	f7ff f993 	bl	d4718 <HAL_USB_USART_Receive_Data>
}
   d53f2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d53f6:	bd08      	pop	{r3, pc}

000d53f8 <_ZN9USBSerial17availableForWriteEv>:
{
   d53f8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d53fa:	7c00      	ldrb	r0, [r0, #16]
   d53fc:	f7ff f984 	bl	d4708 <HAL_USB_USART_Available_Data_For_Write>
}
   d5400:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5404:	bd08      	pop	{r3, pc}

000d5406 <_ZN9USBSerial9availableEv>:
{
   d5406:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5408:	7c00      	ldrb	r0, [r0, #16]
   d540a:	f7ff f975 	bl	d46f8 <HAL_USB_USART_Available_Data>
}
   d540e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5412:	bd08      	pop	{r3, pc}

000d5414 <_ZN9USBSerial5writeEh>:
{
   d5414:	b513      	push	{r0, r1, r4, lr}
   d5416:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5418:	7c00      	ldrb	r0, [r0, #16]
{
   d541a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d541c:	f7ff f974 	bl	d4708 <HAL_USB_USART_Available_Data_For_Write>
   d5420:	2800      	cmp	r0, #0
   d5422:	9901      	ldr	r1, [sp, #4]
   d5424:	dc01      	bgt.n	d542a <_ZN9USBSerial5writeEh+0x16>
   d5426:	7c60      	ldrb	r0, [r4, #17]
   d5428:	b120      	cbz	r0, d5434 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d542a:	7c20      	ldrb	r0, [r4, #16]
   d542c:	f7ff f97c 	bl	d4728 <HAL_USB_USART_Send_Data>
   d5430:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d5434:	b002      	add	sp, #8
   d5436:	bd10      	pop	{r4, pc}

000d5438 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d5438:	7c00      	ldrb	r0, [r0, #16]
   d543a:	f7ff b97d 	b.w	d4738 <HAL_USB_USART_Flush_Data>

000d543e <_ZN9USBSerialD0Ev>:
   d543e:	b510      	push	{r4, lr}
   d5440:	2114      	movs	r1, #20
   d5442:	4604      	mov	r4, r0
   d5444:	f000 fb0b 	bl	d5a5e <_ZdlPvj>
   d5448:	4620      	mov	r0, r4
   d544a:	bd10      	pop	{r4, pc}

000d544c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d544c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d544e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5452:	4604      	mov	r4, r0
   d5454:	4608      	mov	r0, r1
   d5456:	2100      	movs	r1, #0
   d5458:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d545c:	4b04      	ldr	r3, [pc, #16]	; (d5470 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d545e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d5460:	2301      	movs	r3, #1
  _serial = serial;
   d5462:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d5464:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d5466:	4611      	mov	r1, r2
   d5468:	f7ff f93e 	bl	d46e8 <HAL_USB_USART_Init>
}
   d546c:	4620      	mov	r0, r4
   d546e:	bd10      	pop	{r4, pc}
   d5470:	000d5de0 	.word	0x000d5de0

000d5474 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5474:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5476:	2214      	movs	r2, #20
{
   d5478:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d547a:	2100      	movs	r1, #0
   d547c:	f000 fb16 	bl	d5aac <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5480:	4620      	mov	r0, r4
   d5482:	bd10      	pop	{r4, pc}

000d5484 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5484:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5486:	4c10      	ldr	r4, [pc, #64]	; (d54c8 <_Z16_fetch_usbserialv+0x44>)
{
   d5488:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d548a:	a803      	add	r0, sp, #12
   d548c:	f7ff fff2 	bl	d5474 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5490:	7821      	ldrb	r1, [r4, #0]
   d5492:	f3bf 8f5b 	dmb	ish
   d5496:	f011 0101 	ands.w	r1, r1, #1
   d549a:	d111      	bne.n	d54c0 <_Z16_fetch_usbserialv+0x3c>
   d549c:	4620      	mov	r0, r4
   d549e:	9101      	str	r1, [sp, #4]
   d54a0:	f7fe fdfd 	bl	d409e <__cxa_guard_acquire>
   d54a4:	9901      	ldr	r1, [sp, #4]
   d54a6:	b158      	cbz	r0, d54c0 <_Z16_fetch_usbserialv+0x3c>
   d54a8:	aa03      	add	r2, sp, #12
   d54aa:	4808      	ldr	r0, [pc, #32]	; (d54cc <_Z16_fetch_usbserialv+0x48>)
   d54ac:	f7ff ffce 	bl	d544c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d54b0:	4620      	mov	r0, r4
   d54b2:	f7fe fdf9 	bl	d40a8 <__cxa_guard_release>
   d54b6:	4a06      	ldr	r2, [pc, #24]	; (d54d0 <_Z16_fetch_usbserialv+0x4c>)
   d54b8:	4906      	ldr	r1, [pc, #24]	; (d54d4 <_Z16_fetch_usbserialv+0x50>)
   d54ba:	4804      	ldr	r0, [pc, #16]	; (d54cc <_Z16_fetch_usbserialv+0x48>)
   d54bc:	f000 faca 	bl	d5a54 <__aeabi_atexit>
	return _usbserial;
}
   d54c0:	4802      	ldr	r0, [pc, #8]	; (d54cc <_Z16_fetch_usbserialv+0x48>)
   d54c2:	b008      	add	sp, #32
   d54c4:	bd10      	pop	{r4, pc}
   d54c6:	bf00      	nop
   d54c8:	2003e6ec 	.word	0x2003e6ec
   d54cc:	2003e6f0 	.word	0x2003e6f0
   d54d0:	2003e688 	.word	0x2003e688
   d54d4:	000d53d7 	.word	0x000d53d7

000d54d8 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d54d8:	4700      	bx	r0
	...

000d54dc <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d54dc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d54e0:	2400      	movs	r4, #0
{
   d54e2:	461d      	mov	r5, r3
   d54e4:	460f      	mov	r7, r1
   d54e6:	4690      	mov	r8, r2
   d54e8:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   d54ea:	f7ff f80d 	bl	d4508 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   d54ee:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d54f0:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {0};
   d54f4:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d54f8:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {0};
   d54fc:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   d5500:	bfa2      	ittt	ge
   d5502:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d5506:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   d550a:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d550c:	4907      	ldr	r1, [pc, #28]	; (d552c <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   d550e:	9400      	str	r4, [sp, #0]
   d5510:	4643      	mov	r3, r8
   d5512:	463a      	mov	r2, r7
   d5514:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d5516:	bfa8      	it	ge
   d5518:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d551c:	f7fe ffec 	bl	d44f8 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d5520:	fab0 f080 	clz	r0, r0
   d5524:	0940      	lsrs	r0, r0, #5
   d5526:	b004      	add	sp, #16
   d5528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d552c:	000d54d9 	.word	0x000d54d9

000d5530 <_Z15detachInterruptt>:
 * Input          : pin number to which the interrupt was attached
 * Output         : None.
 * Return         : true or false
 *******************************************************************************/
bool detachInterrupt(uint16_t pin)
{
   d5530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5532:	4604      	mov	r4, r0
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Detach(pin)) {
   d5534:	f7fe ffe8 	bl	d4508 <HAL_Interrupts_Detach>
   d5538:	4605      	mov	r5, r0
   d553a:	b970      	cbnz	r0, d555a <_Z15detachInterruptt+0x2a>
        return false;
    }
    if (handlers[pin]) {
   d553c:	4f08      	ldr	r7, [pc, #32]	; (d5560 <_Z15detachInterruptt+0x30>)
   d553e:	f857 6024 	ldr.w	r6, [r7, r4, lsl #2]
   d5542:	b146      	cbz	r6, d5556 <_Z15detachInterruptt+0x26>
   d5544:	4630      	mov	r0, r6
   d5546:	f7fe fe39 	bl	d41bc <_ZNSt14_Function_baseD1Ev>
        delete handlers[pin];
   d554a:	2110      	movs	r1, #16
   d554c:	4630      	mov	r0, r6
   d554e:	f000 fa86 	bl	d5a5e <_ZdlPvj>
        handlers[pin] = nullptr;
   d5552:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
    }
    return true;
   d5556:	2001      	movs	r0, #1
   d5558:	e000      	b.n	d555c <_Z15detachInterruptt+0x2c>
        return false;
   d555a:	2000      	movs	r0, #0
}
   d555c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d555e:	bf00      	nop
   d5560:	2003e704 	.word	0x2003e704

000d5564 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d5564:	4770      	bx	lr

000d5566 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5566:	7441      	strb	r1, [r0, #17]
}
   d5568:	4770      	bx	lr

000d556a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d556a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d556c:	7c00      	ldrb	r0, [r0, #16]
   d556e:	f7ff f86b 	bl	d4648 <hal_usart_available_data_for_write>
}
   d5572:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5576:	bd08      	pop	{r3, pc}

000d5578 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5578:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d557a:	7c00      	ldrb	r0, [r0, #16]
   d557c:	f7ff f83c 	bl	d45f8 <hal_usart_available>
}
   d5580:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5584:	bd08      	pop	{r3, pc}

000d5586 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5586:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d5588:	7c00      	ldrb	r0, [r0, #16]
   d558a:	f7ff f845 	bl	d4618 <hal_usart_peek>
}
   d558e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5592:	bd08      	pop	{r3, pc}

000d5594 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5594:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d5596:	7c00      	ldrb	r0, [r0, #16]
   d5598:	f7ff f836 	bl	d4608 <hal_usart_read>
}
   d559c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d55a0:	bd08      	pop	{r3, pc}

000d55a2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d55a2:	7c00      	ldrb	r0, [r0, #16]
   d55a4:	f7ff b840 	b.w	d4628 <hal_usart_flush>

000d55a8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d55a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d55aa:	7c45      	ldrb	r5, [r0, #17]
{
   d55ac:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d55ae:	b12d      	cbz	r5, d55bc <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d55b0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d55b2:	b003      	add	sp, #12
   d55b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d55b8:	f7ff b816 	b.w	d45e8 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d55bc:	7c00      	ldrb	r0, [r0, #16]
   d55be:	9101      	str	r1, [sp, #4]
   d55c0:	f7ff f842 	bl	d4648 <hal_usart_available_data_for_write>
   d55c4:	2800      	cmp	r0, #0
   d55c6:	9901      	ldr	r1, [sp, #4]
   d55c8:	dcf2      	bgt.n	d55b0 <_ZN11USARTSerial5writeEh+0x8>
}
   d55ca:	4628      	mov	r0, r5
   d55cc:	b003      	add	sp, #12
   d55ce:	bd30      	pop	{r4, r5, pc}

000d55d0 <_ZN11USARTSerialD0Ev>:
   d55d0:	b510      	push	{r4, lr}
   d55d2:	2114      	movs	r1, #20
   d55d4:	4604      	mov	r4, r0
   d55d6:	f000 fa42 	bl	d5a5e <_ZdlPvj>
   d55da:	4620      	mov	r0, r4
   d55dc:	bd10      	pop	{r4, pc}
	...

000d55e0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d55e0:	b510      	push	{r4, lr}
   d55e2:	f04f 0c00 	mov.w	ip, #0
   d55e6:	4604      	mov	r4, r0
   d55e8:	4608      	mov	r0, r1
   d55ea:	4611      	mov	r1, r2
   d55ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d55f0:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d55f4:	4a04      	ldr	r2, [pc, #16]	; (d5608 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d55f6:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d55f8:	2201      	movs	r2, #1
  _serial = serial;
   d55fa:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d55fc:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d55fe:	461a      	mov	r2, r3
   d5600:	f7fe ffea 	bl	d45d8 <hal_usart_init>
}
   d5604:	4620      	mov	r0, r4
   d5606:	bd10      	pop	{r4, pc}
   d5608:	000d5e10 	.word	0x000d5e10

000d560c <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d560c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
   d560e:	4c1b      	ldr	r4, [pc, #108]	; (d567c <_Z22__fetch_global_Serial1v+0x70>)
   d5610:	6826      	ldr	r6, [r4, #0]
   d5612:	b94e      	cbnz	r6, d5628 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new hal_usart_ring_buffer_t();
   d5614:	2084      	movs	r0, #132	; 0x84
   d5616:	f7fe fd3c 	bl	d4092 <_Znwj>
   d561a:	4605      	mov	r5, r0
   d561c:	b118      	cbz	r0, d5626 <_Z22__fetch_global_Serial1v+0x1a>
   d561e:	2284      	movs	r2, #132	; 0x84
   d5620:	4631      	mov	r1, r6
   d5622:	f000 fa43 	bl	d5aac <memset>
   d5626:	6025      	str	r5, [r4, #0]
  }
  if (!serial1_tx_buffer) {
   d5628:	4d15      	ldr	r5, [pc, #84]	; (d5680 <_Z22__fetch_global_Serial1v+0x74>)
   d562a:	682f      	ldr	r7, [r5, #0]
   d562c:	b94f      	cbnz	r7, d5642 <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
   d562e:	2084      	movs	r0, #132	; 0x84
   d5630:	f7fe fd2f 	bl	d4092 <_Znwj>
   d5634:	4606      	mov	r6, r0
   d5636:	b118      	cbz	r0, d5640 <_Z22__fetch_global_Serial1v+0x34>
   d5638:	2284      	movs	r2, #132	; 0x84
   d563a:	4639      	mov	r1, r7
   d563c:	f000 fa36 	bl	d5aac <memset>
   d5640:	602e      	str	r6, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   d5642:	4e10      	ldr	r6, [pc, #64]	; (d5684 <_Z22__fetch_global_Serial1v+0x78>)
   d5644:	7831      	ldrb	r1, [r6, #0]
   d5646:	f3bf 8f5b 	dmb	ish
   d564a:	f011 0101 	ands.w	r1, r1, #1
   d564e:	d112      	bne.n	d5676 <_Z22__fetch_global_Serial1v+0x6a>
   d5650:	4630      	mov	r0, r6
   d5652:	9101      	str	r1, [sp, #4]
   d5654:	f7fe fd23 	bl	d409e <__cxa_guard_acquire>
   d5658:	9901      	ldr	r1, [sp, #4]
   d565a:	b160      	cbz	r0, d5676 <_Z22__fetch_global_Serial1v+0x6a>
   d565c:	6822      	ldr	r2, [r4, #0]
   d565e:	682b      	ldr	r3, [r5, #0]
   d5660:	4809      	ldr	r0, [pc, #36]	; (d5688 <_Z22__fetch_global_Serial1v+0x7c>)
   d5662:	f7ff ffbd 	bl	d55e0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d5666:	4630      	mov	r0, r6
   d5668:	f7fe fd1e 	bl	d40a8 <__cxa_guard_release>
   d566c:	4a07      	ldr	r2, [pc, #28]	; (d568c <_Z22__fetch_global_Serial1v+0x80>)
   d566e:	4908      	ldr	r1, [pc, #32]	; (d5690 <_Z22__fetch_global_Serial1v+0x84>)
   d5670:	4805      	ldr	r0, [pc, #20]	; (d5688 <_Z22__fetch_global_Serial1v+0x7c>)
   d5672:	f000 f9ef 	bl	d5a54 <__aeabi_atexit>
#endif
	return serial1;
}
   d5676:	4804      	ldr	r0, [pc, #16]	; (d5688 <_Z22__fetch_global_Serial1v+0x7c>)
   d5678:	b003      	add	sp, #12
   d567a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d567c:	2003e798 	.word	0x2003e798
   d5680:	2003e79c 	.word	0x2003e79c
   d5684:	2003e794 	.word	0x2003e794
   d5688:	2003e7a0 	.word	0x2003e7a0
   d568c:	2003e688 	.word	0x2003e688
   d5690:	000d5565 	.word	0x000d5565

000d5694 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d5694:	b510      	push	{r4, lr}
      if (_M_empty())
   d5696:	6883      	ldr	r3, [r0, #8]
   d5698:	4604      	mov	r4, r0
   d569a:	b90b      	cbnz	r3, d56a0 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d569c:	f000 f9e3 	bl	d5a66 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d56a0:	68c3      	ldr	r3, [r0, #12]
   d56a2:	4798      	blx	r3
      if (_M_manager)
   d56a4:	68a3      	ldr	r3, [r4, #8]
   d56a6:	b11b      	cbz	r3, d56b0 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d56a8:	2203      	movs	r2, #3
   d56aa:	4621      	mov	r1, r4
   d56ac:	4620      	mov	r0, r4
   d56ae:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d56b0:	4620      	mov	r0, r4
   d56b2:	2110      	movs	r1, #16
}
   d56b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d56b8:	f000 b9d1 	b.w	d5a5e <_ZdlPvj>

000d56bc <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d56bc:	4770      	bx	lr

000d56be <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d56be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d56c0:	4606      	mov	r6, r0
   d56c2:	4615      	mov	r5, r2
   d56c4:	460c      	mov	r4, r1
   d56c6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d56c8:	42bc      	cmp	r4, r7
   d56ca:	d006      	beq.n	d56da <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d56cc:	6833      	ldr	r3, [r6, #0]
   d56ce:	f814 1b01 	ldrb.w	r1, [r4], #1
   d56d2:	689b      	ldr	r3, [r3, #8]
   d56d4:	4630      	mov	r0, r6
   d56d6:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d56d8:	e7f6      	b.n	d56c8 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d56da:	4628      	mov	r0, r5
   d56dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d56de <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d56de:	7c00      	ldrb	r0, [r0, #16]
   d56e0:	2200      	movs	r2, #0
   d56e2:	f7fe bfb9 	b.w	d4658 <hal_i2c_write>

000d56e6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d56e6:	7c00      	ldrb	r0, [r0, #16]
   d56e8:	2100      	movs	r1, #0
   d56ea:	f7fe bfbd 	b.w	d4668 <hal_i2c_available>

000d56ee <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d56ee:	7c00      	ldrb	r0, [r0, #16]
   d56f0:	2100      	movs	r1, #0
   d56f2:	f7fe bfc1 	b.w	d4678 <hal_i2c_read>

000d56f6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d56f6:	7c00      	ldrb	r0, [r0, #16]
   d56f8:	2100      	movs	r1, #0
   d56fa:	f7fe bfc5 	b.w	d4688 <hal_i2c_peek>

000d56fe <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d56fe:	7c00      	ldrb	r0, [r0, #16]
   d5700:	2100      	movs	r1, #0
   d5702:	f7fe bfc9 	b.w	d4698 <hal_i2c_flush>

000d5706 <_ZN7TwoWireD0Ev>:
   d5706:	b510      	push	{r4, lr}
   d5708:	2114      	movs	r1, #20
   d570a:	4604      	mov	r4, r0
   d570c:	f000 f9a7 	bl	d5a5e <_ZdlPvj>
   d5710:	4620      	mov	r0, r4
   d5712:	bd10      	pop	{r4, pc}

000d5714 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d5714:	b510      	push	{r4, lr}
   d5716:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d571a:	4604      	mov	r4, r0
   d571c:	4608      	mov	r0, r1
   d571e:	2100      	movs	r1, #0
   d5720:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5724:	4b03      	ldr	r3, [pc, #12]	; (d5734 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d5726:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d5728:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d572a:	4611      	mov	r1, r2
   d572c:	f7fe ffc4 	bl	d46b8 <hal_i2c_init>
}
   d5730:	4620      	mov	r0, r4
   d5732:	bd10      	pop	{r4, pc}
   d5734:	000d5e40 	.word	0x000d5e40

000d5738 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d5738:	2200      	movs	r2, #0
   d573a:	6840      	ldr	r0, [r0, #4]
   d573c:	4611      	mov	r1, r2
   d573e:	f7ff b847 	b.w	d47d0 <network_ready>

000d5742 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5742:	2200      	movs	r2, #0
   d5744:	6840      	ldr	r0, [r0, #4]
   d5746:	4611      	mov	r1, r2
   d5748:	f7ff b862 	b.w	d4810 <network_listening>

000d574c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d574c:	2200      	movs	r2, #0
   d574e:	6840      	ldr	r0, [r0, #4]
   d5750:	4611      	mov	r1, r2
   d5752:	f7ff b86d 	b.w	d4830 <network_get_listen_timeout>

000d5756 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5756:	6840      	ldr	r0, [r0, #4]
   d5758:	2200      	movs	r2, #0
   d575a:	f7ff b861 	b.w	d4820 <network_set_listen_timeout>

000d575e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d575e:	6840      	ldr	r0, [r0, #4]
   d5760:	2200      	movs	r2, #0
   d5762:	f081 0101 	eor.w	r1, r1, #1
   d5766:	f7ff b84b 	b.w	d4800 <network_listen>

000d576a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d576a:	2300      	movs	r3, #0
   d576c:	6840      	ldr	r0, [r0, #4]
   d576e:	461a      	mov	r2, r3
   d5770:	4619      	mov	r1, r3
   d5772:	f7ff b83d 	b.w	d47f0 <network_off>

000d5776 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d5776:	2300      	movs	r3, #0
   d5778:	6840      	ldr	r0, [r0, #4]
   d577a:	461a      	mov	r2, r3
   d577c:	4619      	mov	r1, r3
   d577e:	f7ff b82f 	b.w	d47e0 <network_on>

000d5782 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d5782:	2200      	movs	r2, #0
   d5784:	6840      	ldr	r0, [r0, #4]
   d5786:	4611      	mov	r1, r2
   d5788:	f7ff b812 	b.w	d47b0 <network_connecting>

000d578c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d578c:	6840      	ldr	r0, [r0, #4]
   d578e:	2200      	movs	r2, #0
   d5790:	2102      	movs	r1, #2
   d5792:	f7ff b815 	b.w	d47c0 <network_disconnect>

000d5796 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d5796:	2300      	movs	r3, #0
   d5798:	6840      	ldr	r0, [r0, #4]
   d579a:	461a      	mov	r2, r3
   d579c:	f7ff b800 	b.w	d47a0 <network_connect>

000d57a0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d57a0:	4b02      	ldr	r3, [pc, #8]	; (d57ac <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d57a2:	2204      	movs	r2, #4
   d57a4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d57a6:	4a02      	ldr	r2, [pc, #8]	; (d57b0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d57a8:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d57aa:	4770      	bx	lr
   d57ac:	2003e7b4 	.word	0x2003e7b4
   d57b0:	000d5e68 	.word	0x000d5e68

000d57b4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d57b4:	2300      	movs	r3, #0
   d57b6:	6840      	ldr	r0, [r0, #4]
   d57b8:	461a      	mov	r2, r3
   d57ba:	f7fe bff1 	b.w	d47a0 <network_connect>

000d57be <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d57be:	6840      	ldr	r0, [r0, #4]
   d57c0:	2200      	movs	r2, #0
   d57c2:	2102      	movs	r1, #2
   d57c4:	f7fe bffc 	b.w	d47c0 <network_disconnect>

000d57c8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d57c8:	2200      	movs	r2, #0
   d57ca:	6840      	ldr	r0, [r0, #4]
   d57cc:	4611      	mov	r1, r2
   d57ce:	f7fe bfef 	b.w	d47b0 <network_connecting>

000d57d2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d57d2:	2200      	movs	r2, #0
   d57d4:	6840      	ldr	r0, [r0, #4]
   d57d6:	4611      	mov	r1, r2
   d57d8:	f7fe bffa 	b.w	d47d0 <network_ready>

000d57dc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d57dc:	2300      	movs	r3, #0
   d57de:	6840      	ldr	r0, [r0, #4]
   d57e0:	461a      	mov	r2, r3
   d57e2:	4619      	mov	r1, r3
   d57e4:	f7fe bffc 	b.w	d47e0 <network_on>

000d57e8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d57e8:	2300      	movs	r3, #0
   d57ea:	6840      	ldr	r0, [r0, #4]
   d57ec:	461a      	mov	r2, r3
   d57ee:	4619      	mov	r1, r3
   d57f0:	f7fe bffe 	b.w	d47f0 <network_off>

000d57f4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d57f4:	6840      	ldr	r0, [r0, #4]
   d57f6:	2200      	movs	r2, #0
   d57f8:	f081 0101 	eor.w	r1, r1, #1
   d57fc:	f7ff b800 	b.w	d4800 <network_listen>

000d5800 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5800:	6840      	ldr	r0, [r0, #4]
   d5802:	2200      	movs	r2, #0
   d5804:	f7ff b80c 	b.w	d4820 <network_set_listen_timeout>

000d5808 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5808:	2200      	movs	r2, #0
   d580a:	6840      	ldr	r0, [r0, #4]
   d580c:	4611      	mov	r1, r2
   d580e:	f7ff b80f 	b.w	d4830 <network_get_listen_timeout>

000d5812 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5812:	2200      	movs	r2, #0
   d5814:	6840      	ldr	r0, [r0, #4]
   d5816:	4611      	mov	r1, r2
   d5818:	f7fe bffa 	b.w	d4810 <network_listening>

000d581c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d581c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5820:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d5822:	b095      	sub	sp, #84	; 0x54
   d5824:	4616      	mov	r6, r2
   d5826:	460d      	mov	r5, r1
   d5828:	4607      	mov	r7, r0
    IPAddress addr;
   d582a:	f7ff fd9b 	bl	d5364 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d582e:	4621      	mov	r1, r4
   d5830:	2218      	movs	r2, #24
   d5832:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d5834:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5836:	f000 f939 	bl	d5aac <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d583a:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d583c:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5840:	4621      	mov	r1, r4
   d5842:	466b      	mov	r3, sp
   d5844:	aa0c      	add	r2, sp, #48	; 0x30
   d5846:	4630      	mov	r0, r6
   d5848:	f7fe fe36 	bl	d44b8 <netdb_getaddrinfo>
    if (!r) {
   d584c:	4604      	mov	r4, r0
   d584e:	2800      	cmp	r0, #0
   d5850:	d146      	bne.n	d58e0 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5852:	4602      	mov	r2, r0
   d5854:	2101      	movs	r1, #1
   d5856:	6868      	ldr	r0, [r5, #4]
   d5858:	f7fe ffba 	bl	d47d0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d585c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d585e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5860:	4622      	mov	r2, r4
   d5862:	6868      	ldr	r0, [r5, #4]
   d5864:	f7fe ffb4 	bl	d47d0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5868:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d586a:	4681      	mov	r9, r0
        bool ok = false;
   d586c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d586e:	2e00      	cmp	r6, #0
   d5870:	d036      	beq.n	d58e0 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d5872:	2900      	cmp	r1, #0
   d5874:	d134      	bne.n	d58e0 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5876:	6873      	ldr	r3, [r6, #4]
   d5878:	2b02      	cmp	r3, #2
   d587a:	d003      	beq.n	d5884 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d587c:	2b0a      	cmp	r3, #10
   d587e:	d00b      	beq.n	d5898 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5880:	69f6      	ldr	r6, [r6, #28]
   d5882:	e7f4      	b.n	d586e <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d5884:	f1b8 0f00 	cmp.w	r8, #0
   d5888:	d004      	beq.n	d5894 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d588a:	6971      	ldr	r1, [r6, #20]
   d588c:	4638      	mov	r0, r7
   d588e:	3104      	adds	r1, #4
   d5890:	f7ff fd95 	bl	d53be <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d5894:	4641      	mov	r1, r8
   d5896:	e7f3      	b.n	d5880 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5898:	f1b9 0f00 	cmp.w	r9, #0
   d589c:	d101      	bne.n	d58a2 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d589e:	4649      	mov	r1, r9
   d58a0:	e7ee      	b.n	d5880 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d58a2:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d58a4:	2210      	movs	r2, #16
   d58a6:	a801      	add	r0, sp, #4
   d58a8:	f000 f900 	bl	d5aac <memset>
                    a.v = 6;
   d58ac:	2306      	movs	r3, #6
   d58ae:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d58b2:	ad01      	add	r5, sp, #4
   d58b4:	f104 0308 	add.w	r3, r4, #8
   d58b8:	3418      	adds	r4, #24
   d58ba:	6818      	ldr	r0, [r3, #0]
   d58bc:	6859      	ldr	r1, [r3, #4]
   d58be:	462a      	mov	r2, r5
   d58c0:	c203      	stmia	r2!, {r0, r1}
   d58c2:	3308      	adds	r3, #8
   d58c4:	42a3      	cmp	r3, r4
   d58c6:	4615      	mov	r5, r2
   d58c8:	d1f7      	bne.n	d58ba <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d58ca:	a901      	add	r1, sp, #4
   d58cc:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d58ce:	ad07      	add	r5, sp, #28
   d58d0:	f7ff fd56 	bl	d5380 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d58d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d58d6:	1d3c      	adds	r4, r7, #4
   d58d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d58da:	682b      	ldr	r3, [r5, #0]
   d58dc:	7023      	strb	r3, [r4, #0]
   d58de:	e7de      	b.n	d589e <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d58e0:	9800      	ldr	r0, [sp, #0]
   d58e2:	f7fe fde1 	bl	d44a8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d58e6:	4638      	mov	r0, r7
   d58e8:	b015      	add	sp, #84	; 0x54
   d58ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d58f0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d58f0:	4b02      	ldr	r3, [pc, #8]	; (d58fc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d58f2:	4a03      	ldr	r2, [pc, #12]	; (d5900 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d58f4:	601a      	str	r2, [r3, #0]
   d58f6:	2200      	movs	r2, #0
   d58f8:	605a      	str	r2, [r3, #4]

} // spark
   d58fa:	4770      	bx	lr
   d58fc:	2003e7bc 	.word	0x2003e7bc
   d5900:	000d5e9c 	.word	0x000d5e9c

000d5904 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d5904:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d5906:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d5908:	d902      	bls.n	d5910 <pinAvailable+0xc>
    return false;
   d590a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d590c:	b002      	add	sp, #8
   d590e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d5910:	f1a0 030b 	sub.w	r3, r0, #11
   d5914:	2b02      	cmp	r3, #2
   d5916:	d81a      	bhi.n	d594e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d5918:	4c17      	ldr	r4, [pc, #92]	; (d5978 <pinAvailable+0x74>)
   d591a:	7821      	ldrb	r1, [r4, #0]
   d591c:	f3bf 8f5b 	dmb	ish
   d5920:	f011 0101 	ands.w	r1, r1, #1
   d5924:	d10b      	bne.n	d593e <pinAvailable+0x3a>
   d5926:	4620      	mov	r0, r4
   d5928:	9101      	str	r1, [sp, #4]
   d592a:	f7fe fbb8 	bl	d409e <__cxa_guard_acquire>
   d592e:	9901      	ldr	r1, [sp, #4]
   d5930:	b128      	cbz	r0, d593e <pinAvailable+0x3a>
   d5932:	4812      	ldr	r0, [pc, #72]	; (d597c <pinAvailable+0x78>)
   d5934:	f7ff f81a 	bl	d496c <_ZN8SPIClassC1E19hal_spi_interface_t>
   d5938:	4620      	mov	r0, r4
   d593a:	f7fe fbb5 	bl	d40a8 <__cxa_guard_release>
   d593e:	4b0f      	ldr	r3, [pc, #60]	; (d597c <pinAvailable+0x78>)
   d5940:	7818      	ldrb	r0, [r3, #0]
   d5942:	f7fe fec9 	bl	d46d8 <hal_spi_is_enabled>
   d5946:	2800      	cmp	r0, #0
   d5948:	d1df      	bne.n	d590a <pinAvailable+0x6>
  return true; // 'pin' is available
   d594a:	2001      	movs	r0, #1
   d594c:	e7de      	b.n	d590c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d594e:	2801      	cmp	r0, #1
   d5950:	d809      	bhi.n	d5966 <pinAvailable+0x62>
   d5952:	f000 f857 	bl	d5a04 <_Z19__fetch_global_Wirev>
   d5956:	2100      	movs	r1, #0
   d5958:	7c00      	ldrb	r0, [r0, #16]
   d595a:	f7fe fea5 	bl	d46a8 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d595e:	f080 0001 	eor.w	r0, r0, #1
   d5962:	b2c0      	uxtb	r0, r0
   d5964:	e7d2      	b.n	d590c <pinAvailable+0x8>
   d5966:	3809      	subs	r0, #9
   d5968:	2801      	cmp	r0, #1
   d596a:	d8ee      	bhi.n	d594a <pinAvailable+0x46>
   d596c:	f7ff fe4e 	bl	d560c <_Z22__fetch_global_Serial1v>
   d5970:	7c00      	ldrb	r0, [r0, #16]
   d5972:	f7fe fe61 	bl	d4638 <hal_usart_is_enabled>
   d5976:	e7f2      	b.n	d595e <pinAvailable+0x5a>
   d5978:	2003e7c4 	.word	0x2003e7c4
   d597c:	2003e7c8 	.word	0x2003e7c8

000d5980 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5980:	2823      	cmp	r0, #35	; 0x23
{
   d5982:	b538      	push	{r3, r4, r5, lr}
   d5984:	4604      	mov	r4, r0
   d5986:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5988:	d80a      	bhi.n	d59a0 <pinMode+0x20>
   d598a:	29ff      	cmp	r1, #255	; 0xff
   d598c:	d008      	beq.n	d59a0 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d598e:	f7ff ffb9 	bl	d5904 <pinAvailable>
   d5992:	b128      	cbz	r0, d59a0 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d5994:	4629      	mov	r1, r5
   d5996:	4620      	mov	r0, r4
}
   d5998:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d599c:	f7fe bd94 	b.w	d44c8 <HAL_Pin_Mode>
}
   d59a0:	bd38      	pop	{r3, r4, r5, pc}

000d59a2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d59a2:	b538      	push	{r3, r4, r5, lr}
   d59a4:	4604      	mov	r4, r0
   d59a6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d59a8:	f7fe fd96 	bl	d44d8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d59ac:	28ff      	cmp	r0, #255	; 0xff
   d59ae:	d010      	beq.n	d59d2 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d59b0:	2806      	cmp	r0, #6
   d59b2:	d804      	bhi.n	d59be <digitalWrite+0x1c>
   d59b4:	234d      	movs	r3, #77	; 0x4d
   d59b6:	fa23 f000 	lsr.w	r0, r3, r0
   d59ba:	07c3      	lsls	r3, r0, #31
   d59bc:	d409      	bmi.n	d59d2 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d59be:	4620      	mov	r0, r4
   d59c0:	f7ff ffa0 	bl	d5904 <pinAvailable>
   d59c4:	b128      	cbz	r0, d59d2 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d59c6:	4629      	mov	r1, r5
   d59c8:	4620      	mov	r0, r4
}
   d59ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d59ce:	f7fe bd8b 	b.w	d44e8 <HAL_GPIO_Write>
}
   d59d2:	bd38      	pop	{r3, r4, r5, pc}

000d59d4 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d59d4:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d59d6:	2300      	movs	r3, #0
   d59d8:	2520      	movs	r5, #32
   d59da:	8043      	strh	r3, [r0, #2]
   d59dc:	2314      	movs	r3, #20
{
   d59de:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d59e0:	8003      	strh	r3, [r0, #0]
   d59e2:	6085      	str	r5, [r0, #8]
   d59e4:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d59e6:	4906      	ldr	r1, [pc, #24]	; (d5a00 <_Z17acquireWireBufferv+0x2c>)
   d59e8:	4628      	mov	r0, r5
   d59ea:	f000 f83a 	bl	d5a62 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d59ee:	4904      	ldr	r1, [pc, #16]	; (d5a00 <_Z17acquireWireBufferv+0x2c>)
	};
   d59f0:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d59f2:	4628      	mov	r0, r5
   d59f4:	f000 f835 	bl	d5a62 <_ZnajRKSt9nothrow_t>
	};
   d59f8:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d59fa:	4620      	mov	r0, r4
   d59fc:	bd38      	pop	{r3, r4, r5, pc}
   d59fe:	bf00      	nop
   d5a00:	000d5ec8 	.word	0x000d5ec8

000d5a04 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5a04:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5a06:	4d0f      	ldr	r5, [pc, #60]	; (d5a44 <_Z19__fetch_global_Wirev+0x40>)
   d5a08:	7829      	ldrb	r1, [r5, #0]
   d5a0a:	f3bf 8f5b 	dmb	ish
   d5a0e:	f011 0401 	ands.w	r4, r1, #1
{
   d5a12:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5a14:	d113      	bne.n	d5a3e <_Z19__fetch_global_Wirev+0x3a>
   d5a16:	4628      	mov	r0, r5
   d5a18:	f7fe fb41 	bl	d409e <__cxa_guard_acquire>
   d5a1c:	b178      	cbz	r0, d5a3e <_Z19__fetch_global_Wirev+0x3a>
   d5a1e:	a801      	add	r0, sp, #4
   d5a20:	f7ff ffd8 	bl	d59d4 <_Z17acquireWireBufferv>
   d5a24:	aa01      	add	r2, sp, #4
   d5a26:	4621      	mov	r1, r4
   d5a28:	4807      	ldr	r0, [pc, #28]	; (d5a48 <_Z19__fetch_global_Wirev+0x44>)
   d5a2a:	f7ff fe73 	bl	d5714 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d5a2e:	4628      	mov	r0, r5
   d5a30:	f7fe fb3a 	bl	d40a8 <__cxa_guard_release>
   d5a34:	4a05      	ldr	r2, [pc, #20]	; (d5a4c <_Z19__fetch_global_Wirev+0x48>)
   d5a36:	4906      	ldr	r1, [pc, #24]	; (d5a50 <_Z19__fetch_global_Wirev+0x4c>)
   d5a38:	4803      	ldr	r0, [pc, #12]	; (d5a48 <_Z19__fetch_global_Wirev+0x44>)
   d5a3a:	f000 f80b 	bl	d5a54 <__aeabi_atexit>
	return wire;
}
   d5a3e:	4802      	ldr	r0, [pc, #8]	; (d5a48 <_Z19__fetch_global_Wirev+0x44>)
   d5a40:	b007      	add	sp, #28
   d5a42:	bd30      	pop	{r4, r5, pc}
   d5a44:	2003e7d8 	.word	0x2003e7d8
   d5a48:	2003e7dc 	.word	0x2003e7dc
   d5a4c:	2003e688 	.word	0x2003e688
   d5a50:	000d56bd 	.word	0x000d56bd

000d5a54 <__aeabi_atexit>:
   d5a54:	460b      	mov	r3, r1
   d5a56:	4601      	mov	r1, r0
   d5a58:	4618      	mov	r0, r3
   d5a5a:	f000 b80b 	b.w	d5a74 <__cxa_atexit>

000d5a5e <_ZdlPvj>:
   d5a5e:	f7fe bb1c 	b.w	d409a <_ZdlPv>

000d5a62 <_ZnajRKSt9nothrow_t>:
   d5a62:	f7fe bb18 	b.w	d4096 <_Znaj>

000d5a66 <_ZSt25__throw_bad_function_callv>:
   d5a66:	b508      	push	{r3, lr}
   d5a68:	f7fe ff2a 	bl	d48c0 <abort>

000d5a6c <atoi>:
   d5a6c:	220a      	movs	r2, #10
   d5a6e:	2100      	movs	r1, #0
   d5a70:	f000 b8fa 	b.w	d5c68 <strtol>

000d5a74 <__cxa_atexit>:
   d5a74:	b510      	push	{r4, lr}
   d5a76:	4c05      	ldr	r4, [pc, #20]	; (d5a8c <__cxa_atexit+0x18>)
   d5a78:	4613      	mov	r3, r2
   d5a7a:	b12c      	cbz	r4, d5a88 <__cxa_atexit+0x14>
   d5a7c:	460a      	mov	r2, r1
   d5a7e:	4601      	mov	r1, r0
   d5a80:	2002      	movs	r0, #2
   d5a82:	f3af 8000 	nop.w
   d5a86:	bd10      	pop	{r4, pc}
   d5a88:	4620      	mov	r0, r4
   d5a8a:	e7fc      	b.n	d5a86 <__cxa_atexit+0x12>
   d5a8c:	00000000 	.word	0x00000000

000d5a90 <memcpy>:
   d5a90:	440a      	add	r2, r1
   d5a92:	4291      	cmp	r1, r2
   d5a94:	f100 33ff 	add.w	r3, r0, #4294967295
   d5a98:	d100      	bne.n	d5a9c <memcpy+0xc>
   d5a9a:	4770      	bx	lr
   d5a9c:	b510      	push	{r4, lr}
   d5a9e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d5aa2:	f803 4f01 	strb.w	r4, [r3, #1]!
   d5aa6:	4291      	cmp	r1, r2
   d5aa8:	d1f9      	bne.n	d5a9e <memcpy+0xe>
   d5aaa:	bd10      	pop	{r4, pc}

000d5aac <memset>:
   d5aac:	4402      	add	r2, r0
   d5aae:	4603      	mov	r3, r0
   d5ab0:	4293      	cmp	r3, r2
   d5ab2:	d100      	bne.n	d5ab6 <memset+0xa>
   d5ab4:	4770      	bx	lr
   d5ab6:	f803 1b01 	strb.w	r1, [r3], #1
   d5aba:	e7f9      	b.n	d5ab0 <memset+0x4>

000d5abc <srand>:
   d5abc:	b538      	push	{r3, r4, r5, lr}
   d5abe:	4b0d      	ldr	r3, [pc, #52]	; (d5af4 <srand+0x38>)
   d5ac0:	681d      	ldr	r5, [r3, #0]
   d5ac2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d5ac4:	4604      	mov	r4, r0
   d5ac6:	b97b      	cbnz	r3, d5ae8 <srand+0x2c>
   d5ac8:	2018      	movs	r0, #24
   d5aca:	f7fe fee1 	bl	d4890 <malloc>
   d5ace:	4a0a      	ldr	r2, [pc, #40]	; (d5af8 <srand+0x3c>)
   d5ad0:	4b0a      	ldr	r3, [pc, #40]	; (d5afc <srand+0x40>)
   d5ad2:	63a8      	str	r0, [r5, #56]	; 0x38
   d5ad4:	e9c0 2300 	strd	r2, r3, [r0]
   d5ad8:	4b09      	ldr	r3, [pc, #36]	; (d5b00 <srand+0x44>)
   d5ada:	6083      	str	r3, [r0, #8]
   d5adc:	230b      	movs	r3, #11
   d5ade:	8183      	strh	r3, [r0, #12]
   d5ae0:	2201      	movs	r2, #1
   d5ae2:	2300      	movs	r3, #0
   d5ae4:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d5ae8:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d5aea:	2200      	movs	r2, #0
   d5aec:	611c      	str	r4, [r3, #16]
   d5aee:	615a      	str	r2, [r3, #20]
   d5af0:	bd38      	pop	{r3, r4, r5, pc}
   d5af2:	bf00      	nop
   d5af4:	2003e624 	.word	0x2003e624
   d5af8:	abcd330e 	.word	0xabcd330e
   d5afc:	e66d1234 	.word	0xe66d1234
   d5b00:	0005deec 	.word	0x0005deec

000d5b04 <strcmp>:
   d5b04:	f810 2b01 	ldrb.w	r2, [r0], #1
   d5b08:	f811 3b01 	ldrb.w	r3, [r1], #1
   d5b0c:	2a01      	cmp	r2, #1
   d5b0e:	bf28      	it	cs
   d5b10:	429a      	cmpcs	r2, r3
   d5b12:	d0f7      	beq.n	d5b04 <strcmp>
   d5b14:	1ad0      	subs	r0, r2, r3
   d5b16:	4770      	bx	lr

000d5b18 <strcpy>:
   d5b18:	4603      	mov	r3, r0
   d5b1a:	f811 2b01 	ldrb.w	r2, [r1], #1
   d5b1e:	f803 2b01 	strb.w	r2, [r3], #1
   d5b22:	2a00      	cmp	r2, #0
   d5b24:	d1f9      	bne.n	d5b1a <strcpy+0x2>
   d5b26:	4770      	bx	lr

000d5b28 <strdup>:
   d5b28:	4b02      	ldr	r3, [pc, #8]	; (d5b34 <strdup+0xc>)
   d5b2a:	4601      	mov	r1, r0
   d5b2c:	6818      	ldr	r0, [r3, #0]
   d5b2e:	f000 b803 	b.w	d5b38 <_strdup_r>
   d5b32:	bf00      	nop
   d5b34:	2003e624 	.word	0x2003e624

000d5b38 <_strdup_r>:
   d5b38:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5b3a:	4604      	mov	r4, r0
   d5b3c:	4608      	mov	r0, r1
   d5b3e:	460d      	mov	r5, r1
   d5b40:	f000 f80f 	bl	d5b62 <strlen>
   d5b44:	1c42      	adds	r2, r0, #1
   d5b46:	4611      	mov	r1, r2
   d5b48:	4620      	mov	r0, r4
   d5b4a:	9201      	str	r2, [sp, #4]
   d5b4c:	f7fe fec0 	bl	d48d0 <_malloc_r>
   d5b50:	4604      	mov	r4, r0
   d5b52:	b118      	cbz	r0, d5b5c <_strdup_r+0x24>
   d5b54:	9a01      	ldr	r2, [sp, #4]
   d5b56:	4629      	mov	r1, r5
   d5b58:	f7ff ff9a 	bl	d5a90 <memcpy>
   d5b5c:	4620      	mov	r0, r4
   d5b5e:	b003      	add	sp, #12
   d5b60:	bd30      	pop	{r4, r5, pc}

000d5b62 <strlen>:
   d5b62:	4603      	mov	r3, r0
   d5b64:	f813 2b01 	ldrb.w	r2, [r3], #1
   d5b68:	2a00      	cmp	r2, #0
   d5b6a:	d1fb      	bne.n	d5b64 <strlen+0x2>
   d5b6c:	1a18      	subs	r0, r3, r0
   d5b6e:	3801      	subs	r0, #1
   d5b70:	4770      	bx	lr
	...

000d5b74 <_strtol_l.isra.0>:
   d5b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5b78:	4e3a      	ldr	r6, [pc, #232]	; (d5c64 <_strtol_l.isra.0+0xf0>)
   d5b7a:	4686      	mov	lr, r0
   d5b7c:	468c      	mov	ip, r1
   d5b7e:	4660      	mov	r0, ip
   d5b80:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d5b84:	5da5      	ldrb	r5, [r4, r6]
   d5b86:	f015 0508 	ands.w	r5, r5, #8
   d5b8a:	d1f8      	bne.n	d5b7e <_strtol_l.isra.0+0xa>
   d5b8c:	2c2d      	cmp	r4, #45	; 0x2d
   d5b8e:	d133      	bne.n	d5bf8 <_strtol_l.isra.0+0x84>
   d5b90:	f89c 4000 	ldrb.w	r4, [ip]
   d5b94:	f04f 0801 	mov.w	r8, #1
   d5b98:	f100 0c02 	add.w	ip, r0, #2
   d5b9c:	2b00      	cmp	r3, #0
   d5b9e:	d05c      	beq.n	d5c5a <_strtol_l.isra.0+0xe6>
   d5ba0:	2b10      	cmp	r3, #16
   d5ba2:	d10c      	bne.n	d5bbe <_strtol_l.isra.0+0x4a>
   d5ba4:	2c30      	cmp	r4, #48	; 0x30
   d5ba6:	d10a      	bne.n	d5bbe <_strtol_l.isra.0+0x4a>
   d5ba8:	f89c 0000 	ldrb.w	r0, [ip]
   d5bac:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d5bb0:	2858      	cmp	r0, #88	; 0x58
   d5bb2:	d14d      	bne.n	d5c50 <_strtol_l.isra.0+0xdc>
   d5bb4:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d5bb8:	2310      	movs	r3, #16
   d5bba:	f10c 0c02 	add.w	ip, ip, #2
   d5bbe:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   d5bc2:	3f01      	subs	r7, #1
   d5bc4:	2600      	movs	r6, #0
   d5bc6:	fbb7 f9f3 	udiv	r9, r7, r3
   d5bca:	4630      	mov	r0, r6
   d5bcc:	fb03 7a19 	mls	sl, r3, r9, r7
   d5bd0:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   d5bd4:	2d09      	cmp	r5, #9
   d5bd6:	d818      	bhi.n	d5c0a <_strtol_l.isra.0+0x96>
   d5bd8:	462c      	mov	r4, r5
   d5bda:	42a3      	cmp	r3, r4
   d5bdc:	dd24      	ble.n	d5c28 <_strtol_l.isra.0+0xb4>
   d5bde:	1c75      	adds	r5, r6, #1
   d5be0:	d007      	beq.n	d5bf2 <_strtol_l.isra.0+0x7e>
   d5be2:	4581      	cmp	r9, r0
   d5be4:	d31d      	bcc.n	d5c22 <_strtol_l.isra.0+0xae>
   d5be6:	d101      	bne.n	d5bec <_strtol_l.isra.0+0x78>
   d5be8:	45a2      	cmp	sl, r4
   d5bea:	db1a      	blt.n	d5c22 <_strtol_l.isra.0+0xae>
   d5bec:	fb00 4003 	mla	r0, r0, r3, r4
   d5bf0:	2601      	movs	r6, #1
   d5bf2:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d5bf6:	e7eb      	b.n	d5bd0 <_strtol_l.isra.0+0x5c>
   d5bf8:	2c2b      	cmp	r4, #43	; 0x2b
   d5bfa:	bf08      	it	eq
   d5bfc:	f89c 4000 	ldrbeq.w	r4, [ip]
   d5c00:	46a8      	mov	r8, r5
   d5c02:	bf08      	it	eq
   d5c04:	f100 0c02 	addeq.w	ip, r0, #2
   d5c08:	e7c8      	b.n	d5b9c <_strtol_l.isra.0+0x28>
   d5c0a:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   d5c0e:	2d19      	cmp	r5, #25
   d5c10:	d801      	bhi.n	d5c16 <_strtol_l.isra.0+0xa2>
   d5c12:	3c37      	subs	r4, #55	; 0x37
   d5c14:	e7e1      	b.n	d5bda <_strtol_l.isra.0+0x66>
   d5c16:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   d5c1a:	2d19      	cmp	r5, #25
   d5c1c:	d804      	bhi.n	d5c28 <_strtol_l.isra.0+0xb4>
   d5c1e:	3c57      	subs	r4, #87	; 0x57
   d5c20:	e7db      	b.n	d5bda <_strtol_l.isra.0+0x66>
   d5c22:	f04f 36ff 	mov.w	r6, #4294967295
   d5c26:	e7e4      	b.n	d5bf2 <_strtol_l.isra.0+0x7e>
   d5c28:	1c73      	adds	r3, r6, #1
   d5c2a:	d106      	bne.n	d5c3a <_strtol_l.isra.0+0xc6>
   d5c2c:	2322      	movs	r3, #34	; 0x22
   d5c2e:	f8ce 3000 	str.w	r3, [lr]
   d5c32:	4638      	mov	r0, r7
   d5c34:	b942      	cbnz	r2, d5c48 <_strtol_l.isra.0+0xd4>
   d5c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d5c3a:	f1b8 0f00 	cmp.w	r8, #0
   d5c3e:	d000      	beq.n	d5c42 <_strtol_l.isra.0+0xce>
   d5c40:	4240      	negs	r0, r0
   d5c42:	2a00      	cmp	r2, #0
   d5c44:	d0f7      	beq.n	d5c36 <_strtol_l.isra.0+0xc2>
   d5c46:	b10e      	cbz	r6, d5c4c <_strtol_l.isra.0+0xd8>
   d5c48:	f10c 31ff 	add.w	r1, ip, #4294967295
   d5c4c:	6011      	str	r1, [r2, #0]
   d5c4e:	e7f2      	b.n	d5c36 <_strtol_l.isra.0+0xc2>
   d5c50:	2430      	movs	r4, #48	; 0x30
   d5c52:	2b00      	cmp	r3, #0
   d5c54:	d1b3      	bne.n	d5bbe <_strtol_l.isra.0+0x4a>
   d5c56:	2308      	movs	r3, #8
   d5c58:	e7b1      	b.n	d5bbe <_strtol_l.isra.0+0x4a>
   d5c5a:	2c30      	cmp	r4, #48	; 0x30
   d5c5c:	d0a4      	beq.n	d5ba8 <_strtol_l.isra.0+0x34>
   d5c5e:	230a      	movs	r3, #10
   d5c60:	e7ad      	b.n	d5bbe <_strtol_l.isra.0+0x4a>
   d5c62:	bf00      	nop
   d5c64:	000d5eca 	.word	0x000d5eca

000d5c68 <strtol>:
   d5c68:	4613      	mov	r3, r2
   d5c6a:	460a      	mov	r2, r1
   d5c6c:	4601      	mov	r1, r0
   d5c6e:	4802      	ldr	r0, [pc, #8]	; (d5c78 <strtol+0x10>)
   d5c70:	6800      	ldr	r0, [r0, #0]
   d5c72:	f7ff bf7f 	b.w	d5b74 <_strtol_l.isra.0>
   d5c76:	bf00      	nop
   d5c78:	2003e624 	.word	0x2003e624

000d5c7c <dynalib_user>:
   d5c7c:	000d401d 000d4059 000d4081 000d4085     .@..Y@...@...@..
   d5c8c:	00000000 72617453 68742074 69532065     ....Start the Si
   d5c9c:	206e6572 74732728 27747261 69540029     ren ('start').Ti
   d5cac:	2072656d 676e654c 28206874 65746e69     mer Length (inte
   d5cbc:	20726567 6d206e69 73002973 74726174     ger in ms).start
   d5ccc:	6f727700 632d676e 616d6d6f 7300646e     .wrong-command.s
   d5cdc:	6e657269 6464612d 73736572 65006465     iren-addressed.e
   d5cec:	6c616373 2d657461 65726973 7365006e     scalate-siren.es
   d5cfc:	616c6163 61006574 6d72616c 756f732d     calate.alarm-sou
   d5d0c:	6465646e 736f7000 76697469 6e692d65     nded.positive-in
   d5d1c:	65676574 6c702d72 65736165 6d697400     teger-please.tim
   d5d2c:	6c2d7265 74676e65 70752d68 65746164     er-length-update
   d5d3c:	00000064                                d...

000d5d40 <_ZTV5Timer>:
	...
   d5d48:	000d4219 000d4261 000d4155              .B..aB..UA..

000d5d54 <_ZTVN5spark13EthernetClassE>:
	...
   d5d5c:	000d494f 000d4945 000d493b 000d4931     OI..EI..;I..1I..
   d5d6c:	000d4925 000d4919 000d490d 000d4905     %I...I...I...I..
   d5d7c:	000d48fb 000d48f1 000d581d 00707061     .H...H...X..app.
   d5d8c:	252d5925 64252d6d 3a482554 253a4d25     %Y-%m-%dT%H:%M:%
   d5d9c:	007a2553 74637361 00656d69              S%z.asctime.

000d5da8 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d5db0:	000d4d61 000d4d67 000d4da5 000d4d75     aM..gM...M..uM..
   d5dc0:	000d4d63                                cM..

000d5dc4 <_ZTV9IPAddress>:
	...
   d5dcc:	000d5301 000d52f1 000d52f3              .S...R...R..

000d5dd8 <_ZTV9USBSerial>:
	...
   d5de0:	000d53d7 000d543f 000d5415 000d4b39     .S..?T...T..9K..
   d5df0:	000d5407 000d53d9 000d53e9 000d5439     .T...S...S..9T..
   d5e00:	000d53f9 000d53d3                       .S...S..

000d5e08 <_ZTV11USARTSerial>:
	...
   d5e10:	000d5565 000d55d1 000d55a9 000d4b39     eU...U...U..9K..
   d5e20:	000d5579 000d5595 000d5587 000d55a3     yU...U...U...U..
   d5e30:	000d5567 000d556b                       gU..kU..

000d5e38 <_ZTV7TwoWire>:
	...
   d5e40:	000d56bd 000d5707 000d56df 000d56bf     .V...W...V...V..
   d5e50:	000d56e7 000d56ef 000d56f7 000d56ff     .V...V...V...V..

000d5e60 <_ZTVN5spark9WiFiClassE>:
	...
   d5e68:	000d5797 000d578d 000d5783 000d5739     .W...W...W..9W..
   d5e78:	000d5777 000d576b 000d575f 000d5757     wW..kW.._W..WW..
   d5e88:	000d574d 000d5743 000d581d              MW..CW...X..

000d5e94 <_ZTVN5spark12NetworkClassE>:
	...
   d5e9c:	000d57b5 000d57bf 000d57c9 000d57d3     .W...W...W...W..
   d5eac:	000d57dd 000d57e9 000d57f5 000d5801     .W...W...W...X..
   d5ebc:	000d5809 000d5813 000d581d              .X...X...X..

000d5ec8 <_ZSt7nothrow>:
	...

000d5ec9 <_ctype_>:
   d5ec9:	20202000 20202020 28282020 20282828     .         ((((( 
   d5ed9:	20202020 20202020 20202020 20202020                     
   d5ee9:	10108820 10101010 10101010 10101010      ...............
   d5ef9:	04040410 04040404 10040404 10101010     ................
   d5f09:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d5f19:	01010101 01010101 01010101 10101010     ................
   d5f29:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d5f39:	02020202 02020202 02020202 10101010     ................
   d5f49:	00000020 00000000 00000000 00000000      ...............
	...

000d5fca <link_const_variable_data_end>:
	...

000d5fcc <link_constructors_location>:
   d5fcc:	000d440d 	.word	0x000d440d
   d5fd0:	000d4959 	.word	0x000d4959
   d5fd4:	000d49a1 	.word	0x000d49a1
   d5fd8:	000d4b11 	.word	0x000d4b11
   d5fdc:	000d4bcd 	.word	0x000d4bcd
   d5fe0:	000d4bdd 	.word	0x000d4bdd
   d5fe4:	000d4c21 	.word	0x000d4c21
   d5fe8:	000d57a1 	.word	0x000d57a1
   d5fec:	000d58f1 	.word	0x000d58f1
