
c:/School/CO-OP/BraveSensor-Production-Firmware/target/2.0.1/argon/BraveSensor-Production-Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003734  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d7750  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000070  2003e650  000d7754  0001e650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000130  2003e6c0  2003e6c0  0002e6c0  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d77c4  000d77c4  000277c4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d77ec  000d77ec  000277ec  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001621d3  00000000  00000000  000277f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00017fcd  00000000  00000000  001899c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002cecd  00000000  00000000  001a1990  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000029b8  00000000  00000000  001ce85d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00007af0  00000000  00000000  001d1215  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003983b  00000000  00000000  001d8d05  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0003a59e  00000000  00000000  00212540  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010b491  00000000  00000000  0024cade  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000071a0  00000000  00000000  00357f70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
   d4022:	b508      	push	{r3, lr}
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f003 f823 	bl	d7078 <memcpy>
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f003 f845 	bl	d70c8 <memset>
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e650 	.word	0x2003e650
   d4048:	000d7754 	.word	0x000d7754
   d404c:	2003e6c0 	.word	0x2003e6c0
   d4050:	2003e6c0 	.word	0x2003e6c0
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
   d4058:	b570      	push	{r4, r5, r6, lr}
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d405e:	f001 ff79 	bl	d5f54 <module_user_init_hook>
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
   d406c:	bd70      	pop	{r4, r5, r6, pc}
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d772c 	.word	0x000d772c
   d407c:	000d7750 	.word	0x000d7750

000d4080 <module_user_setup>:
   d4080:	f000 b97e 	b.w	d4380 <setup>

000d4084 <module_user_loop>:
   d4084:	b508      	push	{r3, lr}
   d4086:	f000 f939 	bl	d42fc <loop>
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d408e:	f001 bf23 	b.w	d5ed8 <_post_loop>

000d4092 <_Znwj>:
   d4092:	f000 bcfd 	b.w	d4a90 <malloc>

000d4096 <_Znaj>:
   d4096:	f000 bcfb 	b.w	d4a90 <malloc>

000d409a <_ZdlPv>:
   d409a:	f000 bd01 	b.w	d4aa0 <free>
	...

000d40a0 <__cxa_pure_virtual>:
   d40a0:	b508      	push	{r3, lr}
   d40a2:	4a03      	ldr	r2, [pc, #12]	; (d40b0 <__cxa_pure_virtual+0x10>)
   d40a4:	2100      	movs	r1, #0
   d40a6:	200c      	movs	r0, #12
   d40a8:	f000 fc2e 	bl	d4908 <panic_>
   d40ac:	e7fe      	b.n	d40ac <__cxa_pure_virtual+0xc>
   d40ae:	bf00      	nop
   d40b0:	000d4659 	.word	0x000d4659

000d40b4 <__cxa_guard_acquire>:
   d40b4:	7800      	ldrb	r0, [r0, #0]
   d40b6:	fab0 f080 	clz	r0, r0
   d40ba:	0940      	lsrs	r0, r0, #5
   d40bc:	4770      	bx	lr

000d40be <__cxa_guard_release>:
   d40be:	2301      	movs	r3, #1
   d40c0:	7003      	strb	r3, [r0, #0]
   d40c2:	4770      	bx	lr

000d40c4 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   d40c4:	4770      	bx	lr

000d40c6 <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   d40c6:	6a00      	ldr	r0, [r0, #32]
   d40c8:	6803      	ldr	r3, [r0, #0]
   d40ca:	68db      	ldr	r3, [r3, #12]
   d40cc:	4718      	bx	r3
	...

000d40d0 <_Z16interruptHandlerv>:
    while(1); // placeholder
}

// callback function to change variable that allows buttonPress to be called
void interruptHandler() {
    buttonPressed = true;
   d40d0:	4b01      	ldr	r3, [pc, #4]	; (d40d8 <_Z16interruptHandlerv+0x8>)
   d40d2:	2201      	movs	r2, #1
   d40d4:	701a      	strb	r2, [r3, #0]
}
   d40d6:	4770      	bx	lr
   d40d8:	2003e6c5 	.word	0x2003e6c5

000d40dc <_Z12timerHandlerv>:

// callback function to change variable that allows timerSurpassed to be called
void timerHandler() {
    timerPassed = true;
   d40dc:	4b01      	ldr	r3, [pc, #4]	; (d40e4 <_Z12timerHandlerv+0x8>)
   d40de:	2201      	movs	r2, #1
   d40e0:	701a      	strb	r2, [r3, #0]
}
   d40e2:	4770      	bx	lr
   d40e4:	2003e708 	.word	0x2003e708

000d40e8 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d40e8:	6803      	ldr	r3, [r0, #0]
   d40ea:	4718      	bx	r3

000d40ec <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	  switch (__op)
   d40ec:	2a01      	cmp	r2, #1
   d40ee:	d003      	beq.n	d40f8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xc>
   d40f0:	2a02      	cmp	r2, #2
   d40f2:	d003      	beq.n	d40fc <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x10>
	}
   d40f4:	2000      	movs	r0, #0
   d40f6:	4770      	bx	lr
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d40f8:	6001      	str	r1, [r0, #0]
	      break;
   d40fa:	e7fb      	b.n	d40f4 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d40fc:	680b      	ldr	r3, [r1, #0]
   d40fe:	6003      	str	r3, [r0, #0]
	}
   d4100:	e7f8      	b.n	d40f4 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>

000d4102 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   d4102:	6943      	ldr	r3, [r0, #20]
   d4104:	b113      	cbz	r3, d410c <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4106:	6983      	ldr	r3, [r0, #24]
   d4108:	300c      	adds	r0, #12
   d410a:	4718      	bx	r3
            callback();
        }
    }
   d410c:	4770      	bx	lr

000d410e <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   d410e:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d4110:	2100      	movs	r1, #0
   d4112:	4604      	mov	r4, r0
   d4114:	4608      	mov	r0, r1
   d4116:	f000 fab7 	bl	d4688 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d411a:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   d411c:	4620      	mov	r0, r4
   d411e:	a901      	add	r1, sp, #4
            void* id = nullptr;
   d4120:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   d4122:	f000 fac9 	bl	d46b8 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   d4126:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   d4128:	b10c      	cbz	r4, d412e <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   d412a:	2301      	movs	r3, #1
   d412c:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d412e:	2100      	movs	r1, #0
   d4130:	2001      	movs	r0, #1
   d4132:	f000 faa9 	bl	d4688 <os_thread_scheduling>
            }
        }
        if (t) {
   d4136:	b12c      	cbz	r4, d4144 <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   d4138:	6823      	ldr	r3, [r4, #0]
   d413a:	4620      	mov	r0, r4
   d413c:	689b      	ldr	r3, [r3, #8]
   d413e:	4798      	blx	r3
            t->running = false;
   d4140:	2300      	movs	r3, #0
   d4142:	7123      	strb	r3, [r4, #4]
        }
    }
   d4144:	b002      	add	sp, #8
   d4146:	bd10      	pop	{r4, pc}

000d4148 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4148:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d414a:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d414c:	4604      	mov	r4, r0
          _M_dispose();
   d414e:	689b      	ldr	r3, [r3, #8]
   d4150:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4152:	68a3      	ldr	r3, [r4, #8]
   d4154:	3b01      	subs	r3, #1
   d4156:	60a3      	str	r3, [r4, #8]
   d4158:	b92b      	cbnz	r3, d4166 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d415a:	6823      	ldr	r3, [r4, #0]
   d415c:	4620      	mov	r0, r4
   d415e:	68db      	ldr	r3, [r3, #12]
        }
    }
   d4160:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d4164:	4718      	bx	r3
    }
   d4166:	bd10      	pop	{r4, pc}

000d4168 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d4168:	4b0a      	ldr	r3, [pc, #40]	; (d4194 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   d416a:	b510      	push	{r4, lr}
   d416c:	4604      	mov	r4, r0
   d416e:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d4170:	f000 ffe8 	bl	d5144 <_ZN5spark10LogManager8instanceEv>
   d4174:	4621      	mov	r1, r4
   d4176:	f001 f9ea 	bl	d554e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   d417a:	f002 fa8f 	bl	d669c <_Z16_fetch_usbserialv>
   d417e:	f002 fa81 	bl	d6684 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   d4182:	4620      	mov	r0, r4
   d4184:	4b04      	ldr	r3, [pc, #16]	; (d4198 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   d4186:	f840 3b04 	str.w	r3, [r0], #4
   d418a:	f001 f8cd 	bl	d5328 <_ZN5spark6detail9LogFilterD1Ev>
    }
   d418e:	4620      	mov	r0, r4
   d4190:	bd10      	pop	{r4, pc}
   d4192:	bf00      	nop
   d4194:	000d73b0 	.word	0x000d73b0
   d4198:	000d7398 	.word	0x000d7398

000d419c <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   d419c:	b510      	push	{r4, lr}
   d419e:	4604      	mov	r4, r0
    }
   d41a0:	f7ff ffe2 	bl	d4168 <_ZN5spark16SerialLogHandlerD1Ev>
   d41a4:	4620      	mov	r0, r4
   d41a6:	2124      	movs	r1, #36	; 0x24
   d41a8:	f002 ff4f 	bl	d704a <_ZdlPvj>
   d41ac:	4620      	mov	r0, r4
   d41ae:	bd10      	pop	{r4, pc}

000d41b0 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d41b0:	b510      	push	{r4, lr}
      if (_M_manager)
   d41b2:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d41b4:	4604      	mov	r4, r0
      if (_M_manager)
   d41b6:	b113      	cbz	r3, d41be <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d41b8:	2203      	movs	r2, #3
   d41ba:	4601      	mov	r1, r0
   d41bc:	4798      	blx	r3
    }
   d41be:	4620      	mov	r0, r4
   d41c0:	bd10      	pop	{r4, pc}

000d41c2 <_ZN5Timer5_stopEjb>:
    bool _stop(unsigned block, bool fromISR=false)
   d41c2:	b507      	push	{r0, r1, r2, lr}
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   d41c4:	6880      	ldr	r0, [r0, #8]
   d41c6:	2300      	movs	r3, #0
   d41c8:	b138      	cbz	r0, d41da <_ZN5Timer5_stopEjb+0x18>
   d41ca:	e9cd 1300 	strd	r1, r3, [sp]
   d41ce:	2102      	movs	r1, #2
   d41d0:	f000 fa7a 	bl	d46c8 <os_timer_change>
   d41d4:	fab0 f080 	clz	r0, r0
   d41d8:	0940      	lsrs	r0, r0, #5
    }
   d41da:	b003      	add	sp, #12
   d41dc:	f85d fb04 	ldr.w	pc, [sp], #4

000d41e0 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   d41e0:	b538      	push	{r3, r4, r5, lr}
   d41e2:	4b10      	ldr	r3, [pc, #64]	; (d4224 <_ZN5TimerD1Ev+0x44>)
   d41e4:	6003      	str	r3, [r0, #0]
        if (handle) {
   d41e6:	6883      	ldr	r3, [r0, #8]
    virtual ~Timer() {
   d41e8:	4604      	mov	r4, r0
        if (handle) {
   d41ea:	b1a3      	cbz	r3, d4216 <_ZN5TimerD1Ev+0x36>
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d41ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d41f0:	2200      	movs	r2, #0
   d41f2:	f7ff ffe6 	bl	d41c2 <_ZN5Timer5_stopEjb>
            os_timer_set_id(handle, nullptr);
   d41f6:	68a0      	ldr	r0, [r4, #8]
   d41f8:	2100      	movs	r1, #0
   d41fa:	f000 fa8d 	bl	d4718 <os_timer_set_id>
            while (running) {
   d41fe:	7923      	ldrb	r3, [r4, #4]
   d4200:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d4204:	b113      	cbz	r3, d420c <_ZN5TimerD1Ev+0x2c>
                os_thread_yield();
   d4206:	f000 fa37 	bl	d4678 <os_thread_yield>
            while (running) {
   d420a:	e7f8      	b.n	d41fe <_ZN5TimerD1Ev+0x1e>
            os_timer_destroy(handle, nullptr);
   d420c:	68a0      	ldr	r0, [r4, #8]
   d420e:	4629      	mov	r1, r5
   d4210:	f000 fa4a 	bl	d46a8 <os_timer_destroy>
            handle = nullptr;
   d4214:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   d4216:	f104 000c 	add.w	r0, r4, #12
   d421a:	f7ff ffc9 	bl	d41b0 <_ZNSt14_Function_baseD1Ev>
    }
   d421e:	4620      	mov	r0, r4
   d4220:	bd38      	pop	{r3, r4, r5, pc}
   d4222:	bf00      	nop
   d4224:	000d7384 	.word	0x000d7384

000d4228 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   d4228:	b510      	push	{r4, lr}
   d422a:	4604      	mov	r4, r0
    }
   d422c:	f7ff ffd8 	bl	d41e0 <_ZN5TimerD1Ev>
   d4230:	4620      	mov	r0, r4
   d4232:	211c      	movs	r1, #28
   d4234:	f002 ff09 	bl	d704a <_ZdlPvj>
   d4238:	4620      	mov	r0, r4
   d423a:	bd10      	pop	{r4, pc}

000d423c <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d423c:	b40e      	push	{r1, r2, r3}
   d423e:	b510      	push	{r4, lr}
   d4240:	b08d      	sub	sp, #52	; 0x34
   d4242:	aa0f      	add	r2, sp, #60	; 0x3c
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
   d4244:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::info(const char *fmt, ...) const {
   d4246:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d424a:	9203      	str	r2, [sp, #12]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d424c:	2300      	movs	r3, #0
   d424e:	2020      	movs	r0, #32
   d4250:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4254:	e9cd 4200 	strd	r4, r2, [sp]
   d4258:	201e      	movs	r0, #30
   d425a:	aa04      	add	r2, sp, #16
   d425c:	f000 fb5c 	bl	d4918 <log_message_v>
}
   d4260:	b00d      	add	sp, #52	; 0x34
   d4262:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4266:	b003      	add	sp, #12
   d4268:	4770      	bx	lr
	...

000d426c <_Z11buttonPressv>:
void buttonPress() {
   d426c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    Log.info("Button pressed!");
   d426e:	490d      	ldr	r1, [pc, #52]	; (d42a4 <_Z11buttonPressv+0x38>)
   d4270:	480d      	ldr	r0, [pc, #52]	; (d42a8 <_Z11buttonPressv+0x3c>)
   d4272:	f7ff ffe3 	bl	d423c <_ZNK5spark6Logger4infoEPKcz>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d4276:	4b0d      	ldr	r3, [pc, #52]	; (d42ac <_Z11buttonPressv+0x40>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4278:	490d      	ldr	r1, [pc, #52]	; (d42b0 <_Z11buttonPressv+0x44>)
   d427a:	781b      	ldrb	r3, [r3, #0]
   d427c:	f88d 3000 	strb.w	r3, [sp]
   d4280:	a802      	add	r0, sp, #8
   d4282:	233c      	movs	r3, #60	; 0x3c
   d4284:	2200      	movs	r2, #0
   d4286:	f001 ffc1 	bl	d620c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d428a:	9803      	ldr	r0, [sp, #12]
   d428c:	b128      	cbz	r0, d429a <_Z11buttonPressv+0x2e>
      if (--_M_use_count == 0)
   d428e:	6843      	ldr	r3, [r0, #4]
   d4290:	3b01      	subs	r3, #1
   d4292:	6043      	str	r3, [r0, #4]
   d4294:	b90b      	cbnz	r3, d429a <_Z11buttonPressv+0x2e>
   d4296:	f7ff ff57 	bl	d4148 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
    noTone(BUZZER);
   d429a:	2006      	movs	r0, #6
   d429c:	f002 fa6b 	bl	d6776 <noTone>
    while(1); // placeholder
   d42a0:	e7fe      	b.n	d42a0 <_Z11buttonPressv+0x34>
   d42a2:	bf00      	nop
   d42a4:	000d7328 	.word	0x000d7328
   d42a8:	2003e734 	.word	0x2003e734
   d42ac:	2003e6c4 	.word	0x2003e6c4
   d42b0:	000d7338 	.word	0x000d7338

000d42b4 <_Z14timerSurpassedv>:
void timerSurpassed() {
   d42b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    Log.info("Timer surpassed!");
   d42b6:	490d      	ldr	r1, [pc, #52]	; (d42ec <_Z14timerSurpassedv+0x38>)
   d42b8:	480d      	ldr	r0, [pc, #52]	; (d42f0 <_Z14timerSurpassedv+0x3c>)
   d42ba:	f7ff ffbf 	bl	d423c <_ZNK5spark6Logger4infoEPKcz>
   d42be:	4b0d      	ldr	r3, [pc, #52]	; (d42f4 <_Z14timerSurpassedv+0x40>)
   d42c0:	490d      	ldr	r1, [pc, #52]	; (d42f8 <_Z14timerSurpassedv+0x44>)
   d42c2:	781b      	ldrb	r3, [r3, #0]
   d42c4:	f88d 3000 	strb.w	r3, [sp]
   d42c8:	a802      	add	r0, sp, #8
   d42ca:	233c      	movs	r3, #60	; 0x3c
   d42cc:	2200      	movs	r2, #0
   d42ce:	f001 ff9d 	bl	d620c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	if (_M_pi != nullptr)
   d42d2:	9803      	ldr	r0, [sp, #12]
   d42d4:	b128      	cbz	r0, d42e2 <_Z14timerSurpassedv+0x2e>
      if (--_M_use_count == 0)
   d42d6:	6843      	ldr	r3, [r0, #4]
   d42d8:	3b01      	subs	r3, #1
   d42da:	6043      	str	r3, [r0, #4]
   d42dc:	b90b      	cbnz	r3, d42e2 <_Z14timerSurpassedv+0x2e>
   d42de:	f7ff ff33 	bl	d4148 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
    noTone(BUZZER);
   d42e2:	2006      	movs	r0, #6
   d42e4:	f002 fa47 	bl	d6776 <noTone>
    while(1); // placeholder
   d42e8:	e7fe      	b.n	d42e8 <_Z14timerSurpassedv+0x34>
   d42ea:	bf00      	nop
   d42ec:	000d7347 	.word	0x000d7347
   d42f0:	2003e734 	.word	0x2003e734
   d42f4:	2003e6c4 	.word	0x2003e6c4
   d42f8:	000d7358 	.word	0x000d7358

000d42fc <loop>:
void loop() {
   d42fc:	b508      	push	{r3, lr}
    if(buttonPressed) {
   d42fe:	4b05      	ldr	r3, [pc, #20]	; (d4314 <loop+0x18>)
   d4300:	781b      	ldrb	r3, [r3, #0]
   d4302:	b10b      	cbz	r3, d4308 <loop+0xc>
        buttonPress();
   d4304:	f7ff ffb2 	bl	d426c <_Z11buttonPressv>
    } else if (timerPassed) {
   d4308:	4b03      	ldr	r3, [pc, #12]	; (d4318 <loop+0x1c>)
   d430a:	781b      	ldrb	r3, [r3, #0]
   d430c:	b10b      	cbz	r3, d4312 <loop+0x16>
        timerSurpassed();
   d430e:	f7ff ffd1 	bl	d42b4 <_Z14timerSurpassedv>
}
   d4312:	bd08      	pop	{r3, pc}
   d4314:	2003e6c5 	.word	0x2003e6c5
   d4318:	2003e708 	.word	0x2003e708

000d431c <_Z3run6String>:
int run(String command) {
   d431c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    attachInterrupt(BUTTON, interruptHandler, RISING);
   d431e:	2400      	movs	r4, #0
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d4320:	4d13      	ldr	r5, [pc, #76]	; (d4370 <_Z3run6String+0x54>)
   d4322:	4914      	ldr	r1, [pc, #80]	; (d4374 <_Z3run6String+0x58>)
   d4324:	9400      	str	r4, [sp, #0]
   d4326:	f04f 33ff 	mov.w	r3, #4294967295
   d432a:	2201      	movs	r2, #1
   d432c:	2007      	movs	r0, #7
   d432e:	f002 f9e1 	bl	d66f4 <_Z15attachInterrupttPFvvE13InterruptModeah>
   d4332:	4622      	mov	r2, r4
   d4334:	4621      	mov	r1, r4
   d4336:	4628      	mov	r0, r5
   d4338:	f7ff ff43 	bl	d41c2 <_ZN5Timer5_stopEjb>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   d433c:	68a8      	ldr	r0, [r5, #8]
   d433e:	b140      	cbz	r0, d4352 <_Z3run6String+0x36>
   d4340:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   d4344:	9300      	str	r3, [sp, #0]
   d4346:	9401      	str	r4, [sp, #4]
   d4348:	4623      	mov	r3, r4
   d434a:	4622      	mov	r2, r4
   d434c:	4621      	mov	r1, r4
   d434e:	f000 f9bb 	bl	d46c8 <os_timer_change>
    tone(BUZZER, TONE);
   d4352:	2200      	movs	r2, #0
   d4354:	f44f 61dc 	mov.w	r1, #1760	; 0x6e0
   d4358:	2006      	movs	r0, #6
   d435a:	f002 f9f5 	bl	d6748 <tone>
    Log.info("Running!");
   d435e:	4906      	ldr	r1, [pc, #24]	; (d4378 <_Z3run6String+0x5c>)
   d4360:	4806      	ldr	r0, [pc, #24]	; (d437c <_Z3run6String+0x60>)
   d4362:	f7ff ff6b 	bl	d423c <_ZNK5spark6Logger4infoEPKcz>
    loop();
   d4366:	f7ff ffc9 	bl	d42fc <loop>
}
   d436a:	2001      	movs	r0, #1
   d436c:	b003      	add	sp, #12
   d436e:	bd30      	pop	{r4, r5, pc}
   d4370:	2003e6ec 	.word	0x2003e6ec
   d4374:	000d40d1 	.word	0x000d40d1
   d4378:	000d7368 	.word	0x000d7368
   d437c:	2003e734 	.word	0x2003e734

000d4380 <setup>:
void setup() {
   d4380:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    Particle.publishVitals(60);
   d4382:	213c      	movs	r1, #60	; 0x3c
   d4384:	480f      	ldr	r0, [pc, #60]	; (d43c4 <setup+0x44>)
   d4386:	f001 fe5c 	bl	d6042 <_ZN10CloudClass13publishVitalsEm>
    pinMode(BUZZER, OUTPUT);
   d438a:	2101      	movs	r1, #1
   d438c:	2006      	movs	r0, #6
   d438e:	f002 fe05 	bl	d6f9c <pinMode>
    pinMode(BUTTON, INPUT);
   d4392:	2100      	movs	r1, #0
   d4394:	2007      	movs	r0, #7
   d4396:	f002 fe01 	bl	d6f9c <pinMode>
    delay(5000);
   d439a:	f241 3088 	movw	r0, #5000	; 0x1388
   d439e:	f001 fd4f 	bl	d5e40 <delay>
    Log.info("Setup!");
   d43a2:	4909      	ldr	r1, [pc, #36]	; (d43c8 <setup+0x48>)
   d43a4:	4809      	ldr	r0, [pc, #36]	; (d43cc <setup+0x4c>)
   d43a6:	f7ff ff49 	bl	d423c <_ZNK5spark6Logger4infoEPKcz>
    run("run");
   d43aa:	4909      	ldr	r1, [pc, #36]	; (d43d0 <setup+0x50>)
   d43ac:	4668      	mov	r0, sp
   d43ae:	f000 fc68 	bl	d4c82 <_ZN6StringC1EPKc>
   d43b2:	4668      	mov	r0, sp
   d43b4:	f7ff ffb2 	bl	d431c <_Z3run6String>
   d43b8:	4668      	mov	r0, sp
   d43ba:	f000 fc17 	bl	d4bec <_ZN6StringD1Ev>
}
   d43be:	b005      	add	sp, #20
   d43c0:	f85d fb04 	ldr.w	pc, [sp], #4
   d43c4:	2003e7d4 	.word	0x2003e7d4
   d43c8:	000d7371 	.word	0x000d7371
   d43cc:	2003e734 	.word	0x2003e734
   d43d0:	000d7378 	.word	0x000d7378

000d43d4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d43d4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d43d6:	e9d0 5300 	ldrd	r5, r3, [r0]
   d43da:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d43dc:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d43de:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d43e2:	42ae      	cmp	r6, r5
   d43e4:	d004      	beq.n	d43f0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   d43e6:	4628      	mov	r0, r5
   d43e8:	f000 fc00 	bl	d4bec <_ZN6StringD1Ev>
   d43ec:	3514      	adds	r5, #20
   d43ee:	e7f8      	b.n	d43e2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d43f0:	6820      	ldr	r0, [r4, #0]
   d43f2:	f000 fb55 	bl	d4aa0 <free>
    AllocatorT::free(data_);
}
   d43f6:	4620      	mov	r0, r4
   d43f8:	bd70      	pop	{r4, r5, r6, pc}

000d43fa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d43fa:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d43fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d43fe:	4604      	mov	r4, r0
   d4400:	460d      	mov	r5, r1
   d4402:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d4404:	d916      	bls.n	d4434 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   d4406:	4290      	cmp	r0, r2
   d4408:	d215      	bcs.n	d4436 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   d440a:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   d440e:	1a75      	subs	r5, r6, r1
   d4410:	f1a1 0714 	sub.w	r7, r1, #20
   d4414:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d4416:	42b7      	cmp	r7, r6
   d4418:	d01c      	beq.n	d4454 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   d441a:	b12c      	cbz	r4, d4428 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   d441c:	4631      	mov	r1, r6
   d441e:	4620      	mov	r0, r4
   d4420:	f000 fc60 	bl	d4ce4 <_ZN6StringC1EOS_>
   d4424:	7c33      	ldrb	r3, [r6, #16]
   d4426:	7423      	strb	r3, [r4, #16]
   d4428:	4630      	mov	r0, r6
   d442a:	f000 fbdf 	bl	d4bec <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d442e:	3e14      	subs	r6, #20
   d4430:	3c14      	subs	r4, #20
   d4432:	e7f0      	b.n	d4416 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d4434:	d00e      	beq.n	d4454 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   d4436:	42b5      	cmp	r5, r6
   d4438:	d00c      	beq.n	d4454 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   d443a:	b12c      	cbz	r4, d4448 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   d443c:	4629      	mov	r1, r5
   d443e:	4620      	mov	r0, r4
   d4440:	f000 fc50 	bl	d4ce4 <_ZN6StringC1EOS_>
   d4444:	7c2b      	ldrb	r3, [r5, #16]
   d4446:	7423      	strb	r3, [r4, #16]
   d4448:	4628      	mov	r0, r5
   d444a:	f000 fbcf 	bl	d4bec <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d444e:	3514      	adds	r5, #20
   d4450:	3414      	adds	r4, #20
   d4452:	e7f0      	b.n	d4436 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   d4454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4456 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d4456:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   d445a:	2300      	movs	r3, #0
   d445c:	e9c0 3300 	strd	r3, r3, [r0]
   d4460:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d4462:	684f      	ldr	r7, [r1, #4]
   d4464:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d4466:	4604      	mov	r4, r0
   d4468:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d446a:	dd23      	ble.n	d44b4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   d446c:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   d4470:	fb08 f007 	mul.w	r0, r8, r7
   d4474:	f000 fb0c 	bl	d4a90 <malloc>
            if (!d) {
   d4478:	4605      	mov	r5, r0
   d447a:	b1d8      	cbz	r0, d44b4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   d447c:	e9d4 1200 	ldrd	r1, r2, [r4]
   d4480:	fb08 1202 	mla	r2, r8, r2, r1
   d4484:	f7ff ffb9 	bl	d43fa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d4488:	6820      	ldr	r0, [r4, #0]
   d448a:	f000 fb09 	bl	d4aa0 <free>
        data_ = d;
   d448e:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d4490:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d4492:	e9d6 7300 	ldrd	r7, r3, [r6]
   d4496:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   d449a:	45b8      	cmp	r8, r7
   d449c:	d008      	beq.n	d44b0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   d449e:	4639      	mov	r1, r7
   d44a0:	4628      	mov	r0, r5
   d44a2:	f000 fc39 	bl	d4d18 <_ZN6StringC1ERKS_>
   d44a6:	7c3b      	ldrb	r3, [r7, #16]
   d44a8:	742b      	strb	r3, [r5, #16]
   d44aa:	3714      	adds	r7, #20
   d44ac:	3514      	adds	r5, #20
   d44ae:	e7f4      	b.n	d449a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   d44b0:	6873      	ldr	r3, [r6, #4]
   d44b2:	6063      	str	r3, [r4, #4]
}
   d44b4:	4620      	mov	r0, r4
   d44b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d44bc <_GLOBAL__sub_I_buttonPressed>:
}
   d44bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        val_(val) {
   d44c0:	4b3b      	ldr	r3, [pc, #236]	; (d45b0 <_GLOBAL__sub_I_buttonPressed+0xf4>)
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d44c2:	4c3c      	ldr	r4, [pc, #240]	; (d45b4 <_GLOBAL__sub_I_buttonPressed+0xf8>)
Timer timer(TIMEOUT, timerHandler, true);
   d44c4:	f8df 911c 	ldr.w	r9, [pc, #284]	; d45e4 <_GLOBAL__sub_I_buttonPressed+0x128>
}
   d44c8:	b091      	sub	sp, #68	; 0x44
   d44ca:	2201      	movs	r2, #1
   d44cc:	701a      	strb	r2, [r3, #0]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d44ce:	4b3a      	ldr	r3, [pc, #232]	; (d45b8 <_GLOBAL__sub_I_buttonPressed+0xfc>)
   d44d0:	930c      	str	r3, [sp, #48]	; 0x30
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d44d2:	ad0c      	add	r5, sp, #48	; 0x30
   d44d4:	e895 0003 	ldmia.w	r5, {r0, r1}
   d44d8:	4b38      	ldr	r3, [pc, #224]	; (d45bc <_GLOBAL__sub_I_buttonPressed+0x100>)
   d44da:	6023      	str	r3, [r4, #0]
   d44dc:	ae09      	add	r6, sp, #36	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   d44de:	f104 030c 	add.w	r3, r4, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d44e2:	e886 0003 	stmia.w	r6, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d44e6:	e893 0003 	ldmia.w	r3, {r0, r1}
   d44ea:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d44ee:	e896 0003 	ldmia.w	r6, {r0, r1}
   d44f2:	e883 0003 	stmia.w	r3, {r0, r1}
   d44f6:	4b32      	ldr	r3, [pc, #200]	; (d45c0 <_GLOBAL__sub_I_buttonPressed+0x104>)
   d44f8:	6163      	str	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   d44fa:	69a3      	ldr	r3, [r4, #24]
   d44fc:	930f      	str	r3, [sp, #60]	; 0x3c
   d44fe:	2700      	movs	r7, #0
      __b = _GLIBCXX_MOVE(__tmp);
   d4500:	4b30      	ldr	r3, [pc, #192]	; (d45c4 <_GLOBAL__sub_I_buttonPressed+0x108>)
   d4502:	7127      	strb	r7, [r4, #4]
   d4504:	60a7      	str	r7, [r4, #8]
   d4506:	61a3      	str	r3, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d4508:	f241 3188 	movw	r1, #5000	; 0x1388
   d450c:	4623      	mov	r3, r4
   d450e:	e9cd 2700 	strd	r2, r7, [sp]
   d4512:	f104 0008 	add.w	r0, r4, #8
   d4516:	4a2c      	ldr	r2, [pc, #176]	; (d45c8 <_GLOBAL__sub_I_buttonPressed+0x10c>)
      __a = _GLIBCXX_MOVE(__b);
   d4518:	970e      	str	r7, [sp, #56]	; 0x38
   d451a:	f000 f8bd 	bl	d4698 <os_timer_create>
    class function<_Res(_ArgTypes...)>
   d451e:	4628      	mov	r0, r5
   d4520:	f7ff fe46 	bl	d41b0 <_ZNSt14_Function_baseD1Ev>
Timer timer(TIMEOUT, timerHandler, true);
   d4524:	464a      	mov	r2, r9
   d4526:	4929      	ldr	r1, [pc, #164]	; (d45cc <_GLOBAL__sub_I_buttonPressed+0x110>)
   d4528:	4620      	mov	r0, r4
   d452a:	f002 fd89 	bl	d7040 <__aeabi_atexit>
        capacity_(0) {
   d452e:	e9cd 7703 	strd	r7, r7, [sp, #12]
   d4532:	9705      	str	r7, [sp, #20]
            StreamLogHandler(Serial, level, filters) {
   d4534:	f002 f8b2 	bl	d669c <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   d4538:	4c25      	ldr	r4, [pc, #148]	; (d45d0 <_GLOBAL__sub_I_buttonPressed+0x114>)
   d453a:	4607      	mov	r7, r0
   d453c:	a903      	add	r1, sp, #12
   d453e:	a806      	add	r0, sp, #24
   d4540:	f7ff ff89 	bl	d4456 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d4544:	46a0      	mov	r8, r4
        stream_(&stream) {
   d4546:	a906      	add	r1, sp, #24
   d4548:	4630      	mov	r0, r6
   d454a:	f7ff ff84 	bl	d4456 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   d454e:	4b21      	ldr	r3, [pc, #132]	; (d45d4 <_GLOBAL__sub_I_buttonPressed+0x118>)
   d4550:	f848 3b04 	str.w	r3, [r8], #4
   d4554:	4631      	mov	r1, r6
   d4556:	4628      	mov	r0, r5
   d4558:	f7ff ff7d 	bl	d4456 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d455c:	462a      	mov	r2, r5
   d455e:	211e      	movs	r1, #30
   d4560:	4640      	mov	r0, r8
   d4562:	f001 f947 	bl	d57f4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d4566:	4628      	mov	r0, r5
   d4568:	f7ff ff34 	bl	d43d4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   d456c:	4630      	mov	r0, r6
   d456e:	f7ff ff31 	bl	d43d4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d4572:	4b19      	ldr	r3, [pc, #100]	; (d45d8 <_GLOBAL__sub_I_buttonPressed+0x11c>)
   d4574:	6023      	str	r3, [r4, #0]
   d4576:	6227      	str	r7, [r4, #32]
   d4578:	a806      	add	r0, sp, #24
   d457a:	f7ff ff2b 	bl	d43d4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d457e:	4b17      	ldr	r3, [pc, #92]	; (d45dc <_GLOBAL__sub_I_buttonPressed+0x120>)
   d4580:	6023      	str	r3, [r4, #0]
        Serial.begin();
   d4582:	f002 f88b 	bl	d669c <_Z16_fetch_usbserialv>
   d4586:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d458a:	f002 f877 	bl	d667c <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   d458e:	f000 fdd9 	bl	d5144 <_ZN5spark10LogManager8instanceEv>
   d4592:	4621      	mov	r1, r4
   d4594:	f001 f8c0 	bl	d5718 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);
   d4598:	a803      	add	r0, sp, #12
   d459a:	f7ff ff1b 	bl	d43d4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d459e:	4910      	ldr	r1, [pc, #64]	; (d45e0 <_GLOBAL__sub_I_buttonPressed+0x124>)
   d45a0:	464a      	mov	r2, r9
   d45a2:	4620      	mov	r0, r4
   d45a4:	f002 fd4c 	bl	d7040 <__aeabi_atexit>
}
   d45a8:	b011      	add	sp, #68	; 0x44
   d45aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d45ae:	bf00      	nop
   d45b0:	2003e6c4 	.word	0x2003e6c4
   d45b4:	2003e6ec 	.word	0x2003e6ec
   d45b8:	000d40dd 	.word	0x000d40dd
   d45bc:	000d7384 	.word	0x000d7384
   d45c0:	000d40ed 	.word	0x000d40ed
   d45c4:	000d40e9 	.word	0x000d40e9
   d45c8:	000d410f 	.word	0x000d410f
   d45cc:	000d41e1 	.word	0x000d41e1
   d45d0:	2003e6c8 	.word	0x2003e6c8
   d45d4:	000d7398 	.word	0x000d7398
   d45d8:	000d748c 	.word	0x000d748c
   d45dc:	000d73b0 	.word	0x000d73b0
   d45e0:	000d4169 	.word	0x000d4169
   d45e4:	2003e6c0 	.word	0x2003e6c0

000d45e8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d45e8:	b508      	push	{r3, lr}
   d45ea:	4b02      	ldr	r3, [pc, #8]	; (d45f4 <netdb_freeaddrinfo+0xc>)
   d45ec:	681b      	ldr	r3, [r3, #0]
   d45ee:	689b      	ldr	r3, [r3, #8]
   d45f0:	9301      	str	r3, [sp, #4]
   d45f2:	bd08      	pop	{r3, pc}
   d45f4:	00030268 	.word	0x00030268

000d45f8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d45f8:	b508      	push	{r3, lr}
   d45fa:	4b02      	ldr	r3, [pc, #8]	; (d4604 <netdb_getaddrinfo+0xc>)
   d45fc:	681b      	ldr	r3, [r3, #0]
   d45fe:	68db      	ldr	r3, [r3, #12]
   d4600:	9301      	str	r3, [sp, #4]
   d4602:	bd08      	pop	{r3, pc}
   d4604:	00030268 	.word	0x00030268

000d4608 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d4608:	b508      	push	{r3, lr}
   d460a:	4b02      	ldr	r3, [pc, #8]	; (d4614 <HAL_Validate_Pin_Function+0xc>)
   d460c:	681b      	ldr	r3, [r3, #0]
   d460e:	685b      	ldr	r3, [r3, #4]
   d4610:	9301      	str	r3, [sp, #4]
   d4612:	bd08      	pop	{r3, pc}
   d4614:	0003022c 	.word	0x0003022c

000d4618 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4618:	b508      	push	{r3, lr}
   d461a:	4b02      	ldr	r3, [pc, #8]	; (d4624 <HAL_Pin_Mode+0xc>)
   d461c:	681b      	ldr	r3, [r3, #0]
   d461e:	689b      	ldr	r3, [r3, #8]
   d4620:	9301      	str	r3, [sp, #4]
   d4622:	bd08      	pop	{r3, pc}
   d4624:	0003022c 	.word	0x0003022c

000d4628 <HAL_Interrupts_Attach>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d4628:	b508      	push	{r3, lr}
   d462a:	4b02      	ldr	r3, [pc, #8]	; (d4634 <HAL_Interrupts_Attach+0xc>)
   d462c:	681b      	ldr	r3, [r3, #0]
   d462e:	699b      	ldr	r3, [r3, #24]
   d4630:	9301      	str	r3, [sp, #4]
   d4632:	bd08      	pop	{r3, pc}
   d4634:	0003022c 	.word	0x0003022c

000d4638 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d4638:	b508      	push	{r3, lr}
   d463a:	4b02      	ldr	r3, [pc, #8]	; (d4644 <HAL_Interrupts_Detach+0xc>)
   d463c:	681b      	ldr	r3, [r3, #0]
   d463e:	69db      	ldr	r3, [r3, #28]
   d4640:	9301      	str	r3, [sp, #4]
   d4642:	bd08      	pop	{r3, pc}
   d4644:	0003022c 	.word	0x0003022c

000d4648 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4648:	b508      	push	{r3, lr}
   d464a:	4b02      	ldr	r3, [pc, #8]	; (d4654 <HAL_RNG_GetRandomNumber+0xc>)
   d464c:	681b      	ldr	r3, [r3, #0]
   d464e:	685b      	ldr	r3, [r3, #4]
   d4650:	9301      	str	r3, [sp, #4]
   d4652:	bd08      	pop	{r3, pc}
   d4654:	00030218 	.word	0x00030218

000d4658 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d4658:	b508      	push	{r3, lr}
   d465a:	4b02      	ldr	r3, [pc, #8]	; (d4664 <HAL_Delay_Microseconds+0xc>)
   d465c:	681b      	ldr	r3, [r3, #0]
   d465e:	68db      	ldr	r3, [r3, #12]
   d4660:	9301      	str	r3, [sp, #4]
   d4662:	bd08      	pop	{r3, pc}
   d4664:	00030218 	.word	0x00030218

000d4668 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4668:	b508      	push	{r3, lr}
   d466a:	4b02      	ldr	r3, [pc, #8]	; (d4674 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d466c:	681b      	ldr	r3, [r3, #0]
   d466e:	695b      	ldr	r3, [r3, #20]
   d4670:	9301      	str	r3, [sp, #4]
   d4672:	bd08      	pop	{r3, pc}
   d4674:	00030218 	.word	0x00030218

000d4678 <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d4678:	b508      	push	{r3, lr}
   d467a:	4b02      	ldr	r3, [pc, #8]	; (d4684 <os_thread_yield+0xc>)
   d467c:	681b      	ldr	r3, [r3, #0]
   d467e:	68db      	ldr	r3, [r3, #12]
   d4680:	9301      	str	r3, [sp, #4]
   d4682:	bd08      	pop	{r3, pc}
   d4684:	00030248 	.word	0x00030248

000d4688 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   d4688:	b508      	push	{r3, lr}
   d468a:	4b02      	ldr	r3, [pc, #8]	; (d4694 <os_thread_scheduling+0xc>)
   d468c:	681b      	ldr	r3, [r3, #0]
   d468e:	69db      	ldr	r3, [r3, #28]
   d4690:	9301      	str	r3, [sp, #4]
   d4692:	bd08      	pop	{r3, pc}
   d4694:	00030248 	.word	0x00030248

000d4698 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   d4698:	b508      	push	{r3, lr}
   d469a:	4b02      	ldr	r3, [pc, #8]	; (d46a4 <os_timer_create+0xc>)
   d469c:	681b      	ldr	r3, [r3, #0]
   d469e:	6a1b      	ldr	r3, [r3, #32]
   d46a0:	9301      	str	r3, [sp, #4]
   d46a2:	bd08      	pop	{r3, pc}
   d46a4:	00030248 	.word	0x00030248

000d46a8 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   d46a8:	b508      	push	{r3, lr}
   d46aa:	4b02      	ldr	r3, [pc, #8]	; (d46b4 <os_timer_destroy+0xc>)
   d46ac:	681b      	ldr	r3, [r3, #0]
   d46ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d46b0:	9301      	str	r3, [sp, #4]
   d46b2:	bd08      	pop	{r3, pc}
   d46b4:	00030248 	.word	0x00030248

000d46b8 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   d46b8:	b508      	push	{r3, lr}
   d46ba:	4b02      	ldr	r3, [pc, #8]	; (d46c4 <os_timer_get_id+0xc>)
   d46bc:	681b      	ldr	r3, [r3, #0]
   d46be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d46c0:	9301      	str	r3, [sp, #4]
   d46c2:	bd08      	pop	{r3, pc}
   d46c4:	00030248 	.word	0x00030248

000d46c8 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   d46c8:	b508      	push	{r3, lr}
   d46ca:	4b02      	ldr	r3, [pc, #8]	; (d46d4 <os_timer_change+0xc>)
   d46cc:	681b      	ldr	r3, [r3, #0]
   d46ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d46d0:	9301      	str	r3, [sp, #4]
   d46d2:	bd08      	pop	{r3, pc}
   d46d4:	00030248 	.word	0x00030248

000d46d8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d46d8:	b508      	push	{r3, lr}
   d46da:	4b02      	ldr	r3, [pc, #8]	; (d46e4 <os_mutex_recursive_create+0xc>)
   d46dc:	681b      	ldr	r3, [r3, #0]
   d46de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d46e0:	9301      	str	r3, [sp, #4]
   d46e2:	bd08      	pop	{r3, pc}
   d46e4:	00030248 	.word	0x00030248

000d46e8 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d46e8:	b508      	push	{r3, lr}
   d46ea:	4b02      	ldr	r3, [pc, #8]	; (d46f4 <os_mutex_recursive_destroy+0xc>)
   d46ec:	681b      	ldr	r3, [r3, #0]
   d46ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d46f0:	9301      	str	r3, [sp, #4]
   d46f2:	bd08      	pop	{r3, pc}
   d46f4:	00030248 	.word	0x00030248

000d46f8 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d46f8:	b508      	push	{r3, lr}
   d46fa:	4b02      	ldr	r3, [pc, #8]	; (d4704 <os_mutex_recursive_lock+0xc>)
   d46fc:	681b      	ldr	r3, [r3, #0]
   d46fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4700:	9301      	str	r3, [sp, #4]
   d4702:	bd08      	pop	{r3, pc}
   d4704:	00030248 	.word	0x00030248

000d4708 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d4708:	b508      	push	{r3, lr}
   d470a:	4b02      	ldr	r3, [pc, #8]	; (d4714 <os_mutex_recursive_unlock+0xc>)
   d470c:	681b      	ldr	r3, [r3, #0]
   d470e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4710:	9301      	str	r3, [sp, #4]
   d4712:	bd08      	pop	{r3, pc}
   d4714:	00030248 	.word	0x00030248

000d4718 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   d4718:	b508      	push	{r3, lr}
   d471a:	4b02      	ldr	r3, [pc, #8]	; (d4724 <os_timer_set_id+0xc>)
   d471c:	681b      	ldr	r3, [r3, #0]
   d471e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d4720:	9301      	str	r3, [sp, #4]
   d4722:	bd08      	pop	{r3, pc}
   d4724:	00030248 	.word	0x00030248

000d4728 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4728:	b508      	push	{r3, lr}
   d472a:	4b02      	ldr	r3, [pc, #8]	; (d4734 <inet_inet_ntop+0xc>)
   d472c:	681b      	ldr	r3, [r3, #0]
   d472e:	695b      	ldr	r3, [r3, #20]
   d4730:	9301      	str	r3, [sp, #4]
   d4732:	bd08      	pop	{r3, pc}
   d4734:	00030264 	.word	0x00030264

000d4738 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d4738:	b508      	push	{r3, lr}
   d473a:	4b02      	ldr	r3, [pc, #8]	; (d4744 <hal_usart_init+0xc>)
   d473c:	681b      	ldr	r3, [r3, #0]
   d473e:	681b      	ldr	r3, [r3, #0]
   d4740:	9301      	str	r3, [sp, #4]
   d4742:	bd08      	pop	{r3, pc}
   d4744:	0003023c 	.word	0x0003023c

000d4748 <hal_usart_end>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   d4748:	b508      	push	{r3, lr}
   d474a:	4b02      	ldr	r3, [pc, #8]	; (d4754 <hal_usart_end+0xc>)
   d474c:	681b      	ldr	r3, [r3, #0]
   d474e:	689b      	ldr	r3, [r3, #8]
   d4750:	9301      	str	r3, [sp, #4]
   d4752:	bd08      	pop	{r3, pc}
   d4754:	0003023c 	.word	0x0003023c

000d4758 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d4758:	b508      	push	{r3, lr}
   d475a:	4b02      	ldr	r3, [pc, #8]	; (d4764 <hal_usart_write+0xc>)
   d475c:	681b      	ldr	r3, [r3, #0]
   d475e:	68db      	ldr	r3, [r3, #12]
   d4760:	9301      	str	r3, [sp, #4]
   d4762:	bd08      	pop	{r3, pc}
   d4764:	0003023c 	.word	0x0003023c

000d4768 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d4768:	b508      	push	{r3, lr}
   d476a:	4b02      	ldr	r3, [pc, #8]	; (d4774 <hal_usart_available+0xc>)
   d476c:	681b      	ldr	r3, [r3, #0]
   d476e:	691b      	ldr	r3, [r3, #16]
   d4770:	9301      	str	r3, [sp, #4]
   d4772:	bd08      	pop	{r3, pc}
   d4774:	0003023c 	.word	0x0003023c

000d4778 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d4778:	b508      	push	{r3, lr}
   d477a:	4b02      	ldr	r3, [pc, #8]	; (d4784 <hal_usart_read+0xc>)
   d477c:	681b      	ldr	r3, [r3, #0]
   d477e:	695b      	ldr	r3, [r3, #20]
   d4780:	9301      	str	r3, [sp, #4]
   d4782:	bd08      	pop	{r3, pc}
   d4784:	0003023c 	.word	0x0003023c

000d4788 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d4788:	b508      	push	{r3, lr}
   d478a:	4b02      	ldr	r3, [pc, #8]	; (d4794 <hal_usart_peek+0xc>)
   d478c:	681b      	ldr	r3, [r3, #0]
   d478e:	699b      	ldr	r3, [r3, #24]
   d4790:	9301      	str	r3, [sp, #4]
   d4792:	bd08      	pop	{r3, pc}
   d4794:	0003023c 	.word	0x0003023c

000d4798 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d4798:	b508      	push	{r3, lr}
   d479a:	4b02      	ldr	r3, [pc, #8]	; (d47a4 <hal_usart_flush+0xc>)
   d479c:	681b      	ldr	r3, [r3, #0]
   d479e:	69db      	ldr	r3, [r3, #28]
   d47a0:	9301      	str	r3, [sp, #4]
   d47a2:	bd08      	pop	{r3, pc}
   d47a4:	0003023c 	.word	0x0003023c

000d47a8 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d47a8:	b508      	push	{r3, lr}
   d47aa:	4b02      	ldr	r3, [pc, #8]	; (d47b4 <hal_usart_is_enabled+0xc>)
   d47ac:	681b      	ldr	r3, [r3, #0]
   d47ae:	6a1b      	ldr	r3, [r3, #32]
   d47b0:	9301      	str	r3, [sp, #4]
   d47b2:	bd08      	pop	{r3, pc}
   d47b4:	0003023c 	.word	0x0003023c

000d47b8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d47b8:	b508      	push	{r3, lr}
   d47ba:	4b02      	ldr	r3, [pc, #8]	; (d47c4 <hal_usart_available_data_for_write+0xc>)
   d47bc:	681b      	ldr	r3, [r3, #0]
   d47be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d47c0:	9301      	str	r3, [sp, #4]
   d47c2:	bd08      	pop	{r3, pc}
   d47c4:	0003023c 	.word	0x0003023c

000d47c8 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   d47c8:	b508      	push	{r3, lr}
   d47ca:	4b02      	ldr	r3, [pc, #8]	; (d47d4 <hal_usart_begin_config+0xc>)
   d47cc:	681b      	ldr	r3, [r3, #0]
   d47ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d47d0:	9301      	str	r3, [sp, #4]
   d47d2:	bd08      	pop	{r3, pc}
   d47d4:	0003023c 	.word	0x0003023c

000d47d8 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d47d8:	b508      	push	{r3, lr}
   d47da:	4b02      	ldr	r3, [pc, #8]	; (d47e4 <hal_i2c_write+0xc>)
   d47dc:	681b      	ldr	r3, [r3, #0]
   d47de:	6a1b      	ldr	r3, [r3, #32]
   d47e0:	9301      	str	r3, [sp, #4]
   d47e2:	bd08      	pop	{r3, pc}
   d47e4:	00030228 	.word	0x00030228

000d47e8 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d47e8:	b508      	push	{r3, lr}
   d47ea:	4b02      	ldr	r3, [pc, #8]	; (d47f4 <hal_i2c_available+0xc>)
   d47ec:	681b      	ldr	r3, [r3, #0]
   d47ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d47f0:	9301      	str	r3, [sp, #4]
   d47f2:	bd08      	pop	{r3, pc}
   d47f4:	00030228 	.word	0x00030228

000d47f8 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d47f8:	b508      	push	{r3, lr}
   d47fa:	4b02      	ldr	r3, [pc, #8]	; (d4804 <hal_i2c_read+0xc>)
   d47fc:	681b      	ldr	r3, [r3, #0]
   d47fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4800:	9301      	str	r3, [sp, #4]
   d4802:	bd08      	pop	{r3, pc}
   d4804:	00030228 	.word	0x00030228

000d4808 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d4808:	b508      	push	{r3, lr}
   d480a:	4b02      	ldr	r3, [pc, #8]	; (d4814 <hal_i2c_peek+0xc>)
   d480c:	681b      	ldr	r3, [r3, #0]
   d480e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4810:	9301      	str	r3, [sp, #4]
   d4812:	bd08      	pop	{r3, pc}
   d4814:	00030228 	.word	0x00030228

000d4818 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d4818:	b508      	push	{r3, lr}
   d481a:	4b02      	ldr	r3, [pc, #8]	; (d4824 <hal_i2c_flush+0xc>)
   d481c:	681b      	ldr	r3, [r3, #0]
   d481e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4820:	9301      	str	r3, [sp, #4]
   d4822:	bd08      	pop	{r3, pc}
   d4824:	00030228 	.word	0x00030228

000d4828 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d4828:	b508      	push	{r3, lr}
   d482a:	4b02      	ldr	r3, [pc, #8]	; (d4834 <hal_i2c_is_enabled+0xc>)
   d482c:	681b      	ldr	r3, [r3, #0]
   d482e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4830:	9301      	str	r3, [sp, #4]
   d4832:	bd08      	pop	{r3, pc}
   d4834:	00030228 	.word	0x00030228

000d4838 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d4838:	b508      	push	{r3, lr}
   d483a:	4b02      	ldr	r3, [pc, #8]	; (d4844 <hal_i2c_init+0xc>)
   d483c:	681b      	ldr	r3, [r3, #0]
   d483e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4840:	9301      	str	r3, [sp, #4]
   d4842:	bd08      	pop	{r3, pc}
   d4844:	00030228 	.word	0x00030228

000d4848 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d4848:	b508      	push	{r3, lr}
   d484a:	4b02      	ldr	r3, [pc, #8]	; (d4854 <hal_spi_init+0xc>)
   d484c:	681b      	ldr	r3, [r3, #0]
   d484e:	69db      	ldr	r3, [r3, #28]
   d4850:	9301      	str	r3, [sp, #4]
   d4852:	bd08      	pop	{r3, pc}
   d4854:	00030230 	.word	0x00030230

000d4858 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d4858:	b508      	push	{r3, lr}
   d485a:	4b02      	ldr	r3, [pc, #8]	; (d4864 <hal_spi_is_enabled+0xc>)
   d485c:	681b      	ldr	r3, [r3, #0]
   d485e:	6a1b      	ldr	r3, [r3, #32]
   d4860:	9301      	str	r3, [sp, #4]
   d4862:	bd08      	pop	{r3, pc}
   d4864:	00030230 	.word	0x00030230

000d4868 <HAL_Tone_Start>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_peripherals)

DYNALIB_FN(0, hal_peripherals, HAL_Tone_Start, void(uint8_t, uint32_t, uint32_t))
   d4868:	b508      	push	{r3, lr}
   d486a:	4b02      	ldr	r3, [pc, #8]	; (d4874 <HAL_Tone_Start+0xc>)
   d486c:	681b      	ldr	r3, [r3, #0]
   d486e:	681b      	ldr	r3, [r3, #0]
   d4870:	9301      	str	r3, [sp, #4]
   d4872:	bd08      	pop	{r3, pc}
   d4874:	00030224 	.word	0x00030224

000d4878 <HAL_Tone_Stop>:
DYNALIB_FN(1, hal_peripherals, HAL_Tone_Stop, void(uint8_t))
   d4878:	b508      	push	{r3, lr}
   d487a:	4b02      	ldr	r3, [pc, #8]	; (d4884 <HAL_Tone_Stop+0xc>)
   d487c:	681b      	ldr	r3, [r3, #0]
   d487e:	685b      	ldr	r3, [r3, #4]
   d4880:	9301      	str	r3, [sp, #4]
   d4882:	bd08      	pop	{r3, pc}
   d4884:	00030224 	.word	0x00030224

000d4888 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4888:	b508      	push	{r3, lr}
   d488a:	4b02      	ldr	r3, [pc, #8]	; (d4894 <HAL_USB_USART_Init+0xc>)
   d488c:	681b      	ldr	r3, [r3, #0]
   d488e:	681b      	ldr	r3, [r3, #0]
   d4890:	9301      	str	r3, [sp, #4]
   d4892:	bd08      	pop	{r3, pc}
   d4894:	0003024c 	.word	0x0003024c

000d4898 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4898:	b508      	push	{r3, lr}
   d489a:	4b02      	ldr	r3, [pc, #8]	; (d48a4 <HAL_USB_USART_Begin+0xc>)
   d489c:	681b      	ldr	r3, [r3, #0]
   d489e:	685b      	ldr	r3, [r3, #4]
   d48a0:	9301      	str	r3, [sp, #4]
   d48a2:	bd08      	pop	{r3, pc}
   d48a4:	0003024c 	.word	0x0003024c

000d48a8 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   d48a8:	b508      	push	{r3, lr}
   d48aa:	4b02      	ldr	r3, [pc, #8]	; (d48b4 <HAL_USB_USART_End+0xc>)
   d48ac:	681b      	ldr	r3, [r3, #0]
   d48ae:	689b      	ldr	r3, [r3, #8]
   d48b0:	9301      	str	r3, [sp, #4]
   d48b2:	bd08      	pop	{r3, pc}
   d48b4:	0003024c 	.word	0x0003024c

000d48b8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d48b8:	b508      	push	{r3, lr}
   d48ba:	4b02      	ldr	r3, [pc, #8]	; (d48c4 <HAL_USB_USART_Available_Data+0xc>)
   d48bc:	681b      	ldr	r3, [r3, #0]
   d48be:	691b      	ldr	r3, [r3, #16]
   d48c0:	9301      	str	r3, [sp, #4]
   d48c2:	bd08      	pop	{r3, pc}
   d48c4:	0003024c 	.word	0x0003024c

000d48c8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d48c8:	b508      	push	{r3, lr}
   d48ca:	4b02      	ldr	r3, [pc, #8]	; (d48d4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d48cc:	681b      	ldr	r3, [r3, #0]
   d48ce:	695b      	ldr	r3, [r3, #20]
   d48d0:	9301      	str	r3, [sp, #4]
   d48d2:	bd08      	pop	{r3, pc}
   d48d4:	0003024c 	.word	0x0003024c

000d48d8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d48d8:	b508      	push	{r3, lr}
   d48da:	4b02      	ldr	r3, [pc, #8]	; (d48e4 <HAL_USB_USART_Receive_Data+0xc>)
   d48dc:	681b      	ldr	r3, [r3, #0]
   d48de:	699b      	ldr	r3, [r3, #24]
   d48e0:	9301      	str	r3, [sp, #4]
   d48e2:	bd08      	pop	{r3, pc}
   d48e4:	0003024c 	.word	0x0003024c

000d48e8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d48e8:	b508      	push	{r3, lr}
   d48ea:	4b02      	ldr	r3, [pc, #8]	; (d48f4 <HAL_USB_USART_Send_Data+0xc>)
   d48ec:	681b      	ldr	r3, [r3, #0]
   d48ee:	69db      	ldr	r3, [r3, #28]
   d48f0:	9301      	str	r3, [sp, #4]
   d48f2:	bd08      	pop	{r3, pc}
   d48f4:	0003024c 	.word	0x0003024c

000d48f8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d48f8:	b508      	push	{r3, lr}
   d48fa:	4b02      	ldr	r3, [pc, #8]	; (d4904 <HAL_USB_USART_Flush_Data+0xc>)
   d48fc:	681b      	ldr	r3, [r3, #0]
   d48fe:	6a1b      	ldr	r3, [r3, #32]
   d4900:	9301      	str	r3, [sp, #4]
   d4902:	bd08      	pop	{r3, pc}
   d4904:	0003024c 	.word	0x0003024c

000d4908 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d4908:	b508      	push	{r3, lr}
   d490a:	4b02      	ldr	r3, [pc, #8]	; (d4914 <panic_+0xc>)
   d490c:	681b      	ldr	r3, [r3, #0]
   d490e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4910:	9301      	str	r3, [sp, #4]
   d4912:	bd08      	pop	{r3, pc}
   d4914:	00030260 	.word	0x00030260

000d4918 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d4918:	b508      	push	{r3, lr}
   d491a:	4b02      	ldr	r3, [pc, #8]	; (d4924 <log_message_v+0xc>)
   d491c:	681b      	ldr	r3, [r3, #0]
   d491e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4920:	9301      	str	r3, [sp, #4]
   d4922:	bd08      	pop	{r3, pc}
   d4924:	00030260 	.word	0x00030260

000d4928 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   d4928:	b508      	push	{r3, lr}
   d492a:	4b02      	ldr	r3, [pc, #8]	; (d4934 <log_level_name+0xc>)
   d492c:	681b      	ldr	r3, [r3, #0]
   d492e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d4930:	9301      	str	r3, [sp, #4]
   d4932:	bd08      	pop	{r3, pc}
   d4934:	00030260 	.word	0x00030260

000d4938 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   d4938:	b508      	push	{r3, lr}
   d493a:	4b02      	ldr	r3, [pc, #8]	; (d4944 <log_set_callbacks+0xc>)
   d493c:	681b      	ldr	r3, [r3, #0]
   d493e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d4940:	9301      	str	r3, [sp, #4]
   d4942:	bd08      	pop	{r3, pc}
   d4944:	00030260 	.word	0x00030260

000d4948 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4948:	b508      	push	{r3, lr}
   d494a:	4b02      	ldr	r3, [pc, #8]	; (d4954 <set_system_mode+0xc>)
   d494c:	681b      	ldr	r3, [r3, #0]
   d494e:	685b      	ldr	r3, [r3, #4]
   d4950:	9301      	str	r3, [sp, #4]
   d4952:	bd08      	pop	{r3, pc}
   d4954:	00030220 	.word	0x00030220

000d4958 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4958:	b508      	push	{r3, lr}
   d495a:	4b02      	ldr	r3, [pc, #8]	; (d4964 <system_delay_ms+0xc>)
   d495c:	681b      	ldr	r3, [r3, #0]
   d495e:	695b      	ldr	r3, [r3, #20]
   d4960:	9301      	str	r3, [sp, #4]
   d4962:	bd08      	pop	{r3, pc}
   d4964:	00030220 	.word	0x00030220

000d4968 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d4968:	b508      	push	{r3, lr}
   d496a:	4b02      	ldr	r3, [pc, #8]	; (d4974 <application_thread_current+0xc>)
   d496c:	681b      	ldr	r3, [r3, #0]
   d496e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4970:	9301      	str	r3, [sp, #4]
   d4972:	bd08      	pop	{r3, pc}
   d4974:	00030220 	.word	0x00030220

000d4978 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4978:	b508      	push	{r3, lr}
   d497a:	4b02      	ldr	r3, [pc, #8]	; (d4984 <application_thread_invoke+0xc>)
   d497c:	681b      	ldr	r3, [r3, #0]
   d497e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4980:	9301      	str	r3, [sp, #4]
   d4982:	bd08      	pop	{r3, pc}
   d4984:	00030220 	.word	0x00030220

000d4988 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4988:	b508      	push	{r3, lr}
   d498a:	4b03      	ldr	r3, [pc, #12]	; (d4998 <system_ctrl_set_app_request_handler+0x10>)
   d498c:	681b      	ldr	r3, [r3, #0]
   d498e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4992:	9301      	str	r3, [sp, #4]
   d4994:	bd08      	pop	{r3, pc}
   d4996:	0000      	.short	0x0000
   d4998:	00030220 	.word	0x00030220

000d499c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d499c:	b508      	push	{r3, lr}
   d499e:	4b03      	ldr	r3, [pc, #12]	; (d49ac <system_ctrl_set_result+0x10>)
   d49a0:	681b      	ldr	r3, [r3, #0]
   d49a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d49a6:	9301      	str	r3, [sp, #4]
   d49a8:	bd08      	pop	{r3, pc}
   d49aa:	0000      	.short	0x0000
   d49ac:	00030220 	.word	0x00030220

000d49b0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d49b0:	b508      	push	{r3, lr}
   d49b2:	4b02      	ldr	r3, [pc, #8]	; (d49bc <network_connect+0xc>)
   d49b4:	681b      	ldr	r3, [r3, #0]
   d49b6:	685b      	ldr	r3, [r3, #4]
   d49b8:	9301      	str	r3, [sp, #4]
   d49ba:	bd08      	pop	{r3, pc}
   d49bc:	00030240 	.word	0x00030240

000d49c0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d49c0:	b508      	push	{r3, lr}
   d49c2:	4b02      	ldr	r3, [pc, #8]	; (d49cc <network_connecting+0xc>)
   d49c4:	681b      	ldr	r3, [r3, #0]
   d49c6:	689b      	ldr	r3, [r3, #8]
   d49c8:	9301      	str	r3, [sp, #4]
   d49ca:	bd08      	pop	{r3, pc}
   d49cc:	00030240 	.word	0x00030240

000d49d0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d49d0:	b508      	push	{r3, lr}
   d49d2:	4b02      	ldr	r3, [pc, #8]	; (d49dc <network_disconnect+0xc>)
   d49d4:	681b      	ldr	r3, [r3, #0]
   d49d6:	68db      	ldr	r3, [r3, #12]
   d49d8:	9301      	str	r3, [sp, #4]
   d49da:	bd08      	pop	{r3, pc}
   d49dc:	00030240 	.word	0x00030240

000d49e0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d49e0:	b508      	push	{r3, lr}
   d49e2:	4b02      	ldr	r3, [pc, #8]	; (d49ec <network_ready+0xc>)
   d49e4:	681b      	ldr	r3, [r3, #0]
   d49e6:	691b      	ldr	r3, [r3, #16]
   d49e8:	9301      	str	r3, [sp, #4]
   d49ea:	bd08      	pop	{r3, pc}
   d49ec:	00030240 	.word	0x00030240

000d49f0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d49f0:	b508      	push	{r3, lr}
   d49f2:	4b02      	ldr	r3, [pc, #8]	; (d49fc <network_on+0xc>)
   d49f4:	681b      	ldr	r3, [r3, #0]
   d49f6:	695b      	ldr	r3, [r3, #20]
   d49f8:	9301      	str	r3, [sp, #4]
   d49fa:	bd08      	pop	{r3, pc}
   d49fc:	00030240 	.word	0x00030240

000d4a00 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4a00:	b508      	push	{r3, lr}
   d4a02:	4b02      	ldr	r3, [pc, #8]	; (d4a0c <network_off+0xc>)
   d4a04:	681b      	ldr	r3, [r3, #0]
   d4a06:	699b      	ldr	r3, [r3, #24]
   d4a08:	9301      	str	r3, [sp, #4]
   d4a0a:	bd08      	pop	{r3, pc}
   d4a0c:	00030240 	.word	0x00030240

000d4a10 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4a10:	b508      	push	{r3, lr}
   d4a12:	4b02      	ldr	r3, [pc, #8]	; (d4a1c <network_listen+0xc>)
   d4a14:	681b      	ldr	r3, [r3, #0]
   d4a16:	69db      	ldr	r3, [r3, #28]
   d4a18:	9301      	str	r3, [sp, #4]
   d4a1a:	bd08      	pop	{r3, pc}
   d4a1c:	00030240 	.word	0x00030240

000d4a20 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4a20:	b508      	push	{r3, lr}
   d4a22:	4b02      	ldr	r3, [pc, #8]	; (d4a2c <network_listening+0xc>)
   d4a24:	681b      	ldr	r3, [r3, #0]
   d4a26:	6a1b      	ldr	r3, [r3, #32]
   d4a28:	9301      	str	r3, [sp, #4]
   d4a2a:	bd08      	pop	{r3, pc}
   d4a2c:	00030240 	.word	0x00030240

000d4a30 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4a30:	b508      	push	{r3, lr}
   d4a32:	4b02      	ldr	r3, [pc, #8]	; (d4a3c <network_set_listen_timeout+0xc>)
   d4a34:	681b      	ldr	r3, [r3, #0]
   d4a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4a38:	9301      	str	r3, [sp, #4]
   d4a3a:	bd08      	pop	{r3, pc}
   d4a3c:	00030240 	.word	0x00030240

000d4a40 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4a40:	b508      	push	{r3, lr}
   d4a42:	4b02      	ldr	r3, [pc, #8]	; (d4a4c <network_get_listen_timeout+0xc>)
   d4a44:	681b      	ldr	r3, [r3, #0]
   d4a46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4a48:	9301      	str	r3, [sp, #4]
   d4a4a:	bd08      	pop	{r3, pc}
   d4a4c:	00030240 	.word	0x00030240

000d4a50 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d4a50:	b508      	push	{r3, lr}
   d4a52:	4b02      	ldr	r3, [pc, #8]	; (d4a5c <spark_cloud_flag_connected+0xc>)
   d4a54:	681b      	ldr	r3, [r3, #0]
   d4a56:	695b      	ldr	r3, [r3, #20]
   d4a58:	9301      	str	r3, [sp, #4]
   d4a5a:	bd08      	pop	{r3, pc}
   d4a5c:	00030244 	.word	0x00030244

000d4a60 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d4a60:	b508      	push	{r3, lr}
   d4a62:	4b02      	ldr	r3, [pc, #8]	; (d4a6c <spark_send_event+0xc>)
   d4a64:	681b      	ldr	r3, [r3, #0]
   d4a66:	6a1b      	ldr	r3, [r3, #32]
   d4a68:	9301      	str	r3, [sp, #4]
   d4a6a:	bd08      	pop	{r3, pc}
   d4a6c:	00030244 	.word	0x00030244

000d4a70 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4a70:	b508      	push	{r3, lr}
   d4a72:	4b02      	ldr	r3, [pc, #8]	; (d4a7c <spark_set_random_seed_from_cloud_handler+0xc>)
   d4a74:	681b      	ldr	r3, [r3, #0]
   d4a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4a78:	9301      	str	r3, [sp, #4]
   d4a7a:	bd08      	pop	{r3, pc}
   d4a7c:	00030244 	.word	0x00030244

000d4a80 <spark_publish_vitals>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
   d4a80:	b508      	push	{r3, lr}
   d4a82:	4b02      	ldr	r3, [pc, #8]	; (d4a8c <spark_publish_vitals+0xc>)
   d4a84:	681b      	ldr	r3, [r3, #0]
   d4a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4a88:	9301      	str	r3, [sp, #4]
   d4a8a:	bd08      	pop	{r3, pc}
   d4a8c:	00030244 	.word	0x00030244

000d4a90 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4a90:	b508      	push	{r3, lr}
   d4a92:	4b02      	ldr	r3, [pc, #8]	; (d4a9c <malloc+0xc>)
   d4a94:	681b      	ldr	r3, [r3, #0]
   d4a96:	681b      	ldr	r3, [r3, #0]
   d4a98:	9301      	str	r3, [sp, #4]
   d4a9a:	bd08      	pop	{r3, pc}
   d4a9c:	0003021c 	.word	0x0003021c

000d4aa0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4aa0:	b508      	push	{r3, lr}
   d4aa2:	4b02      	ldr	r3, [pc, #8]	; (d4aac <free+0xc>)
   d4aa4:	681b      	ldr	r3, [r3, #0]
   d4aa6:	685b      	ldr	r3, [r3, #4]
   d4aa8:	9301      	str	r3, [sp, #4]
   d4aaa:	bd08      	pop	{r3, pc}
   d4aac:	0003021c 	.word	0x0003021c

000d4ab0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4ab0:	b508      	push	{r3, lr}
   d4ab2:	4b02      	ldr	r3, [pc, #8]	; (d4abc <realloc+0xc>)
   d4ab4:	681b      	ldr	r3, [r3, #0]
   d4ab6:	689b      	ldr	r3, [r3, #8]
   d4ab8:	9301      	str	r3, [sp, #4]
   d4aba:	bd08      	pop	{r3, pc}
   d4abc:	0003021c 	.word	0x0003021c

000d4ac0 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4ac0:	b508      	push	{r3, lr}
   d4ac2:	4b02      	ldr	r3, [pc, #8]	; (d4acc <vsnprintf+0xc>)
   d4ac4:	681b      	ldr	r3, [r3, #0]
   d4ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4ac8:	9301      	str	r3, [sp, #4]
   d4aca:	bd08      	pop	{r3, pc}
   d4acc:	0003021c 	.word	0x0003021c

000d4ad0 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4ad0:	b508      	push	{r3, lr}
   d4ad2:	4b02      	ldr	r3, [pc, #8]	; (d4adc <abort+0xc>)
   d4ad4:	681b      	ldr	r3, [r3, #0]
   d4ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4ad8:	9301      	str	r3, [sp, #4]
   d4ada:	bd08      	pop	{r3, pc}
   d4adc:	0003021c 	.word	0x0003021c

000d4ae0 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d4ae0:	b508      	push	{r3, lr}
   d4ae2:	4b02      	ldr	r3, [pc, #8]	; (d4aec <_malloc_r+0xc>)
   d4ae4:	681b      	ldr	r3, [r3, #0]
   d4ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4ae8:	9301      	str	r3, [sp, #4]
   d4aea:	bd08      	pop	{r3, pc}
   d4aec:	0003021c 	.word	0x0003021c

000d4af0 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d4af0:	b508      	push	{r3, lr}
   d4af2:	4b02      	ldr	r3, [pc, #8]	; (d4afc <newlib_impure_ptr_callback+0xc>)
   d4af4:	681b      	ldr	r3, [r3, #0]
   d4af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4af8:	9301      	str	r3, [sp, #4]
   d4afa:	bd08      	pop	{r3, pc}
   d4afc:	0003021c 	.word	0x0003021c

000d4b00 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4b00:	2200      	movs	r2, #0
   d4b02:	6840      	ldr	r0, [r0, #4]
   d4b04:	4611      	mov	r1, r2
   d4b06:	f7ff bf8b 	b.w	d4a20 <network_listening>

000d4b0a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d4b0a:	2200      	movs	r2, #0
   d4b0c:	6840      	ldr	r0, [r0, #4]
   d4b0e:	4611      	mov	r1, r2
   d4b10:	f7ff bf96 	b.w	d4a40 <network_get_listen_timeout>

000d4b14 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d4b14:	6840      	ldr	r0, [r0, #4]
   d4b16:	2200      	movs	r2, #0
   d4b18:	f7ff bf8a 	b.w	d4a30 <network_set_listen_timeout>

000d4b1c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d4b1c:	6840      	ldr	r0, [r0, #4]
   d4b1e:	2200      	movs	r2, #0
   d4b20:	f081 0101 	eor.w	r1, r1, #1
   d4b24:	f7ff bf74 	b.w	d4a10 <network_listen>

000d4b28 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d4b28:	2300      	movs	r3, #0
   d4b2a:	6840      	ldr	r0, [r0, #4]
   d4b2c:	461a      	mov	r2, r3
   d4b2e:	4619      	mov	r1, r3
   d4b30:	f7ff bf66 	b.w	d4a00 <network_off>

000d4b34 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d4b34:	2300      	movs	r3, #0
   d4b36:	6840      	ldr	r0, [r0, #4]
   d4b38:	461a      	mov	r2, r3
   d4b3a:	4619      	mov	r1, r3
   d4b3c:	f7ff bf58 	b.w	d49f0 <network_on>

000d4b40 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4b40:	2200      	movs	r2, #0
   d4b42:	6840      	ldr	r0, [r0, #4]
   d4b44:	4611      	mov	r1, r2
   d4b46:	f7ff bf4b 	b.w	d49e0 <network_ready>

000d4b4a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d4b4a:	2200      	movs	r2, #0
   d4b4c:	6840      	ldr	r0, [r0, #4]
   d4b4e:	4611      	mov	r1, r2
   d4b50:	f7ff bf36 	b.w	d49c0 <network_connecting>

000d4b54 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4b54:	6840      	ldr	r0, [r0, #4]
   d4b56:	2200      	movs	r2, #0
   d4b58:	2102      	movs	r1, #2
   d4b5a:	f7ff bf39 	b.w	d49d0 <network_disconnect>

000d4b5e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d4b5e:	2300      	movs	r3, #0
   d4b60:	6840      	ldr	r0, [r0, #4]
   d4b62:	461a      	mov	r2, r3
   d4b64:	f7ff bf24 	b.w	d49b0 <network_connect>

000d4b68 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4b68:	4b02      	ldr	r3, [pc, #8]	; (d4b74 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4b6a:	2203      	movs	r2, #3
   d4b6c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4b6e:	4a02      	ldr	r2, [pc, #8]	; (d4b78 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4b70:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d4b72:	4770      	bx	lr
   d4b74:	2003e70c 	.word	0x2003e70c
   d4b78:	000d73c8 	.word	0x000d73c8

000d4b7c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d4b7c:	b510      	push	{r4, lr}
   d4b7e:	4604      	mov	r4, r0
   d4b80:	4608      	mov	r0, r1
{
    _spi = spi;
   d4b82:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d4b84:	f7ff fe60 	bl	d4848 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d4b88:	2300      	movs	r3, #0
   d4b8a:	6063      	str	r3, [r4, #4]
}
   d4b8c:	4620      	mov	r0, r4
   d4b8e:	bd10      	pop	{r4, pc}

000d4b90 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d4b90:	b510      	push	{r4, lr}
   d4b92:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d4b94:	6800      	ldr	r0, [r0, #0]
   d4b96:	b118      	cbz	r0, d4ba0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d4b98:	f7ff ff82 	bl	d4aa0 <free>
            wakeupSource_ = nullptr;
   d4b9c:	2300      	movs	r3, #0
   d4b9e:	6023      	str	r3, [r4, #0]
        }
    }
   d4ba0:	bd10      	pop	{r4, pc}

000d4ba2 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4ba2:	b510      	push	{r4, lr}
   d4ba4:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d4ba6:	f7ff fff3 	bl	d4b90 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d4baa:	4620      	mov	r0, r4
   d4bac:	bd10      	pop	{r4, pc}
	...

000d4bb0 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4bb0:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4bb2:	4b09      	ldr	r3, [pc, #36]	; (d4bd8 <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d4bb4:	4c09      	ldr	r4, [pc, #36]	; (d4bdc <_GLOBAL__sub_I_System+0x2c>)
   d4bb6:	2202      	movs	r2, #2
   d4bb8:	2000      	movs	r0, #0
   d4bba:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d4bbc:	4b08      	ldr	r3, [pc, #32]	; (d4be0 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d4bbe:	6020      	str	r0, [r4, #0]
   d4bc0:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d4bc2:	71a0      	strb	r0, [r4, #6]
   d4bc4:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4bc6:	f7ff febf 	bl	d4948 <set_system_mode>
SystemClass System;
   d4bca:	4620      	mov	r0, r4
   d4bcc:	4a05      	ldr	r2, [pc, #20]	; (d4be4 <_GLOBAL__sub_I_System+0x34>)
   d4bce:	4906      	ldr	r1, [pc, #24]	; (d4be8 <_GLOBAL__sub_I_System+0x38>)
   d4bd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d4bd4:	f002 ba34 	b.w	d7040 <__aeabi_atexit>
   d4bd8:	2003e720 	.word	0x2003e720
   d4bdc:	2003e714 	.word	0x2003e714
   d4be0:	ffff0000 	.word	0xffff0000
   d4be4:	2003e6c0 	.word	0x2003e6c0
   d4be8:	000d4ba3 	.word	0x000d4ba3

000d4bec <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d4bec:	b510      	push	{r4, lr}
   d4bee:	4604      	mov	r4, r0
{
	free(buffer);
   d4bf0:	6800      	ldr	r0, [r0, #0]
   d4bf2:	f7ff ff55 	bl	d4aa0 <free>
}
   d4bf6:	4620      	mov	r0, r4
   d4bf8:	bd10      	pop	{r4, pc}

000d4bfa <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d4bfa:	b510      	push	{r4, lr}
   d4bfc:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d4bfe:	6800      	ldr	r0, [r0, #0]
   d4c00:	b108      	cbz	r0, d4c06 <_ZN6String10invalidateEv+0xc>
   d4c02:	f7ff ff4d 	bl	d4aa0 <free>
	buffer = NULL;
   d4c06:	2300      	movs	r3, #0
	capacity = len = 0;
   d4c08:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d4c0c:	6023      	str	r3, [r4, #0]
}
   d4c0e:	bd10      	pop	{r4, pc}

000d4c10 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d4c10:	b538      	push	{r3, r4, r5, lr}
   d4c12:	4604      	mov	r4, r0
   d4c14:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d4c16:	6800      	ldr	r0, [r0, #0]
   d4c18:	3101      	adds	r1, #1
   d4c1a:	f7ff ff49 	bl	d4ab0 <realloc>
	if (newbuffer) {
   d4c1e:	b110      	cbz	r0, d4c26 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d4c20:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d4c24:	2001      	movs	r0, #1
	}
	return 0;
}
   d4c26:	bd38      	pop	{r3, r4, r5, pc}

000d4c28 <_ZN6String7reserveEj>:
{
   d4c28:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d4c2a:	6803      	ldr	r3, [r0, #0]
{
   d4c2c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d4c2e:	b123      	cbz	r3, d4c3a <_ZN6String7reserveEj+0x12>
   d4c30:	6843      	ldr	r3, [r0, #4]
   d4c32:	428b      	cmp	r3, r1
   d4c34:	d301      	bcc.n	d4c3a <_ZN6String7reserveEj+0x12>
   d4c36:	2001      	movs	r0, #1
}
   d4c38:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d4c3a:	4620      	mov	r0, r4
   d4c3c:	f7ff ffe8 	bl	d4c10 <_ZN6String12changeBufferEj>
   d4c40:	2800      	cmp	r0, #0
   d4c42:	d0f9      	beq.n	d4c38 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d4c44:	68a3      	ldr	r3, [r4, #8]
   d4c46:	2b00      	cmp	r3, #0
   d4c48:	d1f5      	bne.n	d4c36 <_ZN6String7reserveEj+0xe>
   d4c4a:	6822      	ldr	r2, [r4, #0]
   d4c4c:	7013      	strb	r3, [r2, #0]
   d4c4e:	e7f2      	b.n	d4c36 <_ZN6String7reserveEj+0xe>

000d4c50 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4c50:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4c52:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d4c54:	4611      	mov	r1, r2
   d4c56:	9201      	str	r2, [sp, #4]
{
   d4c58:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d4c5a:	f7ff ffe5 	bl	d4c28 <_ZN6String7reserveEj>
   d4c5e:	9a01      	ldr	r2, [sp, #4]
   d4c60:	b928      	cbnz	r0, d4c6e <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d4c62:	4620      	mov	r0, r4
   d4c64:	f7ff ffc9 	bl	d4bfa <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d4c68:	4620      	mov	r0, r4
   d4c6a:	b003      	add	sp, #12
   d4c6c:	bd30      	pop	{r4, r5, pc}
	len = length;
   d4c6e:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d4c70:	4629      	mov	r1, r5
   d4c72:	6820      	ldr	r0, [r4, #0]
   d4c74:	f002 fa00 	bl	d7078 <memcpy>
	buffer[len] = 0;
   d4c78:	6822      	ldr	r2, [r4, #0]
   d4c7a:	68a3      	ldr	r3, [r4, #8]
   d4c7c:	2100      	movs	r1, #0
   d4c7e:	54d1      	strb	r1, [r2, r3]
	return *this;
   d4c80:	e7f2      	b.n	d4c68 <_ZN6String4copyEPKcj+0x18>

000d4c82 <_ZN6StringC1EPKc>:
	buffer = NULL;
   d4c82:	2300      	movs	r3, #0
String::String(const char *cstr)
   d4c84:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d4c86:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d4c8a:	4604      	mov	r4, r0
	len = 0;
   d4c8c:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4c8e:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d4c90:	b141      	cbz	r1, d4ca4 <_ZN6StringC1EPKc+0x22>
   d4c92:	4608      	mov	r0, r1
   d4c94:	9101      	str	r1, [sp, #4]
   d4c96:	f002 fa8a 	bl	d71ae <strlen>
   d4c9a:	9901      	ldr	r1, [sp, #4]
   d4c9c:	4602      	mov	r2, r0
   d4c9e:	4620      	mov	r0, r4
   d4ca0:	f7ff ffd6 	bl	d4c50 <_ZN6String4copyEPKcj>
}
   d4ca4:	4620      	mov	r0, r4
   d4ca6:	b002      	add	sp, #8
   d4ca8:	bd10      	pop	{r4, pc}

000d4caa <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d4caa:	b538      	push	{r3, r4, r5, lr}
   d4cac:	4605      	mov	r5, r0
	if (buffer) {
   d4cae:	6800      	ldr	r0, [r0, #0]
{
   d4cb0:	460c      	mov	r4, r1
	if (buffer) {
   d4cb2:	b168      	cbz	r0, d4cd0 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   d4cb4:	686a      	ldr	r2, [r5, #4]
   d4cb6:	688b      	ldr	r3, [r1, #8]
   d4cb8:	429a      	cmp	r2, r3
   d4cba:	d307      	bcc.n	d4ccc <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   d4cbc:	6809      	ldr	r1, [r1, #0]
   d4cbe:	f002 fa50 	bl	d7162 <strcpy>
			len = rhs.len;
   d4cc2:	68a3      	ldr	r3, [r4, #8]
   d4cc4:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d4cc6:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   d4cc8:	60a3      	str	r3, [r4, #8]
}
   d4cca:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   d4ccc:	f7ff fee8 	bl	d4aa0 <free>
	buffer = rhs.buffer;
   d4cd0:	6823      	ldr	r3, [r4, #0]
   d4cd2:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d4cd4:	6863      	ldr	r3, [r4, #4]
   d4cd6:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d4cd8:	68a3      	ldr	r3, [r4, #8]
   d4cda:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d4cdc:	2300      	movs	r3, #0
	rhs.capacity = 0;
   d4cde:	e9c4 3300 	strd	r3, r3, [r4]
   d4ce2:	e7f1      	b.n	d4cc8 <_ZN6String4moveERS_+0x1e>

000d4ce4 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   d4ce4:	b510      	push	{r4, lr}
	buffer = NULL;
   d4ce6:	2300      	movs	r3, #0
	capacity = 0;
   d4ce8:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   d4cec:	4604      	mov	r4, r0
	len = 0;
   d4cee:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4cf0:	7303      	strb	r3, [r0, #12]
	move(rval);
   d4cf2:	f7ff ffda 	bl	d4caa <_ZN6String4moveERS_>
}
   d4cf6:	4620      	mov	r0, r4
   d4cf8:	bd10      	pop	{r4, pc}

000d4cfa <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d4cfa:	4288      	cmp	r0, r1
{
   d4cfc:	b510      	push	{r4, lr}
   d4cfe:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d4d00:	d005      	beq.n	d4d0e <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d4d02:	680b      	ldr	r3, [r1, #0]
   d4d04:	b12b      	cbz	r3, d4d12 <_ZN6StringaSERKS_+0x18>
   d4d06:	688a      	ldr	r2, [r1, #8]
   d4d08:	4619      	mov	r1, r3
   d4d0a:	f7ff ffa1 	bl	d4c50 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d4d0e:	4620      	mov	r0, r4
   d4d10:	bd10      	pop	{r4, pc}
	else invalidate();
   d4d12:	f7ff ff72 	bl	d4bfa <_ZN6String10invalidateEv>
   d4d16:	e7fa      	b.n	d4d0e <_ZN6StringaSERKS_+0x14>

000d4d18 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d4d18:	b510      	push	{r4, lr}
	buffer = NULL;
   d4d1a:	2300      	movs	r3, #0
String::String(const String &value)
   d4d1c:	4604      	mov	r4, r0
	capacity = 0;
   d4d1e:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d4d22:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4d24:	7303      	strb	r3, [r0, #12]
	*this = value;
   d4d26:	f7ff ffe8 	bl	d4cfa <_ZN6StringaSERKS_>
}
   d4d2a:	4620      	mov	r0, r4
   d4d2c:	bd10      	pop	{r4, pc}

000d4d2e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4d2e:	b510      	push	{r4, lr}
          _M_dispose();
   d4d30:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4d32:	4604      	mov	r4, r0
          _M_dispose();
   d4d34:	689b      	ldr	r3, [r3, #8]
   d4d36:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4d38:	68a3      	ldr	r3, [r4, #8]
   d4d3a:	3b01      	subs	r3, #1
   d4d3c:	60a3      	str	r3, [r4, #8]
   d4d3e:	b92b      	cbnz	r3, d4d4c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d4d40:	6823      	ldr	r3, [r4, #0]
   d4d42:	4620      	mov	r0, r4
   d4d44:	68db      	ldr	r3, [r3, #12]
    }
   d4d46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d4d4a:	4718      	bx	r3
    }
   d4d4c:	bd10      	pop	{r4, pc}

000d4d4e <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4d4e:	b510      	push	{r4, lr}
   d4d50:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4d52:	6800      	ldr	r0, [r0, #0]
   d4d54:	b108      	cbz	r0, d4d5a <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4d56:	f7ff fcc7 	bl	d46e8 <os_mutex_recursive_destroy>
    }
   d4d5a:	4620      	mov	r0, r4
   d4d5c:	bd10      	pop	{r4, pc}

000d4d5e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d4d5e:	680b      	ldr	r3, [r1, #0]
   d4d60:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d4d62:	b113      	cbz	r3, d4d6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d4d64:	685a      	ldr	r2, [r3, #4]
   d4d66:	3201      	adds	r2, #1
   d4d68:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
   d4d6a:	4770      	bx	lr

000d4d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d4d6c:	b510      	push	{r4, lr}
   d4d6e:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d4d70:	6800      	ldr	r0, [r0, #0]
   d4d72:	b128      	cbz	r0, d4d80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d4d74:	6843      	ldr	r3, [r0, #4]
   d4d76:	3b01      	subs	r3, #1
   d4d78:	6043      	str	r3, [r0, #4]
   d4d7a:	b90b      	cbnz	r3, d4d80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d4d7c:	f7ff ffd7 	bl	d4d2e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d4d80:	4620      	mov	r0, r4
   d4d82:	bd10      	pop	{r4, pc}

000d4d84 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4d84:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d4d86:	4c06      	ldr	r4, [pc, #24]	; (d4da0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4d88:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d4d8a:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d4d8c:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d4d8e:	f7ff fca3 	bl	d46d8 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d4d92:	4620      	mov	r0, r4
   d4d94:	4a03      	ldr	r2, [pc, #12]	; (d4da4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d4d96:	4904      	ldr	r1, [pc, #16]	; (d4da8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d4d98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d4d9c:	f002 b950 	b.w	d7040 <__aeabi_atexit>
   d4da0:	2003e724 	.word	0x2003e724
   d4da4:	2003e6c0 	.word	0x2003e6c0
   d4da8:	000d4d4f 	.word	0x000d4d4f

000d4dac <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4dae:	4606      	mov	r6, r0
   d4db0:	460d      	mov	r5, r1
  size_t n = 0;
   d4db2:	188f      	adds	r7, r1, r2
   d4db4:	2400      	movs	r4, #0
  while (size--) {
   d4db6:	42bd      	cmp	r5, r7
   d4db8:	d00c      	beq.n	d4dd4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4dba:	6833      	ldr	r3, [r6, #0]
   d4dbc:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4dc0:	689b      	ldr	r3, [r3, #8]
   d4dc2:	4630      	mov	r0, r6
   d4dc4:	4798      	blx	r3
     if (chunk>=0)
   d4dc6:	1e03      	subs	r3, r0, #0
   d4dc8:	db01      	blt.n	d4dce <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4dca:	441c      	add	r4, r3
  while (size--) {
   d4dcc:	e7f3      	b.n	d4db6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4dce:	2c00      	cmp	r4, #0
   d4dd0:	bf08      	it	eq
   d4dd2:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d4dd4:	4620      	mov	r0, r4
   d4dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4dd8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4dd8:	b513      	push	{r0, r1, r4, lr}
   d4dda:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d4ddc:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d4dde:	b159      	cbz	r1, d4df8 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d4de0:	9101      	str	r1, [sp, #4]
   d4de2:	f002 f9e4 	bl	d71ae <strlen>
   d4de6:	6823      	ldr	r3, [r4, #0]
   d4de8:	9901      	ldr	r1, [sp, #4]
   d4dea:	68db      	ldr	r3, [r3, #12]
   d4dec:	4602      	mov	r2, r0
   d4dee:	4620      	mov	r0, r4
    }
   d4df0:	b002      	add	sp, #8
   d4df2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d4df6:	4718      	bx	r3
    }
   d4df8:	b002      	add	sp, #8
   d4dfa:	bd10      	pop	{r4, pc}

000d4dfc <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4dfc:	6803      	ldr	r3, [r0, #0]
   d4dfe:	689b      	ldr	r3, [r3, #8]
   d4e00:	4718      	bx	r3

000d4e02 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4e02:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d4e04:	210d      	movs	r1, #13
{
   d4e06:	4605      	mov	r5, r0
  size_t n = print('\r');
   d4e08:	f7ff fff8 	bl	d4dfc <_ZN5Print5printEc>
  n += print('\n');
   d4e0c:	210a      	movs	r1, #10
  size_t n = print('\r');
   d4e0e:	4604      	mov	r4, r0
  n += print('\n');
   d4e10:	4628      	mov	r0, r5
   d4e12:	f7ff fff3 	bl	d4dfc <_ZN5Print5printEc>
  return n;
}
   d4e16:	4420      	add	r0, r4
   d4e18:	bd38      	pop	{r3, r4, r5, pc}

000d4e1a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4e1a:	b530      	push	{r4, r5, lr}
   d4e1c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4e1e:	2300      	movs	r3, #0
   d4e20:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4e24:	2a01      	cmp	r2, #1
   d4e26:	bf98      	it	ls
   d4e28:	220a      	movls	r2, #10
   d4e2a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d4e2c:	460d      	mov	r5, r1
   d4e2e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d4e32:	fb01 5312 	mls	r3, r1, r2, r5
   d4e36:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4e3a:	2b09      	cmp	r3, #9
   d4e3c:	bf94      	ite	ls
   d4e3e:	3330      	addls	r3, #48	; 0x30
   d4e40:	3337      	addhi	r3, #55	; 0x37
   d4e42:	b2db      	uxtb	r3, r3
  } while(n);
   d4e44:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4e46:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d4e4a:	d9ef      	bls.n	d4e2c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d4e4c:	4621      	mov	r1, r4
   d4e4e:	f7ff ffc3 	bl	d4dd8 <_ZN5Print5writeEPKc>
}
   d4e52:	b00b      	add	sp, #44	; 0x2c
   d4e54:	bd30      	pop	{r4, r5, pc}

000d4e56 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d4e56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4e5a:	b086      	sub	sp, #24
   d4e5c:	af00      	add	r7, sp, #0
   d4e5e:	4605      	mov	r5, r0
   d4e60:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d4e62:	1d38      	adds	r0, r7, #4
   d4e64:	2114      	movs	r1, #20
{
   d4e66:	4614      	mov	r4, r2
    va_copy(args2, args);
   d4e68:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d4e6a:	f7ff fe29 	bl	d4ac0 <vsnprintf>

    if (n<bufsize)
   d4e6e:	2813      	cmp	r0, #19
   d4e70:	d80e      	bhi.n	d4e90 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d4e72:	1d39      	adds	r1, r7, #4
   d4e74:	4628      	mov	r0, r5
   d4e76:	f7ff ffaf 	bl	d4dd8 <_ZN5Print5writeEPKc>
   d4e7a:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d4e7c:	b11e      	cbz	r6, d4e86 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d4e7e:	4628      	mov	r0, r5
   d4e80:	f7ff ffbf 	bl	d4e02 <_ZN5Print7printlnEv>
   d4e84:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d4e86:	4620      	mov	r0, r4
   d4e88:	3718      	adds	r7, #24
   d4e8a:	46bd      	mov	sp, r7
   d4e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d4e90:	f100 0308 	add.w	r3, r0, #8
   d4e94:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d4e98:	46e8      	mov	r8, sp
        char bigger[n+1];
   d4e9a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d4e9e:	4622      	mov	r2, r4
   d4ea0:	1c41      	adds	r1, r0, #1
   d4ea2:	683b      	ldr	r3, [r7, #0]
   d4ea4:	4668      	mov	r0, sp
   d4ea6:	f7ff fe0b 	bl	d4ac0 <vsnprintf>
  return write(str);
   d4eaa:	4669      	mov	r1, sp
   d4eac:	4628      	mov	r0, r5
   d4eae:	f7ff ff93 	bl	d4dd8 <_ZN5Print5writeEPKc>
   d4eb2:	4604      	mov	r4, r0
   d4eb4:	46c5      	mov	sp, r8
   d4eb6:	e7e1      	b.n	d4e7c <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d4eb8 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   d4eb8:	6880      	ldr	r0, [r0, #8]
   d4eba:	6803      	ldr	r3, [r0, #0]
   d4ebc:	68db      	ldr	r3, [r3, #12]
   d4ebe:	4718      	bx	r3

000d4ec0 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   d4ec0:	4770      	bx	lr

000d4ec2 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   d4ec2:	4608      	mov	r0, r1
   d4ec4:	b111      	cbz	r1, d4ecc <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   d4ec6:	680b      	ldr	r3, [r1, #0]
   d4ec8:	685b      	ldr	r3, [r3, #4]
   d4eca:	4718      	bx	r3
}
   d4ecc:	4770      	bx	lr

000d4ece <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   d4ece:	4770      	bx	lr

000d4ed0 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   d4ed0:	4770      	bx	lr

000d4ed2 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   d4ed2:	4770      	bx	lr

000d4ed4 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
    return s;
}
#endif

// Iterates over subcategory names separated by '.' character
const char* nextSubcategoryName(const char* &category, size_t &size) {
   d4ed4:	b538      	push	{r3, r4, r5, lr}
   d4ed6:	4604      	mov	r4, r0
   d4ed8:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   d4eda:	6800      	ldr	r0, [r0, #0]
   d4edc:	212e      	movs	r1, #46	; 0x2e
   d4ede:	f002 f92c 	bl	d713a <strchrnul>
    size = s - category;
   d4ee2:	6823      	ldr	r3, [r4, #0]
   d4ee4:	1ac3      	subs	r3, r0, r3
   d4ee6:	602b      	str	r3, [r5, #0]
    if (size) {
   d4ee8:	b123      	cbz	r3, d4ef4 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   d4eea:	7803      	ldrb	r3, [r0, #0]
   d4eec:	b103      	cbz	r3, d4ef0 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   d4eee:	3001      	adds	r0, #1
   d4ef0:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d4ef2:	6020      	str	r0, [r4, #0]
        }
        std::swap(s, category);
        return s;
    }
    return nullptr;
}
   d4ef4:	4618      	mov	r0, r3
   d4ef6:	bd38      	pop	{r3, r4, r5, pc}

000d4ef8 <_ZN5spark16JSONStreamWriterD0Ev>:
   d4ef8:	b510      	push	{r4, lr}
   d4efa:	210c      	movs	r1, #12
   d4efc:	4604      	mov	r4, r0
   d4efe:	f002 f8a4 	bl	d704a <_ZdlPvj>
   d4f02:	4620      	mov	r0, r4
   d4f04:	bd10      	pop	{r4, pc}

000d4f06 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   d4f06:	b510      	push	{r4, lr}
   d4f08:	2104      	movs	r1, #4
   d4f0a:	4604      	mov	r4, r0
   d4f0c:	f002 f89d 	bl	d704a <_ZdlPvj>
   d4f10:	4620      	mov	r0, r4
   d4f12:	bd10      	pop	{r4, pc}

000d4f14 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   d4f14:	b510      	push	{r4, lr}
   d4f16:	2104      	movs	r1, #4
   d4f18:	4604      	mov	r4, r0
   d4f1a:	f002 f896 	bl	d704a <_ZdlPvj>
   d4f1e:	4620      	mov	r0, r4
   d4f20:	bd10      	pop	{r4, pc}

000d4f22 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   d4f22:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   d4f24:	f002 f913 	bl	d714e <strcmp>
}
   d4f28:	fab0 f080 	clz	r0, r0
   d4f2c:	0940      	lsrs	r0, r0, #5
   d4f2e:	bd08      	pop	{r3, pc}

000d4f30 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   d4f30:	b510      	push	{r4, lr}
   d4f32:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   d4f34:	f001 fbb2 	bl	d669c <_Z16_fetch_usbserialv>
   d4f38:	4284      	cmp	r4, r0
   d4f3a:	d010      	beq.n	d4f5e <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   d4f3c:	f001 fc8c 	bl	d6858 <_Z22__fetch_global_Serial1v>
   d4f40:	4284      	cmp	r4, r0
   d4f42:	d105      	bne.n	d4f50 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   d4f44:	f001 fc88 	bl	d6858 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   d4f48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   d4f4c:	f001 bc81 	b.w	d6852 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   d4f50:	b12c      	cbz	r4, d4f5e <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   d4f52:	6823      	ldr	r3, [r4, #0]
   d4f54:	4620      	mov	r0, r4
   d4f56:	685b      	ldr	r3, [r3, #4]
}
   d4f58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4f5c:	4718      	bx	r3
   d4f5e:	bd10      	pop	{r4, pc}

000d4f60 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d4f60:	b513      	push	{r0, r1, r4, lr}
   d4f62:	4604      	mov	r4, r0
    return value(val, strlen(val));
   d4f64:	4608      	mov	r0, r1
   d4f66:	9101      	str	r1, [sp, #4]
   d4f68:	f002 f921 	bl	d71ae <strlen>
   d4f6c:	9901      	ldr	r1, [sp, #4]
   d4f6e:	4602      	mov	r2, r0
   d4f70:	4620      	mov	r0, r4
}
   d4f72:	b002      	add	sp, #8
   d4f74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   d4f78:	f001 bfc2 	b.w	d6f00 <_ZN5spark10JSONWriter5valueEPKcj>

000d4f7c <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   d4f7c:	b513      	push	{r0, r1, r4, lr}
   d4f7e:	4604      	mov	r4, r0
    write(str, strlen(str));
   d4f80:	4608      	mov	r0, r1
   d4f82:	9101      	str	r1, [sp, #4]
   d4f84:	f002 f913 	bl	d71ae <strlen>
   d4f88:	6823      	ldr	r3, [r4, #0]
   d4f8a:	9901      	ldr	r1, [sp, #4]
   d4f8c:	68db      	ldr	r3, [r3, #12]
   d4f8e:	4602      	mov	r2, r0
   d4f90:	4620      	mov	r0, r4
}
   d4f92:	b002      	add	sp, #8
   d4f94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   d4f98:	4718      	bx	r3

000d4f9a <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   d4f9a:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d4f9c:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   d4f9e:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d4fa2:	68db      	ldr	r3, [r3, #12]
   d4fa4:	2201      	movs	r2, #1
   d4fa6:	f10d 0107 	add.w	r1, sp, #7
   d4faa:	4798      	blx	r3
}
   d4fac:	b003      	add	sp, #12
   d4fae:	f85d fb04 	ldr.w	pc, [sp], #4

000d4fb2 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   d4fb2:	b40e      	push	{r1, r2, r3}
   d4fb4:	b503      	push	{r0, r1, lr}
   d4fb6:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   d4fb8:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   d4fba:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   d4fbe:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   d4fc0:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   d4fc2:	f7ff ff48 	bl	d4e56 <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   d4fc6:	b002      	add	sp, #8
   d4fc8:	f85d eb04 	ldr.w	lr, [sp], #4
   d4fcc:	b003      	add	sp, #12
   d4fce:	4770      	bx	lr

000d4fd0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d4fd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   d4fd4:	e9d0 9500 	ldrd	r9, r5, [r0]
   d4fd8:	f04f 0814 	mov.w	r8, #20
   d4fdc:	fb08 f505 	mul.w	r5, r8, r5
   d4fe0:	9300      	str	r3, [sp, #0]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d4fe2:	10ab      	asrs	r3, r5, #2
   d4fe4:	4d18      	ldr	r5, [pc, #96]	; (d5048 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   d4fe6:	4617      	mov	r7, r2
   d4fe8:	435d      	muls	r5, r3
   d4fea:	464c      	mov	r4, r9
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   d4fec:	2d00      	cmp	r5, #0
   d4fee:	dd23      	ble.n	d5038 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x68>
	{
	  _DistanceType __half = __len >> 1;
   d4ff0:	106e      	asrs	r6, r5, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   d4ff2:	fb08 f006 	mul.w	r0, r8, r6
   d4ff6:	eb04 0a00 	add.w	sl, r4, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   d4ffa:	463a      	mov	r2, r7
   d4ffc:	f8ba b004 	ldrh.w	fp, [sl, #4]
   d5000:	5820      	ldr	r0, [r4, r0]
   d5002:	9101      	str	r1, [sp, #4]
   d5004:	455f      	cmp	r7, fp
   d5006:	bf28      	it	cs
   d5008:	465a      	movcs	r2, fp
   d500a:	f002 f8d8 	bl	d71be <strncmp>
                if (cmp == 0) {
   d500e:	9901      	ldr	r1, [sp, #4]
   d5010:	2301      	movs	r3, #1
   d5012:	b978      	cbnz	r0, d5034 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
                    if (node.size == value.second) { // Lengths are equal
   d5014:	455f      	cmp	r7, fp
   d5016:	d103      	bne.n	d5020 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d5018:	9a00      	ldr	r2, [sp, #0]
   d501a:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d501c:	4635      	mov	r5, r6
   d501e:	e7e5      	b.n	d4fec <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
                    return node.size < value.second;
   d5020:	bf8c      	ite	hi
   d5022:	2001      	movhi	r0, #1
   d5024:	2000      	movls	r0, #0
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   d5026:	2800      	cmp	r0, #0
   d5028:	d0f8      	beq.n	d501c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   d502a:	1bae      	subs	r6, r5, r6
	      ++__first;
   d502c:	f10a 0414 	add.w	r4, sl, #20
	      __len = __len - __half - 1;
   d5030:	3e01      	subs	r6, #1
   d5032:	e7f3      	b.n	d501c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
                return cmp < 0;
   d5034:	0fc0      	lsrs	r0, r0, #31
   d5036:	e7f6      	b.n	d5026 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
      return __last - __first;
   d5038:	eba4 0409 	sub.w	r4, r4, r9
}
   d503c:	4802      	ldr	r0, [pc, #8]	; (d5048 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   d503e:	10a4      	asrs	r4, r4, #2
   d5040:	4360      	muls	r0, r4
   d5042:	b003      	add	sp, #12
   d5044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5048:	cccccccd 	.word	0xcccccccd

000d504c <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   d504c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   d504e:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   d5050:	7e06      	ldrb	r6, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   d5052:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   d5054:	b30b      	cbz	r3, d509a <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
   d5056:	b301      	cbz	r1, d509a <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
        size_t size = 0; // Name length
   d5058:	2500      	movs	r5, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   d505a:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   d505e:	9503      	str	r5, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   d5060:	a903      	add	r1, sp, #12
   d5062:	a801      	add	r0, sp, #4
   d5064:	f7ff ff36 	bl	d4ed4 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d5068:	4601      	mov	r1, r0
   d506a:	b1b0      	cbz	r0, d509a <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
            const int index = nodeIndex(*pNodes, name, size, found);
   d506c:	f10d 030b 	add.w	r3, sp, #11
   d5070:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   d5072:	f88d 500b 	strb.w	r5, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   d5076:	4620      	mov	r0, r4
   d5078:	f7ff ffaa 	bl	d4fd0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   d507c:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d5080:	b15b      	cbz	r3, d509a <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
    return data_[i];
   d5082:	6824      	ldr	r4, [r4, #0]
   d5084:	2314      	movs	r3, #20
   d5086:	fb03 4000 	mla	r0, r3, r0, r4
            pNodes = &node.nodes;
   d508a:	f100 0408 	add.w	r4, r0, #8
            if (node.level >= 0) {
   d508e:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
   d5092:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   d5094:	bfa8      	it	ge
   d5096:	b2de      	uxtbge	r6, r3
        while ((name = nextSubcategoryName(category, size))) {
   d5098:	e7e2      	b.n	d5060 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   d509a:	4630      	mov	r0, r6
   d509c:	b004      	add	sp, #16
   d509e:	bd70      	pop	{r4, r5, r6, pc}

000d50a0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   d50a0:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   d50a2:	4c0a      	ldr	r4, [pc, #40]	; (d50cc <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   d50a4:	7823      	ldrb	r3, [r4, #0]
   d50a6:	f3bf 8f5b 	dmb	ish
   d50aa:	07db      	lsls	r3, r3, #31
   d50ac:	d40b      	bmi.n	d50c6 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x26>
   d50ae:	4620      	mov	r0, r4
   d50b0:	f7ff f800 	bl	d40b4 <__cxa_guard_acquire>
   d50b4:	b138      	cbz	r0, d50c6 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x26>
   d50b6:	4620      	mov	r0, r4
   d50b8:	f7ff f801 	bl	d40be <__cxa_guard_release>
   d50bc:	4a04      	ldr	r2, [pc, #16]	; (d50d0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   d50be:	4905      	ldr	r1, [pc, #20]	; (d50d4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d50c0:	4805      	ldr	r0, [pc, #20]	; (d50d8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x38>)
   d50c2:	f001 ffbd 	bl	d7040 <__aeabi_atexit>
}
   d50c6:	4804      	ldr	r0, [pc, #16]	; (d50d8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x38>)
   d50c8:	bd10      	pop	{r4, pc}
   d50ca:	bf00      	nop
   d50cc:	2003e72c 	.word	0x2003e72c
   d50d0:	2003e6c0 	.word	0x2003e6c0
   d50d4:	000d4ed1 	.word	0x000d4ed1
   d50d8:	2003e650 	.word	0x2003e650

000d50dc <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   d50dc:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   d50de:	4c0a      	ldr	r4, [pc, #40]	; (d5108 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   d50e0:	7823      	ldrb	r3, [r4, #0]
   d50e2:	f3bf 8f5b 	dmb	ish
   d50e6:	07db      	lsls	r3, r3, #31
   d50e8:	d40b      	bmi.n	d5102 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x26>
   d50ea:	4620      	mov	r0, r4
   d50ec:	f7fe ffe2 	bl	d40b4 <__cxa_guard_acquire>
   d50f0:	b138      	cbz	r0, d5102 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x26>
   d50f2:	4620      	mov	r0, r4
   d50f4:	f7fe ffe3 	bl	d40be <__cxa_guard_release>
   d50f8:	4a04      	ldr	r2, [pc, #16]	; (d510c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   d50fa:	4905      	ldr	r1, [pc, #20]	; (d5110 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d50fc:	4805      	ldr	r0, [pc, #20]	; (d5114 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x38>)
   d50fe:	f001 ff9f 	bl	d7040 <__aeabi_atexit>
    return &factory;
}
   d5102:	4804      	ldr	r0, [pc, #16]	; (d5114 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x38>)
   d5104:	bd10      	pop	{r4, pc}
   d5106:	bf00      	nop
   d5108:	2003e730 	.word	0x2003e730
   d510c:	2003e6c0 	.word	0x2003e6c0
   d5110:	000d4ecf 	.word	0x000d4ecf
   d5114:	2003e654 	.word	0x2003e654

000d5118 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   d5118:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   d511a:	2500      	movs	r5, #0
   d511c:	4604      	mov	r4, r0
   d511e:	e9c0 5500 	strd	r5, r5, [r0]
   d5122:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d5126:	6085      	str	r5, [r0, #8]
   d5128:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   d512a:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   d512e:	f7ff fad3 	bl	d46d8 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   d5132:	f7ff ffb5 	bl	d50a0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   d5136:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d5138:	f7ff ffd0 	bl	d50dc <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   d513c:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d513e:	6220      	str	r0, [r4, #32]
}
   d5140:	4620      	mov	r0, r4
   d5142:	bd38      	pop	{r3, r4, r5, pc}

000d5144 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   d5144:	b510      	push	{r4, lr}
    static LogManager mgr;
   d5146:	4c0b      	ldr	r4, [pc, #44]	; (d5174 <_ZN5spark10LogManager8instanceEv+0x30>)
   d5148:	7823      	ldrb	r3, [r4, #0]
   d514a:	f3bf 8f5b 	dmb	ish
   d514e:	07db      	lsls	r3, r3, #31
   d5150:	d40e      	bmi.n	d5170 <_ZN5spark10LogManager8instanceEv+0x2c>
   d5152:	4620      	mov	r0, r4
   d5154:	f7fe ffae 	bl	d40b4 <__cxa_guard_acquire>
   d5158:	b150      	cbz	r0, d5170 <_ZN5spark10LogManager8instanceEv+0x2c>
   d515a:	4807      	ldr	r0, [pc, #28]	; (d5178 <_ZN5spark10LogManager8instanceEv+0x34>)
   d515c:	f7ff ffdc 	bl	d5118 <_ZN5spark10LogManagerC1Ev>
   d5160:	4620      	mov	r0, r4
   d5162:	f7fe ffac 	bl	d40be <__cxa_guard_release>
   d5166:	4a05      	ldr	r2, [pc, #20]	; (d517c <_ZN5spark10LogManager8instanceEv+0x38>)
   d5168:	4905      	ldr	r1, [pc, #20]	; (d5180 <_ZN5spark10LogManager8instanceEv+0x3c>)
   d516a:	4803      	ldr	r0, [pc, #12]	; (d5178 <_ZN5spark10LogManager8instanceEv+0x34>)
   d516c:	f001 ff68 	bl	d7040 <__aeabi_atexit>
    return &mgr;
}
   d5170:	4801      	ldr	r0, [pc, #4]	; (d5178 <_ZN5spark10LogManager8instanceEv+0x34>)
   d5172:	bd10      	pop	{r4, pc}
   d5174:	2003e728 	.word	0x2003e728
   d5178:	2003e738 	.word	0x2003e738
   d517c:	2003e6c0 	.word	0x2003e6c0
   d5180:	000d55d9 	.word	0x000d55d9

000d5184 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   d5184:	4a02      	ldr	r2, [pc, #8]	; (d5190 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   d5186:	4903      	ldr	r1, [pc, #12]	; (d5194 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   d5188:	4803      	ldr	r0, [pc, #12]	; (d5198 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   d518a:	2300      	movs	r3, #0
   d518c:	f7ff bbd4 	b.w	d4938 <log_set_callbacks>
   d5190:	000d54b5 	.word	0x000d54b5
   d5194:	000d5441 	.word	0x000d5441
   d5198:	000d53c1 	.word	0x000d53c1

000d519c <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   d519c:	2300      	movs	r3, #0
   d519e:	461a      	mov	r2, r3
   d51a0:	4619      	mov	r1, r3
   d51a2:	4618      	mov	r0, r3
   d51a4:	f7ff bbc8 	b.w	d4938 <log_set_callbacks>

000d51a8 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d51a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   d51aa:	690d      	ldr	r5, [r1, #16]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d51ac:	f851 3b04 	ldr.w	r3, [r1], #4
   d51b0:	9300      	str	r3, [sp, #0]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d51b2:	4604      	mov	r4, r0
   d51b4:	a801      	add	r0, sp, #4
   d51b6:	f7ff fdd2 	bl	d4d5e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONValue(v_, d_);
   d51ba:	466a      	mov	r2, sp
   d51bc:	4629      	mov	r1, r5
   d51be:	4620      	mov	r0, r4
   d51c0:	f001 fd48 	bl	d6c54 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d51c4:	a801      	add	r0, sp, #4
   d51c6:	f7ff fdd1 	bl	d4d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d51ca:	4620      	mov	r0, r4
   d51cc:	b003      	add	sp, #12
   d51ce:	bd30      	pop	{r4, r5, pc}

000d51d0 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d51d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   d51d2:	688d      	ldr	r5, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d51d4:	f851 3b04 	ldr.w	r3, [r1], #4
   d51d8:	9300      	str	r3, [sp, #0]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d51da:	4604      	mov	r4, r0
   d51dc:	a801      	add	r0, sp, #4
   d51de:	f7ff fdbe 	bl	d4d5e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        JSONObjectIterator(value.t_, value.d_) {
   d51e2:	466a      	mov	r2, sp
   d51e4:	4629      	mov	r1, r5
   d51e6:	4620      	mov	r0, r4
   d51e8:	f001 fdb0 	bl	d6d4c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d51ec:	a801      	add	r0, sp, #4
   d51ee:	f7ff fdbd 	bl	d4d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d51f2:	4620      	mov	r0, r4
   d51f4:	b003      	add	sp, #12
   d51f6:	bd30      	pop	{r4, r5, pc}

000d51f8 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d51f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   d51fa:	68cd      	ldr	r5, [r1, #12]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d51fc:	f851 3b04 	ldr.w	r3, [r1], #4
   d5200:	9300      	str	r3, [sp, #0]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d5202:	4604      	mov	r4, r0
   d5204:	a801      	add	r0, sp, #4
   d5206:	f7ff fdaa 	bl	d4d5e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONString(k_, d_);
   d520a:	466a      	mov	r2, sp
   d520c:	4629      	mov	r1, r5
   d520e:	4620      	mov	r0, r4
   d5210:	f001 fd78 	bl	d6d04 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d5214:	a801      	add	r0, sp, #4
   d5216:	f7ff fda9 	bl	d4d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d521a:	4620      	mov	r0, r4
   d521c:	b003      	add	sp, #12
   d521e:	bd30      	pop	{r4, r5, pc}

000d5220 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   d5220:	b570      	push	{r4, r5, r6, lr}
   d5222:	b08a      	sub	sp, #40	; 0x28
   d5224:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   d5226:	4601      	mov	r1, r0
   d5228:	a804      	add	r0, sp, #16
   d522a:	f7ff ffd1 	bl	d51d0 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   d522e:	4e14      	ldr	r6, [pc, #80]	; (d5280 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   d5230:	a804      	add	r0, sp, #16
   d5232:	f001 fda3 	bl	d6d7c <_ZN5spark18JSONObjectIterator4nextEv>
   d5236:	b1e8      	cbz	r0, d5274 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   d5238:	a904      	add	r1, sp, #16
   d523a:	4668      	mov	r0, sp
   d523c:	f7ff ffdc 	bl	d51f8 <_ZNK5spark18JSONObjectIterator4nameEv>
   d5240:	9802      	ldr	r0, [sp, #8]
   d5242:	4631      	mov	r1, r6
   d5244:	f7ff fe6d 	bl	d4f22 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   d5248:	4604      	mov	r4, r0
   d524a:	b110      	cbz	r0, d5252 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   d524c:	1e2c      	subs	r4, r5, #0
   d524e:	bf18      	it	ne
   d5250:	2401      	movne	r4, #1
   d5252:	a801      	add	r0, sp, #4
   d5254:	f7ff fd8a 	bl	d4d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5258:	2c00      	cmp	r4, #0
   d525a:	d0e9      	beq.n	d5230 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   d525c:	a904      	add	r1, sp, #16
   d525e:	4668      	mov	r0, sp
   d5260:	f7ff ffa2 	bl	d51a8 <_ZNK5spark18JSONObjectIterator5valueEv>
   d5264:	4668      	mov	r0, sp
   d5266:	f001 fd2b 	bl	d6cc0 <_ZNK5spark9JSONValue5toIntEv>
   d526a:	6028      	str	r0, [r5, #0]
   d526c:	a801      	add	r0, sp, #4
   d526e:	f7ff fd7d 	bl	d4d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5272:	e7dd      	b.n	d5230 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   d5274:	a805      	add	r0, sp, #20
   d5276:	f7ff fd79 	bl	d4d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d527a:	b00a      	add	sp, #40	; 0x28
   d527c:	bd70      	pop	{r4, r5, r6, pc}
   d527e:	bf00      	nop
   d5280:	000d73f4 	.word	0x000d73f4

000d5284 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d5284:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5286:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   d5288:	4620      	mov	r0, r4
   d528a:	4912      	ldr	r1, [pc, #72]	; (d52d4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d528c:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   d528e:	f001 ff5e 	bl	d714e <strcmp>
   d5292:	b948      	cbnz	r0, d52a8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x24>
        Serial.begin();
   d5294:	f001 fa02 	bl	d669c <_Z16_fetch_usbserialv>
   d5298:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d529c:	f001 f9ee 	bl	d667c <_ZN9USBSerial5beginEl>
        return &Serial;
   d52a0:	f001 f9fc 	bl	d669c <_Z16_fetch_usbserialv>
}
   d52a4:	b003      	add	sp, #12
   d52a6:	bd30      	pop	{r4, r5, pc}
    if (strcmp(type, "Serial1") == 0) {
   d52a8:	490b      	ldr	r1, [pc, #44]	; (d52d8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
   d52aa:	4620      	mov	r0, r4
   d52ac:	f001 ff4f 	bl	d714e <strcmp>
   d52b0:	b970      	cbnz	r0, d52d0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   d52b2:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   d52b6:	a901      	add	r1, sp, #4
   d52b8:	4628      	mov	r0, r5
        int baud = 9600;
   d52ba:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   d52bc:	f7ff ffb0 	bl	d5220 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   d52c0:	f001 faca 	bl	d6858 <_Z22__fetch_global_Serial1v>
   d52c4:	9901      	ldr	r1, [sp, #4]
   d52c6:	f001 fac1 	bl	d684c <_ZN11USARTSerial5beginEm>
        return &Serial1;
   d52ca:	f001 fac5 	bl	d6858 <_Z22__fetch_global_Serial1v>
   d52ce:	e7e9      	b.n	d52a4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    return nullptr;
   d52d0:	2000      	movs	r0, #0
   d52d2:	e7e7      	b.n	d52a4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
   d52d4:	000d73f9 	.word	0x000d73f9
   d52d8:	000d7400 	.word	0x000d7400

000d52dc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d52dc:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d52de:	e9d0 5300 	ldrd	r5, r3, [r0]
   d52e2:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d52e4:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d52e6:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d52ea:	42ae      	cmp	r6, r5
   d52ec:	d005      	beq.n	d52fa <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   d52ee:	f105 0008 	add.w	r0, r5, #8
   d52f2:	f7ff fff3 	bl	d52dc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d52f6:	3514      	adds	r5, #20
   d52f8:	e7f7      	b.n	d52ea <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d52fa:	6820      	ldr	r0, [r4, #0]
   d52fc:	f7ff fbd0 	bl	d4aa0 <free>
}
   d5300:	4620      	mov	r0, r4
   d5302:	bd70      	pop	{r4, r5, r6, pc}

000d5304 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5304:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d5306:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d530a:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d530c:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   d5310:	42ae      	cmp	r6, r5
   d5312:	d004      	beq.n	d531e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   d5314:	4628      	mov	r0, r5
   d5316:	f7ff fc69 	bl	d4bec <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   d531a:	3510      	adds	r5, #16
   d531c:	e7f8      	b.n	d5310 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d531e:	6820      	ldr	r0, [r4, #0]
   d5320:	f7ff fbbe 	bl	d4aa0 <free>
}
   d5324:	4620      	mov	r0, r4
   d5326:	bd70      	pop	{r4, r5, r6, pc}

000d5328 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   d5328:	b510      	push	{r4, lr}
   d532a:	4604      	mov	r4, r0
   d532c:	300c      	adds	r0, #12
   d532e:	f7ff ffd5 	bl	d52dc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d5332:	4620      	mov	r0, r4
   d5334:	f7ff ffe6 	bl	d5304 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d5338:	4620      	mov	r0, r4
   d533a:	bd10      	pop	{r4, pc}

000d533c <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   d533c:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   d533e:	4b04      	ldr	r3, [pc, #16]	; (d5350 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   d5340:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   d5342:	f840 3b04 	str.w	r3, [r0], #4
   d5346:	f7ff ffef 	bl	d5328 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   d534a:	4620      	mov	r0, r4
   d534c:	bd10      	pop	{r4, pc}
   d534e:	bf00      	nop
   d5350:	000d7398 	.word	0x000d7398

000d5354 <_ZN5spark16StreamLogHandlerD0Ev>:
   d5354:	b510      	push	{r4, lr}
   d5356:	4604      	mov	r4, r0
   d5358:	f7ff fff0 	bl	d533c <_ZN5spark16StreamLogHandlerD1Ev>
   d535c:	4620      	mov	r0, r4
   d535e:	2124      	movs	r1, #36	; 0x24
   d5360:	f001 fe73 	bl	d704a <_ZdlPvj>
   d5364:	4620      	mov	r0, r4
   d5366:	bd10      	pop	{r4, pc}

000d5368 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   d5368:	b510      	push	{r4, lr}
   d536a:	4b03      	ldr	r3, [pc, #12]	; (d5378 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   d536c:	6003      	str	r3, [r0, #0]
   d536e:	4604      	mov	r4, r0
   d5370:	f7ff ffe4 	bl	d533c <_ZN5spark16StreamLogHandlerD1Ev>
   d5374:	4620      	mov	r0, r4
   d5376:	bd10      	pop	{r4, pc}
   d5378:	000d74a4 	.word	0x000d74a4

000d537c <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   d537c:	b510      	push	{r4, lr}
   d537e:	4604      	mov	r4, r0
   d5380:	f7ff fff2 	bl	d5368 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   d5384:	4620      	mov	r0, r4
   d5386:	2124      	movs	r1, #36	; 0x24
   d5388:	f001 fe5f 	bl	d704a <_ZdlPvj>
   d538c:	4620      	mov	r0, r4
   d538e:	bd10      	pop	{r4, pc}

000d5390 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   d5390:	2200      	movs	r2, #0
   d5392:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d5396:	b510      	push	{r4, lr}
        capacity_(0) {
   d5398:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   d539a:	680c      	ldr	r4, [r1, #0]
   d539c:	6004      	str	r4, [r0, #0]
   d539e:	684c      	ldr	r4, [r1, #4]
   d53a0:	6044      	str	r4, [r0, #4]
   d53a2:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d53a4:	600a      	str	r2, [r1, #0]
   d53a6:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d53a8:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d53aa:	608a      	str	r2, [r1, #8]
}
   d53ac:	bd10      	pop	{r4, pc}

000d53ae <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d53ae:	b510      	push	{r4, lr}
      { _M_device.unlock(); }
   d53b0:	6803      	ldr	r3, [r0, #0]
      ~lock_guard()
   d53b2:	4604      	mov	r4, r0
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d53b4:	6818      	ldr	r0, [r3, #0]
   d53b6:	f7ff f9a7 	bl	d4708 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   d53ba:	4620      	mov	r0, r4
   d53bc:	bd10      	pop	{r4, pc}
	...

000d53c0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d53c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d53c4:	b087      	sub	sp, #28
   d53c6:	4680      	mov	r8, r0
   d53c8:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   d53ca:	4b1c      	ldr	r3, [pc, #112]	; (d543c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   d53cc:	685b      	ldr	r3, [r3, #4]
   d53ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d53d2:	4689      	mov	r9, r1
   d53d4:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d53d6:	b96b      	cbnz	r3, d53f4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   d53d8:	f7ff feb4 	bl	d5144 <_ZN5spark10LogManager8instanceEv>
   d53dc:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d53de:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
   d53e2:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d53e4:	9305      	str	r3, [sp, #20]
   d53e6:	f7ff f987 	bl	d46f8 <os_mutex_recursive_lock>
        // prevent re-entry
        if (that->isActive()) {
   d53ea:	7b23      	ldrb	r3, [r4, #12]
   d53ec:	b12b      	cbz	r3, d53fa <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   d53ee:	a805      	add	r0, sp, #20
   d53f0:	f7ff ffdd 	bl	d53ae <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   d53f4:	b007      	add	sp, #28
   d53f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d53fa:	2301      	movs	r3, #1
   d53fc:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   d53fe:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   d5402:	fa5f f989 	uxtb.w	r9, r9
   d5406:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d540a:	45aa      	cmp	sl, r5
   d540c:	d012      	beq.n	d5434 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   d540e:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   d5412:	4631      	mov	r1, r6
   d5414:	1d38      	adds	r0, r7, #4
   d5416:	f7ff fe19 	bl	d504c <_ZNK5spark6detail9LogFilter5levelEPKc>
   d541a:	4581      	cmp	r9, r0
   d541c:	d3f5      	bcc.n	d540a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   d541e:	683b      	ldr	r3, [r7, #0]
   d5420:	9a03      	ldr	r2, [sp, #12]
   d5422:	9200      	str	r2, [sp, #0]
   d5424:	f8d3 b008 	ldr.w	fp, [r3, #8]
   d5428:	464a      	mov	r2, r9
   d542a:	4633      	mov	r3, r6
   d542c:	4641      	mov	r1, r8
   d542e:	4638      	mov	r0, r7
   d5430:	47d8      	blx	fp
   d5432:	e7ea      	b.n	d540a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   d5434:	2300      	movs	r3, #0
   d5436:	7323      	strb	r3, [r4, #12]
   d5438:	e7d9      	b.n	d53ee <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   d543a:	bf00      	nop
   d543c:	e000ed00 	.word	0xe000ed00

000d5440 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d5440:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5444:	469b      	mov	fp, r3
   d5446:	4b1a      	ldr	r3, [pc, #104]	; (d54b0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   d5448:	685b      	ldr	r3, [r3, #4]
   d544a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d544e:	4680      	mov	r8, r0
   d5450:	4689      	mov	r9, r1
   d5452:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   d5454:	b96b      	cbnz	r3, d5472 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   d5456:	f7ff fe75 	bl	d5144 <_ZN5spark10LogManager8instanceEv>
   d545a:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d545c:	f100 0324 	add.w	r3, r0, #36	; 0x24
   d5460:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d5462:	9301      	str	r3, [sp, #4]
   d5464:	f7ff f948 	bl	d46f8 <os_mutex_recursive_lock>
        if (that->isActive()) {
   d5468:	7b23      	ldrb	r3, [r4, #12]
   d546a:	b12b      	cbz	r3, d5478 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   d546c:	a801      	add	r0, sp, #4
   d546e:	f7ff ff9e 	bl	d53ae <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   d5472:	b003      	add	sp, #12
   d5474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   d5478:	2301      	movs	r3, #1
   d547a:	7323      	strb	r3, [r4, #12]
   d547c:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   d5480:	b2f6      	uxtb	r6, r6
   d5482:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d5486:	4555      	cmp	r5, sl
   d5488:	d00e      	beq.n	d54a8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   d548a:	f855 7b04 	ldr.w	r7, [r5], #4
   d548e:	4659      	mov	r1, fp
   d5490:	1d38      	adds	r0, r7, #4
   d5492:	f7ff fddb 	bl	d504c <_ZNK5spark6detail9LogFilter5levelEPKc>
   d5496:	4286      	cmp	r6, r0
   d5498:	d3f5      	bcc.n	d5486 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   d549a:	683b      	ldr	r3, [r7, #0]
   d549c:	464a      	mov	r2, r9
   d549e:	68db      	ldr	r3, [r3, #12]
   d54a0:	4641      	mov	r1, r8
   d54a2:	4638      	mov	r0, r7
   d54a4:	4798      	blx	r3
   d54a6:	e7ee      	b.n	d5486 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   d54a8:	2300      	movs	r3, #0
   d54aa:	7323      	strb	r3, [r4, #12]
   d54ac:	e7de      	b.n	d546c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   d54ae:	bf00      	nop
   d54b0:	e000ed00 	.word	0xe000ed00

000d54b4 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d54b4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d54b8:	4b16      	ldr	r3, [pc, #88]	; (d5514 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   d54ba:	685b      	ldr	r3, [r3, #4]
   d54bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d54c0:	4605      	mov	r5, r0
   d54c2:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   d54c4:	bb1b      	cbnz	r3, d550e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   d54c6:	f7ff fe3d 	bl	d5144 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   d54ca:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   d54ce:	4604      	mov	r4, r0
   d54d0:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d54d2:	9301      	str	r3, [sp, #4]
   d54d4:	f7ff f910 	bl	d46f8 <os_mutex_recursive_lock>
   d54d8:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   d54dc:	2446      	movs	r4, #70	; 0x46
   d54de:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d54e2:	45b0      	cmp	r8, r6
   d54e4:	d109      	bne.n	d54fa <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   d54e6:	a801      	add	r0, sp, #4
   d54e8:	f7ff ff61 	bl	d53ae <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   d54ec:	42a5      	cmp	r5, r4
   d54ee:	bfb4      	ite	lt
   d54f0:	2000      	movlt	r0, #0
   d54f2:	2001      	movge	r0, #1
}
   d54f4:	b002      	add	sp, #8
   d54f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   d54fa:	f856 0b04 	ldr.w	r0, [r6], #4
   d54fe:	4639      	mov	r1, r7
   d5500:	3004      	adds	r0, #4
   d5502:	f7ff fda3 	bl	d504c <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   d5506:	4284      	cmp	r4, r0
   d5508:	bfa8      	it	ge
   d550a:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   d550c:	e7e9      	b.n	d54e2 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   d550e:	2000      	movs	r0, #0
   d5510:	e7f0      	b.n	d54f4 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   d5512:	bf00      	nop
   d5514:	e000ed00 	.word	0xe000ed00

000d5518 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d5518:	b570      	push	{r4, r5, r6, lr}
   d551a:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   d551c:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d5520:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   d5522:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   d5526:	4282      	cmp	r2, r0
   d5528:	d007      	beq.n	d553a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x22>
   d552a:	4601      	mov	r1, r0
            if (*p == value) {
   d552c:	681d      	ldr	r5, [r3, #0]
   d552e:	f851 6b04 	ldr.w	r6, [r1], #4
   d5532:	42ae      	cmp	r6, r5
   d5534:	d003      	beq.n	d553e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x26>
   d5536:	4608      	mov	r0, r1
   d5538:	e7f5      	b.n	d5526 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   d553a:	2000      	movs	r0, #0
}
   d553c:	bd70      	pop	{r4, r5, r6, pc}
        ::memmove(dest, p, (end - p) * sizeof(T));
   d553e:	1a52      	subs	r2, r2, r1
   d5540:	f001 fda8 	bl	d7094 <memmove>
    --size_;
   d5544:	6863      	ldr	r3, [r4, #4]
   d5546:	3b01      	subs	r3, #1
   d5548:	6063      	str	r3, [r4, #4]
    return true;
   d554a:	2001      	movs	r0, #1
   d554c:	e7f6      	b.n	d553c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>

000d554e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   d554e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   d5550:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   d5554:	4604      	mov	r4, r0
   d5556:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d5558:	9101      	str	r1, [sp, #4]
   d555a:	9303      	str	r3, [sp, #12]
   d555c:	f7ff f8cc 	bl	d46f8 <os_mutex_recursive_lock>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d5560:	a901      	add	r1, sp, #4
   d5562:	4620      	mov	r0, r4
   d5564:	f7ff ffd8 	bl	d5518 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   d5568:	b118      	cbz	r0, d5572 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   d556a:	6863      	ldr	r3, [r4, #4]
   d556c:	b90b      	cbnz	r3, d5572 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   d556e:	f7ff fe15 	bl	d519c <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d5572:	a803      	add	r0, sp, #12
   d5574:	f7ff ff1b 	bl	d53ae <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   d5578:	b004      	add	sp, #16
   d557a:	bd10      	pop	{r4, pc}

000d557c <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   d557c:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   d557e:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   d5582:	2318      	movs	r3, #24
   d5584:	4604      	mov	r4, r0
   d5586:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   d558a:	42ae      	cmp	r6, r5
   d558c:	d015      	beq.n	d55ba <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   d558e:	f105 0110 	add.w	r1, r5, #16
   d5592:	4620      	mov	r0, r4
   d5594:	f7ff ffc0 	bl	d5518 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   d5598:	6863      	ldr	r3, [r4, #4]
   d559a:	b90b      	cbnz	r3, d55a0 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   d559c:	f7ff fdfe 	bl	d519c <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   d55a0:	69e0      	ldr	r0, [r4, #28]
   d55a2:	6929      	ldr	r1, [r5, #16]
   d55a4:	6803      	ldr	r3, [r0, #0]
   d55a6:	68db      	ldr	r3, [r3, #12]
   d55a8:	4798      	blx	r3
        if (h.stream) {
   d55aa:	6969      	ldr	r1, [r5, #20]
   d55ac:	b119      	cbz	r1, d55b6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   d55ae:	6a20      	ldr	r0, [r4, #32]
   d55b0:	6803      	ldr	r3, [r0, #0]
   d55b2:	68db      	ldr	r3, [r3, #12]
   d55b4:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   d55b6:	3518      	adds	r5, #24
   d55b8:	e7e7      	b.n	d558a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   d55ba:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   d55be:	2618      	movs	r6, #24
   d55c0:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d55c4:	42ae      	cmp	r6, r5
   d55c6:	d004      	beq.n	d55d2 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   d55c8:	4628      	mov	r0, r5
   d55ca:	f7ff fb0f 	bl	d4bec <_ZN6StringD1Ev>
   d55ce:	3518      	adds	r5, #24
   d55d0:	e7f8      	b.n	d55c4 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   d55d2:	2300      	movs	r3, #0
   d55d4:	6163      	str	r3, [r4, #20]
}
   d55d6:	bd70      	pop	{r4, r5, r6, pc}

000d55d8 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   d55d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d55da:	4604      	mov	r4, r0
    resetSystemCallbacks();
   d55dc:	f7ff fdde 	bl	d519c <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d55e0:	f104 0324 	add.w	r3, r4, #36	; 0x24
   d55e4:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d55e6:	9301      	str	r3, [sp, #4]
   d55e8:	f7ff f886 	bl	d46f8 <os_mutex_recursive_lock>
         destroyFactoryHandlers();
   d55ec:	4620      	mov	r0, r4
   d55ee:	f7ff ffc5 	bl	d557c <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   d55f2:	a801      	add	r0, sp, #4
   d55f4:	f7ff fedb 	bl	d53ae <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   d55f8:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d55fa:	b108      	cbz	r0, d5600 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   d55fc:	f7ff f874 	bl	d46e8 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   d5600:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   d5604:	2618      	movs	r6, #24
   d5606:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d560a:	42ae      	cmp	r6, r5
   d560c:	d004      	beq.n	d5618 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   d560e:	4628      	mov	r0, r5
   d5610:	f7ff faec 	bl	d4bec <_ZN6StringD1Ev>
   d5614:	3518      	adds	r5, #24
   d5616:	e7f8      	b.n	d560a <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   d5618:	6920      	ldr	r0, [r4, #16]
   d561a:	f7ff fa41 	bl	d4aa0 <free>
   d561e:	6820      	ldr	r0, [r4, #0]
   d5620:	f7ff fa3e 	bl	d4aa0 <free>
}
   d5624:	4620      	mov	r0, r4
   d5626:	b002      	add	sp, #8
   d5628:	bd70      	pop	{r4, r5, r6, pc}

000d562a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   d562a:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d562c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d562e:	4606      	mov	r6, r0
   d5630:	460c      	mov	r4, r1
   d5632:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d5634:	d927      	bls.n	d5686 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5c>
   d5636:	4290      	cmp	r0, r2
   d5638:	d226      	bcs.n	d5688 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
            --end;
   d563a:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
   d563e:	1a6c      	subs	r4, r5, r1
   d5640:	f1a1 0714 	sub.w	r7, r1, #20
   d5644:	4404      	add	r4, r0
        capacity_(0) {
   d5646:	2600      	movs	r6, #0
            for (; end != p; --end, --dest) {
   d5648:	42af      	cmp	r7, r5
   d564a:	d03d      	beq.n	d56c8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*end));
   d564c:	b1a4      	cbz	r4, d5678 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4e>
struct spark::detail::LogFilter::Node {
   d564e:	682b      	ldr	r3, [r5, #0]
   d5650:	6023      	str	r3, [r4, #0]
   d5652:	88ab      	ldrh	r3, [r5, #4]
   d5654:	80a3      	strh	r3, [r4, #4]
   d5656:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
   d565a:	80e3      	strh	r3, [r4, #6]
        capacity_(0) {
   d565c:	e9c4 6602 	strd	r6, r6, [r4, #8]
   d5660:	6126      	str	r6, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5662:	68ab      	ldr	r3, [r5, #8]
   d5664:	60a3      	str	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5666:	60ae      	str	r6, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5668:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d566a:	68ea      	ldr	r2, [r5, #12]
   d566c:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d566e:	60eb      	str	r3, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5670:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5672:	692a      	ldr	r2, [r5, #16]
   d5674:	6122      	str	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d5676:	612b      	str	r3, [r5, #16]
   d5678:	f105 0008 	add.w	r0, r5, #8
   d567c:	f7ff fe2e 	bl	d52dc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   d5680:	3d14      	subs	r5, #20
   d5682:	3c14      	subs	r4, #20
   d5684:	e7e0      	b.n	d5648 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
        } else if (dest != p) {
   d5686:	d01f      	beq.n	d56c8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
        capacity_(0) {
   d5688:	2700      	movs	r7, #0
            for (; p != end; ++p, ++dest) {
   d568a:	42ac      	cmp	r4, r5
   d568c:	d01c      	beq.n	d56c8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*p));
   d568e:	b1a6      	cbz	r6, d56ba <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x90>
   d5690:	6823      	ldr	r3, [r4, #0]
   d5692:	6033      	str	r3, [r6, #0]
   d5694:	88a3      	ldrh	r3, [r4, #4]
   d5696:	80b3      	strh	r3, [r6, #4]
   d5698:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   d569c:	80f3      	strh	r3, [r6, #6]
        capacity_(0) {
   d569e:	e9c6 7702 	strd	r7, r7, [r6, #8]
   d56a2:	6137      	str	r7, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   d56a4:	68a3      	ldr	r3, [r4, #8]
   d56a6:	60b3      	str	r3, [r6, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d56a8:	60a7      	str	r7, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d56aa:	68f3      	ldr	r3, [r6, #12]
      __a = _GLIBCXX_MOVE(__b);
   d56ac:	68e2      	ldr	r2, [r4, #12]
   d56ae:	60f2      	str	r2, [r6, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d56b0:	60e3      	str	r3, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d56b2:	6933      	ldr	r3, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   d56b4:	6922      	ldr	r2, [r4, #16]
   d56b6:	6132      	str	r2, [r6, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d56b8:	6123      	str	r3, [r4, #16]
   d56ba:	f104 0008 	add.w	r0, r4, #8
   d56be:	f7ff fe0d 	bl	d52dc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   d56c2:	3414      	adds	r4, #20
   d56c4:	3614      	adds	r6, #20
   d56c6:	e7e0      	b.n	d568a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x60>
    }
   d56c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d56ca <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d56ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d56cc:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   d56d0:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d56d2:	4604      	mov	r4, r0
   d56d4:	460e      	mov	r6, r1
   d56d6:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d56d8:	db0d      	blt.n	d56f6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2c>
   d56da:	3501      	adds	r5, #1
        if (n > 0) {
   d56dc:	2d00      	cmp	r5, #0
   d56de:	6800      	ldr	r0, [r0, #0]
   d56e0:	dd04      	ble.n	d56ec <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
    return ::realloc(ptr, size);
   d56e2:	00a9      	lsls	r1, r5, #2
   d56e4:	f7ff f9e4 	bl	d4ab0 <realloc>
            if (!d) {
   d56e8:	b918      	cbnz	r0, d56f2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x28>
}
   d56ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   d56ec:	f7ff f9d8 	bl	d4aa0 <free>
        T* d = nullptr;
   d56f0:	2000      	movs	r0, #0
        data_ = d;
   d56f2:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d56f4:	60a5      	str	r5, [r4, #8]
    T* const p = data_ + i;
   d56f6:	6825      	ldr	r5, [r4, #0]
    move(p + 1, p, data_ + size_);
   d56f8:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d56fa:	eb05 0186 	add.w	r1, r5, r6, lsl #2
    move(p + 1, p, data_ + size_);
   d56fe:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   d5700:	eba2 0286 	sub.w	r2, r2, r6, lsl #2
   d5704:	1d08      	adds	r0, r1, #4
   d5706:	f001 fcc5 	bl	d7094 <memmove>
    new(p) T(std::move(value));
   d570a:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   d570e:	6863      	ldr	r3, [r4, #4]
   d5710:	3301      	adds	r3, #1
   d5712:	6063      	str	r3, [r4, #4]
    return true;
   d5714:	2001      	movs	r0, #1
   d5716:	e7e8      	b.n	d56ea <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x20>

000d5718 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   d5718:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   d571a:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   d571e:	4604      	mov	r4, r0
    void lock() { os_mutex_recursive_lock(handle_); }
   d5720:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d5722:	9301      	str	r3, [sp, #4]
   d5724:	460d      	mov	r5, r1
   d5726:	f7fe ffe7 	bl	d46f8 <os_mutex_recursive_lock>
    return find(data_, data_ + size_, value);
   d572a:	e9d4 3100 	ldrd	r3, r1, [r4]
   d572e:	eb03 0081 	add.w	r0, r3, r1, lsl #2
        for (; p != end; ++p) {
   d5732:	4283      	cmp	r3, r0
   d5734:	461a      	mov	r2, r3
   d5736:	d00b      	beq.n	d5750 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   d5738:	6812      	ldr	r2, [r2, #0]
   d573a:	42aa      	cmp	r2, r5
   d573c:	f103 0304 	add.w	r3, r3, #4
   d5740:	d1f7      	bne.n	d5732 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
    LOG_WITH_LOCK(mutex_) {
   d5742:	a801      	add	r0, sp, #4
   d5744:	f7ff fe33 	bl	d53ae <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            return false;
   d5748:	2500      	movs	r5, #0
}
   d574a:	4628      	mov	r0, r5
   d574c:	b003      	add	sp, #12
   d574e:	bd30      	pop	{r4, r5, pc}
    return insert(size_, std::move(value));
   d5750:	462a      	mov	r2, r5
   d5752:	4620      	mov	r0, r4
   d5754:	f7ff ffb9 	bl	d56ca <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   d5758:	4605      	mov	r5, r0
   d575a:	2800      	cmp	r0, #0
   d575c:	d0f1      	beq.n	d5742 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   d575e:	6863      	ldr	r3, [r4, #4]
   d5760:	2b01      	cmp	r3, #1
   d5762:	d101      	bne.n	d5768 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   d5764:	f7ff fd0e 	bl	d5184 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d5768:	a801      	add	r0, sp, #4
   d576a:	f7ff fe20 	bl	d53ae <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   d576e:	e7ec      	b.n	d574a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000d5770 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d5770:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d5772:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5774:	4604      	mov	r4, r0
   d5776:	460d      	mov	r5, r1
   d5778:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d577a:	d914      	bls.n	d57a6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   d577c:	4290      	cmp	r0, r2
   d577e:	d213      	bcs.n	d57a8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   d5780:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   d5784:	1a75      	subs	r5, r6, r1
   d5786:	f1a1 0710 	sub.w	r7, r1, #16
   d578a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d578c:	42b7      	cmp	r7, r6
   d578e:	d018      	beq.n	d57c2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   d5790:	b11c      	cbz	r4, d579a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   d5792:	4631      	mov	r1, r6
   d5794:	4620      	mov	r0, r4
   d5796:	f7ff faa5 	bl	d4ce4 <_ZN6StringC1EOS_>
                end->~T();
   d579a:	4630      	mov	r0, r6
   d579c:	f7ff fa26 	bl	d4bec <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d57a0:	3e10      	subs	r6, #16
   d57a2:	3c10      	subs	r4, #16
   d57a4:	e7f2      	b.n	d578c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d57a6:	d00c      	beq.n	d57c2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   d57a8:	42b5      	cmp	r5, r6
   d57aa:	d00a      	beq.n	d57c2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   d57ac:	b11c      	cbz	r4, d57b6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   d57ae:	4629      	mov	r1, r5
   d57b0:	4620      	mov	r0, r4
   d57b2:	f7ff fa97 	bl	d4ce4 <_ZN6StringC1EOS_>
                p->~T();
   d57b6:	4628      	mov	r0, r5
   d57b8:	f7ff fa18 	bl	d4bec <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d57bc:	3510      	adds	r5, #16
   d57be:	3410      	adds	r4, #16
   d57c0:	e7f2      	b.n	d57a8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   d57c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d57c4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   d57c4:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d57c6:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d57c8:	4605      	mov	r5, r0
        if (n > 0) {
   d57ca:	dd11      	ble.n	d57f0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   d57cc:	0130      	lsls	r0, r6, #4
   d57ce:	f7ff f95f 	bl	d4a90 <malloc>
            if (!d) {
   d57d2:	4604      	mov	r4, r0
   d57d4:	b158      	cbz	r0, d57ee <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d57d6:	e9d5 1200 	ldrd	r1, r2, [r5]
   d57da:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   d57de:	f7ff ffc7 	bl	d5770 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d57e2:	6828      	ldr	r0, [r5, #0]
   d57e4:	f7ff f95c 	bl	d4aa0 <free>
        data_ = d;
   d57e8:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d57ea:	60ae      	str	r6, [r5, #8]
        return true;
   d57ec:	2001      	movs	r0, #1
    }
   d57ee:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d57f0:	2400      	movs	r4, #0
   d57f2:	e7f6      	b.n	d57e2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000d57f4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d57f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d57f8:	4691      	mov	r9, r2
   d57fa:	b097      	sub	sp, #92	; 0x5c
        capacity_(0) {
   d57fc:	2300      	movs	r3, #0
   d57fe:	9103      	str	r1, [sp, #12]
    if (!cats.reserve(filters.size())) {
   d5800:	f8d9 1004 	ldr.w	r1, [r9, #4]
   d5804:	930c      	str	r3, [sp, #48]	; 0x30
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d5806:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   d5808:	4299      	cmp	r1, r3
        capacity_(0) {
   d580a:	e9c0 3300 	strd	r3, r3, [r0]
   d580e:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d5812:	e9c0 3304 	strd	r3, r3, [r0, #16]
   d5816:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d581a:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d581c:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   d581e:	dc23      	bgt.n	d5868 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   d5820:	e9d9 5700 	ldrd	r5, r7, [r9]
   d5824:	2314      	movs	r3, #20
   d5826:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   d582a:	42af      	cmp	r7, r5
   d582c:	d03b      	beq.n	d58a6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   d582e:	4629      	mov	r1, r5
   d5830:	a80d      	add	r0, sp, #52	; 0x34
   d5832:	f7ff fa57 	bl	d4ce4 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   d5836:	a90d      	add	r1, sp, #52	; 0x34
   d5838:	a811      	add	r0, sp, #68	; 0x44
   d583a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   d583c:	f7ff fa52 	bl	d4ce4 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5840:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
   d5844:	4299      	cmp	r1, r3
   d5846:	da1b      	bge.n	d5880 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   d5848:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    move(p + 1, p, data_ + size_);
   d584a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    T* const p = data_ + i;
   d584c:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   d5850:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   d5854:	4631      	mov	r1, r6
   d5856:	f106 0010 	add.w	r0, r6, #16
   d585a:	f7ff ff89 	bl	d5770 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   d585e:	b9ee      	cbnz	r6, d589c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   d5860:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d5862:	3301      	adds	r3, #1
   d5864:	930b      	str	r3, [sp, #44]	; 0x2c
    return true;
   d5866:	e011      	b.n	d588c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   d5868:	a80a      	add	r0, sp, #40	; 0x28
   d586a:	f7ff ffab 	bl	d57c4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d586e:	2800      	cmp	r0, #0
   d5870:	d1d6      	bne.n	d5820 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
    Vector<String> cats;
   d5872:	a80a      	add	r0, sp, #40	; 0x28
   d5874:	f7ff fd46 	bl	d5304 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d5878:	4620      	mov	r0, r4
   d587a:	b017      	add	sp, #92	; 0x5c
   d587c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5880:	3101      	adds	r1, #1
   d5882:	a80a      	add	r0, sp, #40	; 0x28
   d5884:	f7ff ff9e 	bl	d57c4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d5888:	2800      	cmp	r0, #0
   d588a:	d1dd      	bne.n	d5848 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   d588c:	a811      	add	r0, sp, #68	; 0x44
   d588e:	f7ff f9ad 	bl	d4bec <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   d5892:	a80d      	add	r0, sp, #52	; 0x34
   d5894:	f7ff f9aa 	bl	d4bec <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   d5898:	3514      	adds	r5, #20
   d589a:	e7c6      	b.n	d582a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   d589c:	a911      	add	r1, sp, #68	; 0x44
   d589e:	4630      	mov	r0, r6
   d58a0:	f7ff fa20 	bl	d4ce4 <_ZN6StringC1EOS_>
   d58a4:	e7dc      	b.n	d5860 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   d58a6:	2600      	movs	r6, #0
   d58a8:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
   d58ac:	960f      	str	r6, [sp, #60]	; 0x3c
        size_t size = 0; // Name length
   d58ae:	4637      	mov	r7, r6
   d58b0:	f04f 0a14 	mov.w	sl, #20
    for (int i = 0; i < cats.size(); ++i) {
   d58b4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d58b8:	429e      	cmp	r6, r3
   d58ba:	f280 8097 	bge.w	d59ec <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f8>
        const char *category = cats.at(i).c_str();
   d58be:	0133      	lsls	r3, r6, #4
   d58c0:	58d3      	ldr	r3, [r2, r3]
   d58c2:	9308      	str	r3, [sp, #32]
        if (!category) {
   d58c4:	b90b      	cbnz	r3, d58ca <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd6>
    for (int i = 0; i < cats.size(); ++i) {
   d58c6:	3601      	adds	r6, #1
   d58c8:	e7f4      	b.n	d58b4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xc0>
        size_t size = 0; // Name length
   d58ca:	fb0a f306 	mul.w	r3, sl, r6
   d58ce:	9709      	str	r7, [sp, #36]	; 0x24
   d58d0:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   d58d2:	ad0d      	add	r5, sp, #52	; 0x34
        while ((name = nextSubcategoryName(category, size))) {
   d58d4:	a909      	add	r1, sp, #36	; 0x24
   d58d6:	a808      	add	r0, sp, #32
   d58d8:	f7ff fafc 	bl	d4ed4 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d58dc:	4683      	mov	fp, r0
   d58de:	2800      	cmp	r0, #0
   d58e0:	d0f1      	beq.n	d58c6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
            const int index = nodeIndex(*pNodes, name, size, found);
   d58e2:	4601      	mov	r1, r0
   d58e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
            bool found = false;
   d58e6:	f88d 701f 	strb.w	r7, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   d58ea:	f10d 031f 	add.w	r3, sp, #31
   d58ee:	4628      	mov	r0, r5
   d58f0:	f7ff fb6e 	bl	d4fd0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d58f4:	f89d 801f 	ldrb.w	r8, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   d58f8:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d58fa:	f1b8 0f00 	cmp.w	r8, #0
   d58fe:	d166      	bne.n	d59ce <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   d5900:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
            level(-1) {
   d5904:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
   d5908:	e9cd 8813 	strd	r8, r8, [sp, #76]	; 0x4c
   d590c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d5910:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
   d5914:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
   d5918:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d591c:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   d5920:	4293      	cmp	r3, r2
   d5922:	db1a      	blt.n	d595a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x166>
   d5924:	f103 0b01 	add.w	fp, r3, #1
        if (n > 0) {
   d5928:	f1bb 0f00 	cmp.w	fp, #0
   d592c:	dd4a      	ble.n	d59c4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d0>
    return ::malloc(size);
   d592e:	fb0a f00b 	mul.w	r0, sl, fp
   d5932:	f7ff f8ad 	bl	d4a90 <malloc>
            if (!d) {
   d5936:	9004      	str	r0, [sp, #16]
   d5938:	2800      	cmp	r0, #0
   d593a:	d045      	beq.n	d59c8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d4>
            move(d, data_, data_ + size_);
   d593c:	e9d5 1200 	ldrd	r1, r2, [r5]
   d5940:	fb0a 1202 	mla	r2, sl, r2, r1
   d5944:	f7ff fe71 	bl	d562a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   d5948:	9b04      	ldr	r3, [sp, #16]
    ::free(ptr);
   d594a:	6828      	ldr	r0, [r5, #0]
   d594c:	9304      	str	r3, [sp, #16]
   d594e:	f7ff f8a7 	bl	d4aa0 <free>
        data_ = d;
   d5952:	9b04      	ldr	r3, [sp, #16]
   d5954:	602b      	str	r3, [r5, #0]
        capacity_ = n;
   d5956:	f8c5 b008 	str.w	fp, [r5, #8]
    T* const p = data_ + i;
   d595a:	9b01      	ldr	r3, [sp, #4]
   d595c:	f8d5 b000 	ldr.w	fp, [r5]
    move(p + 1, p, data_ + size_);
   d5960:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   d5962:	fb0a f303 	mul.w	r3, sl, r3
   d5966:	eb0b 0103 	add.w	r1, fp, r3
    move(p + 1, p, data_ + size_);
   d596a:	f101 0014 	add.w	r0, r1, #20
   d596e:	fb0a b202 	mla	r2, sl, r2, fp
   d5972:	9104      	str	r1, [sp, #16]
    T* const p = data_ + i;
   d5974:	9305      	str	r3, [sp, #20]
    move(p + 1, p, data_ + size_);
   d5976:	f7ff fe58 	bl	d562a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   d597a:	9904      	ldr	r1, [sp, #16]
   d597c:	b1a9      	cbz	r1, d59aa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1b6>
struct spark::detail::LogFilter::Node {
   d597e:	9b05      	ldr	r3, [sp, #20]
   d5980:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d5982:	f84b 2003 	str.w	r2, [fp, r3]
   d5986:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   d598a:	808b      	strh	r3, [r1, #4]
   d598c:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
   d5990:	80cb      	strh	r3, [r1, #6]
        capacity_(0) {
   d5992:	e9c1 7702 	strd	r7, r7, [r1, #8]
   d5996:	610f      	str	r7, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5998:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d599a:	608b      	str	r3, [r1, #8]
   d599c:	9b14      	ldr	r3, [sp, #80]	; 0x50
      __b = _GLIBCXX_MOVE(__tmp);
   d599e:	9713      	str	r7, [sp, #76]	; 0x4c
      __a = _GLIBCXX_MOVE(__b);
   d59a0:	60cb      	str	r3, [r1, #12]
   d59a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
      __b = _GLIBCXX_MOVE(__tmp);
   d59a4:	9714      	str	r7, [sp, #80]	; 0x50
      __a = _GLIBCXX_MOVE(__b);
   d59a6:	610b      	str	r3, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d59a8:	9715      	str	r7, [sp, #84]	; 0x54
    ++size_;
   d59aa:	686b      	ldr	r3, [r5, #4]
   d59ac:	3301      	adds	r3, #1
   d59ae:	606b      	str	r3, [r5, #4]
   d59b0:	a813      	add	r0, sp, #76	; 0x4c
   d59b2:	f7ff fc93 	bl	d52dc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d59b6:	f1b8 0f00 	cmp.w	r8, #0
   d59ba:	d008      	beq.n	d59ce <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
    Vector<Node> nodes;
   d59bc:	a80d      	add	r0, sp, #52	; 0x34
   d59be:	f7ff fc8d 	bl	d52dc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d59c2:	e756      	b.n	d5872 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   d59c4:	4643      	mov	r3, r8
   d59c6:	e7c0      	b.n	d594a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x156>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d59c8:	f04f 0801 	mov.w	r8, #1
   d59cc:	e7f0      	b.n	d59b0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
    return data_[i];
   d59ce:	9b01      	ldr	r3, [sp, #4]
   d59d0:	682d      	ldr	r5, [r5, #0]
   d59d2:	fb0a 5503 	mla	r5, sl, r3, r5
            if (!*category) { // Check if it's last subcategory
   d59d6:	9b08      	ldr	r3, [sp, #32]
   d59d8:	781b      	ldrb	r3, [r3, #0]
   d59da:	b92b      	cbnz	r3, d59e8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
                node.level = filters.at(i).level_;
   d59dc:	f8d9 3000 	ldr.w	r3, [r9]
   d59e0:	9a02      	ldr	r2, [sp, #8]
   d59e2:	4413      	add	r3, r2
   d59e4:	7c1b      	ldrb	r3, [r3, #16]
   d59e6:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   d59e8:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   d59ea:	e773      	b.n	d58d4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xe0>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d59ec:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d59ee:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d59f0:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   d59f2:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d59f4:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d59f6:	920b      	str	r2, [sp, #44]	; 0x2c
      __a = _GLIBCXX_MOVE(__b);
   d59f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   d59fa:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d59fc:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d59fe:	60a2      	str	r2, [r4, #8]
   d5a00:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   d5a02:	930d      	str	r3, [sp, #52]	; 0x34
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5a04:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5a06:	60e2      	str	r2, [r4, #12]
   d5a08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
      __b = _GLIBCXX_MOVE(__tmp);
   d5a0a:	930e      	str	r3, [sp, #56]	; 0x38
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5a0c:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5a0e:	6122      	str	r2, [r4, #16]
   d5a10:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   d5a12:	930f      	str	r3, [sp, #60]	; 0x3c
    level_ = level;
   d5a14:	9b03      	ldr	r3, [sp, #12]
   d5a16:	910a      	str	r1, [sp, #40]	; 0x28
      __a = _GLIBCXX_MOVE(__b);
   d5a18:	6162      	str	r2, [r4, #20]
   d5a1a:	7623      	strb	r3, [r4, #24]
   d5a1c:	e7ce      	b.n	d59bc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c8>
	...

000d5a20 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d5a20:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   d5a22:	4605      	mov	r5, r0
   d5a24:	4b09      	ldr	r3, [pc, #36]	; (d5a4c <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   d5a26:	f845 3b04 	str.w	r3, [r5], #4
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d5a2a:	4604      	mov	r4, r0
   d5a2c:	460e      	mov	r6, r1
        filter_(level, filters) {
   d5a2e:	a801      	add	r0, sp, #4
   d5a30:	4611      	mov	r1, r2
   d5a32:	f7fe fd10 	bl	d4456 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d5a36:	aa01      	add	r2, sp, #4
   d5a38:	4631      	mov	r1, r6
   d5a3a:	4628      	mov	r0, r5
   d5a3c:	f7ff feda 	bl	d57f4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d5a40:	a801      	add	r0, sp, #4
   d5a42:	f7fe fcc7 	bl	d43d4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   d5a46:	4620      	mov	r0, r4
   d5a48:	b004      	add	sp, #16
   d5a4a:	bd70      	pop	{r4, r5, r6, pc}
   d5a4c:	000d7398 	.word	0x000d7398

000d5a50 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   d5a50:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5a52:	460f      	mov	r7, r1
   d5a54:	b087      	sub	sp, #28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d5a56:	4926      	ldr	r1, [pc, #152]	; (d5af0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>)
            Print *stream, const JSONValue &params) {
   d5a58:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d5a5a:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   d5a5c:	4616      	mov	r6, r2
   d5a5e:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d5a60:	f001 fb75 	bl	d714e <strcmp>
   d5a64:	bb00      	cbnz	r0, d5aa8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x58>
        if (!stream) {
   d5a66:	b1e4      	cbz	r4, d5aa2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   d5a68:	4629      	mov	r1, r5
   d5a6a:	4668      	mov	r0, sp
   d5a6c:	f7ff fc90 	bl	d5390 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d5a70:	4920      	ldr	r1, [pc, #128]	; (d5af4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   d5a72:	2024      	movs	r0, #36	; 0x24
   d5a74:	f001 faeb 	bl	d704e <_ZnwjRKSt9nothrow_t>
   d5a78:	4605      	mov	r5, r0
   d5a7a:	b170      	cbz	r0, d5a9a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   d5a7c:	4669      	mov	r1, sp
   d5a7e:	a803      	add	r0, sp, #12
   d5a80:	f7fe fce9 	bl	d4456 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d5a84:	aa03      	add	r2, sp, #12
   d5a86:	4631      	mov	r1, r6
   d5a88:	4628      	mov	r0, r5
   d5a8a:	f7ff ffc9 	bl	d5a20 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d5a8e:	a803      	add	r0, sp, #12
   d5a90:	f7fe fca0 	bl	d43d4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
    using StreamLogHandler::StreamLogHandler;
   d5a94:	4b18      	ldr	r3, [pc, #96]	; (d5af8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa8>)
        stream_(&stream) {
   d5a96:	622c      	str	r4, [r5, #32]
    using StreamLogHandler::StreamLogHandler;
   d5a98:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d5a9a:	4668      	mov	r0, sp
   d5a9c:	f7fe fc9a 	bl	d43d4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d5aa0:	462c      	mov	r4, r5
}
   d5aa2:	4620      	mov	r0, r4
   d5aa4:	b007      	add	sp, #28
   d5aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   d5aa8:	4914      	ldr	r1, [pc, #80]	; (d5afc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xac>)
   d5aaa:	4638      	mov	r0, r7
   d5aac:	f001 fb4f 	bl	d714e <strcmp>
   d5ab0:	b9e0      	cbnz	r0, d5aec <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x9c>
        if (!stream) {
   d5ab2:	2c00      	cmp	r4, #0
   d5ab4:	d0f5      	beq.n	d5aa2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d5ab6:	4629      	mov	r1, r5
   d5ab8:	4668      	mov	r0, sp
   d5aba:	f7ff fc69 	bl	d5390 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d5abe:	490d      	ldr	r1, [pc, #52]	; (d5af4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   d5ac0:	2024      	movs	r0, #36	; 0x24
   d5ac2:	f001 fac4 	bl	d704e <_ZnwjRKSt9nothrow_t>
   d5ac6:	4605      	mov	r5, r0
   d5ac8:	2800      	cmp	r0, #0
   d5aca:	d0e6      	beq.n	d5a9a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   d5acc:	4669      	mov	r1, sp
   d5ace:	a803      	add	r0, sp, #12
   d5ad0:	f7fe fcc1 	bl	d4456 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d5ad4:	aa03      	add	r2, sp, #12
   d5ad6:	4631      	mov	r1, r6
   d5ad8:	4628      	mov	r0, r5
   d5ada:	f7ff ffa1 	bl	d5a20 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d5ade:	a803      	add	r0, sp, #12
   d5ae0:	f7fe fc78 	bl	d43d4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d5ae4:	4b06      	ldr	r3, [pc, #24]	; (d5b00 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>)
   d5ae6:	602b      	str	r3, [r5, #0]
   d5ae8:	622c      	str	r4, [r5, #32]
}
   d5aea:	e7d6      	b.n	d5a9a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
            return nullptr; // Output stream is not specified
   d5aec:	2400      	movs	r4, #0
   d5aee:	e7d8      	b.n	d5aa2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
   d5af0:	000d7408 	.word	0x000d7408
   d5af4:	000d7629 	.word	0x000d7629
   d5af8:	000d74a4 	.word	0x000d74a4
   d5afc:	000d740c 	.word	0x000d740c
   d5b00:	000d748c 	.word	0x000d748c

000d5b04 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   d5b04:	4b01      	ldr	r3, [pc, #4]	; (d5b0c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5b06:	4a02      	ldr	r2, [pc, #8]	; (d5b10 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5b08:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d5b0a:	4770      	bx	lr
   d5b0c:	2003e734 	.word	0x2003e734
   d5b10:	000d741d 	.word	0x000d741d

000d5b14 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d5b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5b18:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   d5b1a:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d5b1e:	4604      	mov	r4, r0
   d5b20:	460e      	mov	r6, r1
   d5b22:	4617      	mov	r7, r2
   d5b24:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   d5b26:	f000 fdb9 	bl	d669c <_Z16_fetch_usbserialv>
   d5b2a:	4581      	cmp	r9, r0
   d5b2c:	d04c      	beq.n	d5bc8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   d5b2e:	792b      	ldrb	r3, [r5, #4]
   d5b30:	0719      	lsls	r1, r3, #28
   d5b32:	d504      	bpl.n	d5b3e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   d5b34:	696a      	ldr	r2, [r5, #20]
   d5b36:	4954      	ldr	r1, [pc, #336]	; (d5c88 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   d5b38:	4620      	mov	r0, r4
   d5b3a:	f7ff fa3a 	bl	d4fb2 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   d5b3e:	f1b8 0f00 	cmp.w	r8, #0
   d5b42:	d00d      	beq.n	d5b60 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   d5b44:	215b      	movs	r1, #91	; 0x5b
   d5b46:	4620      	mov	r0, r4
   d5b48:	f7ff fa27 	bl	d4f9a <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   d5b4c:	4641      	mov	r1, r8
   d5b4e:	4620      	mov	r0, r4
   d5b50:	f7ff fa14 	bl	d4f7c <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   d5b54:	6823      	ldr	r3, [r4, #0]
   d5b56:	494d      	ldr	r1, [pc, #308]	; (d5c8c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   d5b58:	68db      	ldr	r3, [r3, #12]
   d5b5a:	2202      	movs	r2, #2
   d5b5c:	4620      	mov	r0, r4
   d5b5e:	4798      	blx	r3
    if (attr.has_file) {
   d5b60:	792b      	ldrb	r3, [r5, #4]
   d5b62:	07da      	lsls	r2, r3, #31
   d5b64:	d523      	bpl.n	d5bae <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   d5b66:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   d5b6a:	212f      	movs	r1, #47	; 0x2f
   d5b6c:	4640      	mov	r0, r8
   d5b6e:	f001 fb38 	bl	d71e2 <strrchr>
    if (s1) {
   d5b72:	b108      	cbz	r0, d5b78 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   d5b74:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   d5b78:	4641      	mov	r1, r8
   d5b7a:	4620      	mov	r0, r4
   d5b7c:	f7ff f9fe 	bl	d4f7c <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   d5b80:	792b      	ldrb	r3, [r5, #4]
   d5b82:	079b      	lsls	r3, r3, #30
   d5b84:	d508      	bpl.n	d5b98 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   d5b86:	213a      	movs	r1, #58	; 0x3a
   d5b88:	4620      	mov	r0, r4
   d5b8a:	f7ff fa06 	bl	d4f9a <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   d5b8e:	68ea      	ldr	r2, [r5, #12]
   d5b90:	493f      	ldr	r1, [pc, #252]	; (d5c90 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   d5b92:	4620      	mov	r0, r4
   d5b94:	f7ff fa0d 	bl	d4fb2 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   d5b98:	792a      	ldrb	r2, [r5, #4]
   d5b9a:	6823      	ldr	r3, [r4, #0]
   d5b9c:	f012 0f04 	tst.w	r2, #4
   d5ba0:	68db      	ldr	r3, [r3, #12]
            write(", ", 2);
   d5ba2:	bf14      	ite	ne
   d5ba4:	493b      	ldrne	r1, [pc, #236]	; (d5c94 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   d5ba6:	493c      	ldreq	r1, [pc, #240]	; (d5c98 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   d5ba8:	2202      	movs	r2, #2
            write(": ", 2);
   d5baa:	4620      	mov	r0, r4
   d5bac:	4798      	blx	r3
    if (attr.has_function) {
   d5bae:	792b      	ldrb	r3, [r5, #4]
   d5bb0:	0758      	lsls	r0, r3, #29
   d5bb2:	d51d      	bpl.n	d5bf0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d5bb4:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   d5bb6:	460b      	mov	r3, r1
   d5bb8:	461a      	mov	r2, r3
    for (; *s; ++s) {
   d5bba:	f813 0b01 	ldrb.w	r0, [r3], #1
   d5bbe:	b160      	cbz	r0, d5bda <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   d5bc0:	2820      	cmp	r0, #32
   d5bc2:	d108      	bne.n	d5bd6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   d5bc4:	4619      	mov	r1, r3
   d5bc6:	e7f7      	b.n	d5bb8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   d5bc8:	4834      	ldr	r0, [pc, #208]	; (d5c9c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   d5bca:	f000 ff48 	bl	d6a5e <_ZN5spark12NetworkClass9listeningEv>
   d5bce:	2800      	cmp	r0, #0
   d5bd0:	d0ad      	beq.n	d5b2e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   d5bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   d5bd6:	2828      	cmp	r0, #40	; 0x28
   d5bd8:	d1ee      	bne.n	d5bb8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   d5bda:	6823      	ldr	r3, [r4, #0]
   d5bdc:	1a52      	subs	r2, r2, r1
   d5bde:	68db      	ldr	r3, [r3, #12]
   d5be0:	4620      	mov	r0, r4
   d5be2:	4798      	blx	r3
        write("(): ", 4);
   d5be4:	6823      	ldr	r3, [r4, #0]
   d5be6:	492e      	ldr	r1, [pc, #184]	; (d5ca0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   d5be8:	68db      	ldr	r3, [r3, #12]
   d5bea:	2204      	movs	r2, #4
   d5bec:	4620      	mov	r0, r4
   d5bee:	4798      	blx	r3
    return log_level_name(level, nullptr);
   d5bf0:	2100      	movs	r1, #0
   d5bf2:	4638      	mov	r0, r7
   d5bf4:	f7fe fe98 	bl	d4928 <log_level_name>
   d5bf8:	4601      	mov	r1, r0
    write(s);
   d5bfa:	4620      	mov	r0, r4
   d5bfc:	f7ff f9be 	bl	d4f7c <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   d5c00:	6823      	ldr	r3, [r4, #0]
   d5c02:	4925      	ldr	r1, [pc, #148]	; (d5c98 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   d5c04:	68db      	ldr	r3, [r3, #12]
   d5c06:	2202      	movs	r2, #2
   d5c08:	4620      	mov	r0, r4
   d5c0a:	4798      	blx	r3
    if (msg) {
   d5c0c:	b11e      	cbz	r6, d5c16 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   d5c0e:	4631      	mov	r1, r6
   d5c10:	4620      	mov	r0, r4
   d5c12:	f7ff f9b3 	bl	d4f7c <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   d5c16:	792b      	ldrb	r3, [r5, #4]
   d5c18:	f013 0f30 	tst.w	r3, #48	; 0x30
   d5c1c:	d02c      	beq.n	d5c78 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   d5c1e:	6823      	ldr	r3, [r4, #0]
   d5c20:	4920      	ldr	r1, [pc, #128]	; (d5ca4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   d5c22:	68db      	ldr	r3, [r3, #12]
   d5c24:	2202      	movs	r2, #2
   d5c26:	4620      	mov	r0, r4
   d5c28:	4798      	blx	r3
        if (attr.has_code) {
   d5c2a:	792b      	ldrb	r3, [r5, #4]
   d5c2c:	06d9      	lsls	r1, r3, #27
   d5c2e:	d50a      	bpl.n	d5c46 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   d5c30:	6823      	ldr	r3, [r4, #0]
   d5c32:	491d      	ldr	r1, [pc, #116]	; (d5ca8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d5c34:	68db      	ldr	r3, [r3, #12]
   d5c36:	2207      	movs	r2, #7
   d5c38:	4620      	mov	r0, r4
   d5c3a:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   d5c3c:	69aa      	ldr	r2, [r5, #24]
   d5c3e:	491b      	ldr	r1, [pc, #108]	; (d5cac <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   d5c40:	4620      	mov	r0, r4
   d5c42:	f7ff f9b6 	bl	d4fb2 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   d5c46:	792b      	ldrb	r3, [r5, #4]
   d5c48:	069a      	lsls	r2, r3, #26
   d5c4a:	d511      	bpl.n	d5c70 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   d5c4c:	06db      	lsls	r3, r3, #27
   d5c4e:	d505      	bpl.n	d5c5c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   d5c50:	6823      	ldr	r3, [r4, #0]
   d5c52:	4910      	ldr	r1, [pc, #64]	; (d5c94 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   d5c54:	68db      	ldr	r3, [r3, #12]
   d5c56:	2202      	movs	r2, #2
   d5c58:	4620      	mov	r0, r4
   d5c5a:	4798      	blx	r3
            write("details = ", 10);
   d5c5c:	6823      	ldr	r3, [r4, #0]
   d5c5e:	4914      	ldr	r1, [pc, #80]	; (d5cb0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   d5c60:	68db      	ldr	r3, [r3, #12]
   d5c62:	4620      	mov	r0, r4
   d5c64:	220a      	movs	r2, #10
   d5c66:	4798      	blx	r3
            write(attr.details);
   d5c68:	69e9      	ldr	r1, [r5, #28]
   d5c6a:	4620      	mov	r0, r4
   d5c6c:	f7ff f986 	bl	d4f7c <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   d5c70:	215d      	movs	r1, #93	; 0x5d
   d5c72:	4620      	mov	r0, r4
   d5c74:	f7ff f991 	bl	d4f9a <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   d5c78:	6823      	ldr	r3, [r4, #0]
   d5c7a:	490e      	ldr	r1, [pc, #56]	; (d5cb4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   d5c7c:	68db      	ldr	r3, [r3, #12]
   d5c7e:	4620      	mov	r0, r4
   d5c80:	2202      	movs	r2, #2
}
   d5c82:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   d5c86:	4718      	bx	r3
   d5c88:	000d7421 	.word	0x000d7421
   d5c8c:	000d7428 	.word	0x000d7428
   d5c90:	000d742b 	.word	0x000d742b
   d5c94:	000d742e 	.word	0x000d742e
   d5c98:	000d7433 	.word	0x000d7433
   d5c9c:	2003e7bc 	.word	0x2003e7bc
   d5ca0:	000d7431 	.word	0x000d7431
   d5ca4:	000d7436 	.word	0x000d7436
   d5ca8:	000d7439 	.word	0x000d7439
   d5cac:	000d7441 	.word	0x000d7441
   d5cb0:	000d7444 	.word	0x000d7444
   d5cb4:	000d744f 	.word	0x000d744f

000d5cb8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d5cb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5cbc:	b085      	sub	sp, #20
    if (this->stream() == &Serial && Network.listening()) {
   d5cbe:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d5cc2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   d5cc4:	4605      	mov	r5, r0
   d5cc6:	460f      	mov	r7, r1
   d5cc8:	4690      	mov	r8, r2
   d5cca:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   d5ccc:	f000 fce6 	bl	d669c <_Z16_fetch_usbserialv>
   d5cd0:	4581      	cmp	r9, r0
   d5cd2:	d105      	bne.n	d5ce0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   d5cd4:	4849      	ldr	r0, [pc, #292]	; (d5dfc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   d5cd6:	f000 fec2 	bl	d6a5e <_ZN5spark12NetworkClass9listeningEv>
   d5cda:	2800      	cmp	r0, #0
   d5cdc:	f040 808a 	bne.w	d5df4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
    JSONStreamWriter json(*this->stream());
   d5ce0:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   d5ce2:	4a47      	ldr	r2, [pc, #284]	; (d5e00 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   d5ce4:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   d5ce6:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   d5cea:	a801      	add	r0, sp, #4
        strm_(stream) {
   d5cec:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   d5cee:	f88d 9008 	strb.w	r9, [sp, #8]
   d5cf2:	f001 f86c 	bl	d6dce <_ZN5spark10JSONWriter11beginObjectEv>
   d5cf6:	4649      	mov	r1, r9
   d5cf8:	4640      	mov	r0, r8
   d5cfa:	f7fe fe15 	bl	d4928 <log_level_name>
    json.name("l", 1).value(s);
   d5cfe:	4941      	ldr	r1, [pc, #260]	; (d5e04 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   d5d00:	4680      	mov	r8, r0
   d5d02:	2201      	movs	r2, #1
   d5d04:	a801      	add	r0, sp, #4
   d5d06:	f001 f8eb 	bl	d6ee0 <_ZN5spark10JSONWriter4nameEPKcj>
   d5d0a:	4641      	mov	r1, r8
   d5d0c:	f7ff f928 	bl	d4f60 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   d5d10:	b13f      	cbz	r7, d5d22 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   d5d12:	493d      	ldr	r1, [pc, #244]	; (d5e08 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   d5d14:	2201      	movs	r2, #1
   d5d16:	a801      	add	r0, sp, #4
   d5d18:	f001 f8e2 	bl	d6ee0 <_ZN5spark10JSONWriter4nameEPKcj>
   d5d1c:	4639      	mov	r1, r7
   d5d1e:	f7ff f91f 	bl	d4f60 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   d5d22:	b13e      	cbz	r6, d5d34 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   d5d24:	4939      	ldr	r1, [pc, #228]	; (d5e0c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   d5d26:	2201      	movs	r2, #1
   d5d28:	a801      	add	r0, sp, #4
   d5d2a:	f001 f8d9 	bl	d6ee0 <_ZN5spark10JSONWriter4nameEPKcj>
   d5d2e:	4631      	mov	r1, r6
   d5d30:	f7ff f916 	bl	d4f60 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   d5d34:	7923      	ldrb	r3, [r4, #4]
   d5d36:	07df      	lsls	r7, r3, #31
   d5d38:	d50e      	bpl.n	d5d58 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   d5d3a:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   d5d3c:	212f      	movs	r1, #47	; 0x2f
   d5d3e:	4630      	mov	r0, r6
   d5d40:	f001 fa4f 	bl	d71e2 <strrchr>
    if (s1) {
   d5d44:	b100      	cbz	r0, d5d48 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   d5d46:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   d5d48:	4931      	ldr	r1, [pc, #196]	; (d5e10 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   d5d4a:	2201      	movs	r2, #1
   d5d4c:	a801      	add	r0, sp, #4
   d5d4e:	f001 f8c7 	bl	d6ee0 <_ZN5spark10JSONWriter4nameEPKcj>
   d5d52:	4631      	mov	r1, r6
   d5d54:	f7ff f904 	bl	d4f60 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   d5d58:	7923      	ldrb	r3, [r4, #4]
   d5d5a:	079e      	lsls	r6, r3, #30
   d5d5c:	d507      	bpl.n	d5d6e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   d5d5e:	492d      	ldr	r1, [pc, #180]	; (d5e14 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   d5d60:	2202      	movs	r2, #2
   d5d62:	a801      	add	r0, sp, #4
   d5d64:	f001 f8bc 	bl	d6ee0 <_ZN5spark10JSONWriter4nameEPKcj>
   d5d68:	68e1      	ldr	r1, [r4, #12]
   d5d6a:	f001 f83d 	bl	d6de8 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   d5d6e:	7923      	ldrb	r3, [r4, #4]
   d5d70:	0758      	lsls	r0, r3, #29
   d5d72:	d514      	bpl.n	d5d9e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d5d74:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   d5d76:	4633      	mov	r3, r6
   d5d78:	461f      	mov	r7, r3
    for (; *s; ++s) {
   d5d7a:	f813 2b01 	ldrb.w	r2, [r3], #1
   d5d7e:	b12a      	cbz	r2, d5d8c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   d5d80:	2a20      	cmp	r2, #32
   d5d82:	d101      	bne.n	d5d88 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   d5d84:	461e      	mov	r6, r3
   d5d86:	e7f7      	b.n	d5d78 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   d5d88:	2a28      	cmp	r2, #40	; 0x28
   d5d8a:	d1f5      	bne.n	d5d78 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   d5d8c:	4922      	ldr	r1, [pc, #136]	; (d5e18 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   d5d8e:	2202      	movs	r2, #2
   d5d90:	a801      	add	r0, sp, #4
   d5d92:	f001 f8a5 	bl	d6ee0 <_ZN5spark10JSONWriter4nameEPKcj>
   d5d96:	1bba      	subs	r2, r7, r6
   d5d98:	4631      	mov	r1, r6
   d5d9a:	f001 f8b1 	bl	d6f00 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   d5d9e:	7923      	ldrb	r3, [r4, #4]
   d5da0:	0719      	lsls	r1, r3, #28
   d5da2:	d507      	bpl.n	d5db4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   d5da4:	491d      	ldr	r1, [pc, #116]	; (d5e1c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   d5da6:	2201      	movs	r2, #1
   d5da8:	a801      	add	r0, sp, #4
   d5daa:	f001 f899 	bl	d6ee0 <_ZN5spark10JSONWriter4nameEPKcj>
   d5dae:	6961      	ldr	r1, [r4, #20]
   d5db0:	f001 f82c 	bl	d6e0c <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   d5db4:	7923      	ldrb	r3, [r4, #4]
   d5db6:	06da      	lsls	r2, r3, #27
   d5db8:	d508      	bpl.n	d5dcc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   d5dba:	2204      	movs	r2, #4
   d5dbc:	4918      	ldr	r1, [pc, #96]	; (d5e20 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   d5dbe:	eb0d 0002 	add.w	r0, sp, r2
   d5dc2:	f001 f88d 	bl	d6ee0 <_ZN5spark10JSONWriter4nameEPKcj>
   d5dc6:	69a1      	ldr	r1, [r4, #24]
   d5dc8:	f001 f80e 	bl	d6de8 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   d5dcc:	7923      	ldrb	r3, [r4, #4]
   d5dce:	069b      	lsls	r3, r3, #26
   d5dd0:	d507      	bpl.n	d5de2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   d5dd2:	4914      	ldr	r1, [pc, #80]	; (d5e24 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   d5dd4:	2206      	movs	r2, #6
   d5dd6:	a801      	add	r0, sp, #4
   d5dd8:	f001 f882 	bl	d6ee0 <_ZN5spark10JSONWriter4nameEPKcj>
   d5ddc:	69e1      	ldr	r1, [r4, #28]
   d5dde:	f7ff f8bf 	bl	d4f60 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   d5de2:	a801      	add	r0, sp, #4
   d5de4:	f000 ffdd 	bl	d6da2 <_ZN5spark10JSONWriter9endObjectEv>
    this->stream()->write((const uint8_t*)"\r\n", 2);
   d5de8:	6a28      	ldr	r0, [r5, #32]
   d5dea:	490f      	ldr	r1, [pc, #60]	; (d5e28 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   d5dec:	6803      	ldr	r3, [r0, #0]
   d5dee:	2202      	movs	r2, #2
   d5df0:	68db      	ldr	r3, [r3, #12]
   d5df2:	4798      	blx	r3
}
   d5df4:	b005      	add	sp, #20
   d5df6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d5dfa:	bf00      	nop
   d5dfc:	2003e7bc 	.word	0x2003e7bc
   d5e00:	000d7474 	.word	0x000d7474
   d5e04:	000d73fe 	.word	0x000d73fe
   d5e08:	000d7452 	.word	0x000d7452
   d5e0c:	000d7454 	.word	0x000d7454
   d5e10:	000d7456 	.word	0x000d7456
   d5e14:	000d7458 	.word	0x000d7458
   d5e18:	000d745b 	.word	0x000d745b
   d5e1c:	000d745e 	.word	0x000d745e
   d5e20:	000d7460 	.word	0x000d7460
   d5e24:	000d7465 	.word	0x000d7465
   d5e28:	000d744f 	.word	0x000d744f

000d5e2c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5e2c:	4b02      	ldr	r3, [pc, #8]	; (d5e38 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5e2e:	681a      	ldr	r2, [r3, #0]
   d5e30:	4b02      	ldr	r3, [pc, #8]	; (d5e3c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5e32:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d5e34:	4770      	bx	lr
   d5e36:	bf00      	nop
   d5e38:	2003e658 	.word	0x2003e658
   d5e3c:	2003e760 	.word	0x2003e760

000d5e40 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5e40:	2100      	movs	r1, #0
   d5e42:	f7fe bd89 	b.w	d4958 <system_delay_ms>

000d5e46 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5e46:	b510      	push	{r4, lr}
   d5e48:	4604      	mov	r4, r0
   d5e4a:	f7fe f9b1 	bl	d41b0 <_ZNSt14_Function_baseD1Ev>
   d5e4e:	4620      	mov	r0, r4
   d5e50:	bd10      	pop	{r4, pc}

000d5e52 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d5e52:	b513      	push	{r0, r1, r4, lr}
   d5e54:	460b      	mov	r3, r1
   d5e56:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5e58:	e9d0 0100 	ldrd	r0, r1, [r0]
   d5e5c:	466c      	mov	r4, sp
   d5e5e:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5e62:	e893 0003 	ldmia.w	r3, {r0, r1}
   d5e66:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d5e6a:	e894 0003 	ldmia.w	r4, {r0, r1}
   d5e6e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d5e72:	b002      	add	sp, #8
   d5e74:	bd10      	pop	{r4, pc}
	...

000d5e78 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d5e78:	4803      	ldr	r0, [pc, #12]	; (d5e88 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5e7a:	4a04      	ldr	r2, [pc, #16]	; (d5e8c <_GLOBAL__sub_I_RGB+0x14>)
   d5e7c:	4904      	ldr	r1, [pc, #16]	; (d5e90 <_GLOBAL__sub_I_RGB+0x18>)
   d5e7e:	2300      	movs	r3, #0
   d5e80:	6083      	str	r3, [r0, #8]
   d5e82:	f001 b8dd 	b.w	d7040 <__aeabi_atexit>
   d5e86:	bf00      	nop
   d5e88:	2003e764 	.word	0x2003e764
   d5e8c:	2003e6c0 	.word	0x2003e6c0
   d5e90:	000d5e47 	.word	0x000d5e47

000d5e94 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d5e94:	4b01      	ldr	r3, [pc, #4]	; (d5e9c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d5e96:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d5e98:	4770      	bx	lr
   d5e9a:	bf00      	nop
   d5e9c:	2003e65c 	.word	0x2003e65c

000d5ea0 <serialEventRun>:
{
   d5ea0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5ea2:	4b0b      	ldr	r3, [pc, #44]	; (d5ed0 <serialEventRun+0x30>)
   d5ea4:	b143      	cbz	r3, d5eb8 <serialEventRun+0x18>
   d5ea6:	f000 fbf9 	bl	d669c <_Z16_fetch_usbserialv>
   d5eaa:	6803      	ldr	r3, [r0, #0]
   d5eac:	691b      	ldr	r3, [r3, #16]
   d5eae:	4798      	blx	r3
   d5eb0:	2800      	cmp	r0, #0
   d5eb2:	dd01      	ble.n	d5eb8 <serialEventRun+0x18>
        serialEvent();
   d5eb4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d5eb8:	4b06      	ldr	r3, [pc, #24]	; (d5ed4 <serialEventRun+0x34>)
   d5eba:	b143      	cbz	r3, d5ece <serialEventRun+0x2e>
   d5ebc:	f000 fccc 	bl	d6858 <_Z22__fetch_global_Serial1v>
   d5ec0:	6803      	ldr	r3, [r0, #0]
   d5ec2:	691b      	ldr	r3, [r3, #16]
   d5ec4:	4798      	blx	r3
   d5ec6:	2800      	cmp	r0, #0
   d5ec8:	dd01      	ble.n	d5ece <serialEventRun+0x2e>
        serialEvent1();
   d5eca:	f3af 8000 	nop.w
}
   d5ece:	bd08      	pop	{r3, pc}
	...

000d5ed8 <_post_loop>:
{
   d5ed8:	b508      	push	{r3, lr}
	serialEventRun();
   d5eda:	f7ff ffe1 	bl	d5ea0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5ede:	f7fe fbc3 	bl	d4668 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5ee2:	4b01      	ldr	r3, [pc, #4]	; (d5ee8 <_post_loop+0x10>)
   d5ee4:	6018      	str	r0, [r3, #0]
}
   d5ee6:	bd08      	pop	{r3, pc}
   d5ee8:	2003e7d0 	.word	0x2003e7d0

000d5eec <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5eec:	4802      	ldr	r0, [pc, #8]	; (d5ef8 <_Z33system_initialize_user_backup_ramv+0xc>)
   d5eee:	4a03      	ldr	r2, [pc, #12]	; (d5efc <_Z33system_initialize_user_backup_ramv+0x10>)
   d5ef0:	4903      	ldr	r1, [pc, #12]	; (d5f00 <_Z33system_initialize_user_backup_ramv+0x14>)
   d5ef2:	1a12      	subs	r2, r2, r0
   d5ef4:	f001 b8c0 	b.w	d7078 <memcpy>
   d5ef8:	2003f400 	.word	0x2003f400
   d5efc:	2003f404 	.word	0x2003f404
   d5f00:	000d7750 	.word	0x000d7750

000d5f04 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5f04:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5f06:	2300      	movs	r3, #0
   d5f08:	9300      	str	r3, [sp, #0]
   d5f0a:	461a      	mov	r2, r3
   d5f0c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5f10:	f7fe fd44 	bl	d499c <system_ctrl_set_result>
}
   d5f14:	b003      	add	sp, #12
   d5f16:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5f1c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d5f1c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5f1e:	8843      	ldrh	r3, [r0, #2]
   d5f20:	2b0a      	cmp	r3, #10
   d5f22:	d008      	beq.n	d5f36 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5f24:	2b50      	cmp	r3, #80	; 0x50
   d5f26:	d10b      	bne.n	d5f40 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d5f28:	4b09      	ldr	r3, [pc, #36]	; (d5f50 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5f2a:	681b      	ldr	r3, [r3, #0]
   d5f2c:	b14b      	cbz	r3, d5f42 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d5f2e:	b003      	add	sp, #12
   d5f30:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d5f34:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d5f36:	f7ff ffe5 	bl	d5f04 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d5f3a:	b003      	add	sp, #12
   d5f3c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5f40:	2300      	movs	r3, #0
   d5f42:	9300      	str	r3, [sp, #0]
   d5f44:	461a      	mov	r2, r3
   d5f46:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5f4a:	f7fe fd27 	bl	d499c <system_ctrl_set_result>
}
   d5f4e:	e7f4      	b.n	d5f3a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d5f50:	2003e778 	.word	0x2003e778

000d5f54 <module_user_init_hook>:
{
   d5f54:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5f56:	4c12      	ldr	r4, [pc, #72]	; (d5fa0 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d5f58:	4812      	ldr	r0, [pc, #72]	; (d5fa4 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5f5a:	4d13      	ldr	r5, [pc, #76]	; (d5fa8 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d5f5c:	2100      	movs	r1, #0
   d5f5e:	f7fe fdc7 	bl	d4af0 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5f62:	6823      	ldr	r3, [r4, #0]
   d5f64:	42ab      	cmp	r3, r5
   d5f66:	4b11      	ldr	r3, [pc, #68]	; (d5fac <module_user_init_hook+0x58>)
   d5f68:	bf0c      	ite	eq
   d5f6a:	2201      	moveq	r2, #1
   d5f6c:	2200      	movne	r2, #0
   d5f6e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d5f70:	d002      	beq.n	d5f78 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d5f72:	f7ff ffbb 	bl	d5eec <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d5f76:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5f78:	f7fe fb66 	bl	d4648 <HAL_RNG_GetRandomNumber>
   d5f7c:	4604      	mov	r4, r0
    srand(seed);
   d5f7e:	f001 f8ab 	bl	d70d8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5f82:	4b0b      	ldr	r3, [pc, #44]	; (d5fb0 <module_user_init_hook+0x5c>)
   d5f84:	b113      	cbz	r3, d5f8c <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d5f86:	4620      	mov	r0, r4
   d5f88:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5f8c:	2100      	movs	r1, #0
   d5f8e:	4808      	ldr	r0, [pc, #32]	; (d5fb0 <module_user_init_hook+0x5c>)
   d5f90:	f7fe fd6e 	bl	d4a70 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d5f94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5f98:	4806      	ldr	r0, [pc, #24]	; (d5fb4 <module_user_init_hook+0x60>)
   d5f9a:	2100      	movs	r1, #0
   d5f9c:	f7fe bcf4 	b.w	d4988 <system_ctrl_set_app_request_handler>
   d5fa0:	2003f400 	.word	0x2003f400
   d5fa4:	000d5e95 	.word	0x000d5e95
   d5fa8:	9a271c1e 	.word	0x9a271c1e
   d5fac:	2003e774 	.word	0x2003e774
   d5fb0:	00000000 	.word	0x00000000
   d5fb4:	000d5f1d 	.word	0x000d5f1d

000d5fb8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5fb8:	4770      	bx	lr

000d5fba <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d5fba:	2000      	movs	r0, #0
   d5fbc:	4770      	bx	lr

000d5fbe <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5fbe:	b510      	push	{r4, lr}
   d5fc0:	2110      	movs	r1, #16
   d5fc2:	4604      	mov	r4, r0
   d5fc4:	f001 f841 	bl	d704a <_ZdlPvj>
   d5fc8:	4620      	mov	r0, r4
   d5fca:	bd10      	pop	{r4, pc}

000d5fcc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d5fcc:	b508      	push	{r3, lr}
      { delete this; }
   d5fce:	f7ff fff6 	bl	d5fbe <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d5fd2:	bd08      	pop	{r3, pc}

000d5fd4 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d5fd4:	b530      	push	{r4, r5, lr}
        type_(type) {
   d5fd6:	2200      	movs	r2, #0
   d5fd8:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d5fdc:	6002      	str	r2, [r0, #0]
   d5fde:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d5fe0:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d5fe2:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d5fe4:	680c      	ldr	r4, [r1, #0]
   d5fe6:	8085      	strh	r5, [r0, #4]
   d5fe8:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d5fea:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d5fec:	bd30      	pop	{r4, r5, pc}

000d5fee <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d5fee:	b510      	push	{r4, lr}
   d5ff0:	4604      	mov	r4, r0
    free((void*)msg_);
   d5ff2:	6800      	ldr	r0, [r0, #0]
   d5ff4:	f7fe fd54 	bl	d4aa0 <free>
}
   d5ff8:	4620      	mov	r0, r4
   d5ffa:	bd10      	pop	{r4, pc}

000d5ffc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d5ffc:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d5ffe:	68c4      	ldr	r4, [r0, #12]
   d6000:	b1f4      	cbz	r4, d6040 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d6002:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d6004:	2b02      	cmp	r3, #2
   d6006:	d103      	bne.n	d6010 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d6008:	f104 000c 	add.w	r0, r4, #12
   d600c:	f7ff ffef 	bl	d5fee <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d6010:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d6012:	b135      	cbz	r5, d6022 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d6014:	4628      	mov	r0, r5
   d6016:	f7fe f8cb 	bl	d41b0 <_ZNSt14_Function_baseD1Ev>
   d601a:	2110      	movs	r1, #16
   d601c:	4628      	mov	r0, r5
   d601e:	f001 f814 	bl	d704a <_ZdlPvj>
   d6022:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d6024:	b135      	cbz	r5, d6034 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d6026:	4628      	mov	r0, r5
   d6028:	f7fe f8c2 	bl	d41b0 <_ZNSt14_Function_baseD1Ev>
   d602c:	2110      	movs	r1, #16
   d602e:	4628      	mov	r0, r5
   d6030:	f001 f80b 	bl	d704a <_ZdlPvj>
   d6034:	4620      	mov	r0, r4
   d6036:	2114      	movs	r1, #20
   d6038:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d603c:	f001 b805 	b.w	d704a <_ZdlPvj>
   d6040:	bd38      	pop	{r3, r4, r5, pc}

000d6042 <_ZN10CloudClass13publishVitalsEm>:
    }

    return p.future();
}

int CloudClass::publishVitals(system_tick_t period_s_) {
   d6042:	4608      	mov	r0, r1
    return spark_publish_vitals(period_s_, nullptr);
   d6044:	2100      	movs	r1, #0
   d6046:	f7fe bd1b 	b.w	d4a80 <spark_publish_vitals>

000d604a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d604a:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d604c:	460e      	mov	r6, r1
   d604e:	4604      	mov	r4, r0
   d6050:	f856 3b04 	ldr.w	r3, [r6], #4
   d6054:	9300      	str	r3, [sp, #0]
   d6056:	460d      	mov	r5, r1
   d6058:	a801      	add	r0, sp, #4
   d605a:	4631      	mov	r1, r6
   d605c:	f7fe fe7f 	bl	d4d5e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6060:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6062:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d6064:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6066:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d6068:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d606a:	2300      	movs	r3, #0
   d606c:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d606e:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d6070:	f7fe fe7c 	bl	d4d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6074:	4630      	mov	r0, r6
   d6076:	f7fe fe79 	bl	d4d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d607a:	4628      	mov	r0, r5
   d607c:	2108      	movs	r1, #8
   d607e:	f000 ffe4 	bl	d704a <_ZdlPvj>
        return p;
    }
   d6082:	4620      	mov	r0, r4
   d6084:	b002      	add	sp, #8
   d6086:	bd70      	pop	{r4, r5, r6, pc}

000d6088 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d6088:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d608a:	b510      	push	{r4, lr}
      if (_M_empty())
   d608c:	b90a      	cbnz	r2, d6092 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d608e:	f000 ffe2 	bl	d7056 <_ZSt25__throw_bad_function_callv>
    }
   d6092:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6096:	68c3      	ldr	r3, [r0, #12]
   d6098:	4718      	bx	r3

000d609a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d609a:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d609c:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d609e:	f100 0110 	add.w	r1, r0, #16
   d60a2:	f7ff fff1 	bl	d6088 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d60a6:	bd08      	pop	{r3, pc}

000d60a8 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d60a8:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d60aa:	b510      	push	{r4, lr}
      if (_M_empty())
   d60ac:	b90a      	cbnz	r2, d60b2 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d60ae:	f000 ffd2 	bl	d7056 <_ZSt25__throw_bad_function_callv>
    }
   d60b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d60b6:	68c3      	ldr	r3, [r0, #12]
   d60b8:	4718      	bx	r3

000d60ba <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d60ba:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d60bc:	6800      	ldr	r0, [r0, #0]
   d60be:	f100 0110 	add.w	r1, r0, #16
   d60c2:	f7ff fff1 	bl	d60a8 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d60c6:	bd08      	pop	{r3, pc}

000d60c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d60c8:	b538      	push	{r3, r4, r5, lr}
   d60ca:	2300      	movs	r3, #0
   d60cc:	4604      	mov	r4, r0
   d60ce:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d60d0:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d60d2:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d60d4:	f7fd ffdd 	bl	d4092 <_Znwj>
   d60d8:	b128      	cbz	r0, d60e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d60da:	2301      	movs	r3, #1
   d60dc:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d60e0:	4b02      	ldr	r3, [pc, #8]	; (d60ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d60e2:	6003      	str	r3, [r0, #0]
   d60e4:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d60e6:	6020      	str	r0, [r4, #0]
	}
   d60e8:	4620      	mov	r0, r4
   d60ea:	bd38      	pop	{r3, r4, r5, pc}
   d60ec:	000d7508 	.word	0x000d7508

000d60f0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d60f0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d60f2:	2300      	movs	r3, #0
   d60f4:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d60f6:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d60f8:	4604      	mov	r4, r0
   d60fa:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d60fc:	b12b      	cbz	r3, d610a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d60fe:	2202      	movs	r2, #2
   d6100:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d6102:	68eb      	ldr	r3, [r5, #12]
   d6104:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d6106:	68ab      	ldr	r3, [r5, #8]
   d6108:	60a3      	str	r3, [r4, #8]
    }
   d610a:	4620      	mov	r0, r4
   d610c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6110 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d6110:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6112:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d6114:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d6116:	4668      	mov	r0, sp
   d6118:	f7ff ff5c 	bl	d5fd4 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d611c:	f04f 0302 	mov.w	r3, #2
   d6120:	e8d4 2f4f 	ldrexb	r2, [r4]
   d6124:	2a00      	cmp	r2, #0
   d6126:	d103      	bne.n	d6130 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d6128:	e8c4 3f41 	strexb	r1, r3, [r4]
   d612c:	2900      	cmp	r1, #0
   d612e:	d1f7      	bne.n	d6120 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d6130:	d125      	bne.n	d617e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d6132:	f104 050c 	add.w	r5, r4, #12
   d6136:	4669      	mov	r1, sp
   d6138:	4628      	mov	r0, r5
   d613a:	f7ff ff4b 	bl	d5fd4 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d613e:	f3bf 8f5b 	dmb	ish
   d6142:	2301      	movs	r3, #1
   d6144:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d6146:	2000      	movs	r0, #0
   d6148:	f104 0308 	add.w	r3, r4, #8
   d614c:	f3bf 8f5b 	dmb	ish
   d6150:	e853 6f00 	ldrex	r6, [r3]
   d6154:	e843 0200 	strex	r2, r0, [r3]
   d6158:	2a00      	cmp	r2, #0
   d615a:	d1f9      	bne.n	d6150 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d615c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d6160:	b16e      	cbz	r6, d617e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d6162:	f7fe fc01 	bl	d4968 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d6166:	b178      	cbz	r0, d6188 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d6168:	4629      	mov	r1, r5
   d616a:	4630      	mov	r0, r6
   d616c:	f7ff ff8c 	bl	d6088 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d6170:	4630      	mov	r0, r6
   d6172:	f7fe f81d 	bl	d41b0 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d6176:	2110      	movs	r1, #16
   d6178:	4630      	mov	r0, r6
   d617a:	f000 ff66 	bl	d704a <_ZdlPvj>
        p_->setError(std::move(error));
   d617e:	4668      	mov	r0, sp
   d6180:	f7ff ff35 	bl	d5fee <_ZN8particle5ErrorD1Ev>
    }
   d6184:	b009      	add	sp, #36	; 0x24
   d6186:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d6188:	4631      	mov	r1, r6
   d618a:	a802      	add	r0, sp, #8
   d618c:	f7ff ffb0 	bl	d60f0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d6190:	68e0      	ldr	r0, [r4, #12]
   d6192:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d6196:	b108      	cbz	r0, d619c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d6198:	f000 ffec 	bl	d7174 <strdup>
        type_(type) {
   d619c:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d619e:	2010      	movs	r0, #16
   d61a0:	f8ad 501c 	strh.w	r5, [sp, #28]
   d61a4:	f7fd ff75 	bl	d4092 <_Znwj>
   d61a8:	4605      	mov	r5, r0
   d61aa:	b1e8      	cbz	r0, d61e8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d61ac:	2700      	movs	r7, #0
   d61ae:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d61b0:	2018      	movs	r0, #24
   d61b2:	f7fd ff6e 	bl	d4092 <_Znwj>
   d61b6:	4604      	mov	r4, r0
   d61b8:	b188      	cbz	r0, d61de <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d61ba:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d61bc:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d61be:	a802      	add	r0, sp, #8
   d61c0:	f7ff fe47 	bl	d5e52 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d61c4:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d61c6:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d61c8:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d61ca:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d61cc:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d61ce:	a906      	add	r1, sp, #24
   d61d0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d61d2:	60e3      	str	r3, [r4, #12]
   d61d4:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d61d8:	9205      	str	r2, [sp, #20]
   d61da:	f7ff fefb 	bl	d5fd4 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d61de:	4b08      	ldr	r3, [pc, #32]	; (d6200 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d61e0:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d61e2:	4b08      	ldr	r3, [pc, #32]	; (d6204 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d61e4:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d61e6:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d61e8:	a806      	add	r0, sp, #24
   d61ea:	f7ff ff00 	bl	d5fee <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d61ee:	a802      	add	r0, sp, #8
   d61f0:	f7fd ffde 	bl	d41b0 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d61f4:	2200      	movs	r2, #0
   d61f6:	4629      	mov	r1, r5
   d61f8:	4803      	ldr	r0, [pc, #12]	; (d6208 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d61fa:	f7fe fbbd 	bl	d4978 <application_thread_invoke>
   d61fe:	e7b7      	b.n	d6170 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d6200:	000d609b 	.word	0x000d609b
   d6204:	000d6331 	.word	0x000d6331
   d6208:	000d68e1 	.word	0x000d68e1

000d620c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d620c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6210:	b08a      	sub	sp, #40	; 0x28
   d6212:	4605      	mov	r5, r0
   d6214:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d6218:	460c      	mov	r4, r1
   d621a:	4617      	mov	r7, r2
   d621c:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d621e:	f7fe fc17 	bl	d4a50 <spark_cloud_flag_connected>
   d6222:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d6224:	4682      	mov	sl, r0
   d6226:	bb38      	cbnz	r0, d6278 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d6228:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d622c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d622e:	a905      	add	r1, sp, #20
   d6230:	4630      	mov	r0, r6
   d6232:	f8ad 3018 	strh.w	r3, [sp, #24]
   d6236:	f7ff fecd 	bl	d5fd4 <_ZN8particle5ErrorC1EOS0_>
   d623a:	2014      	movs	r0, #20
   d623c:	f7fd ff29 	bl	d4092 <_Znwj>
   d6240:	4604      	mov	r4, r0
   d6242:	b148      	cbz	r0, d6258 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d6244:	2302      	movs	r3, #2
   d6246:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6248:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d624a:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d624e:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d6250:	4631      	mov	r1, r6
   d6252:	300c      	adds	r0, #12
   d6254:	f7ff febe 	bl	d5fd4 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d6258:	4628      	mov	r0, r5
	: __shared_count(__p)
   d625a:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d625c:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d6260:	f7ff ff32 	bl	d60c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d6264:	4630      	mov	r0, r6
   d6266:	f7ff fec2 	bl	d5fee <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d626a:	a805      	add	r0, sp, #20
   d626c:	f7ff febf 	bl	d5fee <_ZN8particle5ErrorD1Ev>
}
   d6270:	4628      	mov	r0, r5
   d6272:	b00a      	add	sp, #40	; 0x28
   d6274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d6278:	230c      	movs	r3, #12
   d627a:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d627e:	2014      	movs	r0, #20
   d6280:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d6284:	9307      	str	r3, [sp, #28]
   d6286:	f7fd ff04 	bl	d4092 <_Znwj>
   d628a:	4601      	mov	r1, r0
   d628c:	b128      	cbz	r0, d629a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d628e:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d6292:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6296:	f880 a001 	strb.w	sl, [r0, #1]
   d629a:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d629c:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d629e:	f7ff ff13 	bl	d60c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d62a2:	4b22      	ldr	r3, [pc, #136]	; (d632c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d62a4:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d62a6:	2008      	movs	r0, #8
   d62a8:	f7fd fef3 	bl	d4092 <_Znwj>
   d62ac:	4682      	mov	sl, r0
   d62ae:	b128      	cbz	r0, d62bc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d62b0:	9b03      	ldr	r3, [sp, #12]
   d62b2:	f840 3b04 	str.w	r3, [r0], #4
   d62b6:	a904      	add	r1, sp, #16
   d62b8:	f7fe fd51 	bl	d4d5e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d62bc:	9600      	str	r6, [sp, #0]
   d62be:	fa5f f389 	uxtb.w	r3, r9
   d62c2:	4642      	mov	r2, r8
   d62c4:	4639      	mov	r1, r7
   d62c6:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d62c8:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d62cc:	f7fe fbc8 	bl	d4a60 <spark_send_event>
   d62d0:	b9b8      	cbnz	r0, d6302 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d62d2:	9b03      	ldr	r3, [sp, #12]
   d62d4:	785b      	ldrb	r3, [r3, #1]
   d62d6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d62da:	b993      	cbnz	r3, d6302 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d62dc:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d62e0:	a905      	add	r1, sp, #20
   d62e2:	a803      	add	r0, sp, #12
   d62e4:	9205      	str	r2, [sp, #20]
   d62e6:	f8ad 3018 	strh.w	r3, [sp, #24]
   d62ea:	f7ff ff11 	bl	d6110 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d62ee:	a805      	add	r0, sp, #20
   d62f0:	f7ff fe7d 	bl	d5fee <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d62f4:	a805      	add	r0, sp, #20
   d62f6:	9909      	ldr	r1, [sp, #36]	; 0x24
   d62f8:	f7ff fea7 	bl	d604a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d62fc:	a806      	add	r0, sp, #24
   d62fe:	f7fe fd35 	bl	d4d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6302:	9b03      	ldr	r3, [sp, #12]
   d6304:	9305      	str	r3, [sp, #20]
   d6306:	a904      	add	r1, sp, #16
   d6308:	a806      	add	r0, sp, #24
   d630a:	f7fe fd28 	bl	d4d5e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d630e:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6310:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6312:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d6314:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d6316:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d6318:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d631a:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d631c:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d631e:	f7fe fd25 	bl	d4d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6322:	a804      	add	r0, sp, #16
   d6324:	f7fe fd22 	bl	d4d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d6328:	e7a2      	b.n	d6270 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d632a:	bf00      	nop
   d632c:	000d63f5 	.word	0x000d63f5

000d6330 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d6330:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6332:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6334:	4605      	mov	r5, r0
	  switch (__op)
   d6336:	d007      	beq.n	d6348 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d6338:	2a03      	cmp	r2, #3
   d633a:	d018      	beq.n	d636e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d633c:	2a01      	cmp	r2, #1
   d633e:	d101      	bne.n	d6344 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d6340:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6342:	6003      	str	r3, [r0, #0]
	}
   d6344:	2000      	movs	r0, #0
   d6346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d6348:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d634a:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d634c:	f7fd fea1 	bl	d4092 <_Znwj>
   d6350:	4604      	mov	r4, r0
   d6352:	b150      	cbz	r0, d636a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d6354:	4631      	mov	r1, r6
   d6356:	f7ff fecb 	bl	d60f0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d635a:	6930      	ldr	r0, [r6, #16]
   d635c:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d6360:	b108      	cbz	r0, d6366 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d6362:	f000 ff07 	bl	d7174 <strdup>
        type_(type) {
   d6366:	6120      	str	r0, [r4, #16]
   d6368:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d636a:	602c      	str	r4, [r5, #0]
	}
   d636c:	e7ea      	b.n	d6344 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d636e:	6804      	ldr	r4, [r0, #0]
   d6370:	2c00      	cmp	r4, #0
   d6372:	d0e7      	beq.n	d6344 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d6374:	f104 0010 	add.w	r0, r4, #16
   d6378:	f7ff fe39 	bl	d5fee <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d637c:	4620      	mov	r0, r4
   d637e:	f7fd ff17 	bl	d41b0 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d6382:	2118      	movs	r1, #24
   d6384:	4620      	mov	r0, r4
   d6386:	f000 fe60 	bl	d704a <_ZdlPvj>
   d638a:	e7db      	b.n	d6344 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d638c <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d638c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d638e:	2300      	movs	r3, #0
   d6390:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d6392:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d6394:	4604      	mov	r4, r0
   d6396:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d6398:	b12b      	cbz	r3, d63a6 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d639a:	2202      	movs	r2, #2
   d639c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d639e:	68eb      	ldr	r3, [r5, #12]
   d63a0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d63a2:	68ab      	ldr	r3, [r5, #8]
   d63a4:	60a3      	str	r3, [r4, #8]
    }
   d63a6:	4620      	mov	r0, r4
   d63a8:	bd38      	pop	{r3, r4, r5, pc}

000d63aa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d63aa:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d63ac:	b570      	push	{r4, r5, r6, lr}
   d63ae:	4604      	mov	r4, r0
	  switch (__op)
   d63b0:	d007      	beq.n	d63c2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d63b2:	2a03      	cmp	r2, #3
   d63b4:	d012      	beq.n	d63dc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d63b6:	2a01      	cmp	r2, #1
   d63b8:	d101      	bne.n	d63be <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d63ba:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d63bc:	6003      	str	r3, [r0, #0]
	}
   d63be:	2000      	movs	r0, #0
   d63c0:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d63c2:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d63c4:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d63c6:	f7fd fe64 	bl	d4092 <_Znwj>
   d63ca:	4605      	mov	r5, r0
   d63cc:	b120      	cbz	r0, d63d8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d63ce:	4631      	mov	r1, r6
   d63d0:	f7ff ffdc 	bl	d638c <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d63d4:	7c33      	ldrb	r3, [r6, #16]
   d63d6:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d63d8:	6025      	str	r5, [r4, #0]
	}
   d63da:	e7f0      	b.n	d63be <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d63dc:	6804      	ldr	r4, [r0, #0]
   d63de:	2c00      	cmp	r4, #0
   d63e0:	d0ed      	beq.n	d63be <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d63e2:	4620      	mov	r0, r4
   d63e4:	f7fd fee4 	bl	d41b0 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d63e8:	2114      	movs	r1, #20
   d63ea:	4620      	mov	r0, r4
   d63ec:	f000 fe2d 	bl	d704a <_ZdlPvj>
   d63f0:	e7e5      	b.n	d63be <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d63f4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d63f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d63f6:	b089      	sub	sp, #36	; 0x24
   d63f8:	4604      	mov	r4, r0
   d63fa:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d63fc:	a801      	add	r0, sp, #4
   d63fe:	4611      	mov	r1, r2
   d6400:	f7ff fe23 	bl	d604a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d6404:	b1a4      	cbz	r4, d6430 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d6406:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d6408:	b11d      	cbz	r5, d6412 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d640a:	4628      	mov	r0, r5
   d640c:	f000 feb2 	bl	d7174 <strdup>
   d6410:	4605      	mov	r5, r0
   d6412:	a801      	add	r0, sp, #4
   d6414:	a903      	add	r1, sp, #12
        type_(type) {
   d6416:	9503      	str	r5, [sp, #12]
   d6418:	f8ad 4010 	strh.w	r4, [sp, #16]
   d641c:	f7ff fe78 	bl	d6110 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d6420:	a803      	add	r0, sp, #12
   d6422:	f7ff fde4 	bl	d5fee <_ZN8particle5ErrorD1Ev>
   d6426:	a802      	add	r0, sp, #8
   d6428:	f7fe fca0 	bl	d4d6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d642c:	b009      	add	sp, #36	; 0x24
   d642e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d6430:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d6432:	2301      	movs	r3, #1
   d6434:	e8d5 2f4f 	ldrexb	r2, [r5]
   d6438:	2a00      	cmp	r2, #0
   d643a:	d103      	bne.n	d6444 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d643c:	e8c5 3f41 	strexb	r1, r3, [r5]
   d6440:	2900      	cmp	r1, #0
   d6442:	d1f7      	bne.n	d6434 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d6444:	d1ef      	bne.n	d6426 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d6446:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d6448:	f3bf 8f5b 	dmb	ish
   d644c:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d644e:	1d2b      	adds	r3, r5, #4
   d6450:	f3bf 8f5b 	dmb	ish
   d6454:	e853 6f00 	ldrex	r6, [r3]
   d6458:	e843 4200 	strex	r2, r4, [r3]
   d645c:	2a00      	cmp	r2, #0
   d645e:	d1f9      	bne.n	d6454 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d6460:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d6464:	2e00      	cmp	r6, #0
   d6466:	d0de      	beq.n	d6426 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d6468:	4620      	mov	r0, r4
   d646a:	f7fe fa7d 	bl	d4968 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d646e:	4607      	mov	r7, r0
   d6470:	b160      	cbz	r0, d648c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d6472:	f105 010c 	add.w	r1, r5, #12
   d6476:	4630      	mov	r0, r6
   d6478:	f7ff fe16 	bl	d60a8 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d647c:	4630      	mov	r0, r6
   d647e:	f7fd fe97 	bl	d41b0 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d6482:	2110      	movs	r1, #16
   d6484:	4630      	mov	r0, r6
   d6486:	f000 fde0 	bl	d704a <_ZdlPvj>
   d648a:	e7cc      	b.n	d6426 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d648c:	4631      	mov	r1, r6
   d648e:	a803      	add	r0, sp, #12
   d6490:	f7ff ff7c 	bl	d638c <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6494:	7b2b      	ldrb	r3, [r5, #12]
   d6496:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d649a:	2010      	movs	r0, #16
   d649c:	f7fd fdf9 	bl	d4092 <_Znwj>
   d64a0:	4605      	mov	r5, r0
   d64a2:	b1d0      	cbz	r0, d64da <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d64a4:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d64a6:	2014      	movs	r0, #20
   d64a8:	f7fd fdf3 	bl	d4092 <_Znwj>
   d64ac:	4604      	mov	r4, r0
   d64ae:	b178      	cbz	r0, d64d0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d64b0:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d64b2:	4601      	mov	r1, r0
   d64b4:	a803      	add	r0, sp, #12
   d64b6:	f7ff fccc 	bl	d5e52 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d64ba:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d64bc:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d64be:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d64c0:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d64c2:	9205      	str	r2, [sp, #20]
   d64c4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d64c6:	60e3      	str	r3, [r4, #12]
   d64c8:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d64cc:	9206      	str	r2, [sp, #24]
   d64ce:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d64d0:	4b06      	ldr	r3, [pc, #24]	; (d64ec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d64d2:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d64d4:	4b06      	ldr	r3, [pc, #24]	; (d64f0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d64d6:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d64d8:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d64da:	a803      	add	r0, sp, #12
   d64dc:	f7fd fe68 	bl	d41b0 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d64e0:	2200      	movs	r2, #0
   d64e2:	4629      	mov	r1, r5
   d64e4:	4803      	ldr	r0, [pc, #12]	; (d64f4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d64e6:	f7fe fa47 	bl	d4978 <application_thread_invoke>
   d64ea:	e7c7      	b.n	d647c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d64ec:	000d60bb 	.word	0x000d60bb
   d64f0:	000d63ab 	.word	0x000d63ab
   d64f4:	000d68e1 	.word	0x000d68e1

000d64f8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d64f8:	4770      	bx	lr

000d64fa <_ZN9IPAddressD0Ev>:
   d64fa:	b510      	push	{r4, lr}
   d64fc:	2118      	movs	r1, #24
   d64fe:	4604      	mov	r4, r0
   d6500:	f000 fda3 	bl	d704a <_ZdlPvj>
   d6504:	4620      	mov	r0, r4
   d6506:	bd10      	pop	{r4, pc}

000d6508 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6508:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d650a:	7d03      	ldrb	r3, [r0, #20]
   d650c:	2b06      	cmp	r3, #6
{
   d650e:	b08d      	sub	sp, #52	; 0x34
   d6510:	460e      	mov	r6, r1
   d6512:	f100 0704 	add.w	r7, r0, #4
   d6516:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d651a:	d012      	beq.n	d6542 <_ZNK9IPAddress7printToER5Print+0x3a>
   d651c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d6520:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d6524:	220a      	movs	r2, #10
   d6526:	4630      	mov	r0, r6
   d6528:	f7fe fc77 	bl	d4e1a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d652c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d652e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d6530:	d019      	beq.n	d6566 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d6532:	2c00      	cmp	r4, #0
   d6534:	d0f4      	beq.n	d6520 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d6536:	212e      	movs	r1, #46	; 0x2e
   d6538:	4630      	mov	r0, r6
   d653a:	f7fe fc5f 	bl	d4dfc <_ZN5Print5printEc>
   d653e:	4404      	add	r4, r0
   d6540:	e7ee      	b.n	d6520 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6542:	232f      	movs	r3, #47	; 0x2f
   d6544:	466a      	mov	r2, sp
   d6546:	4639      	mov	r1, r7
   d6548:	200a      	movs	r0, #10
		buf[0] = 0;
   d654a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d654e:	f7fe f8eb 	bl	d4728 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d6552:	4668      	mov	r0, sp
   d6554:	f000 fe2b 	bl	d71ae <strlen>
   d6558:	6833      	ldr	r3, [r6, #0]
   d655a:	4602      	mov	r2, r0
   d655c:	68db      	ldr	r3, [r3, #12]
   d655e:	4669      	mov	r1, sp
   d6560:	4630      	mov	r0, r6
   d6562:	4798      	blx	r3
   d6564:	4604      	mov	r4, r0
    }
    return n;
}
   d6566:	4620      	mov	r0, r4
   d6568:	b00d      	add	sp, #52	; 0x34
   d656a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d656c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d656c:	b510      	push	{r4, lr}
   d656e:	4b05      	ldr	r3, [pc, #20]	; (d6584 <_ZN9IPAddressC1Ev+0x18>)
   d6570:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d6572:	2211      	movs	r2, #17
   d6574:	f840 3b04 	str.w	r3, [r0], #4
   d6578:	2100      	movs	r1, #0
   d657a:	f000 fda5 	bl	d70c8 <memset>
}
   d657e:	4620      	mov	r0, r4
   d6580:	bd10      	pop	{r4, pc}
   d6582:	bf00      	nop
   d6584:	000d7524 	.word	0x000d7524

000d6588 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d6588:	4603      	mov	r3, r0
   d658a:	4a07      	ldr	r2, [pc, #28]	; (d65a8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d658c:	b510      	push	{r4, lr}
   d658e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d6592:	f101 0210 	add.w	r2, r1, #16
   d6596:	f851 4b04 	ldr.w	r4, [r1], #4
   d659a:	f843 4b04 	str.w	r4, [r3], #4
   d659e:	4291      	cmp	r1, r2
   d65a0:	d1f9      	bne.n	d6596 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d65a2:	780a      	ldrb	r2, [r1, #0]
   d65a4:	701a      	strb	r2, [r3, #0]
}
   d65a6:	bd10      	pop	{r4, pc}
   d65a8:	000d7524 	.word	0x000d7524

000d65ac <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d65ac:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d65ae:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d65b2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d65b6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d65ba:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d65be:	2304      	movs	r3, #4
   d65c0:	6041      	str	r1, [r0, #4]
   d65c2:	7503      	strb	r3, [r0, #20]
}
   d65c4:	bd10      	pop	{r4, pc}

000d65c6 <_ZN9IPAddressaSEPKh>:
{
   d65c6:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d65c8:	78cb      	ldrb	r3, [r1, #3]
   d65ca:	9300      	str	r3, [sp, #0]
   d65cc:	788b      	ldrb	r3, [r1, #2]
   d65ce:	784a      	ldrb	r2, [r1, #1]
   d65d0:	7809      	ldrb	r1, [r1, #0]
   d65d2:	f7ff ffeb 	bl	d65ac <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d65d6:	b002      	add	sp, #8
   d65d8:	bd10      	pop	{r4, pc}

000d65da <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d65da:	7441      	strb	r1, [r0, #17]
}
   d65dc:	4770      	bx	lr

000d65de <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d65de:	4770      	bx	lr

000d65e0 <_ZN9USBSerial4readEv>:
{
   d65e0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d65e2:	2100      	movs	r1, #0
   d65e4:	7c00      	ldrb	r0, [r0, #16]
   d65e6:	f7fe f977 	bl	d48d8 <HAL_USB_USART_Receive_Data>
}
   d65ea:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d65ee:	bd08      	pop	{r3, pc}

000d65f0 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d65f0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d65f2:	2101      	movs	r1, #1
   d65f4:	7c00      	ldrb	r0, [r0, #16]
   d65f6:	f7fe f96f 	bl	d48d8 <HAL_USB_USART_Receive_Data>
}
   d65fa:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d65fe:	bd08      	pop	{r3, pc}

000d6600 <_ZN9USBSerial17availableForWriteEv>:
{
   d6600:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d6602:	7c00      	ldrb	r0, [r0, #16]
   d6604:	f7fe f960 	bl	d48c8 <HAL_USB_USART_Available_Data_For_Write>
}
   d6608:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d660c:	bd08      	pop	{r3, pc}

000d660e <_ZN9USBSerial9availableEv>:
{
   d660e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d6610:	7c00      	ldrb	r0, [r0, #16]
   d6612:	f7fe f951 	bl	d48b8 <HAL_USB_USART_Available_Data>
}
   d6616:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d661a:	bd08      	pop	{r3, pc}

000d661c <_ZN9USBSerial5writeEh>:
{
   d661c:	b513      	push	{r0, r1, r4, lr}
   d661e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6620:	7c00      	ldrb	r0, [r0, #16]
{
   d6622:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6624:	f7fe f950 	bl	d48c8 <HAL_USB_USART_Available_Data_For_Write>
   d6628:	2800      	cmp	r0, #0
   d662a:	9901      	ldr	r1, [sp, #4]
   d662c:	dc01      	bgt.n	d6632 <_ZN9USBSerial5writeEh+0x16>
   d662e:	7c60      	ldrb	r0, [r4, #17]
   d6630:	b120      	cbz	r0, d663c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d6632:	7c20      	ldrb	r0, [r4, #16]
   d6634:	f7fe f958 	bl	d48e8 <HAL_USB_USART_Send_Data>
   d6638:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d663c:	b002      	add	sp, #8
   d663e:	bd10      	pop	{r4, pc}

000d6640 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d6640:	7c00      	ldrb	r0, [r0, #16]
   d6642:	f7fe b959 	b.w	d48f8 <HAL_USB_USART_Flush_Data>

000d6646 <_ZN9USBSerialD0Ev>:
   d6646:	b510      	push	{r4, lr}
   d6648:	2114      	movs	r1, #20
   d664a:	4604      	mov	r4, r0
   d664c:	f000 fcfd 	bl	d704a <_ZdlPvj>
   d6650:	4620      	mov	r0, r4
   d6652:	bd10      	pop	{r4, pc}

000d6654 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6654:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d6656:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d665a:	4604      	mov	r4, r0
   d665c:	4608      	mov	r0, r1
   d665e:	2100      	movs	r1, #0
   d6660:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d6664:	4b04      	ldr	r3, [pc, #16]	; (d6678 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d6666:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d6668:	2301      	movs	r3, #1
  _serial = serial;
   d666a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d666c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d666e:	4611      	mov	r1, r2
   d6670:	f7fe f90a 	bl	d4888 <HAL_USB_USART_Init>
}
   d6674:	4620      	mov	r0, r4
   d6676:	bd10      	pop	{r4, pc}
   d6678:	000d7538 	.word	0x000d7538

000d667c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d667c:	7c00      	ldrb	r0, [r0, #16]
   d667e:	2200      	movs	r2, #0
   d6680:	f7fe b90a 	b.w	d4898 <HAL_USB_USART_Begin>

000d6684 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   d6684:	7c00      	ldrb	r0, [r0, #16]
   d6686:	f7fe b90f 	b.w	d48a8 <HAL_USB_USART_End>

000d668a <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d668a:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d668c:	2214      	movs	r2, #20
{
   d668e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d6690:	2100      	movs	r1, #0
   d6692:	f000 fd19 	bl	d70c8 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6696:	4620      	mov	r0, r4
   d6698:	bd10      	pop	{r4, pc}
	...

000d669c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d669c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d669e:	4c10      	ldr	r4, [pc, #64]	; (d66e0 <_Z16_fetch_usbserialv+0x44>)
{
   d66a0:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d66a2:	a803      	add	r0, sp, #12
   d66a4:	f7ff fff1 	bl	d668a <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d66a8:	7821      	ldrb	r1, [r4, #0]
   d66aa:	f3bf 8f5b 	dmb	ish
   d66ae:	f011 0101 	ands.w	r1, r1, #1
   d66b2:	d111      	bne.n	d66d8 <_Z16_fetch_usbserialv+0x3c>
   d66b4:	4620      	mov	r0, r4
   d66b6:	9101      	str	r1, [sp, #4]
   d66b8:	f7fd fcfc 	bl	d40b4 <__cxa_guard_acquire>
   d66bc:	9901      	ldr	r1, [sp, #4]
   d66be:	b158      	cbz	r0, d66d8 <_Z16_fetch_usbserialv+0x3c>
   d66c0:	aa03      	add	r2, sp, #12
   d66c2:	4808      	ldr	r0, [pc, #32]	; (d66e4 <_Z16_fetch_usbserialv+0x48>)
   d66c4:	f7ff ffc6 	bl	d6654 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d66c8:	4620      	mov	r0, r4
   d66ca:	f7fd fcf8 	bl	d40be <__cxa_guard_release>
   d66ce:	4a06      	ldr	r2, [pc, #24]	; (d66e8 <_Z16_fetch_usbserialv+0x4c>)
   d66d0:	4906      	ldr	r1, [pc, #24]	; (d66ec <_Z16_fetch_usbserialv+0x50>)
   d66d2:	4804      	ldr	r0, [pc, #16]	; (d66e4 <_Z16_fetch_usbserialv+0x48>)
   d66d4:	f000 fcb4 	bl	d7040 <__aeabi_atexit>
	return _usbserial;
}
   d66d8:	4802      	ldr	r0, [pc, #8]	; (d66e4 <_Z16_fetch_usbserialv+0x48>)
   d66da:	b008      	add	sp, #32
   d66dc:	bd10      	pop	{r4, pc}
   d66de:	bf00      	nop
   d66e0:	2003e77c 	.word	0x2003e77c
   d66e4:	2003e780 	.word	0x2003e780
   d66e8:	2003e6c0 	.word	0x2003e6c0
   d66ec:	000d65df 	.word	0x000d65df

000d66f0 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d66f0:	4700      	bx	r0
	...

000d66f4 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d66f4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d66f8:	2400      	movs	r4, #0
{
   d66fa:	461d      	mov	r5, r3
   d66fc:	460f      	mov	r7, r1
   d66fe:	4690      	mov	r8, r2
   d6700:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   d6702:	f7fd ff99 	bl	d4638 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   d6706:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d6708:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {0};
   d670c:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d6710:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {0};
   d6714:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   d6718:	bfa2      	ittt	ge
   d671a:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d671e:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   d6722:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d6724:	4907      	ldr	r1, [pc, #28]	; (d6744 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   d6726:	9400      	str	r4, [sp, #0]
   d6728:	4643      	mov	r3, r8
   d672a:	463a      	mov	r2, r7
   d672c:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d672e:	bfa8      	it	ge
   d6730:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d6734:	f7fd ff78 	bl	d4628 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d6738:	fab0 f080 	clz	r0, r0
   d673c:	0940      	lsrs	r0, r0, #5
   d673e:	b004      	add	sp, #16
   d6740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6744:	000d66f1 	.word	0x000d66f1

000d6748 <tone>:

#include "spark_wiring_tone.h"
#include "tone_hal.h"

void tone(uint8_t pin, unsigned int frequency, unsigned long duration)
{
   d6748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   d674a:	b287      	uxth	r7, r0
{
   d674c:	4604      	mov	r4, r0
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   d674e:	4638      	mov	r0, r7
{
   d6750:	460d      	mov	r5, r1
   d6752:	4616      	mov	r6, r2
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   d6754:	f000 fbe4 	bl	d6f20 <pinAvailable>
   d6758:	b160      	cbz	r0, d6774 <tone+0x2c>
   d675a:	2102      	movs	r1, #2
   d675c:	4638      	mov	r0, r7
   d675e:	f7fd ff53 	bl	d4608 <HAL_Validate_Pin_Function>
   d6762:	2802      	cmp	r0, #2
   d6764:	d106      	bne.n	d6774 <tone+0x2c>
        HAL_Tone_Start(pin, frequency, duration);
   d6766:	4632      	mov	r2, r6
   d6768:	4629      	mov	r1, r5
   d676a:	4620      	mov	r0, r4
    }
}
   d676c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        HAL_Tone_Start(pin, frequency, duration);
   d6770:	f7fe b87a 	b.w	d4868 <HAL_Tone_Start>
}
   d6774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6776 <noTone>:

void noTone(uint8_t pin)
{
   d6776:	b538      	push	{r3, r4, r5, lr}
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   d6778:	b285      	uxth	r5, r0
{
   d677a:	4604      	mov	r4, r0
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   d677c:	4628      	mov	r0, r5
   d677e:	f000 fbcf 	bl	d6f20 <pinAvailable>
   d6782:	b150      	cbz	r0, d679a <noTone+0x24>
   d6784:	2102      	movs	r1, #2
   d6786:	4628      	mov	r0, r5
   d6788:	f7fd ff3e 	bl	d4608 <HAL_Validate_Pin_Function>
   d678c:	2802      	cmp	r0, #2
   d678e:	d104      	bne.n	d679a <noTone+0x24>
        HAL_Tone_Stop(pin);
   d6790:	4620      	mov	r0, r4
    }
}
   d6792:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_Tone_Stop(pin);
   d6796:	f7fe b86f 	b.w	d4878 <HAL_Tone_Stop>
}
   d679a:	bd38      	pop	{r3, r4, r5, pc}

000d679c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d679c:	4770      	bx	lr

000d679e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d679e:	7441      	strb	r1, [r0, #17]
}
   d67a0:	4770      	bx	lr

000d67a2 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d67a2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d67a4:	7c00      	ldrb	r0, [r0, #16]
   d67a6:	f7fe f807 	bl	d47b8 <hal_usart_available_data_for_write>
}
   d67aa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d67ae:	bd08      	pop	{r3, pc}

000d67b0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d67b0:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d67b2:	7c00      	ldrb	r0, [r0, #16]
   d67b4:	f7fd ffd8 	bl	d4768 <hal_usart_available>
}
   d67b8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d67bc:	bd08      	pop	{r3, pc}

000d67be <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d67be:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d67c0:	7c00      	ldrb	r0, [r0, #16]
   d67c2:	f7fd ffe1 	bl	d4788 <hal_usart_peek>
}
   d67c6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d67ca:	bd08      	pop	{r3, pc}

000d67cc <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d67cc:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d67ce:	7c00      	ldrb	r0, [r0, #16]
   d67d0:	f7fd ffd2 	bl	d4778 <hal_usart_read>
}
   d67d4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d67d8:	bd08      	pop	{r3, pc}

000d67da <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d67da:	7c00      	ldrb	r0, [r0, #16]
   d67dc:	f7fd bfdc 	b.w	d4798 <hal_usart_flush>

000d67e0 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d67e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d67e2:	7c45      	ldrb	r5, [r0, #17]
{
   d67e4:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d67e6:	b12d      	cbz	r5, d67f4 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d67e8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d67ea:	b003      	add	sp, #12
   d67ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d67f0:	f7fd bfb2 	b.w	d4758 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d67f4:	7c00      	ldrb	r0, [r0, #16]
   d67f6:	9101      	str	r1, [sp, #4]
   d67f8:	f7fd ffde 	bl	d47b8 <hal_usart_available_data_for_write>
   d67fc:	2800      	cmp	r0, #0
   d67fe:	9901      	ldr	r1, [sp, #4]
   d6800:	dcf2      	bgt.n	d67e8 <_ZN11USARTSerial5writeEh+0x8>
}
   d6802:	4628      	mov	r0, r5
   d6804:	b003      	add	sp, #12
   d6806:	bd30      	pop	{r4, r5, pc}

000d6808 <_ZN11USARTSerialD0Ev>:
   d6808:	b510      	push	{r4, lr}
   d680a:	2114      	movs	r1, #20
   d680c:	4604      	mov	r4, r0
   d680e:	f000 fc1c 	bl	d704a <_ZdlPvj>
   d6812:	4620      	mov	r0, r4
   d6814:	bd10      	pop	{r4, pc}
	...

000d6818 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d6818:	b510      	push	{r4, lr}
   d681a:	f04f 0c00 	mov.w	ip, #0
   d681e:	4604      	mov	r4, r0
   d6820:	4608      	mov	r0, r1
   d6822:	4611      	mov	r1, r2
   d6824:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6828:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d682c:	4a04      	ldr	r2, [pc, #16]	; (d6840 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d682e:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d6830:	2201      	movs	r2, #1
  _serial = serial;
   d6832:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d6834:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d6836:	461a      	mov	r2, r3
   d6838:	f7fd ff7e 	bl	d4738 <hal_usart_init>
}
   d683c:	4620      	mov	r0, r4
   d683e:	bd10      	pop	{r4, pc}
   d6840:	000d7568 	.word	0x000d7568

000d6844 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   d6844:	7c00      	ldrb	r0, [r0, #16]
   d6846:	2300      	movs	r3, #0
   d6848:	f7fd bfbe 	b.w	d47c8 <hal_usart_begin_config>

000d684c <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   d684c:	2200      	movs	r2, #0
   d684e:	f7ff bff9 	b.w	d6844 <_ZN11USARTSerial5beginEmm>

000d6852 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   d6852:	7c00      	ldrb	r0, [r0, #16]
   d6854:	f7fd bf78 	b.w	d4748 <hal_usart_end>

000d6858 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6858:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
   d685a:	4c1b      	ldr	r4, [pc, #108]	; (d68c8 <_Z22__fetch_global_Serial1v+0x70>)
   d685c:	6826      	ldr	r6, [r4, #0]
   d685e:	b94e      	cbnz	r6, d6874 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new hal_usart_ring_buffer_t();
   d6860:	2084      	movs	r0, #132	; 0x84
   d6862:	f7fd fc16 	bl	d4092 <_Znwj>
   d6866:	4605      	mov	r5, r0
   d6868:	b118      	cbz	r0, d6872 <_Z22__fetch_global_Serial1v+0x1a>
   d686a:	2284      	movs	r2, #132	; 0x84
   d686c:	4631      	mov	r1, r6
   d686e:	f000 fc2b 	bl	d70c8 <memset>
   d6872:	6025      	str	r5, [r4, #0]
  }
  if (!serial1_tx_buffer) {
   d6874:	4d15      	ldr	r5, [pc, #84]	; (d68cc <_Z22__fetch_global_Serial1v+0x74>)
   d6876:	682f      	ldr	r7, [r5, #0]
   d6878:	b94f      	cbnz	r7, d688e <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
   d687a:	2084      	movs	r0, #132	; 0x84
   d687c:	f7fd fc09 	bl	d4092 <_Znwj>
   d6880:	4606      	mov	r6, r0
   d6882:	b118      	cbz	r0, d688c <_Z22__fetch_global_Serial1v+0x34>
   d6884:	2284      	movs	r2, #132	; 0x84
   d6886:	4639      	mov	r1, r7
   d6888:	f000 fc1e 	bl	d70c8 <memset>
   d688c:	602e      	str	r6, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   d688e:	4e10      	ldr	r6, [pc, #64]	; (d68d0 <_Z22__fetch_global_Serial1v+0x78>)
   d6890:	7831      	ldrb	r1, [r6, #0]
   d6892:	f3bf 8f5b 	dmb	ish
   d6896:	f011 0101 	ands.w	r1, r1, #1
   d689a:	d112      	bne.n	d68c2 <_Z22__fetch_global_Serial1v+0x6a>
   d689c:	4630      	mov	r0, r6
   d689e:	9101      	str	r1, [sp, #4]
   d68a0:	f7fd fc08 	bl	d40b4 <__cxa_guard_acquire>
   d68a4:	9901      	ldr	r1, [sp, #4]
   d68a6:	b160      	cbz	r0, d68c2 <_Z22__fetch_global_Serial1v+0x6a>
   d68a8:	6822      	ldr	r2, [r4, #0]
   d68aa:	682b      	ldr	r3, [r5, #0]
   d68ac:	4809      	ldr	r0, [pc, #36]	; (d68d4 <_Z22__fetch_global_Serial1v+0x7c>)
   d68ae:	f7ff ffb3 	bl	d6818 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d68b2:	4630      	mov	r0, r6
   d68b4:	f7fd fc03 	bl	d40be <__cxa_guard_release>
   d68b8:	4a07      	ldr	r2, [pc, #28]	; (d68d8 <_Z22__fetch_global_Serial1v+0x80>)
   d68ba:	4908      	ldr	r1, [pc, #32]	; (d68dc <_Z22__fetch_global_Serial1v+0x84>)
   d68bc:	4805      	ldr	r0, [pc, #20]	; (d68d4 <_Z22__fetch_global_Serial1v+0x7c>)
   d68be:	f000 fbbf 	bl	d7040 <__aeabi_atexit>
#endif
	return serial1;
}
   d68c2:	4804      	ldr	r0, [pc, #16]	; (d68d4 <_Z22__fetch_global_Serial1v+0x7c>)
   d68c4:	b003      	add	sp, #12
   d68c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d68c8:	2003e798 	.word	0x2003e798
   d68cc:	2003e79c 	.word	0x2003e79c
   d68d0:	2003e794 	.word	0x2003e794
   d68d4:	2003e7a0 	.word	0x2003e7a0
   d68d8:	2003e6c0 	.word	0x2003e6c0
   d68dc:	000d679d 	.word	0x000d679d

000d68e0 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d68e0:	b510      	push	{r4, lr}
      if (_M_empty())
   d68e2:	6883      	ldr	r3, [r0, #8]
   d68e4:	4604      	mov	r4, r0
   d68e6:	b90b      	cbnz	r3, d68ec <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d68e8:	f000 fbb5 	bl	d7056 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d68ec:	68c3      	ldr	r3, [r0, #12]
   d68ee:	4798      	blx	r3
      if (_M_manager)
   d68f0:	68a3      	ldr	r3, [r4, #8]
   d68f2:	b11b      	cbz	r3, d68fc <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d68f4:	2203      	movs	r2, #3
   d68f6:	4621      	mov	r1, r4
   d68f8:	4620      	mov	r0, r4
   d68fa:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d68fc:	4620      	mov	r0, r4
   d68fe:	2110      	movs	r1, #16
}
   d6900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d6904:	f000 bba1 	b.w	d704a <_ZdlPvj>

000d6908 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d6908:	4770      	bx	lr

000d690a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d690a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d690c:	4606      	mov	r6, r0
   d690e:	4615      	mov	r5, r2
   d6910:	460c      	mov	r4, r1
   d6912:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6914:	42bc      	cmp	r4, r7
   d6916:	d006      	beq.n	d6926 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6918:	6833      	ldr	r3, [r6, #0]
   d691a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d691e:	689b      	ldr	r3, [r3, #8]
   d6920:	4630      	mov	r0, r6
   d6922:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d6924:	e7f6      	b.n	d6914 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d6926:	4628      	mov	r0, r5
   d6928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d692a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d692a:	7c00      	ldrb	r0, [r0, #16]
   d692c:	2200      	movs	r2, #0
   d692e:	f7fd bf53 	b.w	d47d8 <hal_i2c_write>

000d6932 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d6932:	7c00      	ldrb	r0, [r0, #16]
   d6934:	2100      	movs	r1, #0
   d6936:	f7fd bf57 	b.w	d47e8 <hal_i2c_available>

000d693a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d693a:	7c00      	ldrb	r0, [r0, #16]
   d693c:	2100      	movs	r1, #0
   d693e:	f7fd bf5b 	b.w	d47f8 <hal_i2c_read>

000d6942 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d6942:	7c00      	ldrb	r0, [r0, #16]
   d6944:	2100      	movs	r1, #0
   d6946:	f7fd bf5f 	b.w	d4808 <hal_i2c_peek>

000d694a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d694a:	7c00      	ldrb	r0, [r0, #16]
   d694c:	2100      	movs	r1, #0
   d694e:	f7fd bf63 	b.w	d4818 <hal_i2c_flush>

000d6952 <_ZN7TwoWireD0Ev>:
   d6952:	b510      	push	{r4, lr}
   d6954:	2114      	movs	r1, #20
   d6956:	4604      	mov	r4, r0
   d6958:	f000 fb77 	bl	d704a <_ZdlPvj>
   d695c:	4620      	mov	r0, r4
   d695e:	bd10      	pop	{r4, pc}

000d6960 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d6960:	b510      	push	{r4, lr}
   d6962:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6966:	4604      	mov	r4, r0
   d6968:	4608      	mov	r0, r1
   d696a:	2100      	movs	r1, #0
   d696c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d6970:	4b03      	ldr	r3, [pc, #12]	; (d6980 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d6972:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d6974:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d6976:	4611      	mov	r1, r2
   d6978:	f7fd ff5e 	bl	d4838 <hal_i2c_init>
}
   d697c:	4620      	mov	r0, r4
   d697e:	bd10      	pop	{r4, pc}
   d6980:	000d7598 	.word	0x000d7598

000d6984 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d6984:	2200      	movs	r2, #0
   d6986:	6840      	ldr	r0, [r0, #4]
   d6988:	4611      	mov	r1, r2
   d698a:	f7fe b829 	b.w	d49e0 <network_ready>

000d698e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d698e:	2200      	movs	r2, #0
   d6990:	6840      	ldr	r0, [r0, #4]
   d6992:	4611      	mov	r1, r2
   d6994:	f7fe b844 	b.w	d4a20 <network_listening>

000d6998 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d6998:	2200      	movs	r2, #0
   d699a:	6840      	ldr	r0, [r0, #4]
   d699c:	4611      	mov	r1, r2
   d699e:	f7fe b84f 	b.w	d4a40 <network_get_listen_timeout>

000d69a2 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d69a2:	6840      	ldr	r0, [r0, #4]
   d69a4:	2200      	movs	r2, #0
   d69a6:	f7fe b843 	b.w	d4a30 <network_set_listen_timeout>

000d69aa <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d69aa:	6840      	ldr	r0, [r0, #4]
   d69ac:	2200      	movs	r2, #0
   d69ae:	f081 0101 	eor.w	r1, r1, #1
   d69b2:	f7fe b82d 	b.w	d4a10 <network_listen>

000d69b6 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d69b6:	2300      	movs	r3, #0
   d69b8:	6840      	ldr	r0, [r0, #4]
   d69ba:	461a      	mov	r2, r3
   d69bc:	4619      	mov	r1, r3
   d69be:	f7fe b81f 	b.w	d4a00 <network_off>

000d69c2 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d69c2:	2300      	movs	r3, #0
   d69c4:	6840      	ldr	r0, [r0, #4]
   d69c6:	461a      	mov	r2, r3
   d69c8:	4619      	mov	r1, r3
   d69ca:	f7fe b811 	b.w	d49f0 <network_on>

000d69ce <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d69ce:	2200      	movs	r2, #0
   d69d0:	6840      	ldr	r0, [r0, #4]
   d69d2:	4611      	mov	r1, r2
   d69d4:	f7fd bff4 	b.w	d49c0 <network_connecting>

000d69d8 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d69d8:	6840      	ldr	r0, [r0, #4]
   d69da:	2200      	movs	r2, #0
   d69dc:	2102      	movs	r1, #2
   d69de:	f7fd bff7 	b.w	d49d0 <network_disconnect>

000d69e2 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d69e2:	2300      	movs	r3, #0
   d69e4:	6840      	ldr	r0, [r0, #4]
   d69e6:	461a      	mov	r2, r3
   d69e8:	f7fd bfe2 	b.w	d49b0 <network_connect>

000d69ec <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d69ec:	4b02      	ldr	r3, [pc, #8]	; (d69f8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d69ee:	2204      	movs	r2, #4
   d69f0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d69f2:	4a02      	ldr	r2, [pc, #8]	; (d69fc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d69f4:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d69f6:	4770      	bx	lr
   d69f8:	2003e7b4 	.word	0x2003e7b4
   d69fc:	000d75c0 	.word	0x000d75c0

000d6a00 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6a00:	2300      	movs	r3, #0
   d6a02:	6840      	ldr	r0, [r0, #4]
   d6a04:	461a      	mov	r2, r3
   d6a06:	f7fd bfd3 	b.w	d49b0 <network_connect>

000d6a0a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d6a0a:	6840      	ldr	r0, [r0, #4]
   d6a0c:	2200      	movs	r2, #0
   d6a0e:	2102      	movs	r1, #2
   d6a10:	f7fd bfde 	b.w	d49d0 <network_disconnect>

000d6a14 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6a14:	2200      	movs	r2, #0
   d6a16:	6840      	ldr	r0, [r0, #4]
   d6a18:	4611      	mov	r1, r2
   d6a1a:	f7fd bfd1 	b.w	d49c0 <network_connecting>

000d6a1e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d6a1e:	2200      	movs	r2, #0
   d6a20:	6840      	ldr	r0, [r0, #4]
   d6a22:	4611      	mov	r1, r2
   d6a24:	f7fd bfdc 	b.w	d49e0 <network_ready>

000d6a28 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6a28:	2300      	movs	r3, #0
   d6a2a:	6840      	ldr	r0, [r0, #4]
   d6a2c:	461a      	mov	r2, r3
   d6a2e:	4619      	mov	r1, r3
   d6a30:	f7fd bfde 	b.w	d49f0 <network_on>

000d6a34 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6a34:	2300      	movs	r3, #0
   d6a36:	6840      	ldr	r0, [r0, #4]
   d6a38:	461a      	mov	r2, r3
   d6a3a:	4619      	mov	r1, r3
   d6a3c:	f7fd bfe0 	b.w	d4a00 <network_off>

000d6a40 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6a40:	6840      	ldr	r0, [r0, #4]
   d6a42:	2200      	movs	r2, #0
   d6a44:	f081 0101 	eor.w	r1, r1, #1
   d6a48:	f7fd bfe2 	b.w	d4a10 <network_listen>

000d6a4c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6a4c:	6840      	ldr	r0, [r0, #4]
   d6a4e:	2200      	movs	r2, #0
   d6a50:	f7fd bfee 	b.w	d4a30 <network_set_listen_timeout>

000d6a54 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6a54:	2200      	movs	r2, #0
   d6a56:	6840      	ldr	r0, [r0, #4]
   d6a58:	4611      	mov	r1, r2
   d6a5a:	f7fd bff1 	b.w	d4a40 <network_get_listen_timeout>

000d6a5e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d6a5e:	2200      	movs	r2, #0
   d6a60:	6840      	ldr	r0, [r0, #4]
   d6a62:	4611      	mov	r1, r2
   d6a64:	f7fd bfdc 	b.w	d4a20 <network_listening>

000d6a68 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6a68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6a6c:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d6a6e:	b095      	sub	sp, #84	; 0x54
   d6a70:	4616      	mov	r6, r2
   d6a72:	460d      	mov	r5, r1
   d6a74:	4607      	mov	r7, r0
    IPAddress addr;
   d6a76:	f7ff fd79 	bl	d656c <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d6a7a:	4621      	mov	r1, r4
   d6a7c:	2218      	movs	r2, #24
   d6a7e:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d6a80:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d6a82:	f000 fb21 	bl	d70c8 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d6a86:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d6a88:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d6a8c:	4621      	mov	r1, r4
   d6a8e:	466b      	mov	r3, sp
   d6a90:	aa0c      	add	r2, sp, #48	; 0x30
   d6a92:	4630      	mov	r0, r6
   d6a94:	f7fd fdb0 	bl	d45f8 <netdb_getaddrinfo>
    if (!r) {
   d6a98:	4604      	mov	r4, r0
   d6a9a:	2800      	cmp	r0, #0
   d6a9c:	d146      	bne.n	d6b2c <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6a9e:	4602      	mov	r2, r0
   d6aa0:	2101      	movs	r1, #1
   d6aa2:	6868      	ldr	r0, [r5, #4]
   d6aa4:	f7fd ff9c 	bl	d49e0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6aa8:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6aaa:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6aac:	4622      	mov	r2, r4
   d6aae:	6868      	ldr	r0, [r5, #4]
   d6ab0:	f7fd ff96 	bl	d49e0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6ab4:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6ab6:	4681      	mov	r9, r0
        bool ok = false;
   d6ab8:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6aba:	2e00      	cmp	r6, #0
   d6abc:	d036      	beq.n	d6b2c <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d6abe:	2900      	cmp	r1, #0
   d6ac0:	d134      	bne.n	d6b2c <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d6ac2:	6873      	ldr	r3, [r6, #4]
   d6ac4:	2b02      	cmp	r3, #2
   d6ac6:	d003      	beq.n	d6ad0 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d6ac8:	2b0a      	cmp	r3, #10
   d6aca:	d00b      	beq.n	d6ae4 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6acc:	69f6      	ldr	r6, [r6, #28]
   d6ace:	e7f4      	b.n	d6aba <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d6ad0:	f1b8 0f00 	cmp.w	r8, #0
   d6ad4:	d004      	beq.n	d6ae0 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d6ad6:	6971      	ldr	r1, [r6, #20]
   d6ad8:	4638      	mov	r0, r7
   d6ada:	3104      	adds	r1, #4
   d6adc:	f7ff fd73 	bl	d65c6 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d6ae0:	4641      	mov	r1, r8
   d6ae2:	e7f3      	b.n	d6acc <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d6ae4:	f1b9 0f00 	cmp.w	r9, #0
   d6ae8:	d101      	bne.n	d6aee <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d6aea:	4649      	mov	r1, r9
   d6aec:	e7ee      	b.n	d6acc <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d6aee:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d6af0:	2210      	movs	r2, #16
   d6af2:	a801      	add	r0, sp, #4
   d6af4:	f000 fae8 	bl	d70c8 <memset>
                    a.v = 6;
   d6af8:	2306      	movs	r3, #6
   d6afa:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6afe:	ad01      	add	r5, sp, #4
   d6b00:	f104 0308 	add.w	r3, r4, #8
   d6b04:	3418      	adds	r4, #24
   d6b06:	6818      	ldr	r0, [r3, #0]
   d6b08:	6859      	ldr	r1, [r3, #4]
   d6b0a:	462a      	mov	r2, r5
   d6b0c:	c203      	stmia	r2!, {r0, r1}
   d6b0e:	3308      	adds	r3, #8
   d6b10:	42a3      	cmp	r3, r4
   d6b12:	4615      	mov	r5, r2
   d6b14:	d1f7      	bne.n	d6b06 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d6b16:	a901      	add	r1, sp, #4
   d6b18:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d6b1a:	ad07      	add	r5, sp, #28
   d6b1c:	f7ff fd34 	bl	d6588 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6b20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6b22:	1d3c      	adds	r4, r7, #4
   d6b24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6b26:	682b      	ldr	r3, [r5, #0]
   d6b28:	7023      	strb	r3, [r4, #0]
   d6b2a:	e7de      	b.n	d6aea <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d6b2c:	9800      	ldr	r0, [sp, #0]
   d6b2e:	f7fd fd5b 	bl	d45e8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6b32:	4638      	mov	r0, r7
   d6b34:	b015      	add	sp, #84	; 0x54
   d6b36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d6b3c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6b3c:	4b02      	ldr	r3, [pc, #8]	; (d6b48 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d6b3e:	4a03      	ldr	r2, [pc, #12]	; (d6b4c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6b40:	601a      	str	r2, [r3, #0]
   d6b42:	2200      	movs	r2, #0
   d6b44:	605a      	str	r2, [r3, #4]

} // spark
   d6b46:	4770      	bx	lr
   d6b48:	2003e7bc 	.word	0x2003e7bc
   d6b4c:	000d75f4 	.word	0x000d75f4

000d6b50 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   d6b50:	f100 0310 	add.w	r3, r0, #16
   d6b54:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d6b56:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   d6b5a:	2901      	cmp	r1, #1
   d6b5c:	4618      	mov	r0, r3
   d6b5e:	d108      	bne.n	d6b72 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   d6b60:	f853 1c04 	ldr.w	r1, [r3, #-4]
   d6b64:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   d6b68:	3a01      	subs	r2, #1
   d6b6a:	f103 0310 	add.w	r3, r3, #16
   d6b6e:	d1f2      	bne.n	d6b56 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   d6b70:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   d6b72:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d6b74:	bf04      	itt	eq
   d6b76:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   d6b7a:	1852      	addeq	r2, r2, r1
   d6b7c:	e7f4      	b.n	d6b68 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000d6b7e <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   d6b7e:	b40e      	push	{r1, r2, r3}
   d6b80:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6b82:	b088      	sub	sp, #32
   d6b84:	af00      	add	r7, sp, #0
   d6b86:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6b8a:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   d6b8c:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6b90:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   d6b92:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6b94:	462b      	mov	r3, r5
   d6b96:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   d6b98:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6b9a:	f7fd ff91 	bl	d4ac0 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   d6b9e:	280f      	cmp	r0, #15
   d6ba0:	687a      	ldr	r2, [r7, #4]
   d6ba2:	d91a      	bls.n	d6bda <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   d6ba4:	f100 0308 	add.w	r3, r0, #8
   d6ba8:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   d6bac:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   d6bae:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6bb2:	1c41      	adds	r1, r0, #1
   d6bb4:	462b      	mov	r3, r5
   d6bb6:	4668      	mov	r0, sp
        va_start(args, fmt);
   d6bb8:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6bba:	f7fd ff81 	bl	d4ac0 <vsnprintf>
        if (n > 0) {
   d6bbe:	1e02      	subs	r2, r0, #0
   d6bc0:	dd04      	ble.n	d6bcc <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   d6bc2:	6823      	ldr	r3, [r4, #0]
   d6bc4:	4669      	mov	r1, sp
   d6bc6:	689b      	ldr	r3, [r3, #8]
   d6bc8:	4620      	mov	r0, r4
   d6bca:	4798      	blx	r3
   d6bcc:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   d6bce:	3720      	adds	r7, #32
   d6bd0:	46bd      	mov	sp, r7
   d6bd2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d6bd6:	b003      	add	sp, #12
   d6bd8:	4770      	bx	lr
    } else if (n > 0) {
   d6bda:	2800      	cmp	r0, #0
   d6bdc:	d0f7      	beq.n	d6bce <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   d6bde:	6823      	ldr	r3, [r4, #0]
   d6be0:	4602      	mov	r2, r0
   d6be2:	689b      	ldr	r3, [r3, #8]
   d6be4:	f107 0110 	add.w	r1, r7, #16
   d6be8:	4620      	mov	r0, r4
   d6bea:	4798      	blx	r3
}
   d6bec:	e7ef      	b.n	d6bce <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000d6bee <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6bee:	b510      	push	{r4, lr}
          _M_dispose();
   d6bf0:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6bf2:	4604      	mov	r4, r0
          _M_dispose();
   d6bf4:	689b      	ldr	r3, [r3, #8]
   d6bf6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d6bf8:	68a3      	ldr	r3, [r4, #8]
   d6bfa:	3b01      	subs	r3, #1
   d6bfc:	60a3      	str	r3, [r4, #8]
   d6bfe:	b92b      	cbnz	r3, d6c0c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d6c00:	6823      	ldr	r3, [r4, #0]
   d6c02:	4620      	mov	r0, r4
   d6c04:	68db      	ldr	r3, [r3, #12]
    }
   d6c06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d6c0a:	4718      	bx	r3
    }
   d6c0c:	bd10      	pop	{r4, pc}

000d6c0e <_ZN5spark10JSONWriter5writeEc>:
inline void spark::JSONWriter::write(char c) {
   d6c0e:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d6c10:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   d6c12:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d6c16:	689b      	ldr	r3, [r3, #8]
   d6c18:	2201      	movs	r2, #1
   d6c1a:	f10d 0107 	add.w	r1, sp, #7
   d6c1e:	4798      	blx	r3
}
   d6c20:	b003      	add	sp, #12
   d6c22:	f85d fb04 	ldr.w	pc, [sp], #4

000d6c26 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
    class __shared_ptr
   d6c26:	b538      	push	{r3, r4, r5, lr}
   d6c28:	680b      	ldr	r3, [r1, #0]
   d6c2a:	6003      	str	r3, [r0, #0]
   d6c2c:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   d6c2e:	6843      	ldr	r3, [r0, #4]
   d6c30:	429d      	cmp	r5, r3
    class __shared_ptr
   d6c32:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   d6c34:	d00c      	beq.n	d6c50 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
   d6c36:	b115      	cbz	r5, d6c3e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
   d6c38:	686b      	ldr	r3, [r5, #4]
   d6c3a:	3301      	adds	r3, #1
   d6c3c:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   d6c3e:	6860      	ldr	r0, [r4, #4]
   d6c40:	b128      	cbz	r0, d6c4e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
   d6c42:	6843      	ldr	r3, [r0, #4]
   d6c44:	3b01      	subs	r3, #1
   d6c46:	6043      	str	r3, [r0, #4]
   d6c48:	b90b      	cbnz	r3, d6c4e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
   d6c4a:	f7ff ffd0 	bl	d6bee <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
   d6c4e:	6065      	str	r5, [r4, #4]
    class __shared_ptr
   d6c50:	4620      	mov	r0, r4
   d6c52:	bd38      	pop	{r3, r4, r5, pc}

000d6c54 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d6c54:	460b      	mov	r3, r1
   d6c56:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   d6c58:	2200      	movs	r2, #0
   d6c5a:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   d6c5c:	e9c0 2200 	strd	r2, r2, [r0]
   d6c60:	4604      	mov	r4, r0
        t_ = t;
   d6c62:	6083      	str	r3, [r0, #8]
    if (t) {
   d6c64:	b90b      	cbnz	r3, d6c6a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   d6c66:	4620      	mov	r0, r4
   d6c68:	bd10      	pop	{r4, pc}
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
   d6c6a:	f7ff ffdc 	bl	d6c26 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
   d6c6e:	e7fa      	b.n	d6c66 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000d6c70 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   d6c70:	6883      	ldr	r3, [r0, #8]
   d6c72:	b1eb      	cbz	r3, d6cb0 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   d6c74:	781a      	ldrb	r2, [r3, #0]
   d6c76:	2a03      	cmp	r2, #3
   d6c78:	d81a      	bhi.n	d6cb0 <_ZNK5spark9JSONValue4typeEv+0x40>
   d6c7a:	e8df f002 	tbb	[pc, r2]
   d6c7e:	1704      	.short	0x1704
   d6c80:	1b02      	.short	0x1b02
   d6c82:	2005      	movs	r0, #5
   d6c84:	4770      	bx	lr
        const char c = d_->json[t_->start];
   d6c86:	6802      	ldr	r2, [r0, #0]
   d6c88:	685b      	ldr	r3, [r3, #4]
   d6c8a:	6852      	ldr	r2, [r2, #4]
   d6c8c:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d6c8e:	282d      	cmp	r0, #45	; 0x2d
   d6c90:	d012      	beq.n	d6cb8 <_ZNK5spark9JSONValue4typeEv+0x48>
   d6c92:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d6c96:	2b09      	cmp	r3, #9
   d6c98:	d90e      	bls.n	d6cb8 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d6c9a:	2874      	cmp	r0, #116	; 0x74
   d6c9c:	d00e      	beq.n	d6cbc <_ZNK5spark9JSONValue4typeEv+0x4c>
   d6c9e:	2866      	cmp	r0, #102	; 0x66
   d6ca0:	d00c      	beq.n	d6cbc <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   d6ca2:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d6ca6:	4258      	negs	r0, r3
   d6ca8:	4158      	adcs	r0, r3
   d6caa:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   d6cac:	2006      	movs	r0, #6
   d6cae:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   d6cb0:	2000      	movs	r0, #0
   d6cb2:	4770      	bx	lr
        return JSON_TYPE_STRING;
   d6cb4:	2004      	movs	r0, #4
   d6cb6:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   d6cb8:	2003      	movs	r0, #3
   d6cba:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   d6cbc:	2002      	movs	r0, #2
}
   d6cbe:	4770      	bx	lr

000d6cc0 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   d6cc0:	b510      	push	{r4, lr}
   d6cc2:	4604      	mov	r4, r0
    switch (type()) {
   d6cc4:	f7ff ffd4 	bl	d6c70 <_ZNK5spark9JSONValue4typeEv>
   d6cc8:	2802      	cmp	r0, #2
   d6cca:	d00e      	beq.n	d6cea <_ZNK5spark9JSONValue5toIntEv+0x2a>
   d6ccc:	1ec3      	subs	r3, r0, #3
   d6cce:	b2db      	uxtb	r3, r3
   d6cd0:	2b01      	cmp	r3, #1
   d6cd2:	d814      	bhi.n	d6cfe <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   d6cd4:	6822      	ldr	r2, [r4, #0]
   d6cd6:	68a3      	ldr	r3, [r4, #8]
   d6cd8:	6850      	ldr	r0, [r2, #4]
   d6cda:	685b      	ldr	r3, [r3, #4]
}
   d6cdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   d6ce0:	220a      	movs	r2, #10
   d6ce2:	2100      	movs	r1, #0
   d6ce4:	4418      	add	r0, r3
   d6ce6:	f000 bb0b 	b.w	d7300 <strtol>
        const char* const s = d_->json + t_->start;
   d6cea:	6822      	ldr	r2, [r4, #0]
   d6cec:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d6cee:	6852      	ldr	r2, [r2, #4]
   d6cf0:	685b      	ldr	r3, [r3, #4]
   d6cf2:	5cd0      	ldrb	r0, [r2, r3]
   d6cf4:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d6cf8:	4258      	negs	r0, r3
   d6cfa:	4158      	adcs	r0, r3
}
   d6cfc:	bd10      	pop	{r4, pc}
    switch (type()) {
   d6cfe:	2000      	movs	r0, #0
   d6d00:	e7fc      	b.n	d6cfc <_ZNK5spark9JSONValue5toIntEv+0x3c>
	...

000d6d04 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d6d04:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d6d06:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d6d08:	e9c0 3300 	strd	r3, r3, [r0]
   d6d0c:	4604      	mov	r4, r0
        n_(0) {
   d6d0e:	480e      	ldr	r0, [pc, #56]	; (d6d48 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   d6d10:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d6d14:	b1a9      	cbz	r1, d6d42 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   d6d16:	780b      	ldrb	r3, [r1, #0]
   d6d18:	2b03      	cmp	r3, #3
   d6d1a:	d006      	beq.n	d6d2a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d6d1c:	b98b      	cbnz	r3, d6d42 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d6d1e:	6813      	ldr	r3, [r2, #0]
   d6d20:	6858      	ldr	r0, [r3, #4]
   d6d22:	684b      	ldr	r3, [r1, #4]
   d6d24:	5cc3      	ldrb	r3, [r0, r3]
   d6d26:	2b6e      	cmp	r3, #110	; 0x6e
   d6d28:	d007      	beq.n	d6d3a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   d6d2a:	6813      	ldr	r3, [r2, #0]
   d6d2c:	684d      	ldr	r5, [r1, #4]
   d6d2e:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   d6d30:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   d6d32:	4428      	add	r0, r5
            n_ = t->end - t->start;
   d6d34:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   d6d36:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   d6d38:	60e3      	str	r3, [r4, #12]
   d6d3a:	4611      	mov	r1, r2
   d6d3c:	4620      	mov	r0, r4
   d6d3e:	f7ff ff72 	bl	d6c26 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d6d42:	4620      	mov	r0, r4
   d6d44:	bd38      	pop	{r3, r4, r5, pc}
   d6d46:	bf00      	nop
   d6d48:	000d7451 	.word	0x000d7451

000d6d4c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d6d4c:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d6d4e:	2500      	movs	r5, #0
   d6d50:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   d6d52:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   d6d56:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d6d5a:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d6d5e:	4604      	mov	r4, r0
   d6d60:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   d6d62:	b14b      	cbz	r3, d6d78 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   d6d64:	781a      	ldrb	r2, [r3, #0]
   d6d66:	2a01      	cmp	r2, #1
   d6d68:	d106      	bne.n	d6d78 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   d6d6a:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   d6d6e:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   d6d70:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   d6d72:	6143      	str	r3, [r0, #20]
   d6d74:	f7ff ff57 	bl	d6c26 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d6d78:	4620      	mov	r0, r4
   d6d7a:	bd38      	pop	{r3, r4, r5, pc}

000d6d7c <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   d6d7c:	b510      	push	{r4, lr}
    if (!n_) {
   d6d7e:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   d6d80:	4604      	mov	r4, r0
    if (!n_) {
   d6d82:	b163      	cbz	r3, d6d9e <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   d6d84:	6880      	ldr	r0, [r0, #8]
   d6d86:	60e0      	str	r0, [r4, #12]
    --n_;
   d6d88:	3b01      	subs	r3, #1
    ++t_;
   d6d8a:	3010      	adds	r0, #16
   d6d8c:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d6d8e:	6120      	str	r0, [r4, #16]
    --n_;
   d6d90:	6163      	str	r3, [r4, #20]
    if (n_) {
   d6d92:	b113      	cbz	r3, d6d9a <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   d6d94:	f7ff fedc 	bl	d6b50 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d6d98:	60a0      	str	r0, [r4, #8]
    return true;
   d6d9a:	2001      	movs	r0, #1
   d6d9c:	e000      	b.n	d6da0 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   d6d9e:	4618      	mov	r0, r3
}
   d6da0:	bd10      	pop	{r4, pc}

000d6da2 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   d6da2:	b510      	push	{r4, lr}
    write('}');
   d6da4:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   d6da6:	4604      	mov	r4, r0
    write('}');
   d6da8:	f7ff ff31 	bl	d6c0e <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   d6dac:	2301      	movs	r3, #1
   d6dae:	7123      	strb	r3, [r4, #4]
}
   d6db0:	4620      	mov	r0, r4
   d6db2:	bd10      	pop	{r4, pc}

000d6db4 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   d6db4:	b508      	push	{r3, lr}
    switch (state_) {
   d6db6:	7903      	ldrb	r3, [r0, #4]
   d6db8:	2b01      	cmp	r3, #1
   d6dba:	d002      	beq.n	d6dc2 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   d6dbc:	2b02      	cmp	r3, #2
   d6dbe:	d004      	beq.n	d6dca <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   d6dc0:	bd08      	pop	{r3, pc}
        write(',');
   d6dc2:	212c      	movs	r1, #44	; 0x2c
        write(':');
   d6dc4:	f7ff ff23 	bl	d6c0e <_ZN5spark10JSONWriter5writeEc>
}
   d6dc8:	e7fa      	b.n	d6dc0 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   d6dca:	213a      	movs	r1, #58	; 0x3a
   d6dcc:	e7fa      	b.n	d6dc4 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000d6dce <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   d6dce:	b510      	push	{r4, lr}
   d6dd0:	4604      	mov	r4, r0
    writeSeparator();
   d6dd2:	f7ff ffef 	bl	d6db4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   d6dd6:	4620      	mov	r0, r4
   d6dd8:	217b      	movs	r1, #123	; 0x7b
   d6dda:	f7ff ff18 	bl	d6c0e <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   d6dde:	2300      	movs	r3, #0
   d6de0:	7123      	strb	r3, [r4, #4]
}
   d6de2:	4620      	mov	r0, r4
   d6de4:	bd10      	pop	{r4, pc}
	...

000d6de8 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   d6de8:	b513      	push	{r0, r1, r4, lr}
   d6dea:	4604      	mov	r4, r0
   d6dec:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d6dee:	f7ff ffe1 	bl	d6db4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   d6df2:	6823      	ldr	r3, [r4, #0]
   d6df4:	9a01      	ldr	r2, [sp, #4]
   d6df6:	68db      	ldr	r3, [r3, #12]
   d6df8:	4903      	ldr	r1, [pc, #12]	; (d6e08 <_ZN5spark10JSONWriter5valueEi+0x20>)
   d6dfa:	4620      	mov	r0, r4
   d6dfc:	4798      	blx	r3
    state_ = NEXT;
   d6dfe:	2301      	movs	r3, #1
}
   d6e00:	4620      	mov	r0, r4
    state_ = NEXT;
   d6e02:	7123      	strb	r3, [r4, #4]
}
   d6e04:	b002      	add	sp, #8
   d6e06:	bd10      	pop	{r4, pc}
   d6e08:	000d742b 	.word	0x000d742b

000d6e0c <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   d6e0c:	b513      	push	{r0, r1, r4, lr}
   d6e0e:	4604      	mov	r4, r0
   d6e10:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d6e12:	f7ff ffcf 	bl	d6db4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   d6e16:	6823      	ldr	r3, [r4, #0]
   d6e18:	9a01      	ldr	r2, [sp, #4]
   d6e1a:	68db      	ldr	r3, [r3, #12]
   d6e1c:	4903      	ldr	r1, [pc, #12]	; (d6e2c <_ZN5spark10JSONWriter5valueEj+0x20>)
   d6e1e:	4620      	mov	r0, r4
   d6e20:	4798      	blx	r3
    state_ = NEXT;
   d6e22:	2301      	movs	r3, #1
}
   d6e24:	4620      	mov	r0, r4
    state_ = NEXT;
   d6e26:	7123      	strb	r3, [r4, #4]
}
   d6e28:	b002      	add	sp, #8
   d6e2a:	bd10      	pop	{r4, pc}
   d6e2c:	000d7620 	.word	0x000d7620

000d6e30 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d6e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6e34:	460d      	mov	r5, r1
   d6e36:	4617      	mov	r7, r2
    write('"');
   d6e38:	2122      	movs	r1, #34	; 0x22
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   d6e3a:	f8df 80a0 	ldr.w	r8, [pc, #160]	; d6edc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xac>
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d6e3e:	4604      	mov	r4, r0
    const char* const end = str + size;
   d6e40:	442f      	add	r7, r5
    write('"');
   d6e42:	f7ff fee4 	bl	d6c0e <_ZN5spark10JSONWriter5writeEc>
    const char* const end = str + size;
   d6e46:	4629      	mov	r1, r5
    while (s != end) {
   d6e48:	42bd      	cmp	r5, r7
   d6e4a:	462a      	mov	r2, r5
   d6e4c:	d038      	beq.n	d6ec0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x90>
        const char c = *s;
   d6e4e:	f815 6b01 	ldrb.w	r6, [r5], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   d6e52:	2e22      	cmp	r6, #34	; 0x22
   d6e54:	d003      	beq.n	d6e5e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d6e56:	2e5c      	cmp	r6, #92	; 0x5c
   d6e58:	d001      	beq.n	d6e5e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d6e5a:	2e1f      	cmp	r6, #31
   d6e5c:	d8f4      	bhi.n	d6e48 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   d6e5e:	6823      	ldr	r3, [r4, #0]
   d6e60:	1a52      	subs	r2, r2, r1
   d6e62:	689b      	ldr	r3, [r3, #8]
   d6e64:	4620      	mov	r0, r4
   d6e66:	4798      	blx	r3
            write('\\');
   d6e68:	215c      	movs	r1, #92	; 0x5c
   d6e6a:	4620      	mov	r0, r4
   d6e6c:	f7ff fecf 	bl	d6c0e <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   d6e70:	2e0d      	cmp	r6, #13
   d6e72:	d80a      	bhi.n	d6e8a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x5a>
   d6e74:	2e07      	cmp	r6, #7
   d6e76:	d91c      	bls.n	d6eb2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d6e78:	f1a6 0308 	sub.w	r3, r6, #8
   d6e7c:	2b05      	cmp	r3, #5
   d6e7e:	d818      	bhi.n	d6eb2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d6e80:	e8df f003 	tbb	[pc, r3]
   d6e84:	17110f0d 	.word	0x17110f0d
   d6e88:	1513      	.short	0x1513
   d6e8a:	2e22      	cmp	r6, #34	; 0x22
   d6e8c:	d001      	beq.n	d6e92 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d6e8e:	2e5c      	cmp	r6, #92	; 0x5c
   d6e90:	d10f      	bne.n	d6eb2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
                write(c);
   d6e92:	4631      	mov	r1, r6
                write('b');
   d6e94:	4620      	mov	r0, r4
   d6e96:	f7ff feba 	bl	d6c0e <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   d6e9a:	4629      	mov	r1, r5
    while (s != end) {
   d6e9c:	e7d4      	b.n	d6e48 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   d6e9e:	2162      	movs	r1, #98	; 0x62
   d6ea0:	e7f8      	b.n	d6e94 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('t');
   d6ea2:	2174      	movs	r1, #116	; 0x74
   d6ea4:	e7f6      	b.n	d6e94 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('n');
   d6ea6:	216e      	movs	r1, #110	; 0x6e
   d6ea8:	e7f4      	b.n	d6e94 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('f');
   d6eaa:	2166      	movs	r1, #102	; 0x66
   d6eac:	e7f2      	b.n	d6e94 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('r');
   d6eae:	2172      	movs	r1, #114	; 0x72
   d6eb0:	e7f0      	b.n	d6e94 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                printf("u%04x", (unsigned)c);
   d6eb2:	6823      	ldr	r3, [r4, #0]
   d6eb4:	4632      	mov	r2, r6
   d6eb6:	68db      	ldr	r3, [r3, #12]
   d6eb8:	4641      	mov	r1, r8
   d6eba:	4620      	mov	r0, r4
   d6ebc:	4798      	blx	r3
                break;
   d6ebe:	e7ec      	b.n	d6e9a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6a>
        }
        ++s;
    }
    if (s != str) {
   d6ec0:	428d      	cmp	r5, r1
   d6ec2:	d004      	beq.n	d6ece <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9e>
        write(str, s - str); // Write remaining characters
   d6ec4:	6823      	ldr	r3, [r4, #0]
   d6ec6:	1a6a      	subs	r2, r5, r1
   d6ec8:	689b      	ldr	r3, [r3, #8]
   d6eca:	4620      	mov	r0, r4
   d6ecc:	4798      	blx	r3
    }
    write('"');
   d6ece:	2122      	movs	r1, #34	; 0x22
   d6ed0:	4620      	mov	r0, r4
   d6ed2:	f7ff fe9c 	bl	d6c0e <_ZN5spark10JSONWriter5writeEc>
}
   d6ed6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6eda:	bf00      	nop
   d6edc:	000d7623 	.word	0x000d7623

000d6ee0 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   d6ee0:	b513      	push	{r0, r1, r4, lr}
   d6ee2:	4604      	mov	r4, r0
   d6ee4:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d6ee8:	f7ff ff64 	bl	d6db4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   d6eec:	4620      	mov	r0, r4
   d6eee:	e9dd 2100 	ldrd	r2, r1, [sp]
   d6ef2:	f7ff ff9d 	bl	d6e30 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   d6ef6:	2302      	movs	r3, #2
}
   d6ef8:	4620      	mov	r0, r4
    state_ = VALUE;
   d6efa:	7123      	strb	r3, [r4, #4]
}
   d6efc:	b002      	add	sp, #8
   d6efe:	bd10      	pop	{r4, pc}

000d6f00 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   d6f00:	b513      	push	{r0, r1, r4, lr}
   d6f02:	4604      	mov	r4, r0
   d6f04:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d6f08:	f7ff ff54 	bl	d6db4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   d6f0c:	4620      	mov	r0, r4
   d6f0e:	e9dd 2100 	ldrd	r2, r1, [sp]
   d6f12:	f7ff ff8d 	bl	d6e30 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   d6f16:	2301      	movs	r3, #1
}
   d6f18:	4620      	mov	r0, r4
    state_ = NEXT;
   d6f1a:	7123      	strb	r3, [r4, #4]
}
   d6f1c:	b002      	add	sp, #8
   d6f1e:	bd10      	pop	{r4, pc}

000d6f20 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d6f20:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d6f22:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d6f24:	d902      	bls.n	d6f2c <pinAvailable+0xc>
    return false;
   d6f26:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d6f28:	b002      	add	sp, #8
   d6f2a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d6f2c:	f1a0 030b 	sub.w	r3, r0, #11
   d6f30:	2b02      	cmp	r3, #2
   d6f32:	d81a      	bhi.n	d6f6a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d6f34:	4c17      	ldr	r4, [pc, #92]	; (d6f94 <pinAvailable+0x74>)
   d6f36:	7821      	ldrb	r1, [r4, #0]
   d6f38:	f3bf 8f5b 	dmb	ish
   d6f3c:	f011 0101 	ands.w	r1, r1, #1
   d6f40:	d10b      	bne.n	d6f5a <pinAvailable+0x3a>
   d6f42:	4620      	mov	r0, r4
   d6f44:	9101      	str	r1, [sp, #4]
   d6f46:	f7fd f8b5 	bl	d40b4 <__cxa_guard_acquire>
   d6f4a:	9901      	ldr	r1, [sp, #4]
   d6f4c:	b128      	cbz	r0, d6f5a <pinAvailable+0x3a>
   d6f4e:	4812      	ldr	r0, [pc, #72]	; (d6f98 <pinAvailable+0x78>)
   d6f50:	f7fd fe14 	bl	d4b7c <_ZN8SPIClassC1E19hal_spi_interface_t>
   d6f54:	4620      	mov	r0, r4
   d6f56:	f7fd f8b2 	bl	d40be <__cxa_guard_release>
   d6f5a:	4b0f      	ldr	r3, [pc, #60]	; (d6f98 <pinAvailable+0x78>)
   d6f5c:	7818      	ldrb	r0, [r3, #0]
   d6f5e:	f7fd fc7b 	bl	d4858 <hal_spi_is_enabled>
   d6f62:	2800      	cmp	r0, #0
   d6f64:	d1df      	bne.n	d6f26 <pinAvailable+0x6>
  return true; // 'pin' is available
   d6f66:	2001      	movs	r0, #1
   d6f68:	e7de      	b.n	d6f28 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d6f6a:	2801      	cmp	r0, #1
   d6f6c:	d809      	bhi.n	d6f82 <pinAvailable+0x62>
   d6f6e:	f000 f83f 	bl	d6ff0 <_Z19__fetch_global_Wirev>
   d6f72:	2100      	movs	r1, #0
   d6f74:	7c00      	ldrb	r0, [r0, #16]
   d6f76:	f7fd fc57 	bl	d4828 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d6f7a:	f080 0001 	eor.w	r0, r0, #1
   d6f7e:	b2c0      	uxtb	r0, r0
   d6f80:	e7d2      	b.n	d6f28 <pinAvailable+0x8>
   d6f82:	3809      	subs	r0, #9
   d6f84:	2801      	cmp	r0, #1
   d6f86:	d8ee      	bhi.n	d6f66 <pinAvailable+0x46>
   d6f88:	f7ff fc66 	bl	d6858 <_Z22__fetch_global_Serial1v>
   d6f8c:	7c00      	ldrb	r0, [r0, #16]
   d6f8e:	f7fd fc0b 	bl	d47a8 <hal_usart_is_enabled>
   d6f92:	e7f2      	b.n	d6f7a <pinAvailable+0x5a>
   d6f94:	2003e7c4 	.word	0x2003e7c4
   d6f98:	2003e7c8 	.word	0x2003e7c8

000d6f9c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6f9c:	2823      	cmp	r0, #35	; 0x23
{
   d6f9e:	b538      	push	{r3, r4, r5, lr}
   d6fa0:	4604      	mov	r4, r0
   d6fa2:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6fa4:	d80a      	bhi.n	d6fbc <pinMode+0x20>
   d6fa6:	29ff      	cmp	r1, #255	; 0xff
   d6fa8:	d008      	beq.n	d6fbc <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d6faa:	f7ff ffb9 	bl	d6f20 <pinAvailable>
   d6fae:	b128      	cbz	r0, d6fbc <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d6fb0:	4629      	mov	r1, r5
   d6fb2:	4620      	mov	r0, r4
}
   d6fb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d6fb8:	f7fd bb2e 	b.w	d4618 <HAL_Pin_Mode>
}
   d6fbc:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6fc0 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d6fc0:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d6fc2:	2300      	movs	r3, #0
   d6fc4:	2520      	movs	r5, #32
   d6fc6:	8043      	strh	r3, [r0, #2]
   d6fc8:	2314      	movs	r3, #20
{
   d6fca:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d6fcc:	8003      	strh	r3, [r0, #0]
   d6fce:	6085      	str	r5, [r0, #8]
   d6fd0:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6fd2:	4906      	ldr	r1, [pc, #24]	; (d6fec <_Z17acquireWireBufferv+0x2c>)
   d6fd4:	4628      	mov	r0, r5
   d6fd6:	f000 f83c 	bl	d7052 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6fda:	4904      	ldr	r1, [pc, #16]	; (d6fec <_Z17acquireWireBufferv+0x2c>)
	};
   d6fdc:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6fde:	4628      	mov	r0, r5
   d6fe0:	f000 f837 	bl	d7052 <_ZnajRKSt9nothrow_t>
	};
   d6fe4:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d6fe6:	4620      	mov	r0, r4
   d6fe8:	bd38      	pop	{r3, r4, r5, pc}
   d6fea:	bf00      	nop
   d6fec:	000d7629 	.word	0x000d7629

000d6ff0 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d6ff0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6ff2:	4d0f      	ldr	r5, [pc, #60]	; (d7030 <_Z19__fetch_global_Wirev+0x40>)
   d6ff4:	7829      	ldrb	r1, [r5, #0]
   d6ff6:	f3bf 8f5b 	dmb	ish
   d6ffa:	f011 0401 	ands.w	r4, r1, #1
{
   d6ffe:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7000:	d113      	bne.n	d702a <_Z19__fetch_global_Wirev+0x3a>
   d7002:	4628      	mov	r0, r5
   d7004:	f7fd f856 	bl	d40b4 <__cxa_guard_acquire>
   d7008:	b178      	cbz	r0, d702a <_Z19__fetch_global_Wirev+0x3a>
   d700a:	a801      	add	r0, sp, #4
   d700c:	f7ff ffd8 	bl	d6fc0 <_Z17acquireWireBufferv>
   d7010:	aa01      	add	r2, sp, #4
   d7012:	4621      	mov	r1, r4
   d7014:	4807      	ldr	r0, [pc, #28]	; (d7034 <_Z19__fetch_global_Wirev+0x44>)
   d7016:	f7ff fca3 	bl	d6960 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d701a:	4628      	mov	r0, r5
   d701c:	f7fd f84f 	bl	d40be <__cxa_guard_release>
   d7020:	4a05      	ldr	r2, [pc, #20]	; (d7038 <_Z19__fetch_global_Wirev+0x48>)
   d7022:	4906      	ldr	r1, [pc, #24]	; (d703c <_Z19__fetch_global_Wirev+0x4c>)
   d7024:	4803      	ldr	r0, [pc, #12]	; (d7034 <_Z19__fetch_global_Wirev+0x44>)
   d7026:	f000 f80b 	bl	d7040 <__aeabi_atexit>
	return wire;
}
   d702a:	4802      	ldr	r0, [pc, #8]	; (d7034 <_Z19__fetch_global_Wirev+0x44>)
   d702c:	b007      	add	sp, #28
   d702e:	bd30      	pop	{r4, r5, pc}
   d7030:	2003e7d8 	.word	0x2003e7d8
   d7034:	2003e7dc 	.word	0x2003e7dc
   d7038:	2003e6c0 	.word	0x2003e6c0
   d703c:	000d6909 	.word	0x000d6909

000d7040 <__aeabi_atexit>:
   d7040:	460b      	mov	r3, r1
   d7042:	4601      	mov	r1, r0
   d7044:	4618      	mov	r0, r3
   d7046:	f000 b809 	b.w	d705c <__cxa_atexit>

000d704a <_ZdlPvj>:
   d704a:	f7fd b826 	b.w	d409a <_ZdlPv>

000d704e <_ZnwjRKSt9nothrow_t>:
   d704e:	f7fd b820 	b.w	d4092 <_Znwj>

000d7052 <_ZnajRKSt9nothrow_t>:
   d7052:	f7fd b820 	b.w	d4096 <_Znaj>

000d7056 <_ZSt25__throw_bad_function_callv>:
   d7056:	b508      	push	{r3, lr}
   d7058:	f7fd fd3a 	bl	d4ad0 <abort>

000d705c <__cxa_atexit>:
   d705c:	b510      	push	{r4, lr}
   d705e:	4c05      	ldr	r4, [pc, #20]	; (d7074 <__cxa_atexit+0x18>)
   d7060:	4613      	mov	r3, r2
   d7062:	b12c      	cbz	r4, d7070 <__cxa_atexit+0x14>
   d7064:	460a      	mov	r2, r1
   d7066:	4601      	mov	r1, r0
   d7068:	2002      	movs	r0, #2
   d706a:	f3af 8000 	nop.w
   d706e:	bd10      	pop	{r4, pc}
   d7070:	4620      	mov	r0, r4
   d7072:	e7fc      	b.n	d706e <__cxa_atexit+0x12>
   d7074:	00000000 	.word	0x00000000

000d7078 <memcpy>:
   d7078:	440a      	add	r2, r1
   d707a:	4291      	cmp	r1, r2
   d707c:	f100 33ff 	add.w	r3, r0, #4294967295
   d7080:	d100      	bne.n	d7084 <memcpy+0xc>
   d7082:	4770      	bx	lr
   d7084:	b510      	push	{r4, lr}
   d7086:	f811 4b01 	ldrb.w	r4, [r1], #1
   d708a:	f803 4f01 	strb.w	r4, [r3, #1]!
   d708e:	4291      	cmp	r1, r2
   d7090:	d1f9      	bne.n	d7086 <memcpy+0xe>
   d7092:	bd10      	pop	{r4, pc}

000d7094 <memmove>:
   d7094:	4288      	cmp	r0, r1
   d7096:	b510      	push	{r4, lr}
   d7098:	eb01 0402 	add.w	r4, r1, r2
   d709c:	d902      	bls.n	d70a4 <memmove+0x10>
   d709e:	4284      	cmp	r4, r0
   d70a0:	4623      	mov	r3, r4
   d70a2:	d807      	bhi.n	d70b4 <memmove+0x20>
   d70a4:	1e43      	subs	r3, r0, #1
   d70a6:	42a1      	cmp	r1, r4
   d70a8:	d008      	beq.n	d70bc <memmove+0x28>
   d70aa:	f811 2b01 	ldrb.w	r2, [r1], #1
   d70ae:	f803 2f01 	strb.w	r2, [r3, #1]!
   d70b2:	e7f8      	b.n	d70a6 <memmove+0x12>
   d70b4:	4402      	add	r2, r0
   d70b6:	4601      	mov	r1, r0
   d70b8:	428a      	cmp	r2, r1
   d70ba:	d100      	bne.n	d70be <memmove+0x2a>
   d70bc:	bd10      	pop	{r4, pc}
   d70be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d70c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
   d70c6:	e7f7      	b.n	d70b8 <memmove+0x24>

000d70c8 <memset>:
   d70c8:	4402      	add	r2, r0
   d70ca:	4603      	mov	r3, r0
   d70cc:	4293      	cmp	r3, r2
   d70ce:	d100      	bne.n	d70d2 <memset+0xa>
   d70d0:	4770      	bx	lr
   d70d2:	f803 1b01 	strb.w	r1, [r3], #1
   d70d6:	e7f9      	b.n	d70cc <memset+0x4>

000d70d8 <srand>:
   d70d8:	b538      	push	{r3, r4, r5, lr}
   d70da:	4b0d      	ldr	r3, [pc, #52]	; (d7110 <srand+0x38>)
   d70dc:	681d      	ldr	r5, [r3, #0]
   d70de:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d70e0:	4604      	mov	r4, r0
   d70e2:	b97b      	cbnz	r3, d7104 <srand+0x2c>
   d70e4:	2018      	movs	r0, #24
   d70e6:	f7fd fcd3 	bl	d4a90 <malloc>
   d70ea:	4a0a      	ldr	r2, [pc, #40]	; (d7114 <srand+0x3c>)
   d70ec:	4b0a      	ldr	r3, [pc, #40]	; (d7118 <srand+0x40>)
   d70ee:	63a8      	str	r0, [r5, #56]	; 0x38
   d70f0:	e9c0 2300 	strd	r2, r3, [r0]
   d70f4:	4b09      	ldr	r3, [pc, #36]	; (d711c <srand+0x44>)
   d70f6:	6083      	str	r3, [r0, #8]
   d70f8:	230b      	movs	r3, #11
   d70fa:	8183      	strh	r3, [r0, #12]
   d70fc:	2201      	movs	r2, #1
   d70fe:	2300      	movs	r3, #0
   d7100:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d7104:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d7106:	2200      	movs	r2, #0
   d7108:	611c      	str	r4, [r3, #16]
   d710a:	615a      	str	r2, [r3, #20]
   d710c:	bd38      	pop	{r3, r4, r5, pc}
   d710e:	bf00      	nop
   d7110:	2003e65c 	.word	0x2003e65c
   d7114:	abcd330e 	.word	0xabcd330e
   d7118:	e66d1234 	.word	0xe66d1234
   d711c:	0005deec 	.word	0x0005deec

000d7120 <strchr>:
   d7120:	b2c9      	uxtb	r1, r1
   d7122:	4603      	mov	r3, r0
   d7124:	f810 2b01 	ldrb.w	r2, [r0], #1
   d7128:	b11a      	cbz	r2, d7132 <strchr+0x12>
   d712a:	428a      	cmp	r2, r1
   d712c:	d1f9      	bne.n	d7122 <strchr+0x2>
   d712e:	4618      	mov	r0, r3
   d7130:	4770      	bx	lr
   d7132:	2900      	cmp	r1, #0
   d7134:	bf18      	it	ne
   d7136:	2300      	movne	r3, #0
   d7138:	e7f9      	b.n	d712e <strchr+0xe>

000d713a <strchrnul>:
   d713a:	b510      	push	{r4, lr}
   d713c:	4604      	mov	r4, r0
   d713e:	f7ff ffef 	bl	d7120 <strchr>
   d7142:	b918      	cbnz	r0, d714c <strchrnul+0x12>
   d7144:	4620      	mov	r0, r4
   d7146:	f000 f832 	bl	d71ae <strlen>
   d714a:	4420      	add	r0, r4
   d714c:	bd10      	pop	{r4, pc}

000d714e <strcmp>:
   d714e:	f810 2b01 	ldrb.w	r2, [r0], #1
   d7152:	f811 3b01 	ldrb.w	r3, [r1], #1
   d7156:	2a01      	cmp	r2, #1
   d7158:	bf28      	it	cs
   d715a:	429a      	cmpcs	r2, r3
   d715c:	d0f7      	beq.n	d714e <strcmp>
   d715e:	1ad0      	subs	r0, r2, r3
   d7160:	4770      	bx	lr

000d7162 <strcpy>:
   d7162:	4603      	mov	r3, r0
   d7164:	f811 2b01 	ldrb.w	r2, [r1], #1
   d7168:	f803 2b01 	strb.w	r2, [r3], #1
   d716c:	2a00      	cmp	r2, #0
   d716e:	d1f9      	bne.n	d7164 <strcpy+0x2>
   d7170:	4770      	bx	lr
	...

000d7174 <strdup>:
   d7174:	4b02      	ldr	r3, [pc, #8]	; (d7180 <strdup+0xc>)
   d7176:	4601      	mov	r1, r0
   d7178:	6818      	ldr	r0, [r3, #0]
   d717a:	f000 b803 	b.w	d7184 <_strdup_r>
   d717e:	bf00      	nop
   d7180:	2003e65c 	.word	0x2003e65c

000d7184 <_strdup_r>:
   d7184:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7186:	4604      	mov	r4, r0
   d7188:	4608      	mov	r0, r1
   d718a:	460d      	mov	r5, r1
   d718c:	f000 f80f 	bl	d71ae <strlen>
   d7190:	1c42      	adds	r2, r0, #1
   d7192:	4611      	mov	r1, r2
   d7194:	4620      	mov	r0, r4
   d7196:	9201      	str	r2, [sp, #4]
   d7198:	f7fd fca2 	bl	d4ae0 <_malloc_r>
   d719c:	4604      	mov	r4, r0
   d719e:	b118      	cbz	r0, d71a8 <_strdup_r+0x24>
   d71a0:	9a01      	ldr	r2, [sp, #4]
   d71a2:	4629      	mov	r1, r5
   d71a4:	f7ff ff68 	bl	d7078 <memcpy>
   d71a8:	4620      	mov	r0, r4
   d71aa:	b003      	add	sp, #12
   d71ac:	bd30      	pop	{r4, r5, pc}

000d71ae <strlen>:
   d71ae:	4603      	mov	r3, r0
   d71b0:	f813 2b01 	ldrb.w	r2, [r3], #1
   d71b4:	2a00      	cmp	r2, #0
   d71b6:	d1fb      	bne.n	d71b0 <strlen+0x2>
   d71b8:	1a18      	subs	r0, r3, r0
   d71ba:	3801      	subs	r0, #1
   d71bc:	4770      	bx	lr

000d71be <strncmp>:
   d71be:	b510      	push	{r4, lr}
   d71c0:	b16a      	cbz	r2, d71de <strncmp+0x20>
   d71c2:	3901      	subs	r1, #1
   d71c4:	1884      	adds	r4, r0, r2
   d71c6:	f810 3b01 	ldrb.w	r3, [r0], #1
   d71ca:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   d71ce:	4293      	cmp	r3, r2
   d71d0:	d103      	bne.n	d71da <strncmp+0x1c>
   d71d2:	42a0      	cmp	r0, r4
   d71d4:	d001      	beq.n	d71da <strncmp+0x1c>
   d71d6:	2b00      	cmp	r3, #0
   d71d8:	d1f5      	bne.n	d71c6 <strncmp+0x8>
   d71da:	1a98      	subs	r0, r3, r2
   d71dc:	bd10      	pop	{r4, pc}
   d71de:	4610      	mov	r0, r2
   d71e0:	e7fc      	b.n	d71dc <strncmp+0x1e>

000d71e2 <strrchr>:
   d71e2:	b538      	push	{r3, r4, r5, lr}
   d71e4:	4603      	mov	r3, r0
   d71e6:	460c      	mov	r4, r1
   d71e8:	b969      	cbnz	r1, d7206 <strrchr+0x24>
   d71ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d71ee:	f7ff bf97 	b.w	d7120 <strchr>
   d71f2:	1c43      	adds	r3, r0, #1
   d71f4:	4605      	mov	r5, r0
   d71f6:	4621      	mov	r1, r4
   d71f8:	4618      	mov	r0, r3
   d71fa:	f7ff ff91 	bl	d7120 <strchr>
   d71fe:	2800      	cmp	r0, #0
   d7200:	d1f7      	bne.n	d71f2 <strrchr+0x10>
   d7202:	4628      	mov	r0, r5
   d7204:	bd38      	pop	{r3, r4, r5, pc}
   d7206:	2500      	movs	r5, #0
   d7208:	e7f5      	b.n	d71f6 <strrchr+0x14>
	...

000d720c <_strtol_l.isra.0>:
   d720c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7210:	4e3a      	ldr	r6, [pc, #232]	; (d72fc <_strtol_l.isra.0+0xf0>)
   d7212:	4686      	mov	lr, r0
   d7214:	468c      	mov	ip, r1
   d7216:	4660      	mov	r0, ip
   d7218:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d721c:	5da5      	ldrb	r5, [r4, r6]
   d721e:	f015 0508 	ands.w	r5, r5, #8
   d7222:	d1f8      	bne.n	d7216 <_strtol_l.isra.0+0xa>
   d7224:	2c2d      	cmp	r4, #45	; 0x2d
   d7226:	d133      	bne.n	d7290 <_strtol_l.isra.0+0x84>
   d7228:	f89c 4000 	ldrb.w	r4, [ip]
   d722c:	f04f 0801 	mov.w	r8, #1
   d7230:	f100 0c02 	add.w	ip, r0, #2
   d7234:	2b00      	cmp	r3, #0
   d7236:	d05c      	beq.n	d72f2 <_strtol_l.isra.0+0xe6>
   d7238:	2b10      	cmp	r3, #16
   d723a:	d10c      	bne.n	d7256 <_strtol_l.isra.0+0x4a>
   d723c:	2c30      	cmp	r4, #48	; 0x30
   d723e:	d10a      	bne.n	d7256 <_strtol_l.isra.0+0x4a>
   d7240:	f89c 0000 	ldrb.w	r0, [ip]
   d7244:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d7248:	2858      	cmp	r0, #88	; 0x58
   d724a:	d14d      	bne.n	d72e8 <_strtol_l.isra.0+0xdc>
   d724c:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d7250:	2310      	movs	r3, #16
   d7252:	f10c 0c02 	add.w	ip, ip, #2
   d7256:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   d725a:	3f01      	subs	r7, #1
   d725c:	2600      	movs	r6, #0
   d725e:	fbb7 f9f3 	udiv	r9, r7, r3
   d7262:	4630      	mov	r0, r6
   d7264:	fb03 7a19 	mls	sl, r3, r9, r7
   d7268:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   d726c:	2d09      	cmp	r5, #9
   d726e:	d818      	bhi.n	d72a2 <_strtol_l.isra.0+0x96>
   d7270:	462c      	mov	r4, r5
   d7272:	42a3      	cmp	r3, r4
   d7274:	dd24      	ble.n	d72c0 <_strtol_l.isra.0+0xb4>
   d7276:	1c75      	adds	r5, r6, #1
   d7278:	d007      	beq.n	d728a <_strtol_l.isra.0+0x7e>
   d727a:	4581      	cmp	r9, r0
   d727c:	d31d      	bcc.n	d72ba <_strtol_l.isra.0+0xae>
   d727e:	d101      	bne.n	d7284 <_strtol_l.isra.0+0x78>
   d7280:	45a2      	cmp	sl, r4
   d7282:	db1a      	blt.n	d72ba <_strtol_l.isra.0+0xae>
   d7284:	fb00 4003 	mla	r0, r0, r3, r4
   d7288:	2601      	movs	r6, #1
   d728a:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d728e:	e7eb      	b.n	d7268 <_strtol_l.isra.0+0x5c>
   d7290:	2c2b      	cmp	r4, #43	; 0x2b
   d7292:	bf08      	it	eq
   d7294:	f89c 4000 	ldrbeq.w	r4, [ip]
   d7298:	46a8      	mov	r8, r5
   d729a:	bf08      	it	eq
   d729c:	f100 0c02 	addeq.w	ip, r0, #2
   d72a0:	e7c8      	b.n	d7234 <_strtol_l.isra.0+0x28>
   d72a2:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   d72a6:	2d19      	cmp	r5, #25
   d72a8:	d801      	bhi.n	d72ae <_strtol_l.isra.0+0xa2>
   d72aa:	3c37      	subs	r4, #55	; 0x37
   d72ac:	e7e1      	b.n	d7272 <_strtol_l.isra.0+0x66>
   d72ae:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   d72b2:	2d19      	cmp	r5, #25
   d72b4:	d804      	bhi.n	d72c0 <_strtol_l.isra.0+0xb4>
   d72b6:	3c57      	subs	r4, #87	; 0x57
   d72b8:	e7db      	b.n	d7272 <_strtol_l.isra.0+0x66>
   d72ba:	f04f 36ff 	mov.w	r6, #4294967295
   d72be:	e7e4      	b.n	d728a <_strtol_l.isra.0+0x7e>
   d72c0:	1c73      	adds	r3, r6, #1
   d72c2:	d106      	bne.n	d72d2 <_strtol_l.isra.0+0xc6>
   d72c4:	2322      	movs	r3, #34	; 0x22
   d72c6:	f8ce 3000 	str.w	r3, [lr]
   d72ca:	4638      	mov	r0, r7
   d72cc:	b942      	cbnz	r2, d72e0 <_strtol_l.isra.0+0xd4>
   d72ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d72d2:	f1b8 0f00 	cmp.w	r8, #0
   d72d6:	d000      	beq.n	d72da <_strtol_l.isra.0+0xce>
   d72d8:	4240      	negs	r0, r0
   d72da:	2a00      	cmp	r2, #0
   d72dc:	d0f7      	beq.n	d72ce <_strtol_l.isra.0+0xc2>
   d72de:	b10e      	cbz	r6, d72e4 <_strtol_l.isra.0+0xd8>
   d72e0:	f10c 31ff 	add.w	r1, ip, #4294967295
   d72e4:	6011      	str	r1, [r2, #0]
   d72e6:	e7f2      	b.n	d72ce <_strtol_l.isra.0+0xc2>
   d72e8:	2430      	movs	r4, #48	; 0x30
   d72ea:	2b00      	cmp	r3, #0
   d72ec:	d1b3      	bne.n	d7256 <_strtol_l.isra.0+0x4a>
   d72ee:	2308      	movs	r3, #8
   d72f0:	e7b1      	b.n	d7256 <_strtol_l.isra.0+0x4a>
   d72f2:	2c30      	cmp	r4, #48	; 0x30
   d72f4:	d0a4      	beq.n	d7240 <_strtol_l.isra.0+0x34>
   d72f6:	230a      	movs	r3, #10
   d72f8:	e7ad      	b.n	d7256 <_strtol_l.isra.0+0x4a>
   d72fa:	bf00      	nop
   d72fc:	000d762b 	.word	0x000d762b

000d7300 <strtol>:
   d7300:	4613      	mov	r3, r2
   d7302:	460a      	mov	r2, r1
   d7304:	4601      	mov	r1, r0
   d7306:	4802      	ldr	r0, [pc, #8]	; (d7310 <strtol+0x10>)
   d7308:	6800      	ldr	r0, [r0, #0]
   d730a:	f7ff bf7f 	b.w	d720c <_strtol_l.isra.0>
   d730e:	bf00      	nop
   d7310:	2003e65c 	.word	0x2003e65c

000d7314 <dynalib_user>:
   d7314:	000d401d 000d4059 000d4081 000d4085     .@..Y@...@...@..
   d7324:	00000000 74747542 70206e6f 73736572     ....Button press
   d7334:	00216465 74747562 702d6e6f 73736572     ed!.button-press
   d7344:	54006465 72656d69 72757320 73736170     ed.Timer surpass
   d7354:	00216465 656d6974 75732d72 73617072     ed!.timer-surpas
   d7364:	00646573 6e6e7552 21676e69 74655300     sed.Running!.Set
   d7374:	00217075 006e7572                       up!.run.

000d737c <_ZTV5Timer>:
	...
   d7384:	000d41e1 000d4229 000d4103              .A..)B...A..

000d7390 <_ZTVN5spark10LogHandlerE>:
	...
   d73a0:	000d40a1 000d40c5                       .@...@..

000d73a8 <_ZTVN5spark16SerialLogHandlerE>:
	...
   d73b0:	000d4169 000d419d 000d5b15 000d40c7     iA...A...[...@..

000d73c0 <_ZTVN5spark13EthernetClassE>:
	...
   d73c8:	000d4b5f 000d4b55 000d4b4b 000d4b41     _K..UK..KK..AK..
   d73d8:	000d4b35 000d4b29 000d4b1d 000d4b15     5K..)K...K...K..
   d73e8:	000d4b0b 000d4b01 000d6a69 64756162     .K...K..ij..baud
   d73f8:	72655300 006c6169 69726553 00316c61     .Serial.Serial1.
   d7408:	4e4f534a 65727453 6f4c6d61 6e614867     JSONStreamLogHan
   d7418:	72656c64 70706100 31302500 00207530     dler.app.%010u .
   d7428:	2500205d 202c0064 3a292800 5b200020     ] .%d., .(): . [
   d7438:	646f6300 203d2065 00692500 61746564     .code = .%i.deta
   d7448:	20736c69 0d00203d 006d000a 00660063     ils = ....m.c.f.
   d7458:	66006e6c 0074006e 65646f63 74656400     ln.fn.t.code.det
   d7468:	006c6961                                ail.

000d746c <_ZTVN5spark16JSONStreamWriterE>:
	...
   d7474:	000d4ed3 000d4ef9 000d4eb9 000d6b7f     .N...N...N...k..

000d7484 <_ZTVN5spark16StreamLogHandlerE>:
	...
   d748c:	000d533d 000d5355 000d5b15 000d40c7     =S..US...[...@..

000d749c <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   d74a4:	000d5369 000d537d 000d5cb9 000d4ec1     iS..}S...\...N..

000d74b4 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   d74bc:	000d4ed1 000d4f07 000d5a51 000d4ec3     .N...O..QZ...N..

000d74cc <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   d74d4:	000d4ecf 000d4f15 000d5285 000d4f31     .N...O...R..1O..
   d74e4:	252d5925 64252d6d 3a482554 253a4d25     %Y-%m-%dT%H:%M:%
   d74f4:	007a2553 74637361 00656d69              S%z.asctime.

000d7500 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d7508:	000d5fb9 000d5fbf 000d5ffd 000d5fcd     ._..._..._..._..
   d7518:	000d5fbb                                ._..

000d751c <_ZTV9IPAddress>:
	...
   d7524:	000d6509 000d64f9 000d64fb              .e...d...d..

000d7530 <_ZTV9USBSerial>:
	...
   d7538:	000d65df 000d6647 000d661d 000d4dad     .e..Gf...f...M..
   d7548:	000d660f 000d65e1 000d65f1 000d6641     .f...e...e..Af..
   d7558:	000d6601 000d65db                       .f...e..

000d7560 <_ZTV11USARTSerial>:
	...
   d7568:	000d679d 000d6809 000d67e1 000d4dad     .g...h...g...M..
   d7578:	000d67b1 000d67cd 000d67bf 000d67db     .g...g...g...g..
   d7588:	000d679f 000d67a3                       .g...g..

000d7590 <_ZTV7TwoWire>:
	...
   d7598:	000d6909 000d6953 000d692b 000d690b     .i..Si..+i...i..
   d75a8:	000d6933 000d693b 000d6943 000d694b     3i..;i..Ci..Ki..

000d75b8 <_ZTVN5spark9WiFiClassE>:
	...
   d75c0:	000d69e3 000d69d9 000d69cf 000d6985     .i...i...i...i..
   d75d0:	000d69c3 000d69b7 000d69ab 000d69a3     .i...i...i...i..
   d75e0:	000d6999 000d698f 000d6a69              .i...i..ij..

000d75ec <_ZTVN5spark12NetworkClassE>:
	...
   d75f4:	000d6a01 000d6a0b 000d6a15 000d6a1f     .j...j...j...j..
   d7604:	000d6a29 000d6a35 000d6a41 000d6a4d     )j..5j..Aj..Mj..
   d7614:	000d6a55 000d6a5f 000d6a69 75007525     Uj.._j..ij..%u.u
   d7624:	78343025                                 %04x.

000d7629 <_ZSt7nothrow>:
	...

000d762a <_ctype_>:
   d762a:	20202000 20202020 28282020 20282828     .         ((((( 
   d763a:	20202020 20202020 20202020 20202020                     
   d764a:	10108820 10101010 10101010 10101010      ...............
   d765a:	04040410 04040404 10040404 10101010     ................
   d766a:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d767a:	01010101 01010101 01010101 10101010     ................
   d768a:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d769a:	02020202 02020202 02020202 10101010     ................
   d76aa:	00000020 00000000 00000000 00000000      ...............
	...

000d772b <link_const_variable_data_end>:
	...

000d772c <link_constructors_location>:
   d772c:	000d44bd 	.word	0x000d44bd
   d7730:	000d4b69 	.word	0x000d4b69
   d7734:	000d4bb1 	.word	0x000d4bb1
   d7738:	000d4d85 	.word	0x000d4d85
   d773c:	000d5b05 	.word	0x000d5b05
   d7740:	000d5e2d 	.word	0x000d5e2d
   d7744:	000d5e79 	.word	0x000d5e79
   d7748:	000d69ed 	.word	0x000d69ed
   d774c:	000d6b3d 	.word	0x000d6b3d
