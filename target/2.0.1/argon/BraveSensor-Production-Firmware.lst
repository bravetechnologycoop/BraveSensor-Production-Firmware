
c:/School/CO-OP/BraveSensor-Production-Firmware/target/2.0.1/argon/BraveSensor-Production-Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003874  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d7890  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000070  2003e5c0  000d7894  0001e5c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000001c0  2003e630  2003e630  0002e630  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d7904  000d7904  00027904  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d792c  000d792c  0002792c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001511b2  00000000  00000000  00027930  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00017140  00000000  00000000  00178ae2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002cdae  00000000  00000000  0018fc22  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002978  00000000  00000000  001bc9d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00007b20  00000000  00000000  001bf348  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000387d1  00000000  00000000  001c6e68  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00038a77  00000000  00000000  001ff639  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010b469  00000000  00000000  002380b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00007118  00000000  00000000  0034351c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
   d4022:	b508      	push	{r3, lr}
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f003 f8b5 	bl	d719c <memcpy>
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f003 f8d7 	bl	d71ec <memset>
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e5c0 	.word	0x2003e5c0
   d4048:	000d7894 	.word	0x000d7894
   d404c:	2003e630 	.word	0x2003e630
   d4050:	2003e630 	.word	0x2003e630
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
   d4058:	b570      	push	{r4, r5, r6, lr}
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d405e:	f001 ffb1 	bl	d5fc4 <module_user_init_hook>
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
   d406c:	bd70      	pop	{r4, r5, r6, pc}
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d786c 	.word	0x000d786c
   d407c:	000d7890 	.word	0x000d7890

000d4080 <module_user_setup>:
   d4080:	f000 b8e4 	b.w	d424c <setup>

000d4084 <module_user_loop>:
   d4084:	b508      	push	{r3, lr}
   d4086:	f000 f97b 	bl	d4380 <loop>
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d408e:	f001 bf5b 	b.w	d5f48 <_post_loop>

000d4092 <_Znwj>:
   d4092:	f000 bd43 	b.w	d4b1c <malloc>

000d4096 <_Znaj>:
   d4096:	f000 bd41 	b.w	d4b1c <malloc>

000d409a <_ZdlPv>:
   d409a:	f000 bd47 	b.w	d4b2c <free>
	...

000d40a0 <__cxa_pure_virtual>:
   d40a0:	b508      	push	{r3, lr}
   d40a2:	4a03      	ldr	r2, [pc, #12]	; (d40b0 <__cxa_pure_virtual+0x10>)
   d40a4:	2100      	movs	r1, #0
   d40a6:	200c      	movs	r0, #12
   d40a8:	f000 fc74 	bl	d4994 <panic_>
   d40ac:	e7fe      	b.n	d40ac <__cxa_pure_virtual+0xc>
   d40ae:	bf00      	nop
   d40b0:	000d46e5 	.word	0x000d46e5

000d40b4 <__cxa_guard_acquire>:
   d40b4:	7800      	ldrb	r0, [r0, #0]
   d40b6:	fab0 f080 	clz	r0, r0
   d40ba:	0940      	lsrs	r0, r0, #5
   d40bc:	4770      	bx	lr

000d40be <__cxa_guard_release>:
   d40be:	2301      	movs	r3, #1
   d40c0:	7003      	strb	r3, [r0, #0]
   d40c2:	4770      	bx	lr

000d40c4 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   d40c4:	4770      	bx	lr

000d40c6 <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   d40c6:	6a00      	ldr	r0, [r0, #32]
   d40c8:	6803      	ldr	r3, [r0, #0]
   d40ca:	68db      	ldr	r3, [r3, #12]
   d40cc:	4718      	bx	r3
	...

000d40d0 <_Z16interruptHandlerv>:
    timerPassed = false;
}

// callback function to change variable that allows buttonPress to be called
void interruptHandler() {
    buttonPressed = true;
   d40d0:	4b01      	ldr	r3, [pc, #4]	; (d40d8 <_Z16interruptHandlerv+0x8>)
   d40d2:	2201      	movs	r2, #1
   d40d4:	701a      	strb	r2, [r3, #0]
}
   d40d6:	4770      	bx	lr
   d40d8:	2003e635 	.word	0x2003e635

000d40dc <_Z12timerHandlerv>:

// callback function to change variable that allows timerSurpassed to be called
void timerHandler() {
    timerPassed = true;
   d40dc:	4b01      	ldr	r3, [pc, #4]	; (d40e4 <_Z12timerHandlerv+0x8>)
   d40de:	2201      	movs	r2, #1
   d40e0:	701a      	strb	r2, [r3, #0]
}
   d40e2:	4770      	bx	lr
   d40e4:	2003e678 	.word	0x2003e678

000d40e8 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d40e8:	6803      	ldr	r3, [r0, #0]
   d40ea:	4718      	bx	r3

000d40ec <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	  switch (__op)
   d40ec:	2a01      	cmp	r2, #1
   d40ee:	d003      	beq.n	d40f8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xc>
   d40f0:	2a02      	cmp	r2, #2
   d40f2:	d003      	beq.n	d40fc <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x10>
	}
   d40f4:	2000      	movs	r0, #0
   d40f6:	4770      	bx	lr
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d40f8:	6001      	str	r1, [r0, #0]
	      break;
   d40fa:	e7fb      	b.n	d40f4 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d40fc:	680b      	ldr	r3, [r1, #0]
   d40fe:	6003      	str	r3, [r0, #0]
	}
   d4100:	e7f8      	b.n	d40f4 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>

000d4102 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   d4102:	6943      	ldr	r3, [r0, #20]
   d4104:	b113      	cbz	r3, d410c <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4106:	6983      	ldr	r3, [r0, #24]
   d4108:	300c      	adds	r0, #12
   d410a:	4718      	bx	r3
            callback();
        }
    }
   d410c:	4770      	bx	lr

000d410e <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   d410e:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d4110:	2100      	movs	r1, #0
   d4112:	4604      	mov	r4, r0
   d4114:	4608      	mov	r0, r1
   d4116:	f000 fafd 	bl	d4714 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d411a:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   d411c:	4620      	mov	r0, r4
   d411e:	a901      	add	r1, sp, #4
            void* id = nullptr;
   d4120:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   d4122:	f000 fb0f 	bl	d4744 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   d4126:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   d4128:	b10c      	cbz	r4, d412e <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   d412a:	2301      	movs	r3, #1
   d412c:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d412e:	2100      	movs	r1, #0
   d4130:	2001      	movs	r0, #1
   d4132:	f000 faef 	bl	d4714 <os_thread_scheduling>
            }
        }
        if (t) {
   d4136:	b12c      	cbz	r4, d4144 <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   d4138:	6823      	ldr	r3, [r4, #0]
   d413a:	4620      	mov	r0, r4
   d413c:	689b      	ldr	r3, [r3, #8]
   d413e:	4798      	blx	r3
            t->running = false;
   d4140:	2300      	movs	r3, #0
   d4142:	7123      	strb	r3, [r4, #4]
        }
    }
   d4144:	b002      	add	sp, #8
   d4146:	bd10      	pop	{r4, pc}

000d4148 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d4148:	4b0a      	ldr	r3, [pc, #40]	; (d4174 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   d414a:	b510      	push	{r4, lr}
   d414c:	4604      	mov	r4, r0
   d414e:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d4150:	f001 f834 	bl	d51bc <_ZN5spark10LogManager8instanceEv>
   d4154:	4621      	mov	r1, r4
   d4156:	f001 fa36 	bl	d55c6 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   d415a:	f002 faff 	bl	d675c <_Z16_fetch_usbserialv>
   d415e:	f002 faf1 	bl	d6744 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   d4162:	4620      	mov	r0, r4
   d4164:	4b04      	ldr	r3, [pc, #16]	; (d4178 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   d4166:	f840 3b04 	str.w	r3, [r0], #4
   d416a:	f001 f919 	bl	d53a0 <_ZN5spark6detail9LogFilterD1Ev>
    }
   d416e:	4620      	mov	r0, r4
   d4170:	bd10      	pop	{r4, pc}
   d4172:	bf00      	nop
   d4174:	000d74f0 	.word	0x000d74f0
   d4178:	000d74d8 	.word	0x000d74d8

000d417c <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   d417c:	b510      	push	{r4, lr}
   d417e:	4604      	mov	r4, r0
    }
   d4180:	f7ff ffe2 	bl	d4148 <_ZN5spark16SerialLogHandlerD1Ev>
   d4184:	4620      	mov	r0, r4
   d4186:	2124      	movs	r1, #36	; 0x24
   d4188:	f002 fff1 	bl	d716e <_ZdlPvj>
   d418c:	4620      	mov	r0, r4
   d418e:	bd10      	pop	{r4, pc}

000d4190 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d4190:	b510      	push	{r4, lr}
      if (_M_manager)
   d4192:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d4194:	4604      	mov	r4, r0
      if (_M_manager)
   d4196:	b113      	cbz	r3, d419e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4198:	2203      	movs	r2, #3
   d419a:	4601      	mov	r1, r0
   d419c:	4798      	blx	r3
    }
   d419e:	4620      	mov	r0, r4
   d41a0:	bd10      	pop	{r4, pc}

000d41a2 <_ZN5Timer5_stopEjb>:
    bool _stop(unsigned block, bool fromISR=false)
   d41a2:	b507      	push	{r0, r1, r2, lr}
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   d41a4:	6880      	ldr	r0, [r0, #8]
   d41a6:	2300      	movs	r3, #0
   d41a8:	b138      	cbz	r0, d41ba <_ZN5Timer5_stopEjb+0x18>
   d41aa:	e9cd 1300 	strd	r1, r3, [sp]
   d41ae:	2102      	movs	r1, #2
   d41b0:	f000 fad0 	bl	d4754 <os_timer_change>
   d41b4:	fab0 f080 	clz	r0, r0
   d41b8:	0940      	lsrs	r0, r0, #5
    }
   d41ba:	b003      	add	sp, #12
   d41bc:	f85d fb04 	ldr.w	pc, [sp], #4

000d41c0 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   d41c0:	b538      	push	{r3, r4, r5, lr}
   d41c2:	4b10      	ldr	r3, [pc, #64]	; (d4204 <_ZN5TimerD1Ev+0x44>)
   d41c4:	6003      	str	r3, [r0, #0]
        if (handle) {
   d41c6:	6883      	ldr	r3, [r0, #8]
    virtual ~Timer() {
   d41c8:	4604      	mov	r4, r0
        if (handle) {
   d41ca:	b1a3      	cbz	r3, d41f6 <_ZN5TimerD1Ev+0x36>
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d41cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d41d0:	2200      	movs	r2, #0
   d41d2:	f7ff ffe6 	bl	d41a2 <_ZN5Timer5_stopEjb>
            os_timer_set_id(handle, nullptr);
   d41d6:	68a0      	ldr	r0, [r4, #8]
   d41d8:	2100      	movs	r1, #0
   d41da:	f000 fae3 	bl	d47a4 <os_timer_set_id>
            while (running) {
   d41de:	7923      	ldrb	r3, [r4, #4]
   d41e0:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d41e4:	b113      	cbz	r3, d41ec <_ZN5TimerD1Ev+0x2c>
                os_thread_yield();
   d41e6:	f000 fa8d 	bl	d4704 <os_thread_yield>
            while (running) {
   d41ea:	e7f8      	b.n	d41de <_ZN5TimerD1Ev+0x1e>
            os_timer_destroy(handle, nullptr);
   d41ec:	68a0      	ldr	r0, [r4, #8]
   d41ee:	4629      	mov	r1, r5
   d41f0:	f000 faa0 	bl	d4734 <os_timer_destroy>
            handle = nullptr;
   d41f4:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   d41f6:	f104 000c 	add.w	r0, r4, #12
   d41fa:	f7ff ffc9 	bl	d4190 <_ZNSt14_Function_baseD1Ev>
    }
   d41fe:	4620      	mov	r0, r4
   d4200:	bd38      	pop	{r3, r4, r5, pc}
   d4202:	bf00      	nop
   d4204:	000d74c4 	.word	0x000d74c4

000d4208 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   d4208:	b510      	push	{r4, lr}
   d420a:	4604      	mov	r4, r0
    }
   d420c:	f7ff ffd8 	bl	d41c0 <_ZN5TimerD1Ev>
   d4210:	4620      	mov	r0, r4
   d4212:	211c      	movs	r1, #28
   d4214:	f002 ffab 	bl	d716e <_ZdlPvj>
   d4218:	4620      	mov	r0, r4
   d421a:	bd10      	pop	{r4, pc}

000d421c <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d421c:	b40e      	push	{r1, r2, r3}
   d421e:	b510      	push	{r4, lr}
   d4220:	b08d      	sub	sp, #52	; 0x34
   d4222:	aa0f      	add	r2, sp, #60	; 0x3c
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
   d4224:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::info(const char *fmt, ...) const {
   d4226:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d422a:	9203      	str	r2, [sp, #12]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d422c:	2300      	movs	r3, #0
   d422e:	2020      	movs	r0, #32
   d4230:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4234:	e9cd 4200 	strd	r4, r2, [sp]
   d4238:	201e      	movs	r0, #30
   d423a:	aa04      	add	r2, sp, #16
   d423c:	f000 fbb2 	bl	d49a4 <log_message_v>
}
   d4240:	b00d      	add	sp, #52	; 0x34
   d4242:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4246:	b003      	add	sp, #12
   d4248:	4770      	bx	lr
	...

000d424c <setup>:
void setup() {
   d424c:	b508      	push	{r3, lr}
    Particle.publishVitals(60);
   d424e:	213c      	movs	r1, #60	; 0x3c
   d4250:	480a      	ldr	r0, [pc, #40]	; (d427c <setup+0x30>)
   d4252:	f001 ff55 	bl	d6100 <_ZN10CloudClass13publishVitalsEm>
    pinMode(BUZZER, OUTPUT);
   d4256:	2101      	movs	r1, #1
   d4258:	2006      	movs	r0, #6
   d425a:	f002 ff19 	bl	d7090 <pinMode>
    pinMode(BUTTON, INPUT);
   d425e:	2100      	movs	r1, #0
   d4260:	2007      	movs	r0, #7
   d4262:	f002 ff15 	bl	d7090 <pinMode>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d4266:	4a06      	ldr	r2, [pc, #24]	; (d4280 <setup+0x34>)
   d4268:	4906      	ldr	r1, [pc, #24]	; (d4284 <setup+0x38>)
   d426a:	4807      	ldr	r0, [pc, #28]	; (d4288 <setup+0x3c>)
   d426c:	f001 ff37 	bl	d60de <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
    Log.info("Setup!");
   d4270:	4906      	ldr	r1, [pc, #24]	; (d428c <setup+0x40>)
   d4272:	4807      	ldr	r0, [pc, #28]	; (d4290 <setup+0x44>)
   d4274:	f7ff ffd2 	bl	d421c <_ZNK5spark6Logger4infoEPKcz>
}
   d4278:	bd08      	pop	{r3, pc}
   d427a:	bf00      	nop
   d427c:	2003e7d4 	.word	0x2003e7d4
   d4280:	000d744c 	.word	0x000d744c
   d4284:	000d43a1 	.word	0x000d43a1
   d4288:	000d60b3 	.word	0x000d60b3
   d428c:	000d7457 	.word	0x000d7457
   d4290:	2003e6a4 	.word	0x2003e6a4

000d4294 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4294:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4296:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d4298:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d429a:	b17c      	cbz	r4, d42bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d429c:	6863      	ldr	r3, [r4, #4]
   d429e:	3b01      	subs	r3, #1
   d42a0:	6063      	str	r3, [r4, #4]
   d42a2:	b95b      	cbnz	r3, d42bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d42a4:	6823      	ldr	r3, [r4, #0]
   d42a6:	4620      	mov	r0, r4
   d42a8:	689b      	ldr	r3, [r3, #8]
   d42aa:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d42ac:	68a3      	ldr	r3, [r4, #8]
   d42ae:	3b01      	subs	r3, #1
   d42b0:	60a3      	str	r3, [r4, #8]
   d42b2:	b91b      	cbnz	r3, d42bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d42b4:	6823      	ldr	r3, [r4, #0]
   d42b6:	4620      	mov	r0, r4
   d42b8:	68db      	ldr	r3, [r3, #12]
   d42ba:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d42bc:	4628      	mov	r0, r5
   d42be:	bd38      	pop	{r3, r4, r5, pc}

000d42c0 <_Z11buttonPressv>:
void buttonPress() {
   d42c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    Log.info("Button pressed!");
   d42c2:	4913      	ldr	r1, [pc, #76]	; (d4310 <_Z11buttonPressv+0x50>)
   d42c4:	4813      	ldr	r0, [pc, #76]	; (d4314 <_Z11buttonPressv+0x54>)
   d42c6:	f7ff ffa9 	bl	d421c <_ZNK5spark6Logger4infoEPKcz>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d42ca:	4b13      	ldr	r3, [pc, #76]	; (d4318 <_Z11buttonPressv+0x58>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d42cc:	4913      	ldr	r1, [pc, #76]	; (d431c <_Z11buttonPressv+0x5c>)
   d42ce:	781b      	ldrb	r3, [r3, #0]
   d42d0:	f88d 3000 	strb.w	r3, [sp]
   d42d4:	2200      	movs	r2, #0
   d42d6:	233c      	movs	r3, #60	; 0x3c
   d42d8:	a802      	add	r0, sp, #8
   d42da:	f001 fff7 	bl	d62cc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d42de:	a803      	add	r0, sp, #12
   d42e0:	f7ff ffd8 	bl	d4294 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    digitalWrite(BUZZER, LOW);
   d42e4:	2100      	movs	r1, #0
   d42e6:	2006      	movs	r0, #6
   d42e8:	f002 fee3 	bl	d70b2 <digitalWrite>
    noTone(LED);
   d42ec:	2008      	movs	r0, #8
   d42ee:	f002 fabc 	bl	d686a <noTone>
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d42f2:	2200      	movs	r2, #0
   d42f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d42f8:	4809      	ldr	r0, [pc, #36]	; (d4320 <_Z11buttonPressv+0x60>)
   d42fa:	f7ff ff52 	bl	d41a2 <_ZN5Timer5_stopEjb>
    detachInterrupt(BUTTON); 
   d42fe:	2007      	movs	r0, #7
   d4300:	f002 fa82 	bl	d6808 <_Z15detachInterruptt>
    buttonPressed = false;
   d4304:	4b07      	ldr	r3, [pc, #28]	; (d4324 <_Z11buttonPressv+0x64>)
   d4306:	2200      	movs	r2, #0
   d4308:	701a      	strb	r2, [r3, #0]
}
   d430a:	b005      	add	sp, #20
   d430c:	f85d fb04 	ldr.w	pc, [sp], #4
   d4310:	000d745e 	.word	0x000d745e
   d4314:	2003e6a4 	.word	0x2003e6a4
   d4318:	2003e634 	.word	0x2003e634
   d431c:	000d746e 	.word	0x000d746e
   d4320:	2003e65c 	.word	0x2003e65c
   d4324:	2003e635 	.word	0x2003e635

000d4328 <_Z14timerSurpassedv>:
void timerSurpassed() {
   d4328:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    Log.info("Timer surpassed!");
   d432a:	4910      	ldr	r1, [pc, #64]	; (d436c <_Z14timerSurpassedv+0x44>)
   d432c:	4810      	ldr	r0, [pc, #64]	; (d4370 <_Z14timerSurpassedv+0x48>)
   d432e:	f7ff ff75 	bl	d421c <_ZNK5spark6Logger4infoEPKcz>
   d4332:	4b10      	ldr	r3, [pc, #64]	; (d4374 <_Z14timerSurpassedv+0x4c>)
   d4334:	4910      	ldr	r1, [pc, #64]	; (d4378 <_Z14timerSurpassedv+0x50>)
   d4336:	781b      	ldrb	r3, [r3, #0]
   d4338:	f88d 3000 	strb.w	r3, [sp]
   d433c:	2200      	movs	r2, #0
   d433e:	233c      	movs	r3, #60	; 0x3c
   d4340:	a802      	add	r0, sp, #8
   d4342:	f001 ffc3 	bl	d62cc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d4346:	a803      	add	r0, sp, #12
   d4348:	f7ff ffa4 	bl	d4294 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    digitalWrite(BUZZER, LOW);
   d434c:	2100      	movs	r1, #0
   d434e:	2006      	movs	r0, #6
   d4350:	f002 feaf 	bl	d70b2 <digitalWrite>
    noTone(LED);
   d4354:	2008      	movs	r0, #8
   d4356:	f002 fa88 	bl	d686a <noTone>
    detachInterrupt(BUTTON); 
   d435a:	2007      	movs	r0, #7
   d435c:	f002 fa54 	bl	d6808 <_Z15detachInterruptt>
    timerPassed = false;
   d4360:	4b06      	ldr	r3, [pc, #24]	; (d437c <_Z14timerSurpassedv+0x54>)
   d4362:	2200      	movs	r2, #0
   d4364:	701a      	strb	r2, [r3, #0]
}
   d4366:	b005      	add	sp, #20
   d4368:	f85d fb04 	ldr.w	pc, [sp], #4
   d436c:	000d747d 	.word	0x000d747d
   d4370:	2003e6a4 	.word	0x2003e6a4
   d4374:	2003e634 	.word	0x2003e634
   d4378:	000d748e 	.word	0x000d748e
   d437c:	2003e678 	.word	0x2003e678

000d4380 <loop>:
    if(buttonPressed) {
   d4380:	4b05      	ldr	r3, [pc, #20]	; (d4398 <loop+0x18>)
   d4382:	781b      	ldrb	r3, [r3, #0]
   d4384:	b10b      	cbz	r3, d438a <loop+0xa>
        buttonPress();
   d4386:	f7ff bf9b 	b.w	d42c0 <_Z11buttonPressv>
    } else if (timerPassed) {
   d438a:	4b04      	ldr	r3, [pc, #16]	; (d439c <loop+0x1c>)
   d438c:	781b      	ldrb	r3, [r3, #0]
   d438e:	b10b      	cbz	r3, d4394 <loop+0x14>
        timerSurpassed();
   d4390:	f7ff bfca 	b.w	d4328 <_Z14timerSurpassedv>
}
   d4394:	4770      	bx	lr
   d4396:	bf00      	nop
   d4398:	2003e635 	.word	0x2003e635
   d439c:	2003e678 	.word	0x2003e678

000d43a0 <_Z3run6String>:
int run(String command) {
   d43a0:	b530      	push	{r4, r5, lr}
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d43a2:	4920      	ldr	r1, [pc, #128]	; (d4424 <_Z3run6String+0x84>)
   d43a4:	b085      	sub	sp, #20
   d43a6:	f000 fd08 	bl	d4dba <_ZNK6String6equalsEPKc>
    if (command != "run") {
   d43aa:	4602      	mov	r2, r0
   d43ac:	b978      	cbnz	r0, d43ce <_Z3run6String+0x2e>
   d43ae:	4b1e      	ldr	r3, [pc, #120]	; (d4428 <_Z3run6String+0x88>)
   d43b0:	491e      	ldr	r1, [pc, #120]	; (d442c <_Z3run6String+0x8c>)
   d43b2:	781b      	ldrb	r3, [r3, #0]
   d43b4:	f88d 3000 	strb.w	r3, [sp]
   d43b8:	a802      	add	r0, sp, #8
   d43ba:	233c      	movs	r3, #60	; 0x3c
   d43bc:	f001 ff86 	bl	d62cc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d43c0:	a803      	add	r0, sp, #12
   d43c2:	f7ff ff67 	bl	d4294 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        Particle.publish("wrong-command", PRIVATE);
   d43c6:	f04f 30ff 	mov.w	r0, #4294967295
}
   d43ca:	b005      	add	sp, #20
   d43cc:	bd30      	pop	{r4, r5, pc}
    attachInterrupt(BUTTON, interruptHandler, RISING); 
   d43ce:	2400      	movs	r4, #0
   d43d0:	4d17      	ldr	r5, [pc, #92]	; (d4430 <_Z3run6String+0x90>)
   d43d2:	4918      	ldr	r1, [pc, #96]	; (d4434 <_Z3run6String+0x94>)
   d43d4:	9400      	str	r4, [sp, #0]
   d43d6:	f04f 33ff 	mov.w	r3, #4294967295
   d43da:	2201      	movs	r2, #1
   d43dc:	2007      	movs	r0, #7
   d43de:	f002 f9e9 	bl	d67b4 <_Z15attachInterrupttPFvvE13InterruptModeah>
   d43e2:	4622      	mov	r2, r4
   d43e4:	4621      	mov	r1, r4
   d43e6:	4628      	mov	r0, r5
   d43e8:	f7ff fedb 	bl	d41a2 <_ZN5Timer5_stopEjb>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   d43ec:	68a8      	ldr	r0, [r5, #8]
   d43ee:	b140      	cbz	r0, d4402 <_Z3run6String+0x62>
   d43f0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   d43f4:	9300      	str	r3, [sp, #0]
   d43f6:	9401      	str	r4, [sp, #4]
   d43f8:	4623      	mov	r3, r4
   d43fa:	4622      	mov	r2, r4
   d43fc:	4621      	mov	r1, r4
   d43fe:	f000 f9a9 	bl	d4754 <os_timer_change>
    digitalWrite(BUZZER, HIGH);
   d4402:	2101      	movs	r1, #1
   d4404:	2006      	movs	r0, #6
   d4406:	f002 fe54 	bl	d70b2 <digitalWrite>
    tone(LED, 20);
   d440a:	2200      	movs	r2, #0
   d440c:	2114      	movs	r1, #20
   d440e:	2008      	movs	r0, #8
   d4410:	f002 fa14 	bl	d683c <tone>
    Log.info("Running!");
   d4414:	4808      	ldr	r0, [pc, #32]	; (d4438 <_Z3run6String+0x98>)
   d4416:	4909      	ldr	r1, [pc, #36]	; (d443c <_Z3run6String+0x9c>)
   d4418:	f7ff ff00 	bl	d421c <_ZNK5spark6Logger4infoEPKcz>
    loop();
   d441c:	f7ff ffb0 	bl	d4380 <loop>
    return 1;
   d4420:	2001      	movs	r0, #1
   d4422:	e7d2      	b.n	d43ca <_Z3run6String+0x2a>
   d4424:	000d749e 	.word	0x000d749e
   d4428:	2003e634 	.word	0x2003e634
   d442c:	000d74a2 	.word	0x000d74a2
   d4430:	2003e65c 	.word	0x2003e65c
   d4434:	000d40d1 	.word	0x000d40d1
   d4438:	2003e6a4 	.word	0x2003e6a4
   d443c:	000d74b0 	.word	0x000d74b0

000d4440 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4440:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d4442:	e9d0 5300 	ldrd	r5, r3, [r0]
   d4446:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4448:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d444a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d444e:	42ae      	cmp	r6, r5
   d4450:	d004      	beq.n	d445c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   d4452:	4628      	mov	r0, r5
   d4454:	f000 fc10 	bl	d4c78 <_ZN6StringD1Ev>
   d4458:	3514      	adds	r5, #20
   d445a:	e7f8      	b.n	d444e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d445c:	6820      	ldr	r0, [r4, #0]
   d445e:	f000 fb65 	bl	d4b2c <free>
    AllocatorT::free(data_);
}
   d4462:	4620      	mov	r0, r4
   d4464:	bd70      	pop	{r4, r5, r6, pc}

000d4466 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d4466:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d4468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d446a:	4604      	mov	r4, r0
   d446c:	460d      	mov	r5, r1
   d446e:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d4470:	d916      	bls.n	d44a0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   d4472:	4290      	cmp	r0, r2
   d4474:	d215      	bcs.n	d44a2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   d4476:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   d447a:	1a75      	subs	r5, r6, r1
   d447c:	f1a1 0714 	sub.w	r7, r1, #20
   d4480:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d4482:	42b7      	cmp	r7, r6
   d4484:	d01c      	beq.n	d44c0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   d4486:	b12c      	cbz	r4, d4494 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   d4488:	4631      	mov	r1, r6
   d448a:	4620      	mov	r0, r4
   d448c:	f000 fc70 	bl	d4d70 <_ZN6StringC1EOS_>
   d4490:	7c33      	ldrb	r3, [r6, #16]
   d4492:	7423      	strb	r3, [r4, #16]
   d4494:	4630      	mov	r0, r6
   d4496:	f000 fbef 	bl	d4c78 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d449a:	3e14      	subs	r6, #20
   d449c:	3c14      	subs	r4, #20
   d449e:	e7f0      	b.n	d4482 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d44a0:	d00e      	beq.n	d44c0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   d44a2:	42b5      	cmp	r5, r6
   d44a4:	d00c      	beq.n	d44c0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   d44a6:	b12c      	cbz	r4, d44b4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   d44a8:	4629      	mov	r1, r5
   d44aa:	4620      	mov	r0, r4
   d44ac:	f000 fc60 	bl	d4d70 <_ZN6StringC1EOS_>
   d44b0:	7c2b      	ldrb	r3, [r5, #16]
   d44b2:	7423      	strb	r3, [r4, #16]
   d44b4:	4628      	mov	r0, r5
   d44b6:	f000 fbdf 	bl	d4c78 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d44ba:	3514      	adds	r5, #20
   d44bc:	3414      	adds	r4, #20
   d44be:	e7f0      	b.n	d44a2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   d44c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d44c2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d44c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   d44c6:	2300      	movs	r3, #0
   d44c8:	e9c0 3300 	strd	r3, r3, [r0]
   d44cc:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d44ce:	684f      	ldr	r7, [r1, #4]
   d44d0:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d44d2:	4604      	mov	r4, r0
   d44d4:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d44d6:	dd23      	ble.n	d4520 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   d44d8:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   d44dc:	fb08 f007 	mul.w	r0, r8, r7
   d44e0:	f000 fb1c 	bl	d4b1c <malloc>
            if (!d) {
   d44e4:	4605      	mov	r5, r0
   d44e6:	b1d8      	cbz	r0, d4520 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   d44e8:	e9d4 1200 	ldrd	r1, r2, [r4]
   d44ec:	fb08 1202 	mla	r2, r8, r2, r1
   d44f0:	f7ff ffb9 	bl	d4466 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d44f4:	6820      	ldr	r0, [r4, #0]
   d44f6:	f000 fb19 	bl	d4b2c <free>
        data_ = d;
   d44fa:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d44fc:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d44fe:	e9d6 7300 	ldrd	r7, r3, [r6]
   d4502:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   d4506:	45b8      	cmp	r8, r7
   d4508:	d008      	beq.n	d451c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   d450a:	4639      	mov	r1, r7
   d450c:	4628      	mov	r0, r5
   d450e:	f000 fc49 	bl	d4da4 <_ZN6StringC1ERKS_>
   d4512:	7c3b      	ldrb	r3, [r7, #16]
   d4514:	742b      	strb	r3, [r5, #16]
   d4516:	3714      	adds	r7, #20
   d4518:	3514      	adds	r5, #20
   d451a:	e7f4      	b.n	d4506 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   d451c:	6873      	ldr	r3, [r6, #4]
   d451e:	6063      	str	r3, [r4, #4]
}
   d4520:	4620      	mov	r0, r4
   d4522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d4528 <_GLOBAL__sub_I_buttonPressed>:
}
   d4528:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        val_(val) {
   d452c:	4b3b      	ldr	r3, [pc, #236]	; (d461c <_GLOBAL__sub_I_buttonPressed+0xf4>)
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d452e:	4c3c      	ldr	r4, [pc, #240]	; (d4620 <_GLOBAL__sub_I_buttonPressed+0xf8>)
Timer timer(TIMEOUT, timerHandler, true);
   d4530:	f8df 911c 	ldr.w	r9, [pc, #284]	; d4650 <_GLOBAL__sub_I_buttonPressed+0x128>
}
   d4534:	b091      	sub	sp, #68	; 0x44
   d4536:	2201      	movs	r2, #1
   d4538:	701a      	strb	r2, [r3, #0]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d453a:	4b3a      	ldr	r3, [pc, #232]	; (d4624 <_GLOBAL__sub_I_buttonPressed+0xfc>)
   d453c:	930c      	str	r3, [sp, #48]	; 0x30
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d453e:	ad0c      	add	r5, sp, #48	; 0x30
   d4540:	e895 0003 	ldmia.w	r5, {r0, r1}
   d4544:	4b38      	ldr	r3, [pc, #224]	; (d4628 <_GLOBAL__sub_I_buttonPressed+0x100>)
   d4546:	6023      	str	r3, [r4, #0]
   d4548:	ae09      	add	r6, sp, #36	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   d454a:	f104 030c 	add.w	r3, r4, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d454e:	e886 0003 	stmia.w	r6, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4552:	e893 0003 	ldmia.w	r3, {r0, r1}
   d4556:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d455a:	e896 0003 	ldmia.w	r6, {r0, r1}
   d455e:	e883 0003 	stmia.w	r3, {r0, r1}
   d4562:	4b32      	ldr	r3, [pc, #200]	; (d462c <_GLOBAL__sub_I_buttonPressed+0x104>)
   d4564:	6163      	str	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   d4566:	69a3      	ldr	r3, [r4, #24]
   d4568:	930f      	str	r3, [sp, #60]	; 0x3c
   d456a:	2700      	movs	r7, #0
      __b = _GLIBCXX_MOVE(__tmp);
   d456c:	4b30      	ldr	r3, [pc, #192]	; (d4630 <_GLOBAL__sub_I_buttonPressed+0x108>)
   d456e:	7127      	strb	r7, [r4, #4]
   d4570:	60a7      	str	r7, [r4, #8]
   d4572:	61a3      	str	r3, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d4574:	f241 3188 	movw	r1, #5000	; 0x1388
   d4578:	4623      	mov	r3, r4
   d457a:	e9cd 2700 	strd	r2, r7, [sp]
   d457e:	f104 0008 	add.w	r0, r4, #8
   d4582:	4a2c      	ldr	r2, [pc, #176]	; (d4634 <_GLOBAL__sub_I_buttonPressed+0x10c>)
      __a = _GLIBCXX_MOVE(__b);
   d4584:	970e      	str	r7, [sp, #56]	; 0x38
   d4586:	f000 f8cd 	bl	d4724 <os_timer_create>
    class function<_Res(_ArgTypes...)>
   d458a:	4628      	mov	r0, r5
   d458c:	f7ff fe00 	bl	d4190 <_ZNSt14_Function_baseD1Ev>
Timer timer(TIMEOUT, timerHandler, true);
   d4590:	464a      	mov	r2, r9
   d4592:	4929      	ldr	r1, [pc, #164]	; (d4638 <_GLOBAL__sub_I_buttonPressed+0x110>)
   d4594:	4620      	mov	r0, r4
   d4596:	f002 fde5 	bl	d7164 <__aeabi_atexit>
        capacity_(0) {
   d459a:	e9cd 7703 	strd	r7, r7, [sp, #12]
   d459e:	9705      	str	r7, [sp, #20]
            StreamLogHandler(Serial, level, filters) {
   d45a0:	f002 f8dc 	bl	d675c <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   d45a4:	4c25      	ldr	r4, [pc, #148]	; (d463c <_GLOBAL__sub_I_buttonPressed+0x114>)
   d45a6:	4607      	mov	r7, r0
   d45a8:	a903      	add	r1, sp, #12
   d45aa:	a806      	add	r0, sp, #24
   d45ac:	f7ff ff89 	bl	d44c2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d45b0:	46a0      	mov	r8, r4
        stream_(&stream) {
   d45b2:	a906      	add	r1, sp, #24
   d45b4:	4630      	mov	r0, r6
   d45b6:	f7ff ff84 	bl	d44c2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   d45ba:	4b21      	ldr	r3, [pc, #132]	; (d4640 <_GLOBAL__sub_I_buttonPressed+0x118>)
   d45bc:	f848 3b04 	str.w	r3, [r8], #4
   d45c0:	4631      	mov	r1, r6
   d45c2:	4628      	mov	r0, r5
   d45c4:	f7ff ff7d 	bl	d44c2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d45c8:	462a      	mov	r2, r5
   d45ca:	2132      	movs	r1, #50	; 0x32
   d45cc:	4640      	mov	r0, r8
   d45ce:	f001 f94d 	bl	d586c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d45d2:	4628      	mov	r0, r5
   d45d4:	f7ff ff34 	bl	d4440 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   d45d8:	4630      	mov	r0, r6
   d45da:	f7ff ff31 	bl	d4440 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d45de:	4b19      	ldr	r3, [pc, #100]	; (d4644 <_GLOBAL__sub_I_buttonPressed+0x11c>)
   d45e0:	6023      	str	r3, [r4, #0]
   d45e2:	6227      	str	r7, [r4, #32]
   d45e4:	a806      	add	r0, sp, #24
   d45e6:	f7ff ff2b 	bl	d4440 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d45ea:	4b17      	ldr	r3, [pc, #92]	; (d4648 <_GLOBAL__sub_I_buttonPressed+0x120>)
   d45ec:	6023      	str	r3, [r4, #0]
        Serial.begin();
   d45ee:	f002 f8b5 	bl	d675c <_Z16_fetch_usbserialv>
   d45f2:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d45f6:	f002 f8a1 	bl	d673c <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   d45fa:	f000 fddf 	bl	d51bc <_ZN5spark10LogManager8instanceEv>
   d45fe:	4621      	mov	r1, r4
   d4600:	f001 f8c6 	bl	d5790 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_ERROR);
   d4604:	a803      	add	r0, sp, #12
   d4606:	f7ff ff1b 	bl	d4440 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d460a:	4910      	ldr	r1, [pc, #64]	; (d464c <_GLOBAL__sub_I_buttonPressed+0x124>)
   d460c:	464a      	mov	r2, r9
   d460e:	4620      	mov	r0, r4
   d4610:	f002 fda8 	bl	d7164 <__aeabi_atexit>
}
   d4614:	b011      	add	sp, #68	; 0x44
   d4616:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d461a:	bf00      	nop
   d461c:	2003e634 	.word	0x2003e634
   d4620:	2003e65c 	.word	0x2003e65c
   d4624:	000d40dd 	.word	0x000d40dd
   d4628:	000d74c4 	.word	0x000d74c4
   d462c:	000d40ed 	.word	0x000d40ed
   d4630:	000d40e9 	.word	0x000d40e9
   d4634:	000d410f 	.word	0x000d410f
   d4638:	000d41c1 	.word	0x000d41c1
   d463c:	2003e638 	.word	0x2003e638
   d4640:	000d74d8 	.word	0x000d74d8
   d4644:	000d75cc 	.word	0x000d75cc
   d4648:	000d74f0 	.word	0x000d74f0
   d464c:	000d4149 	.word	0x000d4149
   d4650:	2003e630 	.word	0x2003e630

000d4654 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4654:	b508      	push	{r3, lr}
   d4656:	4b02      	ldr	r3, [pc, #8]	; (d4660 <netdb_freeaddrinfo+0xc>)
   d4658:	681b      	ldr	r3, [r3, #0]
   d465a:	689b      	ldr	r3, [r3, #8]
   d465c:	9301      	str	r3, [sp, #4]
   d465e:	bd08      	pop	{r3, pc}
   d4660:	00030268 	.word	0x00030268

000d4664 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4664:	b508      	push	{r3, lr}
   d4666:	4b02      	ldr	r3, [pc, #8]	; (d4670 <netdb_getaddrinfo+0xc>)
   d4668:	681b      	ldr	r3, [r3, #0]
   d466a:	68db      	ldr	r3, [r3, #12]
   d466c:	9301      	str	r3, [sp, #4]
   d466e:	bd08      	pop	{r3, pc}
   d4670:	00030268 	.word	0x00030268

000d4674 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d4674:	b508      	push	{r3, lr}
   d4676:	4b02      	ldr	r3, [pc, #8]	; (d4680 <HAL_Validate_Pin_Function+0xc>)
   d4678:	681b      	ldr	r3, [r3, #0]
   d467a:	685b      	ldr	r3, [r3, #4]
   d467c:	9301      	str	r3, [sp, #4]
   d467e:	bd08      	pop	{r3, pc}
   d4680:	0003022c 	.word	0x0003022c

000d4684 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4684:	b508      	push	{r3, lr}
   d4686:	4b02      	ldr	r3, [pc, #8]	; (d4690 <HAL_Pin_Mode+0xc>)
   d4688:	681b      	ldr	r3, [r3, #0]
   d468a:	689b      	ldr	r3, [r3, #8]
   d468c:	9301      	str	r3, [sp, #4]
   d468e:	bd08      	pop	{r3, pc}
   d4690:	0003022c 	.word	0x0003022c

000d4694 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4694:	b508      	push	{r3, lr}
   d4696:	4b02      	ldr	r3, [pc, #8]	; (d46a0 <HAL_Get_Pin_Mode+0xc>)
   d4698:	681b      	ldr	r3, [r3, #0]
   d469a:	68db      	ldr	r3, [r3, #12]
   d469c:	9301      	str	r3, [sp, #4]
   d469e:	bd08      	pop	{r3, pc}
   d46a0:	0003022c 	.word	0x0003022c

000d46a4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d46a4:	b508      	push	{r3, lr}
   d46a6:	4b02      	ldr	r3, [pc, #8]	; (d46b0 <HAL_GPIO_Write+0xc>)
   d46a8:	681b      	ldr	r3, [r3, #0]
   d46aa:	691b      	ldr	r3, [r3, #16]
   d46ac:	9301      	str	r3, [sp, #4]
   d46ae:	bd08      	pop	{r3, pc}
   d46b0:	0003022c 	.word	0x0003022c

000d46b4 <HAL_Interrupts_Attach>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d46b4:	b508      	push	{r3, lr}
   d46b6:	4b02      	ldr	r3, [pc, #8]	; (d46c0 <HAL_Interrupts_Attach+0xc>)
   d46b8:	681b      	ldr	r3, [r3, #0]
   d46ba:	699b      	ldr	r3, [r3, #24]
   d46bc:	9301      	str	r3, [sp, #4]
   d46be:	bd08      	pop	{r3, pc}
   d46c0:	0003022c 	.word	0x0003022c

000d46c4 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d46c4:	b508      	push	{r3, lr}
   d46c6:	4b02      	ldr	r3, [pc, #8]	; (d46d0 <HAL_Interrupts_Detach+0xc>)
   d46c8:	681b      	ldr	r3, [r3, #0]
   d46ca:	69db      	ldr	r3, [r3, #28]
   d46cc:	9301      	str	r3, [sp, #4]
   d46ce:	bd08      	pop	{r3, pc}
   d46d0:	0003022c 	.word	0x0003022c

000d46d4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d46d4:	b508      	push	{r3, lr}
   d46d6:	4b02      	ldr	r3, [pc, #8]	; (d46e0 <HAL_RNG_GetRandomNumber+0xc>)
   d46d8:	681b      	ldr	r3, [r3, #0]
   d46da:	685b      	ldr	r3, [r3, #4]
   d46dc:	9301      	str	r3, [sp, #4]
   d46de:	bd08      	pop	{r3, pc}
   d46e0:	00030218 	.word	0x00030218

000d46e4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d46e4:	b508      	push	{r3, lr}
   d46e6:	4b02      	ldr	r3, [pc, #8]	; (d46f0 <HAL_Delay_Microseconds+0xc>)
   d46e8:	681b      	ldr	r3, [r3, #0]
   d46ea:	68db      	ldr	r3, [r3, #12]
   d46ec:	9301      	str	r3, [sp, #4]
   d46ee:	bd08      	pop	{r3, pc}
   d46f0:	00030218 	.word	0x00030218

000d46f4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d46f4:	b508      	push	{r3, lr}
   d46f6:	4b02      	ldr	r3, [pc, #8]	; (d4700 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d46f8:	681b      	ldr	r3, [r3, #0]
   d46fa:	695b      	ldr	r3, [r3, #20]
   d46fc:	9301      	str	r3, [sp, #4]
   d46fe:	bd08      	pop	{r3, pc}
   d4700:	00030218 	.word	0x00030218

000d4704 <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d4704:	b508      	push	{r3, lr}
   d4706:	4b02      	ldr	r3, [pc, #8]	; (d4710 <os_thread_yield+0xc>)
   d4708:	681b      	ldr	r3, [r3, #0]
   d470a:	68db      	ldr	r3, [r3, #12]
   d470c:	9301      	str	r3, [sp, #4]
   d470e:	bd08      	pop	{r3, pc}
   d4710:	00030248 	.word	0x00030248

000d4714 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   d4714:	b508      	push	{r3, lr}
   d4716:	4b02      	ldr	r3, [pc, #8]	; (d4720 <os_thread_scheduling+0xc>)
   d4718:	681b      	ldr	r3, [r3, #0]
   d471a:	69db      	ldr	r3, [r3, #28]
   d471c:	9301      	str	r3, [sp, #4]
   d471e:	bd08      	pop	{r3, pc}
   d4720:	00030248 	.word	0x00030248

000d4724 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   d4724:	b508      	push	{r3, lr}
   d4726:	4b02      	ldr	r3, [pc, #8]	; (d4730 <os_timer_create+0xc>)
   d4728:	681b      	ldr	r3, [r3, #0]
   d472a:	6a1b      	ldr	r3, [r3, #32]
   d472c:	9301      	str	r3, [sp, #4]
   d472e:	bd08      	pop	{r3, pc}
   d4730:	00030248 	.word	0x00030248

000d4734 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   d4734:	b508      	push	{r3, lr}
   d4736:	4b02      	ldr	r3, [pc, #8]	; (d4740 <os_timer_destroy+0xc>)
   d4738:	681b      	ldr	r3, [r3, #0]
   d473a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d473c:	9301      	str	r3, [sp, #4]
   d473e:	bd08      	pop	{r3, pc}
   d4740:	00030248 	.word	0x00030248

000d4744 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   d4744:	b508      	push	{r3, lr}
   d4746:	4b02      	ldr	r3, [pc, #8]	; (d4750 <os_timer_get_id+0xc>)
   d4748:	681b      	ldr	r3, [r3, #0]
   d474a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d474c:	9301      	str	r3, [sp, #4]
   d474e:	bd08      	pop	{r3, pc}
   d4750:	00030248 	.word	0x00030248

000d4754 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   d4754:	b508      	push	{r3, lr}
   d4756:	4b02      	ldr	r3, [pc, #8]	; (d4760 <os_timer_change+0xc>)
   d4758:	681b      	ldr	r3, [r3, #0]
   d475a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d475c:	9301      	str	r3, [sp, #4]
   d475e:	bd08      	pop	{r3, pc}
   d4760:	00030248 	.word	0x00030248

000d4764 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4764:	b508      	push	{r3, lr}
   d4766:	4b02      	ldr	r3, [pc, #8]	; (d4770 <os_mutex_recursive_create+0xc>)
   d4768:	681b      	ldr	r3, [r3, #0]
   d476a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d476c:	9301      	str	r3, [sp, #4]
   d476e:	bd08      	pop	{r3, pc}
   d4770:	00030248 	.word	0x00030248

000d4774 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4774:	b508      	push	{r3, lr}
   d4776:	4b02      	ldr	r3, [pc, #8]	; (d4780 <os_mutex_recursive_destroy+0xc>)
   d4778:	681b      	ldr	r3, [r3, #0]
   d477a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d477c:	9301      	str	r3, [sp, #4]
   d477e:	bd08      	pop	{r3, pc}
   d4780:	00030248 	.word	0x00030248

000d4784 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d4784:	b508      	push	{r3, lr}
   d4786:	4b02      	ldr	r3, [pc, #8]	; (d4790 <os_mutex_recursive_lock+0xc>)
   d4788:	681b      	ldr	r3, [r3, #0]
   d478a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d478c:	9301      	str	r3, [sp, #4]
   d478e:	bd08      	pop	{r3, pc}
   d4790:	00030248 	.word	0x00030248

000d4794 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d4794:	b508      	push	{r3, lr}
   d4796:	4b02      	ldr	r3, [pc, #8]	; (d47a0 <os_mutex_recursive_unlock+0xc>)
   d4798:	681b      	ldr	r3, [r3, #0]
   d479a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d479c:	9301      	str	r3, [sp, #4]
   d479e:	bd08      	pop	{r3, pc}
   d47a0:	00030248 	.word	0x00030248

000d47a4 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   d47a4:	b508      	push	{r3, lr}
   d47a6:	4b02      	ldr	r3, [pc, #8]	; (d47b0 <os_timer_set_id+0xc>)
   d47a8:	681b      	ldr	r3, [r3, #0]
   d47aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d47ac:	9301      	str	r3, [sp, #4]
   d47ae:	bd08      	pop	{r3, pc}
   d47b0:	00030248 	.word	0x00030248

000d47b4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d47b4:	b508      	push	{r3, lr}
   d47b6:	4b02      	ldr	r3, [pc, #8]	; (d47c0 <inet_inet_ntop+0xc>)
   d47b8:	681b      	ldr	r3, [r3, #0]
   d47ba:	695b      	ldr	r3, [r3, #20]
   d47bc:	9301      	str	r3, [sp, #4]
   d47be:	bd08      	pop	{r3, pc}
   d47c0:	00030264 	.word	0x00030264

000d47c4 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d47c4:	b508      	push	{r3, lr}
   d47c6:	4b02      	ldr	r3, [pc, #8]	; (d47d0 <hal_usart_init+0xc>)
   d47c8:	681b      	ldr	r3, [r3, #0]
   d47ca:	681b      	ldr	r3, [r3, #0]
   d47cc:	9301      	str	r3, [sp, #4]
   d47ce:	bd08      	pop	{r3, pc}
   d47d0:	0003023c 	.word	0x0003023c

000d47d4 <hal_usart_end>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   d47d4:	b508      	push	{r3, lr}
   d47d6:	4b02      	ldr	r3, [pc, #8]	; (d47e0 <hal_usart_end+0xc>)
   d47d8:	681b      	ldr	r3, [r3, #0]
   d47da:	689b      	ldr	r3, [r3, #8]
   d47dc:	9301      	str	r3, [sp, #4]
   d47de:	bd08      	pop	{r3, pc}
   d47e0:	0003023c 	.word	0x0003023c

000d47e4 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d47e4:	b508      	push	{r3, lr}
   d47e6:	4b02      	ldr	r3, [pc, #8]	; (d47f0 <hal_usart_write+0xc>)
   d47e8:	681b      	ldr	r3, [r3, #0]
   d47ea:	68db      	ldr	r3, [r3, #12]
   d47ec:	9301      	str	r3, [sp, #4]
   d47ee:	bd08      	pop	{r3, pc}
   d47f0:	0003023c 	.word	0x0003023c

000d47f4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d47f4:	b508      	push	{r3, lr}
   d47f6:	4b02      	ldr	r3, [pc, #8]	; (d4800 <hal_usart_available+0xc>)
   d47f8:	681b      	ldr	r3, [r3, #0]
   d47fa:	691b      	ldr	r3, [r3, #16]
   d47fc:	9301      	str	r3, [sp, #4]
   d47fe:	bd08      	pop	{r3, pc}
   d4800:	0003023c 	.word	0x0003023c

000d4804 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d4804:	b508      	push	{r3, lr}
   d4806:	4b02      	ldr	r3, [pc, #8]	; (d4810 <hal_usart_read+0xc>)
   d4808:	681b      	ldr	r3, [r3, #0]
   d480a:	695b      	ldr	r3, [r3, #20]
   d480c:	9301      	str	r3, [sp, #4]
   d480e:	bd08      	pop	{r3, pc}
   d4810:	0003023c 	.word	0x0003023c

000d4814 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d4814:	b508      	push	{r3, lr}
   d4816:	4b02      	ldr	r3, [pc, #8]	; (d4820 <hal_usart_peek+0xc>)
   d4818:	681b      	ldr	r3, [r3, #0]
   d481a:	699b      	ldr	r3, [r3, #24]
   d481c:	9301      	str	r3, [sp, #4]
   d481e:	bd08      	pop	{r3, pc}
   d4820:	0003023c 	.word	0x0003023c

000d4824 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d4824:	b508      	push	{r3, lr}
   d4826:	4b02      	ldr	r3, [pc, #8]	; (d4830 <hal_usart_flush+0xc>)
   d4828:	681b      	ldr	r3, [r3, #0]
   d482a:	69db      	ldr	r3, [r3, #28]
   d482c:	9301      	str	r3, [sp, #4]
   d482e:	bd08      	pop	{r3, pc}
   d4830:	0003023c 	.word	0x0003023c

000d4834 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d4834:	b508      	push	{r3, lr}
   d4836:	4b02      	ldr	r3, [pc, #8]	; (d4840 <hal_usart_is_enabled+0xc>)
   d4838:	681b      	ldr	r3, [r3, #0]
   d483a:	6a1b      	ldr	r3, [r3, #32]
   d483c:	9301      	str	r3, [sp, #4]
   d483e:	bd08      	pop	{r3, pc}
   d4840:	0003023c 	.word	0x0003023c

000d4844 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d4844:	b508      	push	{r3, lr}
   d4846:	4b02      	ldr	r3, [pc, #8]	; (d4850 <hal_usart_available_data_for_write+0xc>)
   d4848:	681b      	ldr	r3, [r3, #0]
   d484a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d484c:	9301      	str	r3, [sp, #4]
   d484e:	bd08      	pop	{r3, pc}
   d4850:	0003023c 	.word	0x0003023c

000d4854 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   d4854:	b508      	push	{r3, lr}
   d4856:	4b02      	ldr	r3, [pc, #8]	; (d4860 <hal_usart_begin_config+0xc>)
   d4858:	681b      	ldr	r3, [r3, #0]
   d485a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d485c:	9301      	str	r3, [sp, #4]
   d485e:	bd08      	pop	{r3, pc}
   d4860:	0003023c 	.word	0x0003023c

000d4864 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d4864:	b508      	push	{r3, lr}
   d4866:	4b02      	ldr	r3, [pc, #8]	; (d4870 <hal_i2c_write+0xc>)
   d4868:	681b      	ldr	r3, [r3, #0]
   d486a:	6a1b      	ldr	r3, [r3, #32]
   d486c:	9301      	str	r3, [sp, #4]
   d486e:	bd08      	pop	{r3, pc}
   d4870:	00030228 	.word	0x00030228

000d4874 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d4874:	b508      	push	{r3, lr}
   d4876:	4b02      	ldr	r3, [pc, #8]	; (d4880 <hal_i2c_available+0xc>)
   d4878:	681b      	ldr	r3, [r3, #0]
   d487a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d487c:	9301      	str	r3, [sp, #4]
   d487e:	bd08      	pop	{r3, pc}
   d4880:	00030228 	.word	0x00030228

000d4884 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d4884:	b508      	push	{r3, lr}
   d4886:	4b02      	ldr	r3, [pc, #8]	; (d4890 <hal_i2c_read+0xc>)
   d4888:	681b      	ldr	r3, [r3, #0]
   d488a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d488c:	9301      	str	r3, [sp, #4]
   d488e:	bd08      	pop	{r3, pc}
   d4890:	00030228 	.word	0x00030228

000d4894 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d4894:	b508      	push	{r3, lr}
   d4896:	4b02      	ldr	r3, [pc, #8]	; (d48a0 <hal_i2c_peek+0xc>)
   d4898:	681b      	ldr	r3, [r3, #0]
   d489a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d489c:	9301      	str	r3, [sp, #4]
   d489e:	bd08      	pop	{r3, pc}
   d48a0:	00030228 	.word	0x00030228

000d48a4 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d48a4:	b508      	push	{r3, lr}
   d48a6:	4b02      	ldr	r3, [pc, #8]	; (d48b0 <hal_i2c_flush+0xc>)
   d48a8:	681b      	ldr	r3, [r3, #0]
   d48aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d48ac:	9301      	str	r3, [sp, #4]
   d48ae:	bd08      	pop	{r3, pc}
   d48b0:	00030228 	.word	0x00030228

000d48b4 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d48b4:	b508      	push	{r3, lr}
   d48b6:	4b02      	ldr	r3, [pc, #8]	; (d48c0 <hal_i2c_is_enabled+0xc>)
   d48b8:	681b      	ldr	r3, [r3, #0]
   d48ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d48bc:	9301      	str	r3, [sp, #4]
   d48be:	bd08      	pop	{r3, pc}
   d48c0:	00030228 	.word	0x00030228

000d48c4 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d48c4:	b508      	push	{r3, lr}
   d48c6:	4b02      	ldr	r3, [pc, #8]	; (d48d0 <hal_i2c_init+0xc>)
   d48c8:	681b      	ldr	r3, [r3, #0]
   d48ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d48cc:	9301      	str	r3, [sp, #4]
   d48ce:	bd08      	pop	{r3, pc}
   d48d0:	00030228 	.word	0x00030228

000d48d4 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d48d4:	b508      	push	{r3, lr}
   d48d6:	4b02      	ldr	r3, [pc, #8]	; (d48e0 <hal_spi_init+0xc>)
   d48d8:	681b      	ldr	r3, [r3, #0]
   d48da:	69db      	ldr	r3, [r3, #28]
   d48dc:	9301      	str	r3, [sp, #4]
   d48de:	bd08      	pop	{r3, pc}
   d48e0:	00030230 	.word	0x00030230

000d48e4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d48e4:	b508      	push	{r3, lr}
   d48e6:	4b02      	ldr	r3, [pc, #8]	; (d48f0 <hal_spi_is_enabled+0xc>)
   d48e8:	681b      	ldr	r3, [r3, #0]
   d48ea:	6a1b      	ldr	r3, [r3, #32]
   d48ec:	9301      	str	r3, [sp, #4]
   d48ee:	bd08      	pop	{r3, pc}
   d48f0:	00030230 	.word	0x00030230

000d48f4 <HAL_Tone_Start>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_peripherals)

DYNALIB_FN(0, hal_peripherals, HAL_Tone_Start, void(uint8_t, uint32_t, uint32_t))
   d48f4:	b508      	push	{r3, lr}
   d48f6:	4b02      	ldr	r3, [pc, #8]	; (d4900 <HAL_Tone_Start+0xc>)
   d48f8:	681b      	ldr	r3, [r3, #0]
   d48fa:	681b      	ldr	r3, [r3, #0]
   d48fc:	9301      	str	r3, [sp, #4]
   d48fe:	bd08      	pop	{r3, pc}
   d4900:	00030224 	.word	0x00030224

000d4904 <HAL_Tone_Stop>:
DYNALIB_FN(1, hal_peripherals, HAL_Tone_Stop, void(uint8_t))
   d4904:	b508      	push	{r3, lr}
   d4906:	4b02      	ldr	r3, [pc, #8]	; (d4910 <HAL_Tone_Stop+0xc>)
   d4908:	681b      	ldr	r3, [r3, #0]
   d490a:	685b      	ldr	r3, [r3, #4]
   d490c:	9301      	str	r3, [sp, #4]
   d490e:	bd08      	pop	{r3, pc}
   d4910:	00030224 	.word	0x00030224

000d4914 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4914:	b508      	push	{r3, lr}
   d4916:	4b02      	ldr	r3, [pc, #8]	; (d4920 <HAL_USB_USART_Init+0xc>)
   d4918:	681b      	ldr	r3, [r3, #0]
   d491a:	681b      	ldr	r3, [r3, #0]
   d491c:	9301      	str	r3, [sp, #4]
   d491e:	bd08      	pop	{r3, pc}
   d4920:	0003024c 	.word	0x0003024c

000d4924 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4924:	b508      	push	{r3, lr}
   d4926:	4b02      	ldr	r3, [pc, #8]	; (d4930 <HAL_USB_USART_Begin+0xc>)
   d4928:	681b      	ldr	r3, [r3, #0]
   d492a:	685b      	ldr	r3, [r3, #4]
   d492c:	9301      	str	r3, [sp, #4]
   d492e:	bd08      	pop	{r3, pc}
   d4930:	0003024c 	.word	0x0003024c

000d4934 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   d4934:	b508      	push	{r3, lr}
   d4936:	4b02      	ldr	r3, [pc, #8]	; (d4940 <HAL_USB_USART_End+0xc>)
   d4938:	681b      	ldr	r3, [r3, #0]
   d493a:	689b      	ldr	r3, [r3, #8]
   d493c:	9301      	str	r3, [sp, #4]
   d493e:	bd08      	pop	{r3, pc}
   d4940:	0003024c 	.word	0x0003024c

000d4944 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4944:	b508      	push	{r3, lr}
   d4946:	4b02      	ldr	r3, [pc, #8]	; (d4950 <HAL_USB_USART_Available_Data+0xc>)
   d4948:	681b      	ldr	r3, [r3, #0]
   d494a:	691b      	ldr	r3, [r3, #16]
   d494c:	9301      	str	r3, [sp, #4]
   d494e:	bd08      	pop	{r3, pc}
   d4950:	0003024c 	.word	0x0003024c

000d4954 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4954:	b508      	push	{r3, lr}
   d4956:	4b02      	ldr	r3, [pc, #8]	; (d4960 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4958:	681b      	ldr	r3, [r3, #0]
   d495a:	695b      	ldr	r3, [r3, #20]
   d495c:	9301      	str	r3, [sp, #4]
   d495e:	bd08      	pop	{r3, pc}
   d4960:	0003024c 	.word	0x0003024c

000d4964 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4964:	b508      	push	{r3, lr}
   d4966:	4b02      	ldr	r3, [pc, #8]	; (d4970 <HAL_USB_USART_Receive_Data+0xc>)
   d4968:	681b      	ldr	r3, [r3, #0]
   d496a:	699b      	ldr	r3, [r3, #24]
   d496c:	9301      	str	r3, [sp, #4]
   d496e:	bd08      	pop	{r3, pc}
   d4970:	0003024c 	.word	0x0003024c

000d4974 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4974:	b508      	push	{r3, lr}
   d4976:	4b02      	ldr	r3, [pc, #8]	; (d4980 <HAL_USB_USART_Send_Data+0xc>)
   d4978:	681b      	ldr	r3, [r3, #0]
   d497a:	69db      	ldr	r3, [r3, #28]
   d497c:	9301      	str	r3, [sp, #4]
   d497e:	bd08      	pop	{r3, pc}
   d4980:	0003024c 	.word	0x0003024c

000d4984 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4984:	b508      	push	{r3, lr}
   d4986:	4b02      	ldr	r3, [pc, #8]	; (d4990 <HAL_USB_USART_Flush_Data+0xc>)
   d4988:	681b      	ldr	r3, [r3, #0]
   d498a:	6a1b      	ldr	r3, [r3, #32]
   d498c:	9301      	str	r3, [sp, #4]
   d498e:	bd08      	pop	{r3, pc}
   d4990:	0003024c 	.word	0x0003024c

000d4994 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d4994:	b508      	push	{r3, lr}
   d4996:	4b02      	ldr	r3, [pc, #8]	; (d49a0 <panic_+0xc>)
   d4998:	681b      	ldr	r3, [r3, #0]
   d499a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d499c:	9301      	str	r3, [sp, #4]
   d499e:	bd08      	pop	{r3, pc}
   d49a0:	00030260 	.word	0x00030260

000d49a4 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d49a4:	b508      	push	{r3, lr}
   d49a6:	4b02      	ldr	r3, [pc, #8]	; (d49b0 <log_message_v+0xc>)
   d49a8:	681b      	ldr	r3, [r3, #0]
   d49aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d49ac:	9301      	str	r3, [sp, #4]
   d49ae:	bd08      	pop	{r3, pc}
   d49b0:	00030260 	.word	0x00030260

000d49b4 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   d49b4:	b508      	push	{r3, lr}
   d49b6:	4b02      	ldr	r3, [pc, #8]	; (d49c0 <log_level_name+0xc>)
   d49b8:	681b      	ldr	r3, [r3, #0]
   d49ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d49bc:	9301      	str	r3, [sp, #4]
   d49be:	bd08      	pop	{r3, pc}
   d49c0:	00030260 	.word	0x00030260

000d49c4 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   d49c4:	b508      	push	{r3, lr}
   d49c6:	4b02      	ldr	r3, [pc, #8]	; (d49d0 <log_set_callbacks+0xc>)
   d49c8:	681b      	ldr	r3, [r3, #0]
   d49ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d49cc:	9301      	str	r3, [sp, #4]
   d49ce:	bd08      	pop	{r3, pc}
   d49d0:	00030260 	.word	0x00030260

000d49d4 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d49d4:	b508      	push	{r3, lr}
   d49d6:	4b02      	ldr	r3, [pc, #8]	; (d49e0 <set_system_mode+0xc>)
   d49d8:	681b      	ldr	r3, [r3, #0]
   d49da:	685b      	ldr	r3, [r3, #4]
   d49dc:	9301      	str	r3, [sp, #4]
   d49de:	bd08      	pop	{r3, pc}
   d49e0:	00030220 	.word	0x00030220

000d49e4 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d49e4:	b508      	push	{r3, lr}
   d49e6:	4b02      	ldr	r3, [pc, #8]	; (d49f0 <application_thread_current+0xc>)
   d49e8:	681b      	ldr	r3, [r3, #0]
   d49ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d49ec:	9301      	str	r3, [sp, #4]
   d49ee:	bd08      	pop	{r3, pc}
   d49f0:	00030220 	.word	0x00030220

000d49f4 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d49f4:	b508      	push	{r3, lr}
   d49f6:	4b02      	ldr	r3, [pc, #8]	; (d4a00 <application_thread_invoke+0xc>)
   d49f8:	681b      	ldr	r3, [r3, #0]
   d49fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d49fc:	9301      	str	r3, [sp, #4]
   d49fe:	bd08      	pop	{r3, pc}
   d4a00:	00030220 	.word	0x00030220

000d4a04 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4a04:	b508      	push	{r3, lr}
   d4a06:	4b03      	ldr	r3, [pc, #12]	; (d4a14 <system_ctrl_set_app_request_handler+0x10>)
   d4a08:	681b      	ldr	r3, [r3, #0]
   d4a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4a0e:	9301      	str	r3, [sp, #4]
   d4a10:	bd08      	pop	{r3, pc}
   d4a12:	0000      	.short	0x0000
   d4a14:	00030220 	.word	0x00030220

000d4a18 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4a18:	b508      	push	{r3, lr}
   d4a1a:	4b03      	ldr	r3, [pc, #12]	; (d4a28 <system_ctrl_set_result+0x10>)
   d4a1c:	681b      	ldr	r3, [r3, #0]
   d4a1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4a22:	9301      	str	r3, [sp, #4]
   d4a24:	bd08      	pop	{r3, pc}
   d4a26:	0000      	.short	0x0000
   d4a28:	00030220 	.word	0x00030220

000d4a2c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4a2c:	b508      	push	{r3, lr}
   d4a2e:	4b02      	ldr	r3, [pc, #8]	; (d4a38 <network_connect+0xc>)
   d4a30:	681b      	ldr	r3, [r3, #0]
   d4a32:	685b      	ldr	r3, [r3, #4]
   d4a34:	9301      	str	r3, [sp, #4]
   d4a36:	bd08      	pop	{r3, pc}
   d4a38:	00030240 	.word	0x00030240

000d4a3c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4a3c:	b508      	push	{r3, lr}
   d4a3e:	4b02      	ldr	r3, [pc, #8]	; (d4a48 <network_connecting+0xc>)
   d4a40:	681b      	ldr	r3, [r3, #0]
   d4a42:	689b      	ldr	r3, [r3, #8]
   d4a44:	9301      	str	r3, [sp, #4]
   d4a46:	bd08      	pop	{r3, pc}
   d4a48:	00030240 	.word	0x00030240

000d4a4c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4a4c:	b508      	push	{r3, lr}
   d4a4e:	4b02      	ldr	r3, [pc, #8]	; (d4a58 <network_disconnect+0xc>)
   d4a50:	681b      	ldr	r3, [r3, #0]
   d4a52:	68db      	ldr	r3, [r3, #12]
   d4a54:	9301      	str	r3, [sp, #4]
   d4a56:	bd08      	pop	{r3, pc}
   d4a58:	00030240 	.word	0x00030240

000d4a5c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4a5c:	b508      	push	{r3, lr}
   d4a5e:	4b02      	ldr	r3, [pc, #8]	; (d4a68 <network_ready+0xc>)
   d4a60:	681b      	ldr	r3, [r3, #0]
   d4a62:	691b      	ldr	r3, [r3, #16]
   d4a64:	9301      	str	r3, [sp, #4]
   d4a66:	bd08      	pop	{r3, pc}
   d4a68:	00030240 	.word	0x00030240

000d4a6c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4a6c:	b508      	push	{r3, lr}
   d4a6e:	4b02      	ldr	r3, [pc, #8]	; (d4a78 <network_on+0xc>)
   d4a70:	681b      	ldr	r3, [r3, #0]
   d4a72:	695b      	ldr	r3, [r3, #20]
   d4a74:	9301      	str	r3, [sp, #4]
   d4a76:	bd08      	pop	{r3, pc}
   d4a78:	00030240 	.word	0x00030240

000d4a7c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4a7c:	b508      	push	{r3, lr}
   d4a7e:	4b02      	ldr	r3, [pc, #8]	; (d4a88 <network_off+0xc>)
   d4a80:	681b      	ldr	r3, [r3, #0]
   d4a82:	699b      	ldr	r3, [r3, #24]
   d4a84:	9301      	str	r3, [sp, #4]
   d4a86:	bd08      	pop	{r3, pc}
   d4a88:	00030240 	.word	0x00030240

000d4a8c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4a8c:	b508      	push	{r3, lr}
   d4a8e:	4b02      	ldr	r3, [pc, #8]	; (d4a98 <network_listen+0xc>)
   d4a90:	681b      	ldr	r3, [r3, #0]
   d4a92:	69db      	ldr	r3, [r3, #28]
   d4a94:	9301      	str	r3, [sp, #4]
   d4a96:	bd08      	pop	{r3, pc}
   d4a98:	00030240 	.word	0x00030240

000d4a9c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4a9c:	b508      	push	{r3, lr}
   d4a9e:	4b02      	ldr	r3, [pc, #8]	; (d4aa8 <network_listening+0xc>)
   d4aa0:	681b      	ldr	r3, [r3, #0]
   d4aa2:	6a1b      	ldr	r3, [r3, #32]
   d4aa4:	9301      	str	r3, [sp, #4]
   d4aa6:	bd08      	pop	{r3, pc}
   d4aa8:	00030240 	.word	0x00030240

000d4aac <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4aac:	b508      	push	{r3, lr}
   d4aae:	4b02      	ldr	r3, [pc, #8]	; (d4ab8 <network_set_listen_timeout+0xc>)
   d4ab0:	681b      	ldr	r3, [r3, #0]
   d4ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4ab4:	9301      	str	r3, [sp, #4]
   d4ab6:	bd08      	pop	{r3, pc}
   d4ab8:	00030240 	.word	0x00030240

000d4abc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4abc:	b508      	push	{r3, lr}
   d4abe:	4b02      	ldr	r3, [pc, #8]	; (d4ac8 <network_get_listen_timeout+0xc>)
   d4ac0:	681b      	ldr	r3, [r3, #0]
   d4ac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4ac4:	9301      	str	r3, [sp, #4]
   d4ac6:	bd08      	pop	{r3, pc}
   d4ac8:	00030240 	.word	0x00030240

000d4acc <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d4acc:	b508      	push	{r3, lr}
   d4ace:	4b02      	ldr	r3, [pc, #8]	; (d4ad8 <spark_function+0xc>)
   d4ad0:	681b      	ldr	r3, [r3, #0]
   d4ad2:	685b      	ldr	r3, [r3, #4]
   d4ad4:	9301      	str	r3, [sp, #4]
   d4ad6:	bd08      	pop	{r3, pc}
   d4ad8:	00030244 	.word	0x00030244

000d4adc <spark_cloud_flag_connected>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d4adc:	b508      	push	{r3, lr}
   d4ade:	4b02      	ldr	r3, [pc, #8]	; (d4ae8 <spark_cloud_flag_connected+0xc>)
   d4ae0:	681b      	ldr	r3, [r3, #0]
   d4ae2:	695b      	ldr	r3, [r3, #20]
   d4ae4:	9301      	str	r3, [sp, #4]
   d4ae6:	bd08      	pop	{r3, pc}
   d4ae8:	00030244 	.word	0x00030244

000d4aec <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d4aec:	b508      	push	{r3, lr}
   d4aee:	4b02      	ldr	r3, [pc, #8]	; (d4af8 <spark_send_event+0xc>)
   d4af0:	681b      	ldr	r3, [r3, #0]
   d4af2:	6a1b      	ldr	r3, [r3, #32]
   d4af4:	9301      	str	r3, [sp, #4]
   d4af6:	bd08      	pop	{r3, pc}
   d4af8:	00030244 	.word	0x00030244

000d4afc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4afc:	b508      	push	{r3, lr}
   d4afe:	4b02      	ldr	r3, [pc, #8]	; (d4b08 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4b00:	681b      	ldr	r3, [r3, #0]
   d4b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4b04:	9301      	str	r3, [sp, #4]
   d4b06:	bd08      	pop	{r3, pc}
   d4b08:	00030244 	.word	0x00030244

000d4b0c <spark_publish_vitals>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
   d4b0c:	b508      	push	{r3, lr}
   d4b0e:	4b02      	ldr	r3, [pc, #8]	; (d4b18 <spark_publish_vitals+0xc>)
   d4b10:	681b      	ldr	r3, [r3, #0]
   d4b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4b14:	9301      	str	r3, [sp, #4]
   d4b16:	bd08      	pop	{r3, pc}
   d4b18:	00030244 	.word	0x00030244

000d4b1c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4b1c:	b508      	push	{r3, lr}
   d4b1e:	4b02      	ldr	r3, [pc, #8]	; (d4b28 <malloc+0xc>)
   d4b20:	681b      	ldr	r3, [r3, #0]
   d4b22:	681b      	ldr	r3, [r3, #0]
   d4b24:	9301      	str	r3, [sp, #4]
   d4b26:	bd08      	pop	{r3, pc}
   d4b28:	0003021c 	.word	0x0003021c

000d4b2c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4b2c:	b508      	push	{r3, lr}
   d4b2e:	4b02      	ldr	r3, [pc, #8]	; (d4b38 <free+0xc>)
   d4b30:	681b      	ldr	r3, [r3, #0]
   d4b32:	685b      	ldr	r3, [r3, #4]
   d4b34:	9301      	str	r3, [sp, #4]
   d4b36:	bd08      	pop	{r3, pc}
   d4b38:	0003021c 	.word	0x0003021c

000d4b3c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4b3c:	b508      	push	{r3, lr}
   d4b3e:	4b02      	ldr	r3, [pc, #8]	; (d4b48 <realloc+0xc>)
   d4b40:	681b      	ldr	r3, [r3, #0]
   d4b42:	689b      	ldr	r3, [r3, #8]
   d4b44:	9301      	str	r3, [sp, #4]
   d4b46:	bd08      	pop	{r3, pc}
   d4b48:	0003021c 	.word	0x0003021c

000d4b4c <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4b4c:	b508      	push	{r3, lr}
   d4b4e:	4b02      	ldr	r3, [pc, #8]	; (d4b58 <vsnprintf+0xc>)
   d4b50:	681b      	ldr	r3, [r3, #0]
   d4b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4b54:	9301      	str	r3, [sp, #4]
   d4b56:	bd08      	pop	{r3, pc}
   d4b58:	0003021c 	.word	0x0003021c

000d4b5c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4b5c:	b508      	push	{r3, lr}
   d4b5e:	4b02      	ldr	r3, [pc, #8]	; (d4b68 <abort+0xc>)
   d4b60:	681b      	ldr	r3, [r3, #0]
   d4b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4b64:	9301      	str	r3, [sp, #4]
   d4b66:	bd08      	pop	{r3, pc}
   d4b68:	0003021c 	.word	0x0003021c

000d4b6c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d4b6c:	b508      	push	{r3, lr}
   d4b6e:	4b02      	ldr	r3, [pc, #8]	; (d4b78 <_malloc_r+0xc>)
   d4b70:	681b      	ldr	r3, [r3, #0]
   d4b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4b74:	9301      	str	r3, [sp, #4]
   d4b76:	bd08      	pop	{r3, pc}
   d4b78:	0003021c 	.word	0x0003021c

000d4b7c <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d4b7c:	b508      	push	{r3, lr}
   d4b7e:	4b02      	ldr	r3, [pc, #8]	; (d4b88 <newlib_impure_ptr_callback+0xc>)
   d4b80:	681b      	ldr	r3, [r3, #0]
   d4b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4b84:	9301      	str	r3, [sp, #4]
   d4b86:	bd08      	pop	{r3, pc}
   d4b88:	0003021c 	.word	0x0003021c

000d4b8c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4b8c:	2200      	movs	r2, #0
   d4b8e:	6840      	ldr	r0, [r0, #4]
   d4b90:	4611      	mov	r1, r2
   d4b92:	f7ff bf83 	b.w	d4a9c <network_listening>

000d4b96 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d4b96:	2200      	movs	r2, #0
   d4b98:	6840      	ldr	r0, [r0, #4]
   d4b9a:	4611      	mov	r1, r2
   d4b9c:	f7ff bf8e 	b.w	d4abc <network_get_listen_timeout>

000d4ba0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d4ba0:	6840      	ldr	r0, [r0, #4]
   d4ba2:	2200      	movs	r2, #0
   d4ba4:	f7ff bf82 	b.w	d4aac <network_set_listen_timeout>

000d4ba8 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d4ba8:	6840      	ldr	r0, [r0, #4]
   d4baa:	2200      	movs	r2, #0
   d4bac:	f081 0101 	eor.w	r1, r1, #1
   d4bb0:	f7ff bf6c 	b.w	d4a8c <network_listen>

000d4bb4 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d4bb4:	2300      	movs	r3, #0
   d4bb6:	6840      	ldr	r0, [r0, #4]
   d4bb8:	461a      	mov	r2, r3
   d4bba:	4619      	mov	r1, r3
   d4bbc:	f7ff bf5e 	b.w	d4a7c <network_off>

000d4bc0 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d4bc0:	2300      	movs	r3, #0
   d4bc2:	6840      	ldr	r0, [r0, #4]
   d4bc4:	461a      	mov	r2, r3
   d4bc6:	4619      	mov	r1, r3
   d4bc8:	f7ff bf50 	b.w	d4a6c <network_on>

000d4bcc <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4bcc:	2200      	movs	r2, #0
   d4bce:	6840      	ldr	r0, [r0, #4]
   d4bd0:	4611      	mov	r1, r2
   d4bd2:	f7ff bf43 	b.w	d4a5c <network_ready>

000d4bd6 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d4bd6:	2200      	movs	r2, #0
   d4bd8:	6840      	ldr	r0, [r0, #4]
   d4bda:	4611      	mov	r1, r2
   d4bdc:	f7ff bf2e 	b.w	d4a3c <network_connecting>

000d4be0 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4be0:	6840      	ldr	r0, [r0, #4]
   d4be2:	2200      	movs	r2, #0
   d4be4:	2102      	movs	r1, #2
   d4be6:	f7ff bf31 	b.w	d4a4c <network_disconnect>

000d4bea <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d4bea:	2300      	movs	r3, #0
   d4bec:	6840      	ldr	r0, [r0, #4]
   d4bee:	461a      	mov	r2, r3
   d4bf0:	f7ff bf1c 	b.w	d4a2c <network_connect>

000d4bf4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4bf4:	4b02      	ldr	r3, [pc, #8]	; (d4c00 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4bf6:	2203      	movs	r2, #3
   d4bf8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4bfa:	4a02      	ldr	r2, [pc, #8]	; (d4c04 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4bfc:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d4bfe:	4770      	bx	lr
   d4c00:	2003e67c 	.word	0x2003e67c
   d4c04:	000d7508 	.word	0x000d7508

000d4c08 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d4c08:	b510      	push	{r4, lr}
   d4c0a:	4604      	mov	r4, r0
   d4c0c:	4608      	mov	r0, r1
{
    _spi = spi;
   d4c0e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d4c10:	f7ff fe60 	bl	d48d4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d4c14:	2300      	movs	r3, #0
   d4c16:	6063      	str	r3, [r4, #4]
}
   d4c18:	4620      	mov	r0, r4
   d4c1a:	bd10      	pop	{r4, pc}

000d4c1c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d4c1c:	b510      	push	{r4, lr}
   d4c1e:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d4c20:	6800      	ldr	r0, [r0, #0]
   d4c22:	b118      	cbz	r0, d4c2c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d4c24:	f7ff ff82 	bl	d4b2c <free>
            wakeupSource_ = nullptr;
   d4c28:	2300      	movs	r3, #0
   d4c2a:	6023      	str	r3, [r4, #0]
        }
    }
   d4c2c:	bd10      	pop	{r4, pc}

000d4c2e <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4c2e:	b510      	push	{r4, lr}
   d4c30:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d4c32:	f7ff fff3 	bl	d4c1c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d4c36:	4620      	mov	r0, r4
   d4c38:	bd10      	pop	{r4, pc}
	...

000d4c3c <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4c3c:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4c3e:	4b09      	ldr	r3, [pc, #36]	; (d4c64 <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d4c40:	4c09      	ldr	r4, [pc, #36]	; (d4c68 <_GLOBAL__sub_I_System+0x2c>)
   d4c42:	2202      	movs	r2, #2
   d4c44:	2000      	movs	r0, #0
   d4c46:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d4c48:	4b08      	ldr	r3, [pc, #32]	; (d4c6c <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d4c4a:	6020      	str	r0, [r4, #0]
   d4c4c:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d4c4e:	71a0      	strb	r0, [r4, #6]
   d4c50:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4c52:	f7ff febf 	bl	d49d4 <set_system_mode>
SystemClass System;
   d4c56:	4620      	mov	r0, r4
   d4c58:	4a05      	ldr	r2, [pc, #20]	; (d4c70 <_GLOBAL__sub_I_System+0x34>)
   d4c5a:	4906      	ldr	r1, [pc, #24]	; (d4c74 <_GLOBAL__sub_I_System+0x38>)
   d4c5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d4c60:	f002 ba80 	b.w	d7164 <__aeabi_atexit>
   d4c64:	2003e690 	.word	0x2003e690
   d4c68:	2003e684 	.word	0x2003e684
   d4c6c:	ffff0000 	.word	0xffff0000
   d4c70:	2003e630 	.word	0x2003e630
   d4c74:	000d4c2f 	.word	0x000d4c2f

000d4c78 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d4c78:	b510      	push	{r4, lr}
   d4c7a:	4604      	mov	r4, r0
{
	free(buffer);
   d4c7c:	6800      	ldr	r0, [r0, #0]
   d4c7e:	f7ff ff55 	bl	d4b2c <free>
}
   d4c82:	4620      	mov	r0, r4
   d4c84:	bd10      	pop	{r4, pc}

000d4c86 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d4c86:	b510      	push	{r4, lr}
   d4c88:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d4c8a:	6800      	ldr	r0, [r0, #0]
   d4c8c:	b108      	cbz	r0, d4c92 <_ZN6String10invalidateEv+0xc>
   d4c8e:	f7ff ff4d 	bl	d4b2c <free>
	buffer = NULL;
   d4c92:	2300      	movs	r3, #0
	capacity = len = 0;
   d4c94:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d4c98:	6023      	str	r3, [r4, #0]
}
   d4c9a:	bd10      	pop	{r4, pc}

000d4c9c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d4c9c:	b538      	push	{r3, r4, r5, lr}
   d4c9e:	4604      	mov	r4, r0
   d4ca0:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d4ca2:	6800      	ldr	r0, [r0, #0]
   d4ca4:	3101      	adds	r1, #1
   d4ca6:	f7ff ff49 	bl	d4b3c <realloc>
	if (newbuffer) {
   d4caa:	b110      	cbz	r0, d4cb2 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d4cac:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d4cb0:	2001      	movs	r0, #1
	}
	return 0;
}
   d4cb2:	bd38      	pop	{r3, r4, r5, pc}

000d4cb4 <_ZN6String7reserveEj>:
{
   d4cb4:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d4cb6:	6803      	ldr	r3, [r0, #0]
{
   d4cb8:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d4cba:	b123      	cbz	r3, d4cc6 <_ZN6String7reserveEj+0x12>
   d4cbc:	6843      	ldr	r3, [r0, #4]
   d4cbe:	428b      	cmp	r3, r1
   d4cc0:	d301      	bcc.n	d4cc6 <_ZN6String7reserveEj+0x12>
   d4cc2:	2001      	movs	r0, #1
}
   d4cc4:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d4cc6:	4620      	mov	r0, r4
   d4cc8:	f7ff ffe8 	bl	d4c9c <_ZN6String12changeBufferEj>
   d4ccc:	2800      	cmp	r0, #0
   d4cce:	d0f9      	beq.n	d4cc4 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d4cd0:	68a3      	ldr	r3, [r4, #8]
   d4cd2:	2b00      	cmp	r3, #0
   d4cd4:	d1f5      	bne.n	d4cc2 <_ZN6String7reserveEj+0xe>
   d4cd6:	6822      	ldr	r2, [r4, #0]
   d4cd8:	7013      	strb	r3, [r2, #0]
   d4cda:	e7f2      	b.n	d4cc2 <_ZN6String7reserveEj+0xe>

000d4cdc <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4cdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4cde:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d4ce0:	4611      	mov	r1, r2
   d4ce2:	9201      	str	r2, [sp, #4]
{
   d4ce4:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d4ce6:	f7ff ffe5 	bl	d4cb4 <_ZN6String7reserveEj>
   d4cea:	9a01      	ldr	r2, [sp, #4]
   d4cec:	b928      	cbnz	r0, d4cfa <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d4cee:	4620      	mov	r0, r4
   d4cf0:	f7ff ffc9 	bl	d4c86 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d4cf4:	4620      	mov	r0, r4
   d4cf6:	b003      	add	sp, #12
   d4cf8:	bd30      	pop	{r4, r5, pc}
	len = length;
   d4cfa:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d4cfc:	4629      	mov	r1, r5
   d4cfe:	6820      	ldr	r0, [r4, #0]
   d4d00:	f002 fa4c 	bl	d719c <memcpy>
	buffer[len] = 0;
   d4d04:	6822      	ldr	r2, [r4, #0]
   d4d06:	68a3      	ldr	r3, [r4, #8]
   d4d08:	2100      	movs	r1, #0
   d4d0a:	54d1      	strb	r1, [r2, r3]
	return *this;
   d4d0c:	e7f2      	b.n	d4cf4 <_ZN6String4copyEPKcj+0x18>

000d4d0e <_ZN6StringC1EPKc>:
	buffer = NULL;
   d4d0e:	2300      	movs	r3, #0
String::String(const char *cstr)
   d4d10:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d4d12:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d4d16:	4604      	mov	r4, r0
	len = 0;
   d4d18:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4d1a:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d4d1c:	b141      	cbz	r1, d4d30 <_ZN6StringC1EPKc+0x22>
   d4d1e:	4608      	mov	r0, r1
   d4d20:	9101      	str	r1, [sp, #4]
   d4d22:	f002 fad6 	bl	d72d2 <strlen>
   d4d26:	9901      	ldr	r1, [sp, #4]
   d4d28:	4602      	mov	r2, r0
   d4d2a:	4620      	mov	r0, r4
   d4d2c:	f7ff ffd6 	bl	d4cdc <_ZN6String4copyEPKcj>
}
   d4d30:	4620      	mov	r0, r4
   d4d32:	b002      	add	sp, #8
   d4d34:	bd10      	pop	{r4, pc}

000d4d36 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d4d36:	b538      	push	{r3, r4, r5, lr}
   d4d38:	4605      	mov	r5, r0
	if (buffer) {
   d4d3a:	6800      	ldr	r0, [r0, #0]
{
   d4d3c:	460c      	mov	r4, r1
	if (buffer) {
   d4d3e:	b168      	cbz	r0, d4d5c <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   d4d40:	686a      	ldr	r2, [r5, #4]
   d4d42:	688b      	ldr	r3, [r1, #8]
   d4d44:	429a      	cmp	r2, r3
   d4d46:	d307      	bcc.n	d4d58 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   d4d48:	6809      	ldr	r1, [r1, #0]
   d4d4a:	f002 fa9c 	bl	d7286 <strcpy>
			len = rhs.len;
   d4d4e:	68a3      	ldr	r3, [r4, #8]
   d4d50:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d4d52:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   d4d54:	60a3      	str	r3, [r4, #8]
}
   d4d56:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   d4d58:	f7ff fee8 	bl	d4b2c <free>
	buffer = rhs.buffer;
   d4d5c:	6823      	ldr	r3, [r4, #0]
   d4d5e:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d4d60:	6863      	ldr	r3, [r4, #4]
   d4d62:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d4d64:	68a3      	ldr	r3, [r4, #8]
   d4d66:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d4d68:	2300      	movs	r3, #0
	rhs.capacity = 0;
   d4d6a:	e9c4 3300 	strd	r3, r3, [r4]
   d4d6e:	e7f1      	b.n	d4d54 <_ZN6String4moveERS_+0x1e>

000d4d70 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   d4d70:	b510      	push	{r4, lr}
	buffer = NULL;
   d4d72:	2300      	movs	r3, #0
	capacity = 0;
   d4d74:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   d4d78:	4604      	mov	r4, r0
	len = 0;
   d4d7a:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4d7c:	7303      	strb	r3, [r0, #12]
	move(rval);
   d4d7e:	f7ff ffda 	bl	d4d36 <_ZN6String4moveERS_>
}
   d4d82:	4620      	mov	r0, r4
   d4d84:	bd10      	pop	{r4, pc}

000d4d86 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d4d86:	4288      	cmp	r0, r1
{
   d4d88:	b510      	push	{r4, lr}
   d4d8a:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d4d8c:	d005      	beq.n	d4d9a <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d4d8e:	680b      	ldr	r3, [r1, #0]
   d4d90:	b12b      	cbz	r3, d4d9e <_ZN6StringaSERKS_+0x18>
   d4d92:	688a      	ldr	r2, [r1, #8]
   d4d94:	4619      	mov	r1, r3
   d4d96:	f7ff ffa1 	bl	d4cdc <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d4d9a:	4620      	mov	r0, r4
   d4d9c:	bd10      	pop	{r4, pc}
	else invalidate();
   d4d9e:	f7ff ff72 	bl	d4c86 <_ZN6String10invalidateEv>
   d4da2:	e7fa      	b.n	d4d9a <_ZN6StringaSERKS_+0x14>

000d4da4 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d4da4:	b510      	push	{r4, lr}
	buffer = NULL;
   d4da6:	2300      	movs	r3, #0
String::String(const String &value)
   d4da8:	4604      	mov	r4, r0
	capacity = 0;
   d4daa:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d4dae:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4db0:	7303      	strb	r3, [r0, #12]
	*this = value;
   d4db2:	f7ff ffe8 	bl	d4d86 <_ZN6StringaSERKS_>
}
   d4db6:	4620      	mov	r0, r4
   d4db8:	bd10      	pop	{r4, pc}

000d4dba <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d4dba:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d4dbc:	6882      	ldr	r2, [r0, #8]
   d4dbe:	b93a      	cbnz	r2, d4dd0 <_ZNK6String6equalsEPKc+0x16>
   d4dc0:	b121      	cbz	r1, d4dcc <_ZNK6String6equalsEPKc+0x12>
   d4dc2:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   d4dc4:	fab0 f080 	clz	r0, r0
   d4dc8:	0940      	lsrs	r0, r0, #5
   d4dca:	e000      	b.n	d4dce <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d4dcc:	2001      	movs	r0, #1
}
   d4dce:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d4dd0:	6800      	ldr	r0, [r0, #0]
   d4dd2:	b909      	cbnz	r1, d4dd8 <_ZNK6String6equalsEPKc+0x1e>
   d4dd4:	7800      	ldrb	r0, [r0, #0]
   d4dd6:	e7f5      	b.n	d4dc4 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   d4dd8:	f002 fa4b 	bl	d7272 <strcmp>
   d4ddc:	e7f2      	b.n	d4dc4 <_ZNK6String6equalsEPKc+0xa>

000d4dde <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4dde:	b510      	push	{r4, lr}
   d4de0:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4de2:	6800      	ldr	r0, [r0, #0]
   d4de4:	b108      	cbz	r0, d4dea <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4de6:	f7ff fcc5 	bl	d4774 <os_mutex_recursive_destroy>
    }
   d4dea:	4620      	mov	r0, r4
   d4dec:	bd10      	pop	{r4, pc}

000d4dee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d4dee:	680b      	ldr	r3, [r1, #0]
   d4df0:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d4df2:	b113      	cbz	r3, d4dfa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d4df4:	685a      	ldr	r2, [r3, #4]
   d4df6:	3201      	adds	r2, #1
   d4df8:	605a      	str	r2, [r3, #4]
      }
   d4dfa:	4770      	bx	lr

000d4dfc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4dfc:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d4dfe:	4c06      	ldr	r4, [pc, #24]	; (d4e18 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4e00:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d4e02:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d4e04:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d4e06:	f7ff fcad 	bl	d4764 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d4e0a:	4620      	mov	r0, r4
   d4e0c:	4a03      	ldr	r2, [pc, #12]	; (d4e1c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d4e0e:	4904      	ldr	r1, [pc, #16]	; (d4e20 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d4e10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d4e14:	f002 b9a6 	b.w	d7164 <__aeabi_atexit>
   d4e18:	2003e694 	.word	0x2003e694
   d4e1c:	2003e630 	.word	0x2003e630
   d4e20:	000d4ddf 	.word	0x000d4ddf

000d4e24 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4e26:	4606      	mov	r6, r0
   d4e28:	460d      	mov	r5, r1
  size_t n = 0;
   d4e2a:	188f      	adds	r7, r1, r2
   d4e2c:	2400      	movs	r4, #0
  while (size--) {
   d4e2e:	42bd      	cmp	r5, r7
   d4e30:	d00c      	beq.n	d4e4c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4e32:	6833      	ldr	r3, [r6, #0]
   d4e34:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4e38:	689b      	ldr	r3, [r3, #8]
   d4e3a:	4630      	mov	r0, r6
   d4e3c:	4798      	blx	r3
     if (chunk>=0)
   d4e3e:	1e03      	subs	r3, r0, #0
   d4e40:	db01      	blt.n	d4e46 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4e42:	441c      	add	r4, r3
  while (size--) {
   d4e44:	e7f3      	b.n	d4e2e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4e46:	2c00      	cmp	r4, #0
   d4e48:	bf08      	it	eq
   d4e4a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d4e4c:	4620      	mov	r0, r4
   d4e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4e50 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4e50:	b513      	push	{r0, r1, r4, lr}
   d4e52:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d4e54:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d4e56:	b159      	cbz	r1, d4e70 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d4e58:	9101      	str	r1, [sp, #4]
   d4e5a:	f002 fa3a 	bl	d72d2 <strlen>
   d4e5e:	6823      	ldr	r3, [r4, #0]
   d4e60:	9901      	ldr	r1, [sp, #4]
   d4e62:	68db      	ldr	r3, [r3, #12]
   d4e64:	4602      	mov	r2, r0
   d4e66:	4620      	mov	r0, r4
    }
   d4e68:	b002      	add	sp, #8
   d4e6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d4e6e:	4718      	bx	r3
    }
   d4e70:	b002      	add	sp, #8
   d4e72:	bd10      	pop	{r4, pc}

000d4e74 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4e74:	6803      	ldr	r3, [r0, #0]
   d4e76:	689b      	ldr	r3, [r3, #8]
   d4e78:	4718      	bx	r3

000d4e7a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4e7a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d4e7c:	210d      	movs	r1, #13
{
   d4e7e:	4605      	mov	r5, r0
  size_t n = print('\r');
   d4e80:	f7ff fff8 	bl	d4e74 <_ZN5Print5printEc>
  n += print('\n');
   d4e84:	210a      	movs	r1, #10
  size_t n = print('\r');
   d4e86:	4604      	mov	r4, r0
  n += print('\n');
   d4e88:	4628      	mov	r0, r5
   d4e8a:	f7ff fff3 	bl	d4e74 <_ZN5Print5printEc>
  return n;
}
   d4e8e:	4420      	add	r0, r4
   d4e90:	bd38      	pop	{r3, r4, r5, pc}

000d4e92 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4e92:	b530      	push	{r4, r5, lr}
   d4e94:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4e96:	2300      	movs	r3, #0
   d4e98:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4e9c:	2a01      	cmp	r2, #1
   d4e9e:	bf98      	it	ls
   d4ea0:	220a      	movls	r2, #10
   d4ea2:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d4ea4:	460d      	mov	r5, r1
   d4ea6:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d4eaa:	fb01 5312 	mls	r3, r1, r2, r5
   d4eae:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4eb2:	2b09      	cmp	r3, #9
   d4eb4:	bf94      	ite	ls
   d4eb6:	3330      	addls	r3, #48	; 0x30
   d4eb8:	3337      	addhi	r3, #55	; 0x37
   d4eba:	b2db      	uxtb	r3, r3
  } while(n);
   d4ebc:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4ebe:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d4ec2:	d9ef      	bls.n	d4ea4 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d4ec4:	4621      	mov	r1, r4
   d4ec6:	f7ff ffc3 	bl	d4e50 <_ZN5Print5writeEPKc>
}
   d4eca:	b00b      	add	sp, #44	; 0x2c
   d4ecc:	bd30      	pop	{r4, r5, pc}

000d4ece <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d4ece:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4ed2:	b086      	sub	sp, #24
   d4ed4:	af00      	add	r7, sp, #0
   d4ed6:	4605      	mov	r5, r0
   d4ed8:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d4eda:	1d38      	adds	r0, r7, #4
   d4edc:	2114      	movs	r1, #20
{
   d4ede:	4614      	mov	r4, r2
    va_copy(args2, args);
   d4ee0:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d4ee2:	f7ff fe33 	bl	d4b4c <vsnprintf>

    if (n<bufsize)
   d4ee6:	2813      	cmp	r0, #19
   d4ee8:	d80e      	bhi.n	d4f08 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d4eea:	1d39      	adds	r1, r7, #4
   d4eec:	4628      	mov	r0, r5
   d4eee:	f7ff ffaf 	bl	d4e50 <_ZN5Print5writeEPKc>
   d4ef2:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d4ef4:	b11e      	cbz	r6, d4efe <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d4ef6:	4628      	mov	r0, r5
   d4ef8:	f7ff ffbf 	bl	d4e7a <_ZN5Print7printlnEv>
   d4efc:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d4efe:	4620      	mov	r0, r4
   d4f00:	3718      	adds	r7, #24
   d4f02:	46bd      	mov	sp, r7
   d4f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d4f08:	f100 0308 	add.w	r3, r0, #8
   d4f0c:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d4f10:	46e8      	mov	r8, sp
        char bigger[n+1];
   d4f12:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d4f16:	4622      	mov	r2, r4
   d4f18:	1c41      	adds	r1, r0, #1
   d4f1a:	683b      	ldr	r3, [r7, #0]
   d4f1c:	4668      	mov	r0, sp
   d4f1e:	f7ff fe15 	bl	d4b4c <vsnprintf>
  return write(str);
   d4f22:	4669      	mov	r1, sp
   d4f24:	4628      	mov	r0, r5
   d4f26:	f7ff ff93 	bl	d4e50 <_ZN5Print5writeEPKc>
   d4f2a:	4604      	mov	r4, r0
   d4f2c:	46c5      	mov	sp, r8
   d4f2e:	e7e1      	b.n	d4ef4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d4f30 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   d4f30:	6880      	ldr	r0, [r0, #8]
   d4f32:	6803      	ldr	r3, [r0, #0]
   d4f34:	68db      	ldr	r3, [r3, #12]
   d4f36:	4718      	bx	r3

000d4f38 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   d4f38:	4770      	bx	lr

000d4f3a <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   d4f3a:	4608      	mov	r0, r1
   d4f3c:	b111      	cbz	r1, d4f44 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   d4f3e:	680b      	ldr	r3, [r1, #0]
   d4f40:	685b      	ldr	r3, [r3, #4]
   d4f42:	4718      	bx	r3
}
   d4f44:	4770      	bx	lr

000d4f46 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   d4f46:	4770      	bx	lr

000d4f48 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   d4f48:	4770      	bx	lr

000d4f4a <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   d4f4a:	4770      	bx	lr

000d4f4c <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
    return s;
}
#endif

// Iterates over subcategory names separated by '.' character
const char* nextSubcategoryName(const char* &category, size_t &size) {
   d4f4c:	b538      	push	{r3, r4, r5, lr}
   d4f4e:	4604      	mov	r4, r0
   d4f50:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   d4f52:	6800      	ldr	r0, [r0, #0]
   d4f54:	212e      	movs	r1, #46	; 0x2e
   d4f56:	f002 f982 	bl	d725e <strchrnul>
    size = s - category;
   d4f5a:	6823      	ldr	r3, [r4, #0]
   d4f5c:	1ac3      	subs	r3, r0, r3
   d4f5e:	602b      	str	r3, [r5, #0]
    if (size) {
   d4f60:	b123      	cbz	r3, d4f6c <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   d4f62:	7803      	ldrb	r3, [r0, #0]
   d4f64:	b103      	cbz	r3, d4f68 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   d4f66:	3001      	adds	r0, #1
   d4f68:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d4f6a:	6020      	str	r0, [r4, #0]
        }
        std::swap(s, category);
        return s;
    }
    return nullptr;
}
   d4f6c:	4618      	mov	r0, r3
   d4f6e:	bd38      	pop	{r3, r4, r5, pc}

000d4f70 <_ZN5spark16JSONStreamWriterD0Ev>:
   d4f70:	b510      	push	{r4, lr}
   d4f72:	210c      	movs	r1, #12
   d4f74:	4604      	mov	r4, r0
   d4f76:	f002 f8fa 	bl	d716e <_ZdlPvj>
   d4f7a:	4620      	mov	r0, r4
   d4f7c:	bd10      	pop	{r4, pc}

000d4f7e <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   d4f7e:	b510      	push	{r4, lr}
   d4f80:	2104      	movs	r1, #4
   d4f82:	4604      	mov	r4, r0
   d4f84:	f002 f8f3 	bl	d716e <_ZdlPvj>
   d4f88:	4620      	mov	r0, r4
   d4f8a:	bd10      	pop	{r4, pc}

000d4f8c <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   d4f8c:	b510      	push	{r4, lr}
   d4f8e:	2104      	movs	r1, #4
   d4f90:	4604      	mov	r4, r0
   d4f92:	f002 f8ec 	bl	d716e <_ZdlPvj>
   d4f96:	4620      	mov	r0, r4
   d4f98:	bd10      	pop	{r4, pc}

000d4f9a <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   d4f9a:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   d4f9c:	f002 f969 	bl	d7272 <strcmp>
}
   d4fa0:	fab0 f080 	clz	r0, r0
   d4fa4:	0940      	lsrs	r0, r0, #5
   d4fa6:	bd08      	pop	{r3, pc}

000d4fa8 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   d4fa8:	b510      	push	{r4, lr}
   d4faa:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   d4fac:	f001 fbd6 	bl	d675c <_Z16_fetch_usbserialv>
   d4fb0:	4284      	cmp	r4, r0
   d4fb2:	d010      	beq.n	d4fd6 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   d4fb4:	f001 fcca 	bl	d694c <_Z22__fetch_global_Serial1v>
   d4fb8:	4284      	cmp	r4, r0
   d4fba:	d105      	bne.n	d4fc8 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   d4fbc:	f001 fcc6 	bl	d694c <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   d4fc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   d4fc4:	f001 bcbf 	b.w	d6946 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   d4fc8:	b12c      	cbz	r4, d4fd6 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   d4fca:	6823      	ldr	r3, [r4, #0]
   d4fcc:	4620      	mov	r0, r4
   d4fce:	685b      	ldr	r3, [r3, #4]
}
   d4fd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4fd4:	4718      	bx	r3
   d4fd6:	bd10      	pop	{r4, pc}

000d4fd8 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d4fd8:	b513      	push	{r0, r1, r4, lr}
   d4fda:	4604      	mov	r4, r0
    return value(val, strlen(val));
   d4fdc:	4608      	mov	r0, r1
   d4fde:	9101      	str	r1, [sp, #4]
   d4fe0:	f002 f977 	bl	d72d2 <strlen>
   d4fe4:	9901      	ldr	r1, [sp, #4]
   d4fe6:	4602      	mov	r2, r0
   d4fe8:	4620      	mov	r0, r4
}
   d4fea:	b002      	add	sp, #8
   d4fec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   d4ff0:	f002 b800 	b.w	d6ff4 <_ZN5spark10JSONWriter5valueEPKcj>

000d4ff4 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   d4ff4:	b513      	push	{r0, r1, r4, lr}
   d4ff6:	4604      	mov	r4, r0
    write(str, strlen(str));
   d4ff8:	4608      	mov	r0, r1
   d4ffa:	9101      	str	r1, [sp, #4]
   d4ffc:	f002 f969 	bl	d72d2 <strlen>
   d5000:	6823      	ldr	r3, [r4, #0]
   d5002:	9901      	ldr	r1, [sp, #4]
   d5004:	68db      	ldr	r3, [r3, #12]
   d5006:	4602      	mov	r2, r0
   d5008:	4620      	mov	r0, r4
}
   d500a:	b002      	add	sp, #8
   d500c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   d5010:	4718      	bx	r3

000d5012 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   d5012:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d5014:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   d5016:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d501a:	68db      	ldr	r3, [r3, #12]
   d501c:	2201      	movs	r2, #1
   d501e:	f10d 0107 	add.w	r1, sp, #7
   d5022:	4798      	blx	r3
}
   d5024:	b003      	add	sp, #12
   d5026:	f85d fb04 	ldr.w	pc, [sp], #4

000d502a <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   d502a:	b40e      	push	{r1, r2, r3}
   d502c:	b503      	push	{r0, r1, lr}
   d502e:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   d5030:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   d5032:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   d5036:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   d5038:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   d503a:	f7ff ff48 	bl	d4ece <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   d503e:	b002      	add	sp, #8
   d5040:	f85d eb04 	ldr.w	lr, [sp], #4
   d5044:	b003      	add	sp, #12
   d5046:	4770      	bx	lr

000d5048 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d5048:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   d504c:	e9d0 9500 	ldrd	r9, r5, [r0]
   d5050:	f04f 0814 	mov.w	r8, #20
   d5054:	fb08 f505 	mul.w	r5, r8, r5
   d5058:	9300      	str	r3, [sp, #0]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d505a:	10ab      	asrs	r3, r5, #2
   d505c:	4d18      	ldr	r5, [pc, #96]	; (d50c0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   d505e:	4617      	mov	r7, r2
   d5060:	435d      	muls	r5, r3
   d5062:	464c      	mov	r4, r9
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   d5064:	2d00      	cmp	r5, #0
   d5066:	dd23      	ble.n	d50b0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x68>
	{
	  _DistanceType __half = __len >> 1;
   d5068:	106e      	asrs	r6, r5, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   d506a:	fb08 f006 	mul.w	r0, r8, r6
   d506e:	eb04 0a00 	add.w	sl, r4, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   d5072:	463a      	mov	r2, r7
   d5074:	f8ba b004 	ldrh.w	fp, [sl, #4]
   d5078:	5820      	ldr	r0, [r4, r0]
   d507a:	9101      	str	r1, [sp, #4]
   d507c:	455f      	cmp	r7, fp
   d507e:	bf28      	it	cs
   d5080:	465a      	movcs	r2, fp
   d5082:	f002 f92e 	bl	d72e2 <strncmp>
                if (cmp == 0) {
   d5086:	9901      	ldr	r1, [sp, #4]
   d5088:	2301      	movs	r3, #1
   d508a:	b978      	cbnz	r0, d50ac <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
                    if (node.size == value.second) { // Lengths are equal
   d508c:	455f      	cmp	r7, fp
   d508e:	d103      	bne.n	d5098 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d5090:	9a00      	ldr	r2, [sp, #0]
   d5092:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d5094:	4635      	mov	r5, r6
   d5096:	e7e5      	b.n	d5064 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
                    return node.size < value.second;
   d5098:	bf8c      	ite	hi
   d509a:	2001      	movhi	r0, #1
   d509c:	2000      	movls	r0, #0
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   d509e:	2800      	cmp	r0, #0
   d50a0:	d0f8      	beq.n	d5094 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   d50a2:	1bae      	subs	r6, r5, r6
	      ++__first;
   d50a4:	f10a 0414 	add.w	r4, sl, #20
	      __len = __len - __half - 1;
   d50a8:	3e01      	subs	r6, #1
   d50aa:	e7f3      	b.n	d5094 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
                return cmp < 0;
   d50ac:	0fc0      	lsrs	r0, r0, #31
   d50ae:	e7f6      	b.n	d509e <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
      return __last - __first;
   d50b0:	eba4 0409 	sub.w	r4, r4, r9
}
   d50b4:	4802      	ldr	r0, [pc, #8]	; (d50c0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   d50b6:	10a4      	asrs	r4, r4, #2
   d50b8:	4360      	muls	r0, r4
   d50ba:	b003      	add	sp, #12
   d50bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d50c0:	cccccccd 	.word	0xcccccccd

000d50c4 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   d50c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   d50c6:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   d50c8:	7e06      	ldrb	r6, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   d50ca:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   d50cc:	b30b      	cbz	r3, d5112 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
   d50ce:	b301      	cbz	r1, d5112 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
        size_t size = 0; // Name length
   d50d0:	2500      	movs	r5, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   d50d2:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   d50d6:	9503      	str	r5, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   d50d8:	a903      	add	r1, sp, #12
   d50da:	a801      	add	r0, sp, #4
   d50dc:	f7ff ff36 	bl	d4f4c <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d50e0:	4601      	mov	r1, r0
   d50e2:	b1b0      	cbz	r0, d5112 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
            const int index = nodeIndex(*pNodes, name, size, found);
   d50e4:	f10d 030b 	add.w	r3, sp, #11
   d50e8:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   d50ea:	f88d 500b 	strb.w	r5, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   d50ee:	4620      	mov	r0, r4
   d50f0:	f7ff ffaa 	bl	d5048 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   d50f4:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d50f8:	b15b      	cbz	r3, d5112 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
    return data_[i];
   d50fa:	6824      	ldr	r4, [r4, #0]
   d50fc:	2314      	movs	r3, #20
   d50fe:	fb03 4000 	mla	r0, r3, r0, r4
            pNodes = &node.nodes;
   d5102:	f100 0408 	add.w	r4, r0, #8
            if (node.level >= 0) {
   d5106:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
   d510a:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   d510c:	bfa8      	it	ge
   d510e:	b2de      	uxtbge	r6, r3
        while ((name = nextSubcategoryName(category, size))) {
   d5110:	e7e2      	b.n	d50d8 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   d5112:	4630      	mov	r0, r6
   d5114:	b004      	add	sp, #16
   d5116:	bd70      	pop	{r4, r5, r6, pc}

000d5118 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   d5118:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   d511a:	4c0a      	ldr	r4, [pc, #40]	; (d5144 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   d511c:	7823      	ldrb	r3, [r4, #0]
   d511e:	f3bf 8f5b 	dmb	ish
   d5122:	07db      	lsls	r3, r3, #31
   d5124:	d40b      	bmi.n	d513e <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x26>
   d5126:	4620      	mov	r0, r4
   d5128:	f7fe ffc4 	bl	d40b4 <__cxa_guard_acquire>
   d512c:	b138      	cbz	r0, d513e <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x26>
   d512e:	4620      	mov	r0, r4
   d5130:	f7fe ffc5 	bl	d40be <__cxa_guard_release>
   d5134:	4a04      	ldr	r2, [pc, #16]	; (d5148 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   d5136:	4905      	ldr	r1, [pc, #20]	; (d514c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d5138:	4805      	ldr	r0, [pc, #20]	; (d5150 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x38>)
   d513a:	f002 f813 	bl	d7164 <__aeabi_atexit>
}
   d513e:	4804      	ldr	r0, [pc, #16]	; (d5150 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x38>)
   d5140:	bd10      	pop	{r4, pc}
   d5142:	bf00      	nop
   d5144:	2003e69c 	.word	0x2003e69c
   d5148:	2003e630 	.word	0x2003e630
   d514c:	000d4f49 	.word	0x000d4f49
   d5150:	2003e5c0 	.word	0x2003e5c0

000d5154 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   d5154:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   d5156:	4c0a      	ldr	r4, [pc, #40]	; (d5180 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   d5158:	7823      	ldrb	r3, [r4, #0]
   d515a:	f3bf 8f5b 	dmb	ish
   d515e:	07db      	lsls	r3, r3, #31
   d5160:	d40b      	bmi.n	d517a <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x26>
   d5162:	4620      	mov	r0, r4
   d5164:	f7fe ffa6 	bl	d40b4 <__cxa_guard_acquire>
   d5168:	b138      	cbz	r0, d517a <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x26>
   d516a:	4620      	mov	r0, r4
   d516c:	f7fe ffa7 	bl	d40be <__cxa_guard_release>
   d5170:	4a04      	ldr	r2, [pc, #16]	; (d5184 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   d5172:	4905      	ldr	r1, [pc, #20]	; (d5188 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d5174:	4805      	ldr	r0, [pc, #20]	; (d518c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x38>)
   d5176:	f001 fff5 	bl	d7164 <__aeabi_atexit>
    return &factory;
}
   d517a:	4804      	ldr	r0, [pc, #16]	; (d518c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x38>)
   d517c:	bd10      	pop	{r4, pc}
   d517e:	bf00      	nop
   d5180:	2003e6a0 	.word	0x2003e6a0
   d5184:	2003e630 	.word	0x2003e630
   d5188:	000d4f47 	.word	0x000d4f47
   d518c:	2003e5c4 	.word	0x2003e5c4

000d5190 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   d5190:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   d5192:	2500      	movs	r5, #0
   d5194:	4604      	mov	r4, r0
   d5196:	e9c0 5500 	strd	r5, r5, [r0]
   d519a:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d519e:	6085      	str	r5, [r0, #8]
   d51a0:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   d51a2:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   d51a6:	f7ff fadd 	bl	d4764 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   d51aa:	f7ff ffb5 	bl	d5118 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   d51ae:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d51b0:	f7ff ffd0 	bl	d5154 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   d51b4:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d51b6:	6220      	str	r0, [r4, #32]
}
   d51b8:	4620      	mov	r0, r4
   d51ba:	bd38      	pop	{r3, r4, r5, pc}

000d51bc <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   d51bc:	b510      	push	{r4, lr}
    static LogManager mgr;
   d51be:	4c0b      	ldr	r4, [pc, #44]	; (d51ec <_ZN5spark10LogManager8instanceEv+0x30>)
   d51c0:	7823      	ldrb	r3, [r4, #0]
   d51c2:	f3bf 8f5b 	dmb	ish
   d51c6:	07db      	lsls	r3, r3, #31
   d51c8:	d40e      	bmi.n	d51e8 <_ZN5spark10LogManager8instanceEv+0x2c>
   d51ca:	4620      	mov	r0, r4
   d51cc:	f7fe ff72 	bl	d40b4 <__cxa_guard_acquire>
   d51d0:	b150      	cbz	r0, d51e8 <_ZN5spark10LogManager8instanceEv+0x2c>
   d51d2:	4807      	ldr	r0, [pc, #28]	; (d51f0 <_ZN5spark10LogManager8instanceEv+0x34>)
   d51d4:	f7ff ffdc 	bl	d5190 <_ZN5spark10LogManagerC1Ev>
   d51d8:	4620      	mov	r0, r4
   d51da:	f7fe ff70 	bl	d40be <__cxa_guard_release>
   d51de:	4a05      	ldr	r2, [pc, #20]	; (d51f4 <_ZN5spark10LogManager8instanceEv+0x38>)
   d51e0:	4905      	ldr	r1, [pc, #20]	; (d51f8 <_ZN5spark10LogManager8instanceEv+0x3c>)
   d51e2:	4803      	ldr	r0, [pc, #12]	; (d51f0 <_ZN5spark10LogManager8instanceEv+0x34>)
   d51e4:	f001 ffbe 	bl	d7164 <__aeabi_atexit>
    return &mgr;
}
   d51e8:	4801      	ldr	r0, [pc, #4]	; (d51f0 <_ZN5spark10LogManager8instanceEv+0x34>)
   d51ea:	bd10      	pop	{r4, pc}
   d51ec:	2003e698 	.word	0x2003e698
   d51f0:	2003e6a8 	.word	0x2003e6a8
   d51f4:	2003e630 	.word	0x2003e630
   d51f8:	000d5651 	.word	0x000d5651

000d51fc <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   d51fc:	4a02      	ldr	r2, [pc, #8]	; (d5208 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   d51fe:	4903      	ldr	r1, [pc, #12]	; (d520c <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   d5200:	4803      	ldr	r0, [pc, #12]	; (d5210 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   d5202:	2300      	movs	r3, #0
   d5204:	f7ff bbde 	b.w	d49c4 <log_set_callbacks>
   d5208:	000d552d 	.word	0x000d552d
   d520c:	000d54b9 	.word	0x000d54b9
   d5210:	000d5439 	.word	0x000d5439

000d5214 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   d5214:	2300      	movs	r3, #0
   d5216:	461a      	mov	r2, r3
   d5218:	4619      	mov	r1, r3
   d521a:	4618      	mov	r0, r3
   d521c:	f7ff bbd2 	b.w	d49c4 <log_set_callbacks>

000d5220 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d5220:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   d5222:	690d      	ldr	r5, [r1, #16]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5224:	f851 3b04 	ldr.w	r3, [r1], #4
   d5228:	9300      	str	r3, [sp, #0]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d522a:	4604      	mov	r4, r0
   d522c:	a801      	add	r0, sp, #4
   d522e:	f7ff fdde 	bl	d4dee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONValue(v_, d_);
   d5232:	466a      	mov	r2, sp
   d5234:	4629      	mov	r1, r5
   d5236:	4620      	mov	r0, r4
   d5238:	f001 fd86 	bl	d6d48 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d523c:	a801      	add	r0, sp, #4
   d523e:	f7ff f829 	bl	d4294 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5242:	4620      	mov	r0, r4
   d5244:	b003      	add	sp, #12
   d5246:	bd30      	pop	{r4, r5, pc}

000d5248 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d5248:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   d524a:	688d      	ldr	r5, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d524c:	f851 3b04 	ldr.w	r3, [r1], #4
   d5250:	9300      	str	r3, [sp, #0]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d5252:	4604      	mov	r4, r0
   d5254:	a801      	add	r0, sp, #4
   d5256:	f7ff fdca 	bl	d4dee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        JSONObjectIterator(value.t_, value.d_) {
   d525a:	466a      	mov	r2, sp
   d525c:	4629      	mov	r1, r5
   d525e:	4620      	mov	r0, r4
   d5260:	f001 fdee 	bl	d6e40 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d5264:	a801      	add	r0, sp, #4
   d5266:	f7ff f815 	bl	d4294 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d526a:	4620      	mov	r0, r4
   d526c:	b003      	add	sp, #12
   d526e:	bd30      	pop	{r4, r5, pc}

000d5270 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d5270:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   d5272:	68cd      	ldr	r5, [r1, #12]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5274:	f851 3b04 	ldr.w	r3, [r1], #4
   d5278:	9300      	str	r3, [sp, #0]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d527a:	4604      	mov	r4, r0
   d527c:	a801      	add	r0, sp, #4
   d527e:	f7ff fdb6 	bl	d4dee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONString(k_, d_);
   d5282:	466a      	mov	r2, sp
   d5284:	4629      	mov	r1, r5
   d5286:	4620      	mov	r0, r4
   d5288:	f001 fdb6 	bl	d6df8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d528c:	a801      	add	r0, sp, #4
   d528e:	f7ff f801 	bl	d4294 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5292:	4620      	mov	r0, r4
   d5294:	b003      	add	sp, #12
   d5296:	bd30      	pop	{r4, r5, pc}

000d5298 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   d5298:	b570      	push	{r4, r5, r6, lr}
   d529a:	b08a      	sub	sp, #40	; 0x28
   d529c:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   d529e:	4601      	mov	r1, r0
   d52a0:	a804      	add	r0, sp, #16
   d52a2:	f7ff ffd1 	bl	d5248 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   d52a6:	4e14      	ldr	r6, [pc, #80]	; (d52f8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   d52a8:	a804      	add	r0, sp, #16
   d52aa:	f001 fde1 	bl	d6e70 <_ZN5spark18JSONObjectIterator4nextEv>
   d52ae:	b1e8      	cbz	r0, d52ec <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   d52b0:	a904      	add	r1, sp, #16
   d52b2:	4668      	mov	r0, sp
   d52b4:	f7ff ffdc 	bl	d5270 <_ZNK5spark18JSONObjectIterator4nameEv>
   d52b8:	9802      	ldr	r0, [sp, #8]
   d52ba:	4631      	mov	r1, r6
   d52bc:	f7ff fe6d 	bl	d4f9a <_ZNK5spark10JSONStringeqEPKc.isra.0>
   d52c0:	4604      	mov	r4, r0
   d52c2:	b110      	cbz	r0, d52ca <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   d52c4:	1e2c      	subs	r4, r5, #0
   d52c6:	bf18      	it	ne
   d52c8:	2401      	movne	r4, #1
   d52ca:	a801      	add	r0, sp, #4
   d52cc:	f7fe ffe2 	bl	d4294 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d52d0:	2c00      	cmp	r4, #0
   d52d2:	d0e9      	beq.n	d52a8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   d52d4:	a904      	add	r1, sp, #16
   d52d6:	4668      	mov	r0, sp
   d52d8:	f7ff ffa2 	bl	d5220 <_ZNK5spark18JSONObjectIterator5valueEv>
   d52dc:	4668      	mov	r0, sp
   d52de:	f001 fd69 	bl	d6db4 <_ZNK5spark9JSONValue5toIntEv>
   d52e2:	6028      	str	r0, [r5, #0]
   d52e4:	a801      	add	r0, sp, #4
   d52e6:	f7fe ffd5 	bl	d4294 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d52ea:	e7dd      	b.n	d52a8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   d52ec:	a805      	add	r0, sp, #20
   d52ee:	f7fe ffd1 	bl	d4294 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d52f2:	b00a      	add	sp, #40	; 0x28
   d52f4:	bd70      	pop	{r4, r5, r6, pc}
   d52f6:	bf00      	nop
   d52f8:	000d7534 	.word	0x000d7534

000d52fc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d52fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d52fe:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   d5300:	4620      	mov	r0, r4
   d5302:	4912      	ldr	r1, [pc, #72]	; (d534c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d5304:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   d5306:	f001 ffb4 	bl	d7272 <strcmp>
   d530a:	b948      	cbnz	r0, d5320 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x24>
        Serial.begin();
   d530c:	f001 fa26 	bl	d675c <_Z16_fetch_usbserialv>
   d5310:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d5314:	f001 fa12 	bl	d673c <_ZN9USBSerial5beginEl>
        return &Serial;
   d5318:	f001 fa20 	bl	d675c <_Z16_fetch_usbserialv>
}
   d531c:	b003      	add	sp, #12
   d531e:	bd30      	pop	{r4, r5, pc}
    if (strcmp(type, "Serial1") == 0) {
   d5320:	490b      	ldr	r1, [pc, #44]	; (d5350 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
   d5322:	4620      	mov	r0, r4
   d5324:	f001 ffa5 	bl	d7272 <strcmp>
   d5328:	b970      	cbnz	r0, d5348 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   d532a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   d532e:	a901      	add	r1, sp, #4
   d5330:	4628      	mov	r0, r5
        int baud = 9600;
   d5332:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   d5334:	f7ff ffb0 	bl	d5298 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   d5338:	f001 fb08 	bl	d694c <_Z22__fetch_global_Serial1v>
   d533c:	9901      	ldr	r1, [sp, #4]
   d533e:	f001 faff 	bl	d6940 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   d5342:	f001 fb03 	bl	d694c <_Z22__fetch_global_Serial1v>
   d5346:	e7e9      	b.n	d531c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    return nullptr;
   d5348:	2000      	movs	r0, #0
   d534a:	e7e7      	b.n	d531c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
   d534c:	000d7539 	.word	0x000d7539
   d5350:	000d7540 	.word	0x000d7540

000d5354 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5354:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d5356:	e9d0 5300 	ldrd	r5, r3, [r0]
   d535a:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d535c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d535e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d5362:	42ae      	cmp	r6, r5
   d5364:	d005      	beq.n	d5372 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   d5366:	f105 0008 	add.w	r0, r5, #8
   d536a:	f7ff fff3 	bl	d5354 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d536e:	3514      	adds	r5, #20
   d5370:	e7f7      	b.n	d5362 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d5372:	6820      	ldr	r0, [r4, #0]
   d5374:	f7ff fbda 	bl	d4b2c <free>
}
   d5378:	4620      	mov	r0, r4
   d537a:	bd70      	pop	{r4, r5, r6, pc}

000d537c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d537c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d537e:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5382:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d5384:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   d5388:	42ae      	cmp	r6, r5
   d538a:	d004      	beq.n	d5396 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   d538c:	4628      	mov	r0, r5
   d538e:	f7ff fc73 	bl	d4c78 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   d5392:	3510      	adds	r5, #16
   d5394:	e7f8      	b.n	d5388 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d5396:	6820      	ldr	r0, [r4, #0]
   d5398:	f7ff fbc8 	bl	d4b2c <free>
}
   d539c:	4620      	mov	r0, r4
   d539e:	bd70      	pop	{r4, r5, r6, pc}

000d53a0 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   d53a0:	b510      	push	{r4, lr}
   d53a2:	4604      	mov	r4, r0
   d53a4:	300c      	adds	r0, #12
   d53a6:	f7ff ffd5 	bl	d5354 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d53aa:	4620      	mov	r0, r4
   d53ac:	f7ff ffe6 	bl	d537c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d53b0:	4620      	mov	r0, r4
   d53b2:	bd10      	pop	{r4, pc}

000d53b4 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   d53b4:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   d53b6:	4b04      	ldr	r3, [pc, #16]	; (d53c8 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   d53b8:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   d53ba:	f840 3b04 	str.w	r3, [r0], #4
   d53be:	f7ff ffef 	bl	d53a0 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   d53c2:	4620      	mov	r0, r4
   d53c4:	bd10      	pop	{r4, pc}
   d53c6:	bf00      	nop
   d53c8:	000d74d8 	.word	0x000d74d8

000d53cc <_ZN5spark16StreamLogHandlerD0Ev>:
   d53cc:	b510      	push	{r4, lr}
   d53ce:	4604      	mov	r4, r0
   d53d0:	f7ff fff0 	bl	d53b4 <_ZN5spark16StreamLogHandlerD1Ev>
   d53d4:	4620      	mov	r0, r4
   d53d6:	2124      	movs	r1, #36	; 0x24
   d53d8:	f001 fec9 	bl	d716e <_ZdlPvj>
   d53dc:	4620      	mov	r0, r4
   d53de:	bd10      	pop	{r4, pc}

000d53e0 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   d53e0:	b510      	push	{r4, lr}
   d53e2:	4b03      	ldr	r3, [pc, #12]	; (d53f0 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   d53e4:	6003      	str	r3, [r0, #0]
   d53e6:	4604      	mov	r4, r0
   d53e8:	f7ff ffe4 	bl	d53b4 <_ZN5spark16StreamLogHandlerD1Ev>
   d53ec:	4620      	mov	r0, r4
   d53ee:	bd10      	pop	{r4, pc}
   d53f0:	000d75e4 	.word	0x000d75e4

000d53f4 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   d53f4:	b510      	push	{r4, lr}
   d53f6:	4604      	mov	r4, r0
   d53f8:	f7ff fff2 	bl	d53e0 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   d53fc:	4620      	mov	r0, r4
   d53fe:	2124      	movs	r1, #36	; 0x24
   d5400:	f001 feb5 	bl	d716e <_ZdlPvj>
   d5404:	4620      	mov	r0, r4
   d5406:	bd10      	pop	{r4, pc}

000d5408 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   d5408:	2200      	movs	r2, #0
   d540a:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d540e:	b510      	push	{r4, lr}
        capacity_(0) {
   d5410:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   d5412:	680c      	ldr	r4, [r1, #0]
   d5414:	6004      	str	r4, [r0, #0]
   d5416:	684c      	ldr	r4, [r1, #4]
   d5418:	6044      	str	r4, [r0, #4]
   d541a:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d541c:	600a      	str	r2, [r1, #0]
   d541e:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d5420:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5422:	608a      	str	r2, [r1, #8]
}
   d5424:	bd10      	pop	{r4, pc}

000d5426 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d5426:	b510      	push	{r4, lr}
      { _M_device.unlock(); }
   d5428:	6803      	ldr	r3, [r0, #0]
      ~lock_guard()
   d542a:	4604      	mov	r4, r0
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d542c:	6818      	ldr	r0, [r3, #0]
   d542e:	f7ff f9b1 	bl	d4794 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   d5432:	4620      	mov	r0, r4
   d5434:	bd10      	pop	{r4, pc}
	...

000d5438 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d5438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d543c:	b087      	sub	sp, #28
   d543e:	4680      	mov	r8, r0
   d5440:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   d5442:	4b1c      	ldr	r3, [pc, #112]	; (d54b4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   d5444:	685b      	ldr	r3, [r3, #4]
   d5446:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d544a:	4689      	mov	r9, r1
   d544c:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d544e:	b96b      	cbnz	r3, d546c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   d5450:	f7ff feb4 	bl	d51bc <_ZN5spark10LogManager8instanceEv>
   d5454:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d5456:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
   d545a:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d545c:	9305      	str	r3, [sp, #20]
   d545e:	f7ff f991 	bl	d4784 <os_mutex_recursive_lock>
        // prevent re-entry
        if (that->isActive()) {
   d5462:	7b23      	ldrb	r3, [r4, #12]
   d5464:	b12b      	cbz	r3, d5472 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   d5466:	a805      	add	r0, sp, #20
   d5468:	f7ff ffdd 	bl	d5426 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   d546c:	b007      	add	sp, #28
   d546e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d5472:	2301      	movs	r3, #1
   d5474:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   d5476:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   d547a:	fa5f f989 	uxtb.w	r9, r9
   d547e:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d5482:	45aa      	cmp	sl, r5
   d5484:	d012      	beq.n	d54ac <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   d5486:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   d548a:	4631      	mov	r1, r6
   d548c:	1d38      	adds	r0, r7, #4
   d548e:	f7ff fe19 	bl	d50c4 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d5492:	4581      	cmp	r9, r0
   d5494:	d3f5      	bcc.n	d5482 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   d5496:	683b      	ldr	r3, [r7, #0]
   d5498:	9a03      	ldr	r2, [sp, #12]
   d549a:	9200      	str	r2, [sp, #0]
   d549c:	f8d3 b008 	ldr.w	fp, [r3, #8]
   d54a0:	464a      	mov	r2, r9
   d54a2:	4633      	mov	r3, r6
   d54a4:	4641      	mov	r1, r8
   d54a6:	4638      	mov	r0, r7
   d54a8:	47d8      	blx	fp
   d54aa:	e7ea      	b.n	d5482 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   d54ac:	2300      	movs	r3, #0
   d54ae:	7323      	strb	r3, [r4, #12]
   d54b0:	e7d9      	b.n	d5466 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   d54b2:	bf00      	nop
   d54b4:	e000ed00 	.word	0xe000ed00

000d54b8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d54b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d54bc:	469b      	mov	fp, r3
   d54be:	4b1a      	ldr	r3, [pc, #104]	; (d5528 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   d54c0:	685b      	ldr	r3, [r3, #4]
   d54c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d54c6:	4680      	mov	r8, r0
   d54c8:	4689      	mov	r9, r1
   d54ca:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   d54cc:	b96b      	cbnz	r3, d54ea <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   d54ce:	f7ff fe75 	bl	d51bc <_ZN5spark10LogManager8instanceEv>
   d54d2:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d54d4:	f100 0324 	add.w	r3, r0, #36	; 0x24
   d54d8:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d54da:	9301      	str	r3, [sp, #4]
   d54dc:	f7ff f952 	bl	d4784 <os_mutex_recursive_lock>
        if (that->isActive()) {
   d54e0:	7b23      	ldrb	r3, [r4, #12]
   d54e2:	b12b      	cbz	r3, d54f0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   d54e4:	a801      	add	r0, sp, #4
   d54e6:	f7ff ff9e 	bl	d5426 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   d54ea:	b003      	add	sp, #12
   d54ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   d54f0:	2301      	movs	r3, #1
   d54f2:	7323      	strb	r3, [r4, #12]
   d54f4:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   d54f8:	b2f6      	uxtb	r6, r6
   d54fa:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d54fe:	4555      	cmp	r5, sl
   d5500:	d00e      	beq.n	d5520 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   d5502:	f855 7b04 	ldr.w	r7, [r5], #4
   d5506:	4659      	mov	r1, fp
   d5508:	1d38      	adds	r0, r7, #4
   d550a:	f7ff fddb 	bl	d50c4 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d550e:	4286      	cmp	r6, r0
   d5510:	d3f5      	bcc.n	d54fe <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   d5512:	683b      	ldr	r3, [r7, #0]
   d5514:	464a      	mov	r2, r9
   d5516:	68db      	ldr	r3, [r3, #12]
   d5518:	4641      	mov	r1, r8
   d551a:	4638      	mov	r0, r7
   d551c:	4798      	blx	r3
   d551e:	e7ee      	b.n	d54fe <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   d5520:	2300      	movs	r3, #0
   d5522:	7323      	strb	r3, [r4, #12]
   d5524:	e7de      	b.n	d54e4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   d5526:	bf00      	nop
   d5528:	e000ed00 	.word	0xe000ed00

000d552c <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d552c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d5530:	4b16      	ldr	r3, [pc, #88]	; (d558c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   d5532:	685b      	ldr	r3, [r3, #4]
   d5534:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d5538:	4605      	mov	r5, r0
   d553a:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   d553c:	bb1b      	cbnz	r3, d5586 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   d553e:	f7ff fe3d 	bl	d51bc <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   d5542:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   d5546:	4604      	mov	r4, r0
   d5548:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d554a:	9301      	str	r3, [sp, #4]
   d554c:	f7ff f91a 	bl	d4784 <os_mutex_recursive_lock>
   d5550:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   d5554:	2446      	movs	r4, #70	; 0x46
   d5556:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d555a:	45b0      	cmp	r8, r6
   d555c:	d109      	bne.n	d5572 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   d555e:	a801      	add	r0, sp, #4
   d5560:	f7ff ff61 	bl	d5426 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   d5564:	42a5      	cmp	r5, r4
   d5566:	bfb4      	ite	lt
   d5568:	2000      	movlt	r0, #0
   d556a:	2001      	movge	r0, #1
}
   d556c:	b002      	add	sp, #8
   d556e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   d5572:	f856 0b04 	ldr.w	r0, [r6], #4
   d5576:	4639      	mov	r1, r7
   d5578:	3004      	adds	r0, #4
   d557a:	f7ff fda3 	bl	d50c4 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   d557e:	4284      	cmp	r4, r0
   d5580:	bfa8      	it	ge
   d5582:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   d5584:	e7e9      	b.n	d555a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   d5586:	2000      	movs	r0, #0
   d5588:	e7f0      	b.n	d556c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   d558a:	bf00      	nop
   d558c:	e000ed00 	.word	0xe000ed00

000d5590 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d5590:	b570      	push	{r4, r5, r6, lr}
   d5592:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   d5594:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d5598:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   d559a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   d559e:	4282      	cmp	r2, r0
   d55a0:	d007      	beq.n	d55b2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x22>
   d55a2:	4601      	mov	r1, r0
            if (*p == value) {
   d55a4:	681d      	ldr	r5, [r3, #0]
   d55a6:	f851 6b04 	ldr.w	r6, [r1], #4
   d55aa:	42ae      	cmp	r6, r5
   d55ac:	d003      	beq.n	d55b6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x26>
   d55ae:	4608      	mov	r0, r1
   d55b0:	e7f5      	b.n	d559e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   d55b2:	2000      	movs	r0, #0
}
   d55b4:	bd70      	pop	{r4, r5, r6, pc}
        ::memmove(dest, p, (end - p) * sizeof(T));
   d55b6:	1a52      	subs	r2, r2, r1
   d55b8:	f001 fdfe 	bl	d71b8 <memmove>
    --size_;
   d55bc:	6863      	ldr	r3, [r4, #4]
   d55be:	3b01      	subs	r3, #1
   d55c0:	6063      	str	r3, [r4, #4]
    return true;
   d55c2:	2001      	movs	r0, #1
   d55c4:	e7f6      	b.n	d55b4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>

000d55c6 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   d55c6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   d55c8:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   d55cc:	4604      	mov	r4, r0
   d55ce:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d55d0:	9101      	str	r1, [sp, #4]
   d55d2:	9303      	str	r3, [sp, #12]
   d55d4:	f7ff f8d6 	bl	d4784 <os_mutex_recursive_lock>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d55d8:	a901      	add	r1, sp, #4
   d55da:	4620      	mov	r0, r4
   d55dc:	f7ff ffd8 	bl	d5590 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   d55e0:	b118      	cbz	r0, d55ea <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   d55e2:	6863      	ldr	r3, [r4, #4]
   d55e4:	b90b      	cbnz	r3, d55ea <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   d55e6:	f7ff fe15 	bl	d5214 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d55ea:	a803      	add	r0, sp, #12
   d55ec:	f7ff ff1b 	bl	d5426 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   d55f0:	b004      	add	sp, #16
   d55f2:	bd10      	pop	{r4, pc}

000d55f4 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   d55f4:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   d55f6:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   d55fa:	2318      	movs	r3, #24
   d55fc:	4604      	mov	r4, r0
   d55fe:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   d5602:	42ae      	cmp	r6, r5
   d5604:	d015      	beq.n	d5632 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   d5606:	f105 0110 	add.w	r1, r5, #16
   d560a:	4620      	mov	r0, r4
   d560c:	f7ff ffc0 	bl	d5590 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   d5610:	6863      	ldr	r3, [r4, #4]
   d5612:	b90b      	cbnz	r3, d5618 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   d5614:	f7ff fdfe 	bl	d5214 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   d5618:	69e0      	ldr	r0, [r4, #28]
   d561a:	6929      	ldr	r1, [r5, #16]
   d561c:	6803      	ldr	r3, [r0, #0]
   d561e:	68db      	ldr	r3, [r3, #12]
   d5620:	4798      	blx	r3
        if (h.stream) {
   d5622:	6969      	ldr	r1, [r5, #20]
   d5624:	b119      	cbz	r1, d562e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   d5626:	6a20      	ldr	r0, [r4, #32]
   d5628:	6803      	ldr	r3, [r0, #0]
   d562a:	68db      	ldr	r3, [r3, #12]
   d562c:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   d562e:	3518      	adds	r5, #24
   d5630:	e7e7      	b.n	d5602 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   d5632:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   d5636:	2618      	movs	r6, #24
   d5638:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d563c:	42ae      	cmp	r6, r5
   d563e:	d004      	beq.n	d564a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   d5640:	4628      	mov	r0, r5
   d5642:	f7ff fb19 	bl	d4c78 <_ZN6StringD1Ev>
   d5646:	3518      	adds	r5, #24
   d5648:	e7f8      	b.n	d563c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   d564a:	2300      	movs	r3, #0
   d564c:	6163      	str	r3, [r4, #20]
}
   d564e:	bd70      	pop	{r4, r5, r6, pc}

000d5650 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   d5650:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5652:	4604      	mov	r4, r0
    resetSystemCallbacks();
   d5654:	f7ff fdde 	bl	d5214 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d5658:	f104 0324 	add.w	r3, r4, #36	; 0x24
   d565c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d565e:	9301      	str	r3, [sp, #4]
   d5660:	f7ff f890 	bl	d4784 <os_mutex_recursive_lock>
         destroyFactoryHandlers();
   d5664:	4620      	mov	r0, r4
   d5666:	f7ff ffc5 	bl	d55f4 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   d566a:	a801      	add	r0, sp, #4
   d566c:	f7ff fedb 	bl	d5426 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   d5670:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d5672:	b108      	cbz	r0, d5678 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   d5674:	f7ff f87e 	bl	d4774 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   d5678:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   d567c:	2618      	movs	r6, #24
   d567e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d5682:	42ae      	cmp	r6, r5
   d5684:	d004      	beq.n	d5690 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   d5686:	4628      	mov	r0, r5
   d5688:	f7ff faf6 	bl	d4c78 <_ZN6StringD1Ev>
   d568c:	3518      	adds	r5, #24
   d568e:	e7f8      	b.n	d5682 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   d5690:	6920      	ldr	r0, [r4, #16]
   d5692:	f7ff fa4b 	bl	d4b2c <free>
   d5696:	6820      	ldr	r0, [r4, #0]
   d5698:	f7ff fa48 	bl	d4b2c <free>
}
   d569c:	4620      	mov	r0, r4
   d569e:	b002      	add	sp, #8
   d56a0:	bd70      	pop	{r4, r5, r6, pc}

000d56a2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   d56a2:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d56a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d56a6:	4606      	mov	r6, r0
   d56a8:	460c      	mov	r4, r1
   d56aa:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d56ac:	d927      	bls.n	d56fe <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5c>
   d56ae:	4290      	cmp	r0, r2
   d56b0:	d226      	bcs.n	d5700 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
            --end;
   d56b2:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
   d56b6:	1a6c      	subs	r4, r5, r1
   d56b8:	f1a1 0714 	sub.w	r7, r1, #20
   d56bc:	4404      	add	r4, r0
        capacity_(0) {
   d56be:	2600      	movs	r6, #0
            for (; end != p; --end, --dest) {
   d56c0:	42af      	cmp	r7, r5
   d56c2:	d03d      	beq.n	d5740 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*end));
   d56c4:	b1a4      	cbz	r4, d56f0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4e>
struct spark::detail::LogFilter::Node {
   d56c6:	682b      	ldr	r3, [r5, #0]
   d56c8:	6023      	str	r3, [r4, #0]
   d56ca:	88ab      	ldrh	r3, [r5, #4]
   d56cc:	80a3      	strh	r3, [r4, #4]
   d56ce:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
   d56d2:	80e3      	strh	r3, [r4, #6]
        capacity_(0) {
   d56d4:	e9c4 6602 	strd	r6, r6, [r4, #8]
   d56d8:	6126      	str	r6, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d56da:	68ab      	ldr	r3, [r5, #8]
   d56dc:	60a3      	str	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d56de:	60ae      	str	r6, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d56e0:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d56e2:	68ea      	ldr	r2, [r5, #12]
   d56e4:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d56e6:	60eb      	str	r3, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d56e8:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d56ea:	692a      	ldr	r2, [r5, #16]
   d56ec:	6122      	str	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d56ee:	612b      	str	r3, [r5, #16]
   d56f0:	f105 0008 	add.w	r0, r5, #8
   d56f4:	f7ff fe2e 	bl	d5354 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   d56f8:	3d14      	subs	r5, #20
   d56fa:	3c14      	subs	r4, #20
   d56fc:	e7e0      	b.n	d56c0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
        } else if (dest != p) {
   d56fe:	d01f      	beq.n	d5740 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
        capacity_(0) {
   d5700:	2700      	movs	r7, #0
            for (; p != end; ++p, ++dest) {
   d5702:	42ac      	cmp	r4, r5
   d5704:	d01c      	beq.n	d5740 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*p));
   d5706:	b1a6      	cbz	r6, d5732 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x90>
   d5708:	6823      	ldr	r3, [r4, #0]
   d570a:	6033      	str	r3, [r6, #0]
   d570c:	88a3      	ldrh	r3, [r4, #4]
   d570e:	80b3      	strh	r3, [r6, #4]
   d5710:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   d5714:	80f3      	strh	r3, [r6, #6]
        capacity_(0) {
   d5716:	e9c6 7702 	strd	r7, r7, [r6, #8]
   d571a:	6137      	str	r7, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   d571c:	68a3      	ldr	r3, [r4, #8]
   d571e:	60b3      	str	r3, [r6, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5720:	60a7      	str	r7, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5722:	68f3      	ldr	r3, [r6, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5724:	68e2      	ldr	r2, [r4, #12]
   d5726:	60f2      	str	r2, [r6, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5728:	60e3      	str	r3, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d572a:	6933      	ldr	r3, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   d572c:	6922      	ldr	r2, [r4, #16]
   d572e:	6132      	str	r2, [r6, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d5730:	6123      	str	r3, [r4, #16]
   d5732:	f104 0008 	add.w	r0, r4, #8
   d5736:	f7ff fe0d 	bl	d5354 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   d573a:	3414      	adds	r4, #20
   d573c:	3614      	adds	r6, #20
   d573e:	e7e0      	b.n	d5702 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x60>
    }
   d5740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5742 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d5742:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5744:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   d5748:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d574a:	4604      	mov	r4, r0
   d574c:	460e      	mov	r6, r1
   d574e:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5750:	db0d      	blt.n	d576e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2c>
   d5752:	3501      	adds	r5, #1
        if (n > 0) {
   d5754:	2d00      	cmp	r5, #0
   d5756:	6800      	ldr	r0, [r0, #0]
   d5758:	dd04      	ble.n	d5764 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
    return ::realloc(ptr, size);
   d575a:	00a9      	lsls	r1, r5, #2
   d575c:	f7ff f9ee 	bl	d4b3c <realloc>
            if (!d) {
   d5760:	b918      	cbnz	r0, d576a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x28>
}
   d5762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   d5764:	f7ff f9e2 	bl	d4b2c <free>
        T* d = nullptr;
   d5768:	2000      	movs	r0, #0
        data_ = d;
   d576a:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d576c:	60a5      	str	r5, [r4, #8]
    T* const p = data_ + i;
   d576e:	6825      	ldr	r5, [r4, #0]
    move(p + 1, p, data_ + size_);
   d5770:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d5772:	eb05 0186 	add.w	r1, r5, r6, lsl #2
    move(p + 1, p, data_ + size_);
   d5776:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   d5778:	eba2 0286 	sub.w	r2, r2, r6, lsl #2
   d577c:	1d08      	adds	r0, r1, #4
   d577e:	f001 fd1b 	bl	d71b8 <memmove>
    new(p) T(std::move(value));
   d5782:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   d5786:	6863      	ldr	r3, [r4, #4]
   d5788:	3301      	adds	r3, #1
   d578a:	6063      	str	r3, [r4, #4]
    return true;
   d578c:	2001      	movs	r0, #1
   d578e:	e7e8      	b.n	d5762 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x20>

000d5790 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   d5790:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   d5792:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   d5796:	4604      	mov	r4, r0
    void lock() { os_mutex_recursive_lock(handle_); }
   d5798:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d579a:	9301      	str	r3, [sp, #4]
   d579c:	460d      	mov	r5, r1
   d579e:	f7fe fff1 	bl	d4784 <os_mutex_recursive_lock>
    return find(data_, data_ + size_, value);
   d57a2:	e9d4 3100 	ldrd	r3, r1, [r4]
   d57a6:	eb03 0081 	add.w	r0, r3, r1, lsl #2
        for (; p != end; ++p) {
   d57aa:	4283      	cmp	r3, r0
   d57ac:	461a      	mov	r2, r3
   d57ae:	d00b      	beq.n	d57c8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   d57b0:	6812      	ldr	r2, [r2, #0]
   d57b2:	42aa      	cmp	r2, r5
   d57b4:	f103 0304 	add.w	r3, r3, #4
   d57b8:	d1f7      	bne.n	d57aa <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
    LOG_WITH_LOCK(mutex_) {
   d57ba:	a801      	add	r0, sp, #4
   d57bc:	f7ff fe33 	bl	d5426 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            return false;
   d57c0:	2500      	movs	r5, #0
}
   d57c2:	4628      	mov	r0, r5
   d57c4:	b003      	add	sp, #12
   d57c6:	bd30      	pop	{r4, r5, pc}
    return insert(size_, std::move(value));
   d57c8:	462a      	mov	r2, r5
   d57ca:	4620      	mov	r0, r4
   d57cc:	f7ff ffb9 	bl	d5742 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   d57d0:	4605      	mov	r5, r0
   d57d2:	2800      	cmp	r0, #0
   d57d4:	d0f1      	beq.n	d57ba <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   d57d6:	6863      	ldr	r3, [r4, #4]
   d57d8:	2b01      	cmp	r3, #1
   d57da:	d101      	bne.n	d57e0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   d57dc:	f7ff fd0e 	bl	d51fc <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d57e0:	a801      	add	r0, sp, #4
   d57e2:	f7ff fe20 	bl	d5426 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   d57e6:	e7ec      	b.n	d57c2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000d57e8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d57e8:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d57ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d57ec:	4604      	mov	r4, r0
   d57ee:	460d      	mov	r5, r1
   d57f0:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d57f2:	d914      	bls.n	d581e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   d57f4:	4290      	cmp	r0, r2
   d57f6:	d213      	bcs.n	d5820 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   d57f8:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   d57fc:	1a75      	subs	r5, r6, r1
   d57fe:	f1a1 0710 	sub.w	r7, r1, #16
   d5802:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d5804:	42b7      	cmp	r7, r6
   d5806:	d018      	beq.n	d583a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   d5808:	b11c      	cbz	r4, d5812 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   d580a:	4631      	mov	r1, r6
   d580c:	4620      	mov	r0, r4
   d580e:	f7ff faaf 	bl	d4d70 <_ZN6StringC1EOS_>
                end->~T();
   d5812:	4630      	mov	r0, r6
   d5814:	f7ff fa30 	bl	d4c78 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d5818:	3e10      	subs	r6, #16
   d581a:	3c10      	subs	r4, #16
   d581c:	e7f2      	b.n	d5804 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d581e:	d00c      	beq.n	d583a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   d5820:	42b5      	cmp	r5, r6
   d5822:	d00a      	beq.n	d583a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   d5824:	b11c      	cbz	r4, d582e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   d5826:	4629      	mov	r1, r5
   d5828:	4620      	mov	r0, r4
   d582a:	f7ff faa1 	bl	d4d70 <_ZN6StringC1EOS_>
                p->~T();
   d582e:	4628      	mov	r0, r5
   d5830:	f7ff fa22 	bl	d4c78 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d5834:	3510      	adds	r5, #16
   d5836:	3410      	adds	r4, #16
   d5838:	e7f2      	b.n	d5820 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   d583a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d583c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   d583c:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d583e:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d5840:	4605      	mov	r5, r0
        if (n > 0) {
   d5842:	dd11      	ble.n	d5868 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   d5844:	0130      	lsls	r0, r6, #4
   d5846:	f7ff f969 	bl	d4b1c <malloc>
            if (!d) {
   d584a:	4604      	mov	r4, r0
   d584c:	b158      	cbz	r0, d5866 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d584e:	e9d5 1200 	ldrd	r1, r2, [r5]
   d5852:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   d5856:	f7ff ffc7 	bl	d57e8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d585a:	6828      	ldr	r0, [r5, #0]
   d585c:	f7ff f966 	bl	d4b2c <free>
        data_ = d;
   d5860:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d5862:	60ae      	str	r6, [r5, #8]
        return true;
   d5864:	2001      	movs	r0, #1
    }
   d5866:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d5868:	2400      	movs	r4, #0
   d586a:	e7f6      	b.n	d585a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000d586c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d586c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5870:	4691      	mov	r9, r2
   d5872:	b097      	sub	sp, #92	; 0x5c
        capacity_(0) {
   d5874:	2300      	movs	r3, #0
   d5876:	9103      	str	r1, [sp, #12]
    if (!cats.reserve(filters.size())) {
   d5878:	f8d9 1004 	ldr.w	r1, [r9, #4]
   d587c:	930c      	str	r3, [sp, #48]	; 0x30
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d587e:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   d5880:	4299      	cmp	r1, r3
        capacity_(0) {
   d5882:	e9c0 3300 	strd	r3, r3, [r0]
   d5886:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d588a:	e9c0 3304 	strd	r3, r3, [r0, #16]
   d588e:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d5892:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d5894:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   d5896:	dc23      	bgt.n	d58e0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   d5898:	e9d9 5700 	ldrd	r5, r7, [r9]
   d589c:	2314      	movs	r3, #20
   d589e:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   d58a2:	42af      	cmp	r7, r5
   d58a4:	d03b      	beq.n	d591e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   d58a6:	4629      	mov	r1, r5
   d58a8:	a80d      	add	r0, sp, #52	; 0x34
   d58aa:	f7ff fa61 	bl	d4d70 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   d58ae:	a90d      	add	r1, sp, #52	; 0x34
   d58b0:	a811      	add	r0, sp, #68	; 0x44
   d58b2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   d58b4:	f7ff fa5c 	bl	d4d70 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d58b8:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
   d58bc:	4299      	cmp	r1, r3
   d58be:	da1b      	bge.n	d58f8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   d58c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    move(p + 1, p, data_ + size_);
   d58c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    T* const p = data_ + i;
   d58c4:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   d58c8:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   d58cc:	4631      	mov	r1, r6
   d58ce:	f106 0010 	add.w	r0, r6, #16
   d58d2:	f7ff ff89 	bl	d57e8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   d58d6:	b9ee      	cbnz	r6, d5914 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   d58d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d58da:	3301      	adds	r3, #1
   d58dc:	930b      	str	r3, [sp, #44]	; 0x2c
    return true;
   d58de:	e011      	b.n	d5904 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   d58e0:	a80a      	add	r0, sp, #40	; 0x28
   d58e2:	f7ff ffab 	bl	d583c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d58e6:	2800      	cmp	r0, #0
   d58e8:	d1d6      	bne.n	d5898 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
    Vector<String> cats;
   d58ea:	a80a      	add	r0, sp, #40	; 0x28
   d58ec:	f7ff fd46 	bl	d537c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d58f0:	4620      	mov	r0, r4
   d58f2:	b017      	add	sp, #92	; 0x5c
   d58f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d58f8:	3101      	adds	r1, #1
   d58fa:	a80a      	add	r0, sp, #40	; 0x28
   d58fc:	f7ff ff9e 	bl	d583c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d5900:	2800      	cmp	r0, #0
   d5902:	d1dd      	bne.n	d58c0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   d5904:	a811      	add	r0, sp, #68	; 0x44
   d5906:	f7ff f9b7 	bl	d4c78 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   d590a:	a80d      	add	r0, sp, #52	; 0x34
   d590c:	f7ff f9b4 	bl	d4c78 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   d5910:	3514      	adds	r5, #20
   d5912:	e7c6      	b.n	d58a2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   d5914:	a911      	add	r1, sp, #68	; 0x44
   d5916:	4630      	mov	r0, r6
   d5918:	f7ff fa2a 	bl	d4d70 <_ZN6StringC1EOS_>
   d591c:	e7dc      	b.n	d58d8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   d591e:	2600      	movs	r6, #0
   d5920:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
   d5924:	960f      	str	r6, [sp, #60]	; 0x3c
        size_t size = 0; // Name length
   d5926:	4637      	mov	r7, r6
   d5928:	f04f 0a14 	mov.w	sl, #20
    for (int i = 0; i < cats.size(); ++i) {
   d592c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d5930:	429e      	cmp	r6, r3
   d5932:	f280 8097 	bge.w	d5a64 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f8>
        const char *category = cats.at(i).c_str();
   d5936:	0133      	lsls	r3, r6, #4
   d5938:	58d3      	ldr	r3, [r2, r3]
   d593a:	9308      	str	r3, [sp, #32]
        if (!category) {
   d593c:	b90b      	cbnz	r3, d5942 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd6>
    for (int i = 0; i < cats.size(); ++i) {
   d593e:	3601      	adds	r6, #1
   d5940:	e7f4      	b.n	d592c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xc0>
        size_t size = 0; // Name length
   d5942:	fb0a f306 	mul.w	r3, sl, r6
   d5946:	9709      	str	r7, [sp, #36]	; 0x24
   d5948:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   d594a:	ad0d      	add	r5, sp, #52	; 0x34
        while ((name = nextSubcategoryName(category, size))) {
   d594c:	a909      	add	r1, sp, #36	; 0x24
   d594e:	a808      	add	r0, sp, #32
   d5950:	f7ff fafc 	bl	d4f4c <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d5954:	4683      	mov	fp, r0
   d5956:	2800      	cmp	r0, #0
   d5958:	d0f1      	beq.n	d593e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
            const int index = nodeIndex(*pNodes, name, size, found);
   d595a:	4601      	mov	r1, r0
   d595c:	9a09      	ldr	r2, [sp, #36]	; 0x24
            bool found = false;
   d595e:	f88d 701f 	strb.w	r7, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   d5962:	f10d 031f 	add.w	r3, sp, #31
   d5966:	4628      	mov	r0, r5
   d5968:	f7ff fb6e 	bl	d5048 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d596c:	f89d 801f 	ldrb.w	r8, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   d5970:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d5972:	f1b8 0f00 	cmp.w	r8, #0
   d5976:	d166      	bne.n	d5a46 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   d5978:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
            level(-1) {
   d597c:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
   d5980:	e9cd 8813 	strd	r8, r8, [sp, #76]	; 0x4c
   d5984:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d5988:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
   d598c:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
   d5990:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5994:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   d5998:	4293      	cmp	r3, r2
   d599a:	db1a      	blt.n	d59d2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x166>
   d599c:	f103 0b01 	add.w	fp, r3, #1
        if (n > 0) {
   d59a0:	f1bb 0f00 	cmp.w	fp, #0
   d59a4:	dd4a      	ble.n	d5a3c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d0>
    return ::malloc(size);
   d59a6:	fb0a f00b 	mul.w	r0, sl, fp
   d59aa:	f7ff f8b7 	bl	d4b1c <malloc>
            if (!d) {
   d59ae:	9004      	str	r0, [sp, #16]
   d59b0:	2800      	cmp	r0, #0
   d59b2:	d045      	beq.n	d5a40 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d4>
            move(d, data_, data_ + size_);
   d59b4:	e9d5 1200 	ldrd	r1, r2, [r5]
   d59b8:	fb0a 1202 	mla	r2, sl, r2, r1
   d59bc:	f7ff fe71 	bl	d56a2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   d59c0:	9b04      	ldr	r3, [sp, #16]
    ::free(ptr);
   d59c2:	6828      	ldr	r0, [r5, #0]
   d59c4:	9304      	str	r3, [sp, #16]
   d59c6:	f7ff f8b1 	bl	d4b2c <free>
        data_ = d;
   d59ca:	9b04      	ldr	r3, [sp, #16]
   d59cc:	602b      	str	r3, [r5, #0]
        capacity_ = n;
   d59ce:	f8c5 b008 	str.w	fp, [r5, #8]
    T* const p = data_ + i;
   d59d2:	9b01      	ldr	r3, [sp, #4]
   d59d4:	f8d5 b000 	ldr.w	fp, [r5]
    move(p + 1, p, data_ + size_);
   d59d8:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   d59da:	fb0a f303 	mul.w	r3, sl, r3
   d59de:	eb0b 0103 	add.w	r1, fp, r3
    move(p + 1, p, data_ + size_);
   d59e2:	f101 0014 	add.w	r0, r1, #20
   d59e6:	fb0a b202 	mla	r2, sl, r2, fp
   d59ea:	9104      	str	r1, [sp, #16]
    T* const p = data_ + i;
   d59ec:	9305      	str	r3, [sp, #20]
    move(p + 1, p, data_ + size_);
   d59ee:	f7ff fe58 	bl	d56a2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   d59f2:	9904      	ldr	r1, [sp, #16]
   d59f4:	b1a9      	cbz	r1, d5a22 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1b6>
struct spark::detail::LogFilter::Node {
   d59f6:	9b05      	ldr	r3, [sp, #20]
   d59f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d59fa:	f84b 2003 	str.w	r2, [fp, r3]
   d59fe:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   d5a02:	808b      	strh	r3, [r1, #4]
   d5a04:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
   d5a08:	80cb      	strh	r3, [r1, #6]
        capacity_(0) {
   d5a0a:	e9c1 7702 	strd	r7, r7, [r1, #8]
   d5a0e:	610f      	str	r7, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5a10:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d5a12:	608b      	str	r3, [r1, #8]
   d5a14:	9b14      	ldr	r3, [sp, #80]	; 0x50
      __b = _GLIBCXX_MOVE(__tmp);
   d5a16:	9713      	str	r7, [sp, #76]	; 0x4c
      __a = _GLIBCXX_MOVE(__b);
   d5a18:	60cb      	str	r3, [r1, #12]
   d5a1a:	9b15      	ldr	r3, [sp, #84]	; 0x54
      __b = _GLIBCXX_MOVE(__tmp);
   d5a1c:	9714      	str	r7, [sp, #80]	; 0x50
      __a = _GLIBCXX_MOVE(__b);
   d5a1e:	610b      	str	r3, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d5a20:	9715      	str	r7, [sp, #84]	; 0x54
    ++size_;
   d5a22:	686b      	ldr	r3, [r5, #4]
   d5a24:	3301      	adds	r3, #1
   d5a26:	606b      	str	r3, [r5, #4]
   d5a28:	a813      	add	r0, sp, #76	; 0x4c
   d5a2a:	f7ff fc93 	bl	d5354 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d5a2e:	f1b8 0f00 	cmp.w	r8, #0
   d5a32:	d008      	beq.n	d5a46 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
    Vector<Node> nodes;
   d5a34:	a80d      	add	r0, sp, #52	; 0x34
   d5a36:	f7ff fc8d 	bl	d5354 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d5a3a:	e756      	b.n	d58ea <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   d5a3c:	4643      	mov	r3, r8
   d5a3e:	e7c0      	b.n	d59c2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x156>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d5a40:	f04f 0801 	mov.w	r8, #1
   d5a44:	e7f0      	b.n	d5a28 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
    return data_[i];
   d5a46:	9b01      	ldr	r3, [sp, #4]
   d5a48:	682d      	ldr	r5, [r5, #0]
   d5a4a:	fb0a 5503 	mla	r5, sl, r3, r5
            if (!*category) { // Check if it's last subcategory
   d5a4e:	9b08      	ldr	r3, [sp, #32]
   d5a50:	781b      	ldrb	r3, [r3, #0]
   d5a52:	b92b      	cbnz	r3, d5a60 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
                node.level = filters.at(i).level_;
   d5a54:	f8d9 3000 	ldr.w	r3, [r9]
   d5a58:	9a02      	ldr	r2, [sp, #8]
   d5a5a:	4413      	add	r3, r2
   d5a5c:	7c1b      	ldrb	r3, [r3, #16]
   d5a5e:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   d5a60:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   d5a62:	e773      	b.n	d594c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xe0>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5a64:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5a66:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5a68:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   d5a6a:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5a6c:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5a6e:	920b      	str	r2, [sp, #44]	; 0x2c
      __a = _GLIBCXX_MOVE(__b);
   d5a70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   d5a72:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5a74:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5a76:	60a2      	str	r2, [r4, #8]
   d5a78:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   d5a7a:	930d      	str	r3, [sp, #52]	; 0x34
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5a7c:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5a7e:	60e2      	str	r2, [r4, #12]
   d5a80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
      __b = _GLIBCXX_MOVE(__tmp);
   d5a82:	930e      	str	r3, [sp, #56]	; 0x38
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5a84:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5a86:	6122      	str	r2, [r4, #16]
   d5a88:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   d5a8a:	930f      	str	r3, [sp, #60]	; 0x3c
    level_ = level;
   d5a8c:	9b03      	ldr	r3, [sp, #12]
   d5a8e:	910a      	str	r1, [sp, #40]	; 0x28
      __a = _GLIBCXX_MOVE(__b);
   d5a90:	6162      	str	r2, [r4, #20]
   d5a92:	7623      	strb	r3, [r4, #24]
   d5a94:	e7ce      	b.n	d5a34 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c8>
	...

000d5a98 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d5a98:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   d5a9a:	4605      	mov	r5, r0
   d5a9c:	4b09      	ldr	r3, [pc, #36]	; (d5ac4 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   d5a9e:	f845 3b04 	str.w	r3, [r5], #4
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d5aa2:	4604      	mov	r4, r0
   d5aa4:	460e      	mov	r6, r1
        filter_(level, filters) {
   d5aa6:	a801      	add	r0, sp, #4
   d5aa8:	4611      	mov	r1, r2
   d5aaa:	f7fe fd0a 	bl	d44c2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d5aae:	aa01      	add	r2, sp, #4
   d5ab0:	4631      	mov	r1, r6
   d5ab2:	4628      	mov	r0, r5
   d5ab4:	f7ff feda 	bl	d586c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d5ab8:	a801      	add	r0, sp, #4
   d5aba:	f7fe fcc1 	bl	d4440 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   d5abe:	4620      	mov	r0, r4
   d5ac0:	b004      	add	sp, #16
   d5ac2:	bd70      	pop	{r4, r5, r6, pc}
   d5ac4:	000d74d8 	.word	0x000d74d8

000d5ac8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   d5ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5aca:	460f      	mov	r7, r1
   d5acc:	b087      	sub	sp, #28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d5ace:	4926      	ldr	r1, [pc, #152]	; (d5b68 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>)
            Print *stream, const JSONValue &params) {
   d5ad0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d5ad2:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   d5ad4:	4616      	mov	r6, r2
   d5ad6:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d5ad8:	f001 fbcb 	bl	d7272 <strcmp>
   d5adc:	bb00      	cbnz	r0, d5b20 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x58>
        if (!stream) {
   d5ade:	b1e4      	cbz	r4, d5b1a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   d5ae0:	4629      	mov	r1, r5
   d5ae2:	4668      	mov	r0, sp
   d5ae4:	f7ff fc90 	bl	d5408 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d5ae8:	4920      	ldr	r1, [pc, #128]	; (d5b6c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   d5aea:	2024      	movs	r0, #36	; 0x24
   d5aec:	f001 fb41 	bl	d7172 <_ZnwjRKSt9nothrow_t>
   d5af0:	4605      	mov	r5, r0
   d5af2:	b170      	cbz	r0, d5b12 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   d5af4:	4669      	mov	r1, sp
   d5af6:	a803      	add	r0, sp, #12
   d5af8:	f7fe fce3 	bl	d44c2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d5afc:	aa03      	add	r2, sp, #12
   d5afe:	4631      	mov	r1, r6
   d5b00:	4628      	mov	r0, r5
   d5b02:	f7ff ffc9 	bl	d5a98 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d5b06:	a803      	add	r0, sp, #12
   d5b08:	f7fe fc9a 	bl	d4440 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
    using StreamLogHandler::StreamLogHandler;
   d5b0c:	4b18      	ldr	r3, [pc, #96]	; (d5b70 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa8>)
        stream_(&stream) {
   d5b0e:	622c      	str	r4, [r5, #32]
    using StreamLogHandler::StreamLogHandler;
   d5b10:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d5b12:	4668      	mov	r0, sp
   d5b14:	f7fe fc94 	bl	d4440 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d5b18:	462c      	mov	r4, r5
}
   d5b1a:	4620      	mov	r0, r4
   d5b1c:	b007      	add	sp, #28
   d5b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   d5b20:	4914      	ldr	r1, [pc, #80]	; (d5b74 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xac>)
   d5b22:	4638      	mov	r0, r7
   d5b24:	f001 fba5 	bl	d7272 <strcmp>
   d5b28:	b9e0      	cbnz	r0, d5b64 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x9c>
        if (!stream) {
   d5b2a:	2c00      	cmp	r4, #0
   d5b2c:	d0f5      	beq.n	d5b1a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d5b2e:	4629      	mov	r1, r5
   d5b30:	4668      	mov	r0, sp
   d5b32:	f7ff fc69 	bl	d5408 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d5b36:	490d      	ldr	r1, [pc, #52]	; (d5b6c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   d5b38:	2024      	movs	r0, #36	; 0x24
   d5b3a:	f001 fb1a 	bl	d7172 <_ZnwjRKSt9nothrow_t>
   d5b3e:	4605      	mov	r5, r0
   d5b40:	2800      	cmp	r0, #0
   d5b42:	d0e6      	beq.n	d5b12 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   d5b44:	4669      	mov	r1, sp
   d5b46:	a803      	add	r0, sp, #12
   d5b48:	f7fe fcbb 	bl	d44c2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d5b4c:	aa03      	add	r2, sp, #12
   d5b4e:	4631      	mov	r1, r6
   d5b50:	4628      	mov	r0, r5
   d5b52:	f7ff ffa1 	bl	d5a98 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d5b56:	a803      	add	r0, sp, #12
   d5b58:	f7fe fc72 	bl	d4440 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d5b5c:	4b06      	ldr	r3, [pc, #24]	; (d5b78 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>)
   d5b5e:	602b      	str	r3, [r5, #0]
   d5b60:	622c      	str	r4, [r5, #32]
}
   d5b62:	e7d6      	b.n	d5b12 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
            return nullptr; // Output stream is not specified
   d5b64:	2400      	movs	r4, #0
   d5b66:	e7d8      	b.n	d5b1a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
   d5b68:	000d7548 	.word	0x000d7548
   d5b6c:	000d7769 	.word	0x000d7769
   d5b70:	000d75e4 	.word	0x000d75e4
   d5b74:	000d754c 	.word	0x000d754c
   d5b78:	000d75cc 	.word	0x000d75cc

000d5b7c <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   d5b7c:	4b01      	ldr	r3, [pc, #4]	; (d5b84 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5b7e:	4a02      	ldr	r2, [pc, #8]	; (d5b88 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5b80:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d5b82:	4770      	bx	lr
   d5b84:	2003e6a4 	.word	0x2003e6a4
   d5b88:	000d755d 	.word	0x000d755d

000d5b8c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d5b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5b90:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   d5b92:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d5b96:	4604      	mov	r4, r0
   d5b98:	460e      	mov	r6, r1
   d5b9a:	4617      	mov	r7, r2
   d5b9c:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   d5b9e:	f000 fddd 	bl	d675c <_Z16_fetch_usbserialv>
   d5ba2:	4581      	cmp	r9, r0
   d5ba4:	d04c      	beq.n	d5c40 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   d5ba6:	792b      	ldrb	r3, [r5, #4]
   d5ba8:	0719      	lsls	r1, r3, #28
   d5baa:	d504      	bpl.n	d5bb6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   d5bac:	696a      	ldr	r2, [r5, #20]
   d5bae:	4954      	ldr	r1, [pc, #336]	; (d5d00 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   d5bb0:	4620      	mov	r0, r4
   d5bb2:	f7ff fa3a 	bl	d502a <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   d5bb6:	f1b8 0f00 	cmp.w	r8, #0
   d5bba:	d00d      	beq.n	d5bd8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   d5bbc:	215b      	movs	r1, #91	; 0x5b
   d5bbe:	4620      	mov	r0, r4
   d5bc0:	f7ff fa27 	bl	d5012 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   d5bc4:	4641      	mov	r1, r8
   d5bc6:	4620      	mov	r0, r4
   d5bc8:	f7ff fa14 	bl	d4ff4 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   d5bcc:	6823      	ldr	r3, [r4, #0]
   d5bce:	494d      	ldr	r1, [pc, #308]	; (d5d04 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   d5bd0:	68db      	ldr	r3, [r3, #12]
   d5bd2:	2202      	movs	r2, #2
   d5bd4:	4620      	mov	r0, r4
   d5bd6:	4798      	blx	r3
    if (attr.has_file) {
   d5bd8:	792b      	ldrb	r3, [r5, #4]
   d5bda:	07da      	lsls	r2, r3, #31
   d5bdc:	d523      	bpl.n	d5c26 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   d5bde:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   d5be2:	212f      	movs	r1, #47	; 0x2f
   d5be4:	4640      	mov	r0, r8
   d5be6:	f001 fb8e 	bl	d7306 <strrchr>
    if (s1) {
   d5bea:	b108      	cbz	r0, d5bf0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   d5bec:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   d5bf0:	4641      	mov	r1, r8
   d5bf2:	4620      	mov	r0, r4
   d5bf4:	f7ff f9fe 	bl	d4ff4 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   d5bf8:	792b      	ldrb	r3, [r5, #4]
   d5bfa:	079b      	lsls	r3, r3, #30
   d5bfc:	d508      	bpl.n	d5c10 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   d5bfe:	213a      	movs	r1, #58	; 0x3a
   d5c00:	4620      	mov	r0, r4
   d5c02:	f7ff fa06 	bl	d5012 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   d5c06:	68ea      	ldr	r2, [r5, #12]
   d5c08:	493f      	ldr	r1, [pc, #252]	; (d5d08 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   d5c0a:	4620      	mov	r0, r4
   d5c0c:	f7ff fa0d 	bl	d502a <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   d5c10:	792a      	ldrb	r2, [r5, #4]
   d5c12:	6823      	ldr	r3, [r4, #0]
   d5c14:	f012 0f04 	tst.w	r2, #4
   d5c18:	68db      	ldr	r3, [r3, #12]
            write(", ", 2);
   d5c1a:	bf14      	ite	ne
   d5c1c:	493b      	ldrne	r1, [pc, #236]	; (d5d0c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   d5c1e:	493c      	ldreq	r1, [pc, #240]	; (d5d10 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   d5c20:	2202      	movs	r2, #2
            write(": ", 2);
   d5c22:	4620      	mov	r0, r4
   d5c24:	4798      	blx	r3
    if (attr.has_function) {
   d5c26:	792b      	ldrb	r3, [r5, #4]
   d5c28:	0758      	lsls	r0, r3, #29
   d5c2a:	d51d      	bpl.n	d5c68 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d5c2c:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   d5c2e:	460b      	mov	r3, r1
   d5c30:	461a      	mov	r2, r3
    for (; *s; ++s) {
   d5c32:	f813 0b01 	ldrb.w	r0, [r3], #1
   d5c36:	b160      	cbz	r0, d5c52 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   d5c38:	2820      	cmp	r0, #32
   d5c3a:	d108      	bne.n	d5c4e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   d5c3c:	4619      	mov	r1, r3
   d5c3e:	e7f7      	b.n	d5c30 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   d5c40:	4834      	ldr	r0, [pc, #208]	; (d5d14 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   d5c42:	f000 ff86 	bl	d6b52 <_ZN5spark12NetworkClass9listeningEv>
   d5c46:	2800      	cmp	r0, #0
   d5c48:	d0ad      	beq.n	d5ba6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   d5c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   d5c4e:	2828      	cmp	r0, #40	; 0x28
   d5c50:	d1ee      	bne.n	d5c30 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   d5c52:	6823      	ldr	r3, [r4, #0]
   d5c54:	1a52      	subs	r2, r2, r1
   d5c56:	68db      	ldr	r3, [r3, #12]
   d5c58:	4620      	mov	r0, r4
   d5c5a:	4798      	blx	r3
        write("(): ", 4);
   d5c5c:	6823      	ldr	r3, [r4, #0]
   d5c5e:	492e      	ldr	r1, [pc, #184]	; (d5d18 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   d5c60:	68db      	ldr	r3, [r3, #12]
   d5c62:	2204      	movs	r2, #4
   d5c64:	4620      	mov	r0, r4
   d5c66:	4798      	blx	r3
    return log_level_name(level, nullptr);
   d5c68:	2100      	movs	r1, #0
   d5c6a:	4638      	mov	r0, r7
   d5c6c:	f7fe fea2 	bl	d49b4 <log_level_name>
   d5c70:	4601      	mov	r1, r0
    write(s);
   d5c72:	4620      	mov	r0, r4
   d5c74:	f7ff f9be 	bl	d4ff4 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   d5c78:	6823      	ldr	r3, [r4, #0]
   d5c7a:	4925      	ldr	r1, [pc, #148]	; (d5d10 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   d5c7c:	68db      	ldr	r3, [r3, #12]
   d5c7e:	2202      	movs	r2, #2
   d5c80:	4620      	mov	r0, r4
   d5c82:	4798      	blx	r3
    if (msg) {
   d5c84:	b11e      	cbz	r6, d5c8e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   d5c86:	4631      	mov	r1, r6
   d5c88:	4620      	mov	r0, r4
   d5c8a:	f7ff f9b3 	bl	d4ff4 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   d5c8e:	792b      	ldrb	r3, [r5, #4]
   d5c90:	f013 0f30 	tst.w	r3, #48	; 0x30
   d5c94:	d02c      	beq.n	d5cf0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   d5c96:	6823      	ldr	r3, [r4, #0]
   d5c98:	4920      	ldr	r1, [pc, #128]	; (d5d1c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   d5c9a:	68db      	ldr	r3, [r3, #12]
   d5c9c:	2202      	movs	r2, #2
   d5c9e:	4620      	mov	r0, r4
   d5ca0:	4798      	blx	r3
        if (attr.has_code) {
   d5ca2:	792b      	ldrb	r3, [r5, #4]
   d5ca4:	06d9      	lsls	r1, r3, #27
   d5ca6:	d50a      	bpl.n	d5cbe <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   d5ca8:	6823      	ldr	r3, [r4, #0]
   d5caa:	491d      	ldr	r1, [pc, #116]	; (d5d20 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d5cac:	68db      	ldr	r3, [r3, #12]
   d5cae:	2207      	movs	r2, #7
   d5cb0:	4620      	mov	r0, r4
   d5cb2:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   d5cb4:	69aa      	ldr	r2, [r5, #24]
   d5cb6:	491b      	ldr	r1, [pc, #108]	; (d5d24 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   d5cb8:	4620      	mov	r0, r4
   d5cba:	f7ff f9b6 	bl	d502a <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   d5cbe:	792b      	ldrb	r3, [r5, #4]
   d5cc0:	069a      	lsls	r2, r3, #26
   d5cc2:	d511      	bpl.n	d5ce8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   d5cc4:	06db      	lsls	r3, r3, #27
   d5cc6:	d505      	bpl.n	d5cd4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   d5cc8:	6823      	ldr	r3, [r4, #0]
   d5cca:	4910      	ldr	r1, [pc, #64]	; (d5d0c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   d5ccc:	68db      	ldr	r3, [r3, #12]
   d5cce:	2202      	movs	r2, #2
   d5cd0:	4620      	mov	r0, r4
   d5cd2:	4798      	blx	r3
            write("details = ", 10);
   d5cd4:	6823      	ldr	r3, [r4, #0]
   d5cd6:	4914      	ldr	r1, [pc, #80]	; (d5d28 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   d5cd8:	68db      	ldr	r3, [r3, #12]
   d5cda:	4620      	mov	r0, r4
   d5cdc:	220a      	movs	r2, #10
   d5cde:	4798      	blx	r3
            write(attr.details);
   d5ce0:	69e9      	ldr	r1, [r5, #28]
   d5ce2:	4620      	mov	r0, r4
   d5ce4:	f7ff f986 	bl	d4ff4 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   d5ce8:	215d      	movs	r1, #93	; 0x5d
   d5cea:	4620      	mov	r0, r4
   d5cec:	f7ff f991 	bl	d5012 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   d5cf0:	6823      	ldr	r3, [r4, #0]
   d5cf2:	490e      	ldr	r1, [pc, #56]	; (d5d2c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   d5cf4:	68db      	ldr	r3, [r3, #12]
   d5cf6:	4620      	mov	r0, r4
   d5cf8:	2202      	movs	r2, #2
}
   d5cfa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   d5cfe:	4718      	bx	r3
   d5d00:	000d7561 	.word	0x000d7561
   d5d04:	000d7568 	.word	0x000d7568
   d5d08:	000d756b 	.word	0x000d756b
   d5d0c:	000d756e 	.word	0x000d756e
   d5d10:	000d7573 	.word	0x000d7573
   d5d14:	2003e7bc 	.word	0x2003e7bc
   d5d18:	000d7571 	.word	0x000d7571
   d5d1c:	000d7576 	.word	0x000d7576
   d5d20:	000d7579 	.word	0x000d7579
   d5d24:	000d7581 	.word	0x000d7581
   d5d28:	000d7584 	.word	0x000d7584
   d5d2c:	000d758f 	.word	0x000d758f

000d5d30 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d5d30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5d34:	b085      	sub	sp, #20
    if (this->stream() == &Serial && Network.listening()) {
   d5d36:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d5d3a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   d5d3c:	4605      	mov	r5, r0
   d5d3e:	460f      	mov	r7, r1
   d5d40:	4690      	mov	r8, r2
   d5d42:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   d5d44:	f000 fd0a 	bl	d675c <_Z16_fetch_usbserialv>
   d5d48:	4581      	cmp	r9, r0
   d5d4a:	d105      	bne.n	d5d58 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   d5d4c:	4849      	ldr	r0, [pc, #292]	; (d5e74 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   d5d4e:	f000 ff00 	bl	d6b52 <_ZN5spark12NetworkClass9listeningEv>
   d5d52:	2800      	cmp	r0, #0
   d5d54:	f040 808a 	bne.w	d5e6c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
    JSONStreamWriter json(*this->stream());
   d5d58:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   d5d5a:	4a47      	ldr	r2, [pc, #284]	; (d5e78 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   d5d5c:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   d5d5e:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   d5d62:	a801      	add	r0, sp, #4
        strm_(stream) {
   d5d64:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   d5d66:	f88d 9008 	strb.w	r9, [sp, #8]
   d5d6a:	f001 f8aa 	bl	d6ec2 <_ZN5spark10JSONWriter11beginObjectEv>
   d5d6e:	4649      	mov	r1, r9
   d5d70:	4640      	mov	r0, r8
   d5d72:	f7fe fe1f 	bl	d49b4 <log_level_name>
    json.name("l", 1).value(s);
   d5d76:	4941      	ldr	r1, [pc, #260]	; (d5e7c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   d5d78:	4680      	mov	r8, r0
   d5d7a:	2201      	movs	r2, #1
   d5d7c:	a801      	add	r0, sp, #4
   d5d7e:	f001 f929 	bl	d6fd4 <_ZN5spark10JSONWriter4nameEPKcj>
   d5d82:	4641      	mov	r1, r8
   d5d84:	f7ff f928 	bl	d4fd8 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   d5d88:	b13f      	cbz	r7, d5d9a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   d5d8a:	493d      	ldr	r1, [pc, #244]	; (d5e80 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   d5d8c:	2201      	movs	r2, #1
   d5d8e:	a801      	add	r0, sp, #4
   d5d90:	f001 f920 	bl	d6fd4 <_ZN5spark10JSONWriter4nameEPKcj>
   d5d94:	4639      	mov	r1, r7
   d5d96:	f7ff f91f 	bl	d4fd8 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   d5d9a:	b13e      	cbz	r6, d5dac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   d5d9c:	4939      	ldr	r1, [pc, #228]	; (d5e84 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   d5d9e:	2201      	movs	r2, #1
   d5da0:	a801      	add	r0, sp, #4
   d5da2:	f001 f917 	bl	d6fd4 <_ZN5spark10JSONWriter4nameEPKcj>
   d5da6:	4631      	mov	r1, r6
   d5da8:	f7ff f916 	bl	d4fd8 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   d5dac:	7923      	ldrb	r3, [r4, #4]
   d5dae:	07df      	lsls	r7, r3, #31
   d5db0:	d50e      	bpl.n	d5dd0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   d5db2:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   d5db4:	212f      	movs	r1, #47	; 0x2f
   d5db6:	4630      	mov	r0, r6
   d5db8:	f001 faa5 	bl	d7306 <strrchr>
    if (s1) {
   d5dbc:	b100      	cbz	r0, d5dc0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   d5dbe:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   d5dc0:	4931      	ldr	r1, [pc, #196]	; (d5e88 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   d5dc2:	2201      	movs	r2, #1
   d5dc4:	a801      	add	r0, sp, #4
   d5dc6:	f001 f905 	bl	d6fd4 <_ZN5spark10JSONWriter4nameEPKcj>
   d5dca:	4631      	mov	r1, r6
   d5dcc:	f7ff f904 	bl	d4fd8 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   d5dd0:	7923      	ldrb	r3, [r4, #4]
   d5dd2:	079e      	lsls	r6, r3, #30
   d5dd4:	d507      	bpl.n	d5de6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   d5dd6:	492d      	ldr	r1, [pc, #180]	; (d5e8c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   d5dd8:	2202      	movs	r2, #2
   d5dda:	a801      	add	r0, sp, #4
   d5ddc:	f001 f8fa 	bl	d6fd4 <_ZN5spark10JSONWriter4nameEPKcj>
   d5de0:	68e1      	ldr	r1, [r4, #12]
   d5de2:	f001 f87b 	bl	d6edc <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   d5de6:	7923      	ldrb	r3, [r4, #4]
   d5de8:	0758      	lsls	r0, r3, #29
   d5dea:	d514      	bpl.n	d5e16 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d5dec:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   d5dee:	4633      	mov	r3, r6
   d5df0:	461f      	mov	r7, r3
    for (; *s; ++s) {
   d5df2:	f813 2b01 	ldrb.w	r2, [r3], #1
   d5df6:	b12a      	cbz	r2, d5e04 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   d5df8:	2a20      	cmp	r2, #32
   d5dfa:	d101      	bne.n	d5e00 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   d5dfc:	461e      	mov	r6, r3
   d5dfe:	e7f7      	b.n	d5df0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   d5e00:	2a28      	cmp	r2, #40	; 0x28
   d5e02:	d1f5      	bne.n	d5df0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   d5e04:	4922      	ldr	r1, [pc, #136]	; (d5e90 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   d5e06:	2202      	movs	r2, #2
   d5e08:	a801      	add	r0, sp, #4
   d5e0a:	f001 f8e3 	bl	d6fd4 <_ZN5spark10JSONWriter4nameEPKcj>
   d5e0e:	1bba      	subs	r2, r7, r6
   d5e10:	4631      	mov	r1, r6
   d5e12:	f001 f8ef 	bl	d6ff4 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   d5e16:	7923      	ldrb	r3, [r4, #4]
   d5e18:	0719      	lsls	r1, r3, #28
   d5e1a:	d507      	bpl.n	d5e2c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   d5e1c:	491d      	ldr	r1, [pc, #116]	; (d5e94 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   d5e1e:	2201      	movs	r2, #1
   d5e20:	a801      	add	r0, sp, #4
   d5e22:	f001 f8d7 	bl	d6fd4 <_ZN5spark10JSONWriter4nameEPKcj>
   d5e26:	6961      	ldr	r1, [r4, #20]
   d5e28:	f001 f86a 	bl	d6f00 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   d5e2c:	7923      	ldrb	r3, [r4, #4]
   d5e2e:	06da      	lsls	r2, r3, #27
   d5e30:	d508      	bpl.n	d5e44 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   d5e32:	2204      	movs	r2, #4
   d5e34:	4918      	ldr	r1, [pc, #96]	; (d5e98 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   d5e36:	eb0d 0002 	add.w	r0, sp, r2
   d5e3a:	f001 f8cb 	bl	d6fd4 <_ZN5spark10JSONWriter4nameEPKcj>
   d5e3e:	69a1      	ldr	r1, [r4, #24]
   d5e40:	f001 f84c 	bl	d6edc <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   d5e44:	7923      	ldrb	r3, [r4, #4]
   d5e46:	069b      	lsls	r3, r3, #26
   d5e48:	d507      	bpl.n	d5e5a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   d5e4a:	4914      	ldr	r1, [pc, #80]	; (d5e9c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   d5e4c:	2206      	movs	r2, #6
   d5e4e:	a801      	add	r0, sp, #4
   d5e50:	f001 f8c0 	bl	d6fd4 <_ZN5spark10JSONWriter4nameEPKcj>
   d5e54:	69e1      	ldr	r1, [r4, #28]
   d5e56:	f7ff f8bf 	bl	d4fd8 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   d5e5a:	a801      	add	r0, sp, #4
   d5e5c:	f001 f81b 	bl	d6e96 <_ZN5spark10JSONWriter9endObjectEv>
    this->stream()->write((const uint8_t*)"\r\n", 2);
   d5e60:	6a28      	ldr	r0, [r5, #32]
   d5e62:	490f      	ldr	r1, [pc, #60]	; (d5ea0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   d5e64:	6803      	ldr	r3, [r0, #0]
   d5e66:	2202      	movs	r2, #2
   d5e68:	68db      	ldr	r3, [r3, #12]
   d5e6a:	4798      	blx	r3
}
   d5e6c:	b005      	add	sp, #20
   d5e6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d5e72:	bf00      	nop
   d5e74:	2003e7bc 	.word	0x2003e7bc
   d5e78:	000d75b4 	.word	0x000d75b4
   d5e7c:	000d753e 	.word	0x000d753e
   d5e80:	000d7455 	.word	0x000d7455
   d5e84:	000d7592 	.word	0x000d7592
   d5e88:	000d7594 	.word	0x000d7594
   d5e8c:	000d7596 	.word	0x000d7596
   d5e90:	000d7599 	.word	0x000d7599
   d5e94:	000d759c 	.word	0x000d759c
   d5e98:	000d759e 	.word	0x000d759e
   d5e9c:	000d75a3 	.word	0x000d75a3
   d5ea0:	000d758f 	.word	0x000d758f

000d5ea4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5ea4:	4b02      	ldr	r3, [pc, #8]	; (d5eb0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5ea6:	681a      	ldr	r2, [r3, #0]
   d5ea8:	4b02      	ldr	r3, [pc, #8]	; (d5eb4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5eaa:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d5eac:	4770      	bx	lr
   d5eae:	bf00      	nop
   d5eb0:	2003e5c8 	.word	0x2003e5c8
   d5eb4:	2003e6d0 	.word	0x2003e6d0

000d5eb8 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5eb8:	b510      	push	{r4, lr}
   d5eba:	4604      	mov	r4, r0
   d5ebc:	f7fe f968 	bl	d4190 <_ZNSt14_Function_baseD1Ev>
   d5ec0:	4620      	mov	r0, r4
   d5ec2:	bd10      	pop	{r4, pc}

000d5ec4 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d5ec4:	b513      	push	{r0, r1, r4, lr}
   d5ec6:	460b      	mov	r3, r1
   d5ec8:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5eca:	e9d0 0100 	ldrd	r0, r1, [r0]
   d5ece:	466c      	mov	r4, sp
   d5ed0:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5ed4:	e893 0003 	ldmia.w	r3, {r0, r1}
   d5ed8:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d5edc:	e894 0003 	ldmia.w	r4, {r0, r1}
   d5ee0:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d5ee4:	b002      	add	sp, #8
   d5ee6:	bd10      	pop	{r4, pc}

000d5ee8 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d5ee8:	4803      	ldr	r0, [pc, #12]	; (d5ef8 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5eea:	4a04      	ldr	r2, [pc, #16]	; (d5efc <_GLOBAL__sub_I_RGB+0x14>)
   d5eec:	4904      	ldr	r1, [pc, #16]	; (d5f00 <_GLOBAL__sub_I_RGB+0x18>)
   d5eee:	2300      	movs	r3, #0
   d5ef0:	6083      	str	r3, [r0, #8]
   d5ef2:	f001 b937 	b.w	d7164 <__aeabi_atexit>
   d5ef6:	bf00      	nop
   d5ef8:	2003e6d4 	.word	0x2003e6d4
   d5efc:	2003e630 	.word	0x2003e630
   d5f00:	000d5eb9 	.word	0x000d5eb9

000d5f04 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d5f04:	4b01      	ldr	r3, [pc, #4]	; (d5f0c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d5f06:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d5f08:	4770      	bx	lr
   d5f0a:	bf00      	nop
   d5f0c:	2003e5cc 	.word	0x2003e5cc

000d5f10 <serialEventRun>:
{
   d5f10:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5f12:	4b0b      	ldr	r3, [pc, #44]	; (d5f40 <serialEventRun+0x30>)
   d5f14:	b143      	cbz	r3, d5f28 <serialEventRun+0x18>
   d5f16:	f000 fc21 	bl	d675c <_Z16_fetch_usbserialv>
   d5f1a:	6803      	ldr	r3, [r0, #0]
   d5f1c:	691b      	ldr	r3, [r3, #16]
   d5f1e:	4798      	blx	r3
   d5f20:	2800      	cmp	r0, #0
   d5f22:	dd01      	ble.n	d5f28 <serialEventRun+0x18>
        serialEvent();
   d5f24:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d5f28:	4b06      	ldr	r3, [pc, #24]	; (d5f44 <serialEventRun+0x34>)
   d5f2a:	b143      	cbz	r3, d5f3e <serialEventRun+0x2e>
   d5f2c:	f000 fd0e 	bl	d694c <_Z22__fetch_global_Serial1v>
   d5f30:	6803      	ldr	r3, [r0, #0]
   d5f32:	691b      	ldr	r3, [r3, #16]
   d5f34:	4798      	blx	r3
   d5f36:	2800      	cmp	r0, #0
   d5f38:	dd01      	ble.n	d5f3e <serialEventRun+0x2e>
        serialEvent1();
   d5f3a:	f3af 8000 	nop.w
}
   d5f3e:	bd08      	pop	{r3, pc}
	...

000d5f48 <_post_loop>:
{
   d5f48:	b508      	push	{r3, lr}
	serialEventRun();
   d5f4a:	f7ff ffe1 	bl	d5f10 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5f4e:	f7fe fbd1 	bl	d46f4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5f52:	4b01      	ldr	r3, [pc, #4]	; (d5f58 <_post_loop+0x10>)
   d5f54:	6018      	str	r0, [r3, #0]
}
   d5f56:	bd08      	pop	{r3, pc}
   d5f58:	2003e7d0 	.word	0x2003e7d0

000d5f5c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5f5c:	4802      	ldr	r0, [pc, #8]	; (d5f68 <_Z33system_initialize_user_backup_ramv+0xc>)
   d5f5e:	4a03      	ldr	r2, [pc, #12]	; (d5f6c <_Z33system_initialize_user_backup_ramv+0x10>)
   d5f60:	4903      	ldr	r1, [pc, #12]	; (d5f70 <_Z33system_initialize_user_backup_ramv+0x14>)
   d5f62:	1a12      	subs	r2, r2, r0
   d5f64:	f001 b91a 	b.w	d719c <memcpy>
   d5f68:	2003f400 	.word	0x2003f400
   d5f6c:	2003f404 	.word	0x2003f404
   d5f70:	000d7890 	.word	0x000d7890

000d5f74 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5f74:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5f76:	2300      	movs	r3, #0
   d5f78:	9300      	str	r3, [sp, #0]
   d5f7a:	461a      	mov	r2, r3
   d5f7c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5f80:	f7fe fd4a 	bl	d4a18 <system_ctrl_set_result>
}
   d5f84:	b003      	add	sp, #12
   d5f86:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5f8c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d5f8c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5f8e:	8843      	ldrh	r3, [r0, #2]
   d5f90:	2b0a      	cmp	r3, #10
   d5f92:	d008      	beq.n	d5fa6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5f94:	2b50      	cmp	r3, #80	; 0x50
   d5f96:	d10b      	bne.n	d5fb0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d5f98:	4b09      	ldr	r3, [pc, #36]	; (d5fc0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5f9a:	681b      	ldr	r3, [r3, #0]
   d5f9c:	b14b      	cbz	r3, d5fb2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d5f9e:	b003      	add	sp, #12
   d5fa0:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d5fa4:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d5fa6:	f7ff ffe5 	bl	d5f74 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d5faa:	b003      	add	sp, #12
   d5fac:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5fb0:	2300      	movs	r3, #0
   d5fb2:	9300      	str	r3, [sp, #0]
   d5fb4:	461a      	mov	r2, r3
   d5fb6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5fba:	f7fe fd2d 	bl	d4a18 <system_ctrl_set_result>
}
   d5fbe:	e7f4      	b.n	d5faa <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d5fc0:	2003e6e8 	.word	0x2003e6e8

000d5fc4 <module_user_init_hook>:
{
   d5fc4:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5fc6:	4c12      	ldr	r4, [pc, #72]	; (d6010 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d5fc8:	4812      	ldr	r0, [pc, #72]	; (d6014 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5fca:	4d13      	ldr	r5, [pc, #76]	; (d6018 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d5fcc:	2100      	movs	r1, #0
   d5fce:	f7fe fdd5 	bl	d4b7c <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5fd2:	6823      	ldr	r3, [r4, #0]
   d5fd4:	42ab      	cmp	r3, r5
   d5fd6:	4b11      	ldr	r3, [pc, #68]	; (d601c <module_user_init_hook+0x58>)
   d5fd8:	bf0c      	ite	eq
   d5fda:	2201      	moveq	r2, #1
   d5fdc:	2200      	movne	r2, #0
   d5fde:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d5fe0:	d002      	beq.n	d5fe8 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d5fe2:	f7ff ffbb 	bl	d5f5c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d5fe6:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5fe8:	f7fe fb74 	bl	d46d4 <HAL_RNG_GetRandomNumber>
   d5fec:	4604      	mov	r4, r0
    srand(seed);
   d5fee:	f001 f905 	bl	d71fc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5ff2:	4b0b      	ldr	r3, [pc, #44]	; (d6020 <module_user_init_hook+0x5c>)
   d5ff4:	b113      	cbz	r3, d5ffc <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d5ff6:	4620      	mov	r0, r4
   d5ff8:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5ffc:	2100      	movs	r1, #0
   d5ffe:	4808      	ldr	r0, [pc, #32]	; (d6020 <module_user_init_hook+0x5c>)
   d6000:	f7fe fd7c 	bl	d4afc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d6004:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6008:	4806      	ldr	r0, [pc, #24]	; (d6024 <module_user_init_hook+0x60>)
   d600a:	2100      	movs	r1, #0
   d600c:	f7fe bcfa 	b.w	d4a04 <system_ctrl_set_app_request_handler>
   d6010:	2003f400 	.word	0x2003f400
   d6014:	000d5f05 	.word	0x000d5f05
   d6018:	9a271c1e 	.word	0x9a271c1e
   d601c:	2003e6e4 	.word	0x2003e6e4
   d6020:	00000000 	.word	0x00000000
   d6024:	000d5f8d 	.word	0x000d5f8d

000d6028 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d6028:	4770      	bx	lr

000d602a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d602a:	2000      	movs	r0, #0
   d602c:	4770      	bx	lr

000d602e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d602e:	b510      	push	{r4, lr}
   d6030:	2110      	movs	r1, #16
   d6032:	4604      	mov	r4, r0
   d6034:	f001 f89b 	bl	d716e <_ZdlPvj>
   d6038:	4620      	mov	r0, r4
   d603a:	bd10      	pop	{r4, pc}

000d603c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d603c:	b508      	push	{r3, lr}
      { delete this; }
   d603e:	f7ff fff6 	bl	d602e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d6042:	bd08      	pop	{r3, pc}

000d6044 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d6044:	b530      	push	{r4, r5, lr}
        type_(type) {
   d6046:	2200      	movs	r2, #0
   d6048:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d604c:	6002      	str	r2, [r0, #0]
   d604e:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d6050:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d6052:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d6054:	680c      	ldr	r4, [r1, #0]
   d6056:	8085      	strh	r5, [r0, #4]
   d6058:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d605a:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d605c:	bd30      	pop	{r4, r5, pc}

000d605e <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d605e:	b510      	push	{r4, lr}
   d6060:	4604      	mov	r4, r0
    free((void*)msg_);
   d6062:	6800      	ldr	r0, [r0, #0]
   d6064:	f7fe fd62 	bl	d4b2c <free>
}
   d6068:	4620      	mov	r0, r4
   d606a:	bd10      	pop	{r4, pc}

000d606c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d606c:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d606e:	68c4      	ldr	r4, [r0, #12]
   d6070:	b1f4      	cbz	r4, d60b0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d6072:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d6074:	2b02      	cmp	r3, #2
   d6076:	d103      	bne.n	d6080 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d6078:	f104 000c 	add.w	r0, r4, #12
   d607c:	f7ff ffef 	bl	d605e <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d6080:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d6082:	b135      	cbz	r5, d6092 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d6084:	4628      	mov	r0, r5
   d6086:	f7fe f883 	bl	d4190 <_ZNSt14_Function_baseD1Ev>
   d608a:	2110      	movs	r1, #16
   d608c:	4628      	mov	r0, r5
   d608e:	f001 f86e 	bl	d716e <_ZdlPvj>
   d6092:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d6094:	b135      	cbz	r5, d60a4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d6096:	4628      	mov	r0, r5
   d6098:	f7fe f87a 	bl	d4190 <_ZNSt14_Function_baseD1Ev>
   d609c:	2110      	movs	r1, #16
   d609e:	4628      	mov	r0, r5
   d60a0:	f001 f865 	bl	d716e <_ZdlPvj>
   d60a4:	4620      	mov	r0, r4
   d60a6:	2114      	movs	r1, #20
   d60a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d60ac:	f001 b85f 	b.w	d716e <_ZdlPvj>
   d60b0:	bd38      	pop	{r3, r4, r5, pc}

000d60b2 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
{
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d60b2:	b510      	push	{r4, lr}
   d60b4:	b088      	sub	sp, #32
   d60b6:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d60b8:	4668      	mov	r0, sp
   d60ba:	f7fe fe28 	bl	d4d0e <_ZN6StringC1EPKc>
    return (*fn)(p);
   d60be:	4669      	mov	r1, sp
   d60c0:	a804      	add	r0, sp, #16
   d60c2:	f7fe fe6f 	bl	d4da4 <_ZN6StringC1ERKS_>
   d60c6:	a804      	add	r0, sp, #16
   d60c8:	47a0      	blx	r4
   d60ca:	4604      	mov	r4, r0
   d60cc:	a804      	add	r0, sp, #16
   d60ce:	f7fe fdd3 	bl	d4c78 <_ZN6StringD1Ev>
    String p(param);
   d60d2:	4668      	mov	r0, sp
   d60d4:	f7fe fdd0 	bl	d4c78 <_ZN6StringD1Ev>
}
   d60d8:	4620      	mov	r0, r4
   d60da:	b008      	add	sp, #32
   d60dc:	bd10      	pop	{r4, pc}

000d60de <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d60de:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d60e0:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   d60e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   d60e6:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   d60e8:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d60ea:	461a      	mov	r2, r3
   d60ec:	4669      	mov	r1, sp
   d60ee:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   d60f0:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   d60f4:	f8ad 4000 	strh.w	r4, [sp]
   d60f8:	f7fe fce8 	bl	d4acc <spark_function>
}
   d60fc:	b004      	add	sp, #16
   d60fe:	bd10      	pop	{r4, pc}

000d6100 <_ZN10CloudClass13publishVitalsEm>:
    }

    return p.future();
}

int CloudClass::publishVitals(system_tick_t period_s_) {
   d6100:	4608      	mov	r0, r1
    return spark_publish_vitals(period_s_, nullptr);
   d6102:	2100      	movs	r1, #0
   d6104:	f7fe bd02 	b.w	d4b0c <spark_publish_vitals>

000d6108 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d6108:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d610a:	460e      	mov	r6, r1
   d610c:	4604      	mov	r4, r0
   d610e:	f856 3b04 	ldr.w	r3, [r6], #4
   d6112:	9300      	str	r3, [sp, #0]
   d6114:	460d      	mov	r5, r1
   d6116:	a801      	add	r0, sp, #4
   d6118:	4631      	mov	r1, r6
   d611a:	f7fe fe68 	bl	d4dee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d611e:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6120:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d6122:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6124:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d6126:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d6128:	2300      	movs	r3, #0
   d612a:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d612c:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d612e:	f7fe f8b1 	bl	d4294 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6132:	4630      	mov	r0, r6
   d6134:	f7fe f8ae 	bl	d4294 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d6138:	4628      	mov	r0, r5
   d613a:	2108      	movs	r1, #8
   d613c:	f001 f817 	bl	d716e <_ZdlPvj>
        return p;
    }
   d6140:	4620      	mov	r0, r4
   d6142:	b002      	add	sp, #8
   d6144:	bd70      	pop	{r4, r5, r6, pc}

000d6146 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d6146:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d6148:	b510      	push	{r4, lr}
      if (_M_empty())
   d614a:	b90a      	cbnz	r2, d6150 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d614c:	f001 f815 	bl	d717a <_ZSt25__throw_bad_function_callv>
    }
   d6150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6154:	68c3      	ldr	r3, [r0, #12]
   d6156:	4718      	bx	r3

000d6158 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6158:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d615a:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d615c:	f100 0110 	add.w	r1, r0, #16
   d6160:	f7ff fff1 	bl	d6146 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d6164:	bd08      	pop	{r3, pc}

000d6166 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d6166:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d6168:	b510      	push	{r4, lr}
      if (_M_empty())
   d616a:	b90a      	cbnz	r2, d6170 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d616c:	f001 f805 	bl	d717a <_ZSt25__throw_bad_function_callv>
    }
   d6170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6174:	68c3      	ldr	r3, [r0, #12]
   d6176:	4718      	bx	r3

000d6178 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6178:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d617a:	6800      	ldr	r0, [r0, #0]
   d617c:	f100 0110 	add.w	r1, r0, #16
   d6180:	f7ff fff1 	bl	d6166 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d6184:	bd08      	pop	{r3, pc}
	...

000d6188 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d6188:	b538      	push	{r3, r4, r5, lr}
   d618a:	2300      	movs	r3, #0
   d618c:	4604      	mov	r4, r0
   d618e:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6190:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d6192:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6194:	f7fd ff7d 	bl	d4092 <_Znwj>
   d6198:	b128      	cbz	r0, d61a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d619a:	2301      	movs	r3, #1
   d619c:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d61a0:	4b02      	ldr	r3, [pc, #8]	; (d61ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d61a2:	6003      	str	r3, [r0, #0]
   d61a4:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d61a6:	6020      	str	r0, [r4, #0]
	}
   d61a8:	4620      	mov	r0, r4
   d61aa:	bd38      	pop	{r3, r4, r5, pc}
   d61ac:	000d7648 	.word	0x000d7648

000d61b0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d61b0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d61b2:	2300      	movs	r3, #0
   d61b4:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d61b6:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d61b8:	4604      	mov	r4, r0
   d61ba:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d61bc:	b12b      	cbz	r3, d61ca <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d61be:	2202      	movs	r2, #2
   d61c0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d61c2:	68eb      	ldr	r3, [r5, #12]
   d61c4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d61c6:	68ab      	ldr	r3, [r5, #8]
   d61c8:	60a3      	str	r3, [r4, #8]
    }
   d61ca:	4620      	mov	r0, r4
   d61cc:	bd38      	pop	{r3, r4, r5, pc}
	...

000d61d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d61d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d61d2:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d61d4:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d61d6:	4668      	mov	r0, sp
   d61d8:	f7ff ff34 	bl	d6044 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d61dc:	f04f 0302 	mov.w	r3, #2
   d61e0:	e8d4 2f4f 	ldrexb	r2, [r4]
   d61e4:	2a00      	cmp	r2, #0
   d61e6:	d103      	bne.n	d61f0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d61e8:	e8c4 3f41 	strexb	r1, r3, [r4]
   d61ec:	2900      	cmp	r1, #0
   d61ee:	d1f7      	bne.n	d61e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d61f0:	d125      	bne.n	d623e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d61f2:	f104 050c 	add.w	r5, r4, #12
   d61f6:	4669      	mov	r1, sp
   d61f8:	4628      	mov	r0, r5
   d61fa:	f7ff ff23 	bl	d6044 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d61fe:	f3bf 8f5b 	dmb	ish
   d6202:	2301      	movs	r3, #1
   d6204:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d6206:	2000      	movs	r0, #0
   d6208:	f104 0308 	add.w	r3, r4, #8
   d620c:	f3bf 8f5b 	dmb	ish
   d6210:	e853 6f00 	ldrex	r6, [r3]
   d6214:	e843 0200 	strex	r2, r0, [r3]
   d6218:	2a00      	cmp	r2, #0
   d621a:	d1f9      	bne.n	d6210 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d621c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d6220:	b16e      	cbz	r6, d623e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d6222:	f7fe fbdf 	bl	d49e4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d6226:	b178      	cbz	r0, d6248 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d6228:	4629      	mov	r1, r5
   d622a:	4630      	mov	r0, r6
   d622c:	f7ff ff8b 	bl	d6146 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d6230:	4630      	mov	r0, r6
   d6232:	f7fd ffad 	bl	d4190 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d6236:	2110      	movs	r1, #16
   d6238:	4630      	mov	r0, r6
   d623a:	f000 ff98 	bl	d716e <_ZdlPvj>
        p_->setError(std::move(error));
   d623e:	4668      	mov	r0, sp
   d6240:	f7ff ff0d 	bl	d605e <_ZN8particle5ErrorD1Ev>
    }
   d6244:	b009      	add	sp, #36	; 0x24
   d6246:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d6248:	4631      	mov	r1, r6
   d624a:	a802      	add	r0, sp, #8
   d624c:	f7ff ffb0 	bl	d61b0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d6250:	68e0      	ldr	r0, [r4, #12]
   d6252:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d6256:	b108      	cbz	r0, d625c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d6258:	f001 f81e 	bl	d7298 <strdup>
        type_(type) {
   d625c:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d625e:	2010      	movs	r0, #16
   d6260:	f8ad 501c 	strh.w	r5, [sp, #28]
   d6264:	f7fd ff15 	bl	d4092 <_Znwj>
   d6268:	4605      	mov	r5, r0
   d626a:	b1e8      	cbz	r0, d62a8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d626c:	2700      	movs	r7, #0
   d626e:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6270:	2018      	movs	r0, #24
   d6272:	f7fd ff0e 	bl	d4092 <_Znwj>
   d6276:	4604      	mov	r4, r0
   d6278:	b188      	cbz	r0, d629e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d627a:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d627c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d627e:	a802      	add	r0, sp, #8
   d6280:	f7ff fe20 	bl	d5ec4 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6284:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d6286:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6288:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d628a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d628c:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d628e:	a906      	add	r1, sp, #24
   d6290:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6292:	60e3      	str	r3, [r4, #12]
   d6294:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d6298:	9205      	str	r2, [sp, #20]
   d629a:	f7ff fed3 	bl	d6044 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d629e:	4b08      	ldr	r3, [pc, #32]	; (d62c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d62a0:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d62a2:	4b08      	ldr	r3, [pc, #32]	; (d62c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d62a4:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d62a6:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d62a8:	a806      	add	r0, sp, #24
   d62aa:	f7ff fed8 	bl	d605e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d62ae:	a802      	add	r0, sp, #8
   d62b0:	f7fd ff6e 	bl	d4190 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d62b4:	2200      	movs	r2, #0
   d62b6:	4629      	mov	r1, r5
   d62b8:	4803      	ldr	r0, [pc, #12]	; (d62c8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d62ba:	f7fe fb9b 	bl	d49f4 <application_thread_invoke>
   d62be:	e7b7      	b.n	d6230 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d62c0:	000d6159 	.word	0x000d6159
   d62c4:	000d63f1 	.word	0x000d63f1
   d62c8:	000d69d5 	.word	0x000d69d5

000d62cc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d62cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d62d0:	b08a      	sub	sp, #40	; 0x28
   d62d2:	4605      	mov	r5, r0
   d62d4:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d62d8:	460c      	mov	r4, r1
   d62da:	4617      	mov	r7, r2
   d62dc:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d62de:	f7fe fbfd 	bl	d4adc <spark_cloud_flag_connected>
   d62e2:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d62e4:	4682      	mov	sl, r0
   d62e6:	bb38      	cbnz	r0, d6338 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d62e8:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d62ec:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d62ee:	a905      	add	r1, sp, #20
   d62f0:	4630      	mov	r0, r6
   d62f2:	f8ad 3018 	strh.w	r3, [sp, #24]
   d62f6:	f7ff fea5 	bl	d6044 <_ZN8particle5ErrorC1EOS0_>
   d62fa:	2014      	movs	r0, #20
   d62fc:	f7fd fec9 	bl	d4092 <_Znwj>
   d6300:	4604      	mov	r4, r0
   d6302:	b148      	cbz	r0, d6318 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d6304:	2302      	movs	r3, #2
   d6306:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6308:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d630a:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d630e:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d6310:	4631      	mov	r1, r6
   d6312:	300c      	adds	r0, #12
   d6314:	f7ff fe96 	bl	d6044 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d6318:	4628      	mov	r0, r5
	: __shared_count(__p)
   d631a:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d631c:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d6320:	f7ff ff32 	bl	d6188 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d6324:	4630      	mov	r0, r6
   d6326:	f7ff fe9a 	bl	d605e <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d632a:	a805      	add	r0, sp, #20
   d632c:	f7ff fe97 	bl	d605e <_ZN8particle5ErrorD1Ev>
}
   d6330:	4628      	mov	r0, r5
   d6332:	b00a      	add	sp, #40	; 0x28
   d6334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d6338:	230c      	movs	r3, #12
   d633a:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d633e:	2014      	movs	r0, #20
   d6340:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d6344:	9307      	str	r3, [sp, #28]
   d6346:	f7fd fea4 	bl	d4092 <_Znwj>
   d634a:	4601      	mov	r1, r0
   d634c:	b128      	cbz	r0, d635a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d634e:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d6352:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6356:	f880 a001 	strb.w	sl, [r0, #1]
   d635a:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d635c:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d635e:	f7ff ff13 	bl	d6188 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d6362:	4b22      	ldr	r3, [pc, #136]	; (d63ec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d6364:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d6366:	2008      	movs	r0, #8
   d6368:	f7fd fe93 	bl	d4092 <_Znwj>
   d636c:	4682      	mov	sl, r0
   d636e:	b128      	cbz	r0, d637c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6370:	9b03      	ldr	r3, [sp, #12]
   d6372:	f840 3b04 	str.w	r3, [r0], #4
   d6376:	a904      	add	r1, sp, #16
   d6378:	f7fe fd39 	bl	d4dee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d637c:	9600      	str	r6, [sp, #0]
   d637e:	fa5f f389 	uxtb.w	r3, r9
   d6382:	4642      	mov	r2, r8
   d6384:	4639      	mov	r1, r7
   d6386:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d6388:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d638c:	f7fe fbae 	bl	d4aec <spark_send_event>
   d6390:	b9b8      	cbnz	r0, d63c2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d6392:	9b03      	ldr	r3, [sp, #12]
   d6394:	785b      	ldrb	r3, [r3, #1]
   d6396:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d639a:	b993      	cbnz	r3, d63c2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d639c:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d63a0:	a905      	add	r1, sp, #20
   d63a2:	a803      	add	r0, sp, #12
   d63a4:	9205      	str	r2, [sp, #20]
   d63a6:	f8ad 3018 	strh.w	r3, [sp, #24]
   d63aa:	f7ff ff11 	bl	d61d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d63ae:	a805      	add	r0, sp, #20
   d63b0:	f7ff fe55 	bl	d605e <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d63b4:	a805      	add	r0, sp, #20
   d63b6:	9909      	ldr	r1, [sp, #36]	; 0x24
   d63b8:	f7ff fea6 	bl	d6108 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d63bc:	a806      	add	r0, sp, #24
   d63be:	f7fd ff69 	bl	d4294 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d63c2:	9b03      	ldr	r3, [sp, #12]
   d63c4:	9305      	str	r3, [sp, #20]
   d63c6:	a904      	add	r1, sp, #16
   d63c8:	a806      	add	r0, sp, #24
   d63ca:	f7fe fd10 	bl	d4dee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d63ce:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d63d0:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d63d2:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d63d4:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d63d6:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d63d8:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d63da:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d63dc:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d63de:	f7fd ff59 	bl	d4294 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d63e2:	a804      	add	r0, sp, #16
   d63e4:	f7fd ff56 	bl	d4294 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d63e8:	e7a2      	b.n	d6330 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d63ea:	bf00      	nop
   d63ec:	000d64b5 	.word	0x000d64b5

000d63f0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d63f0:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d63f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d63f4:	4605      	mov	r5, r0
	  switch (__op)
   d63f6:	d007      	beq.n	d6408 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d63f8:	2a03      	cmp	r2, #3
   d63fa:	d018      	beq.n	d642e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d63fc:	2a01      	cmp	r2, #1
   d63fe:	d101      	bne.n	d6404 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d6400:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6402:	6003      	str	r3, [r0, #0]
	}
   d6404:	2000      	movs	r0, #0
   d6406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d6408:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d640a:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d640c:	f7fd fe41 	bl	d4092 <_Znwj>
   d6410:	4604      	mov	r4, r0
   d6412:	b150      	cbz	r0, d642a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d6414:	4631      	mov	r1, r6
   d6416:	f7ff fecb 	bl	d61b0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d641a:	6930      	ldr	r0, [r6, #16]
   d641c:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d6420:	b108      	cbz	r0, d6426 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d6422:	f000 ff39 	bl	d7298 <strdup>
        type_(type) {
   d6426:	6120      	str	r0, [r4, #16]
   d6428:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d642a:	602c      	str	r4, [r5, #0]
	}
   d642c:	e7ea      	b.n	d6404 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d642e:	6804      	ldr	r4, [r0, #0]
   d6430:	2c00      	cmp	r4, #0
   d6432:	d0e7      	beq.n	d6404 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d6434:	f104 0010 	add.w	r0, r4, #16
   d6438:	f7ff fe11 	bl	d605e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d643c:	4620      	mov	r0, r4
   d643e:	f7fd fea7 	bl	d4190 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d6442:	2118      	movs	r1, #24
   d6444:	4620      	mov	r0, r4
   d6446:	f000 fe92 	bl	d716e <_ZdlPvj>
   d644a:	e7db      	b.n	d6404 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d644c <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d644c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d644e:	2300      	movs	r3, #0
   d6450:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d6452:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d6454:	4604      	mov	r4, r0
   d6456:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d6458:	b12b      	cbz	r3, d6466 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d645a:	2202      	movs	r2, #2
   d645c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d645e:	68eb      	ldr	r3, [r5, #12]
   d6460:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d6462:	68ab      	ldr	r3, [r5, #8]
   d6464:	60a3      	str	r3, [r4, #8]
    }
   d6466:	4620      	mov	r0, r4
   d6468:	bd38      	pop	{r3, r4, r5, pc}

000d646a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d646a:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d646c:	b570      	push	{r4, r5, r6, lr}
   d646e:	4604      	mov	r4, r0
	  switch (__op)
   d6470:	d007      	beq.n	d6482 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d6472:	2a03      	cmp	r2, #3
   d6474:	d012      	beq.n	d649c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d6476:	2a01      	cmp	r2, #1
   d6478:	d101      	bne.n	d647e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d647a:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d647c:	6003      	str	r3, [r0, #0]
	}
   d647e:	2000      	movs	r0, #0
   d6480:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d6482:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d6484:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d6486:	f7fd fe04 	bl	d4092 <_Znwj>
   d648a:	4605      	mov	r5, r0
   d648c:	b120      	cbz	r0, d6498 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d648e:	4631      	mov	r1, r6
   d6490:	f7ff ffdc 	bl	d644c <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d6494:	7c33      	ldrb	r3, [r6, #16]
   d6496:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d6498:	6025      	str	r5, [r4, #0]
	}
   d649a:	e7f0      	b.n	d647e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d649c:	6804      	ldr	r4, [r0, #0]
   d649e:	2c00      	cmp	r4, #0
   d64a0:	d0ed      	beq.n	d647e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d64a2:	4620      	mov	r0, r4
   d64a4:	f7fd fe74 	bl	d4190 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d64a8:	2114      	movs	r1, #20
   d64aa:	4620      	mov	r0, r4
   d64ac:	f000 fe5f 	bl	d716e <_ZdlPvj>
   d64b0:	e7e5      	b.n	d647e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d64b4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d64b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d64b6:	b089      	sub	sp, #36	; 0x24
   d64b8:	4604      	mov	r4, r0
   d64ba:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d64bc:	a801      	add	r0, sp, #4
   d64be:	4611      	mov	r1, r2
   d64c0:	f7ff fe22 	bl	d6108 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d64c4:	b1a4      	cbz	r4, d64f0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d64c6:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d64c8:	b11d      	cbz	r5, d64d2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d64ca:	4628      	mov	r0, r5
   d64cc:	f000 fee4 	bl	d7298 <strdup>
   d64d0:	4605      	mov	r5, r0
   d64d2:	a801      	add	r0, sp, #4
   d64d4:	a903      	add	r1, sp, #12
        type_(type) {
   d64d6:	9503      	str	r5, [sp, #12]
   d64d8:	f8ad 4010 	strh.w	r4, [sp, #16]
   d64dc:	f7ff fe78 	bl	d61d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d64e0:	a803      	add	r0, sp, #12
   d64e2:	f7ff fdbc 	bl	d605e <_ZN8particle5ErrorD1Ev>
   d64e6:	a802      	add	r0, sp, #8
   d64e8:	f7fd fed4 	bl	d4294 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d64ec:	b009      	add	sp, #36	; 0x24
   d64ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d64f0:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d64f2:	2301      	movs	r3, #1
   d64f4:	e8d5 2f4f 	ldrexb	r2, [r5]
   d64f8:	2a00      	cmp	r2, #0
   d64fa:	d103      	bne.n	d6504 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d64fc:	e8c5 3f41 	strexb	r1, r3, [r5]
   d6500:	2900      	cmp	r1, #0
   d6502:	d1f7      	bne.n	d64f4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d6504:	d1ef      	bne.n	d64e6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d6506:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d6508:	f3bf 8f5b 	dmb	ish
   d650c:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d650e:	1d2b      	adds	r3, r5, #4
   d6510:	f3bf 8f5b 	dmb	ish
   d6514:	e853 6f00 	ldrex	r6, [r3]
   d6518:	e843 4200 	strex	r2, r4, [r3]
   d651c:	2a00      	cmp	r2, #0
   d651e:	d1f9      	bne.n	d6514 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d6520:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d6524:	2e00      	cmp	r6, #0
   d6526:	d0de      	beq.n	d64e6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d6528:	4620      	mov	r0, r4
   d652a:	f7fe fa5b 	bl	d49e4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d652e:	4607      	mov	r7, r0
   d6530:	b160      	cbz	r0, d654c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d6532:	f105 010c 	add.w	r1, r5, #12
   d6536:	4630      	mov	r0, r6
   d6538:	f7ff fe15 	bl	d6166 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d653c:	4630      	mov	r0, r6
   d653e:	f7fd fe27 	bl	d4190 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d6542:	2110      	movs	r1, #16
   d6544:	4630      	mov	r0, r6
   d6546:	f000 fe12 	bl	d716e <_ZdlPvj>
   d654a:	e7cc      	b.n	d64e6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d654c:	4631      	mov	r1, r6
   d654e:	a803      	add	r0, sp, #12
   d6550:	f7ff ff7c 	bl	d644c <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6554:	7b2b      	ldrb	r3, [r5, #12]
   d6556:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d655a:	2010      	movs	r0, #16
   d655c:	f7fd fd99 	bl	d4092 <_Znwj>
   d6560:	4605      	mov	r5, r0
   d6562:	b1d0      	cbz	r0, d659a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d6564:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6566:	2014      	movs	r0, #20
   d6568:	f7fd fd93 	bl	d4092 <_Znwj>
   d656c:	4604      	mov	r4, r0
   d656e:	b178      	cbz	r0, d6590 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d6570:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d6572:	4601      	mov	r1, r0
   d6574:	a803      	add	r0, sp, #12
   d6576:	f7ff fca5 	bl	d5ec4 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d657a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d657c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d657e:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6580:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d6582:	9205      	str	r2, [sp, #20]
   d6584:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6586:	60e3      	str	r3, [r4, #12]
   d6588:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d658c:	9206      	str	r2, [sp, #24]
   d658e:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d6590:	4b06      	ldr	r3, [pc, #24]	; (d65ac <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d6592:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6594:	4b06      	ldr	r3, [pc, #24]	; (d65b0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6596:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d6598:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d659a:	a803      	add	r0, sp, #12
   d659c:	f7fd fdf8 	bl	d4190 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d65a0:	2200      	movs	r2, #0
   d65a2:	4629      	mov	r1, r5
   d65a4:	4803      	ldr	r0, [pc, #12]	; (d65b4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d65a6:	f7fe fa25 	bl	d49f4 <application_thread_invoke>
   d65aa:	e7c7      	b.n	d653c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d65ac:	000d6179 	.word	0x000d6179
   d65b0:	000d646b 	.word	0x000d646b
   d65b4:	000d69d5 	.word	0x000d69d5

000d65b8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d65b8:	4770      	bx	lr

000d65ba <_ZN9IPAddressD0Ev>:
   d65ba:	b510      	push	{r4, lr}
   d65bc:	2118      	movs	r1, #24
   d65be:	4604      	mov	r4, r0
   d65c0:	f000 fdd5 	bl	d716e <_ZdlPvj>
   d65c4:	4620      	mov	r0, r4
   d65c6:	bd10      	pop	{r4, pc}

000d65c8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d65c8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d65ca:	7d03      	ldrb	r3, [r0, #20]
   d65cc:	2b06      	cmp	r3, #6
{
   d65ce:	b08d      	sub	sp, #52	; 0x34
   d65d0:	460e      	mov	r6, r1
   d65d2:	f100 0704 	add.w	r7, r0, #4
   d65d6:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d65da:	d012      	beq.n	d6602 <_ZNK9IPAddress7printToER5Print+0x3a>
   d65dc:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d65e0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d65e4:	220a      	movs	r2, #10
   d65e6:	4630      	mov	r0, r6
   d65e8:	f7fe fc53 	bl	d4e92 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d65ec:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d65ee:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d65f0:	d019      	beq.n	d6626 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d65f2:	2c00      	cmp	r4, #0
   d65f4:	d0f4      	beq.n	d65e0 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d65f6:	212e      	movs	r1, #46	; 0x2e
   d65f8:	4630      	mov	r0, r6
   d65fa:	f7fe fc3b 	bl	d4e74 <_ZN5Print5printEc>
   d65fe:	4404      	add	r4, r0
   d6600:	e7ee      	b.n	d65e0 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6602:	232f      	movs	r3, #47	; 0x2f
   d6604:	466a      	mov	r2, sp
   d6606:	4639      	mov	r1, r7
   d6608:	200a      	movs	r0, #10
		buf[0] = 0;
   d660a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d660e:	f7fe f8d1 	bl	d47b4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d6612:	4668      	mov	r0, sp
   d6614:	f000 fe5d 	bl	d72d2 <strlen>
   d6618:	6833      	ldr	r3, [r6, #0]
   d661a:	4602      	mov	r2, r0
   d661c:	68db      	ldr	r3, [r3, #12]
   d661e:	4669      	mov	r1, sp
   d6620:	4630      	mov	r0, r6
   d6622:	4798      	blx	r3
   d6624:	4604      	mov	r4, r0
    }
    return n;
}
   d6626:	4620      	mov	r0, r4
   d6628:	b00d      	add	sp, #52	; 0x34
   d662a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d662c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d662c:	b510      	push	{r4, lr}
   d662e:	4b05      	ldr	r3, [pc, #20]	; (d6644 <_ZN9IPAddressC1Ev+0x18>)
   d6630:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d6632:	2211      	movs	r2, #17
   d6634:	f840 3b04 	str.w	r3, [r0], #4
   d6638:	2100      	movs	r1, #0
   d663a:	f000 fdd7 	bl	d71ec <memset>
}
   d663e:	4620      	mov	r0, r4
   d6640:	bd10      	pop	{r4, pc}
   d6642:	bf00      	nop
   d6644:	000d7664 	.word	0x000d7664

000d6648 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d6648:	4603      	mov	r3, r0
   d664a:	4a07      	ldr	r2, [pc, #28]	; (d6668 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d664c:	b510      	push	{r4, lr}
   d664e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d6652:	f101 0210 	add.w	r2, r1, #16
   d6656:	f851 4b04 	ldr.w	r4, [r1], #4
   d665a:	f843 4b04 	str.w	r4, [r3], #4
   d665e:	4291      	cmp	r1, r2
   d6660:	d1f9      	bne.n	d6656 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d6662:	780a      	ldrb	r2, [r1, #0]
   d6664:	701a      	strb	r2, [r3, #0]
}
   d6666:	bd10      	pop	{r4, pc}
   d6668:	000d7664 	.word	0x000d7664

000d666c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d666c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d666e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d6672:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d6676:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d667a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d667e:	2304      	movs	r3, #4
   d6680:	6041      	str	r1, [r0, #4]
   d6682:	7503      	strb	r3, [r0, #20]
}
   d6684:	bd10      	pop	{r4, pc}

000d6686 <_ZN9IPAddressaSEPKh>:
{
   d6686:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d6688:	78cb      	ldrb	r3, [r1, #3]
   d668a:	9300      	str	r3, [sp, #0]
   d668c:	788b      	ldrb	r3, [r1, #2]
   d668e:	784a      	ldrb	r2, [r1, #1]
   d6690:	7809      	ldrb	r1, [r1, #0]
   d6692:	f7ff ffeb 	bl	d666c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d6696:	b002      	add	sp, #8
   d6698:	bd10      	pop	{r4, pc}

000d669a <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d669a:	7441      	strb	r1, [r0, #17]
}
   d669c:	4770      	bx	lr

000d669e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d669e:	4770      	bx	lr

000d66a0 <_ZN9USBSerial4readEv>:
{
   d66a0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d66a2:	2100      	movs	r1, #0
   d66a4:	7c00      	ldrb	r0, [r0, #16]
   d66a6:	f7fe f95d 	bl	d4964 <HAL_USB_USART_Receive_Data>
}
   d66aa:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d66ae:	bd08      	pop	{r3, pc}

000d66b0 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d66b0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d66b2:	2101      	movs	r1, #1
   d66b4:	7c00      	ldrb	r0, [r0, #16]
   d66b6:	f7fe f955 	bl	d4964 <HAL_USB_USART_Receive_Data>
}
   d66ba:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d66be:	bd08      	pop	{r3, pc}

000d66c0 <_ZN9USBSerial17availableForWriteEv>:
{
   d66c0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d66c2:	7c00      	ldrb	r0, [r0, #16]
   d66c4:	f7fe f946 	bl	d4954 <HAL_USB_USART_Available_Data_For_Write>
}
   d66c8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d66cc:	bd08      	pop	{r3, pc}

000d66ce <_ZN9USBSerial9availableEv>:
{
   d66ce:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d66d0:	7c00      	ldrb	r0, [r0, #16]
   d66d2:	f7fe f937 	bl	d4944 <HAL_USB_USART_Available_Data>
}
   d66d6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d66da:	bd08      	pop	{r3, pc}

000d66dc <_ZN9USBSerial5writeEh>:
{
   d66dc:	b513      	push	{r0, r1, r4, lr}
   d66de:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d66e0:	7c00      	ldrb	r0, [r0, #16]
{
   d66e2:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d66e4:	f7fe f936 	bl	d4954 <HAL_USB_USART_Available_Data_For_Write>
   d66e8:	2800      	cmp	r0, #0
   d66ea:	9901      	ldr	r1, [sp, #4]
   d66ec:	dc01      	bgt.n	d66f2 <_ZN9USBSerial5writeEh+0x16>
   d66ee:	7c60      	ldrb	r0, [r4, #17]
   d66f0:	b120      	cbz	r0, d66fc <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d66f2:	7c20      	ldrb	r0, [r4, #16]
   d66f4:	f7fe f93e 	bl	d4974 <HAL_USB_USART_Send_Data>
   d66f8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d66fc:	b002      	add	sp, #8
   d66fe:	bd10      	pop	{r4, pc}

000d6700 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d6700:	7c00      	ldrb	r0, [r0, #16]
   d6702:	f7fe b93f 	b.w	d4984 <HAL_USB_USART_Flush_Data>

000d6706 <_ZN9USBSerialD0Ev>:
   d6706:	b510      	push	{r4, lr}
   d6708:	2114      	movs	r1, #20
   d670a:	4604      	mov	r4, r0
   d670c:	f000 fd2f 	bl	d716e <_ZdlPvj>
   d6710:	4620      	mov	r0, r4
   d6712:	bd10      	pop	{r4, pc}

000d6714 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6714:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d6716:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d671a:	4604      	mov	r4, r0
   d671c:	4608      	mov	r0, r1
   d671e:	2100      	movs	r1, #0
   d6720:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d6724:	4b04      	ldr	r3, [pc, #16]	; (d6738 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d6726:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d6728:	2301      	movs	r3, #1
  _serial = serial;
   d672a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d672c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d672e:	4611      	mov	r1, r2
   d6730:	f7fe f8f0 	bl	d4914 <HAL_USB_USART_Init>
}
   d6734:	4620      	mov	r0, r4
   d6736:	bd10      	pop	{r4, pc}
   d6738:	000d7678 	.word	0x000d7678

000d673c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d673c:	7c00      	ldrb	r0, [r0, #16]
   d673e:	2200      	movs	r2, #0
   d6740:	f7fe b8f0 	b.w	d4924 <HAL_USB_USART_Begin>

000d6744 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   d6744:	7c00      	ldrb	r0, [r0, #16]
   d6746:	f7fe b8f5 	b.w	d4934 <HAL_USB_USART_End>

000d674a <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d674a:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d674c:	2214      	movs	r2, #20
{
   d674e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d6750:	2100      	movs	r1, #0
   d6752:	f000 fd4b 	bl	d71ec <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6756:	4620      	mov	r0, r4
   d6758:	bd10      	pop	{r4, pc}
	...

000d675c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d675c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d675e:	4c10      	ldr	r4, [pc, #64]	; (d67a0 <_Z16_fetch_usbserialv+0x44>)
{
   d6760:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d6762:	a803      	add	r0, sp, #12
   d6764:	f7ff fff1 	bl	d674a <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6768:	7821      	ldrb	r1, [r4, #0]
   d676a:	f3bf 8f5b 	dmb	ish
   d676e:	f011 0101 	ands.w	r1, r1, #1
   d6772:	d111      	bne.n	d6798 <_Z16_fetch_usbserialv+0x3c>
   d6774:	4620      	mov	r0, r4
   d6776:	9101      	str	r1, [sp, #4]
   d6778:	f7fd fc9c 	bl	d40b4 <__cxa_guard_acquire>
   d677c:	9901      	ldr	r1, [sp, #4]
   d677e:	b158      	cbz	r0, d6798 <_Z16_fetch_usbserialv+0x3c>
   d6780:	aa03      	add	r2, sp, #12
   d6782:	4808      	ldr	r0, [pc, #32]	; (d67a4 <_Z16_fetch_usbserialv+0x48>)
   d6784:	f7ff ffc6 	bl	d6714 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6788:	4620      	mov	r0, r4
   d678a:	f7fd fc98 	bl	d40be <__cxa_guard_release>
   d678e:	4a06      	ldr	r2, [pc, #24]	; (d67a8 <_Z16_fetch_usbserialv+0x4c>)
   d6790:	4906      	ldr	r1, [pc, #24]	; (d67ac <_Z16_fetch_usbserialv+0x50>)
   d6792:	4804      	ldr	r0, [pc, #16]	; (d67a4 <_Z16_fetch_usbserialv+0x48>)
   d6794:	f000 fce6 	bl	d7164 <__aeabi_atexit>
	return _usbserial;
}
   d6798:	4802      	ldr	r0, [pc, #8]	; (d67a4 <_Z16_fetch_usbserialv+0x48>)
   d679a:	b008      	add	sp, #32
   d679c:	bd10      	pop	{r4, pc}
   d679e:	bf00      	nop
   d67a0:	2003e6ec 	.word	0x2003e6ec
   d67a4:	2003e6f0 	.word	0x2003e6f0
   d67a8:	2003e630 	.word	0x2003e630
   d67ac:	000d669f 	.word	0x000d669f

000d67b0 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d67b0:	4700      	bx	r0
	...

000d67b4 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d67b4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d67b8:	2400      	movs	r4, #0
{
   d67ba:	461d      	mov	r5, r3
   d67bc:	460f      	mov	r7, r1
   d67be:	4690      	mov	r8, r2
   d67c0:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   d67c2:	f7fd ff7f 	bl	d46c4 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   d67c6:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d67c8:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {0};
   d67cc:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d67d0:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {0};
   d67d4:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   d67d8:	bfa2      	ittt	ge
   d67da:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d67de:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   d67e2:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d67e4:	4907      	ldr	r1, [pc, #28]	; (d6804 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   d67e6:	9400      	str	r4, [sp, #0]
   d67e8:	4643      	mov	r3, r8
   d67ea:	463a      	mov	r2, r7
   d67ec:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d67ee:	bfa8      	it	ge
   d67f0:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d67f4:	f7fd ff5e 	bl	d46b4 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d67f8:	fab0 f080 	clz	r0, r0
   d67fc:	0940      	lsrs	r0, r0, #5
   d67fe:	b004      	add	sp, #16
   d6800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6804:	000d67b1 	.word	0x000d67b1

000d6808 <_Z15detachInterruptt>:
 * Input          : pin number to which the interrupt was attached
 * Output         : None.
 * Return         : true or false
 *******************************************************************************/
bool detachInterrupt(uint16_t pin)
{
   d6808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d680a:	4604      	mov	r4, r0
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Detach(pin)) {
   d680c:	f7fd ff5a 	bl	d46c4 <HAL_Interrupts_Detach>
   d6810:	4605      	mov	r5, r0
   d6812:	b970      	cbnz	r0, d6832 <_Z15detachInterruptt+0x2a>
        return false;
    }
    if (handlers[pin]) {
   d6814:	4f08      	ldr	r7, [pc, #32]	; (d6838 <_Z15detachInterruptt+0x30>)
   d6816:	f857 6024 	ldr.w	r6, [r7, r4, lsl #2]
   d681a:	b146      	cbz	r6, d682e <_Z15detachInterruptt+0x26>
   d681c:	4630      	mov	r0, r6
   d681e:	f7fd fcb7 	bl	d4190 <_ZNSt14_Function_baseD1Ev>
        delete handlers[pin];
   d6822:	2110      	movs	r1, #16
   d6824:	4630      	mov	r0, r6
   d6826:	f000 fca2 	bl	d716e <_ZdlPvj>
        handlers[pin] = nullptr;
   d682a:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
    }
    return true;
   d682e:	2001      	movs	r0, #1
   d6830:	e000      	b.n	d6834 <_Z15detachInterruptt+0x2c>
        return false;
   d6832:	2000      	movs	r0, #0
}
   d6834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d6836:	bf00      	nop
   d6838:	2003e704 	.word	0x2003e704

000d683c <tone>:

#include "spark_wiring_tone.h"
#include "tone_hal.h"

void tone(uint8_t pin, unsigned int frequency, unsigned long duration)
{
   d683c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   d683e:	b287      	uxth	r7, r0
{
   d6840:	4604      	mov	r4, r0
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   d6842:	4638      	mov	r0, r7
{
   d6844:	460d      	mov	r5, r1
   d6846:	4616      	mov	r6, r2
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   d6848:	f000 fbe4 	bl	d7014 <pinAvailable>
   d684c:	b160      	cbz	r0, d6868 <tone+0x2c>
   d684e:	2102      	movs	r1, #2
   d6850:	4638      	mov	r0, r7
   d6852:	f7fd ff0f 	bl	d4674 <HAL_Validate_Pin_Function>
   d6856:	2802      	cmp	r0, #2
   d6858:	d106      	bne.n	d6868 <tone+0x2c>
        HAL_Tone_Start(pin, frequency, duration);
   d685a:	4632      	mov	r2, r6
   d685c:	4629      	mov	r1, r5
   d685e:	4620      	mov	r0, r4
    }
}
   d6860:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        HAL_Tone_Start(pin, frequency, duration);
   d6864:	f7fe b846 	b.w	d48f4 <HAL_Tone_Start>
}
   d6868:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d686a <noTone>:

void noTone(uint8_t pin)
{
   d686a:	b538      	push	{r3, r4, r5, lr}
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   d686c:	b285      	uxth	r5, r0
{
   d686e:	4604      	mov	r4, r0
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   d6870:	4628      	mov	r0, r5
   d6872:	f000 fbcf 	bl	d7014 <pinAvailable>
   d6876:	b150      	cbz	r0, d688e <noTone+0x24>
   d6878:	2102      	movs	r1, #2
   d687a:	4628      	mov	r0, r5
   d687c:	f7fd fefa 	bl	d4674 <HAL_Validate_Pin_Function>
   d6880:	2802      	cmp	r0, #2
   d6882:	d104      	bne.n	d688e <noTone+0x24>
        HAL_Tone_Stop(pin);
   d6884:	4620      	mov	r0, r4
    }
}
   d6886:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_Tone_Stop(pin);
   d688a:	f7fe b83b 	b.w	d4904 <HAL_Tone_Stop>
}
   d688e:	bd38      	pop	{r3, r4, r5, pc}

000d6890 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d6890:	4770      	bx	lr

000d6892 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6892:	7441      	strb	r1, [r0, #17]
}
   d6894:	4770      	bx	lr

000d6896 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d6896:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d6898:	7c00      	ldrb	r0, [r0, #16]
   d689a:	f7fd ffd3 	bl	d4844 <hal_usart_available_data_for_write>
}
   d689e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d68a2:	bd08      	pop	{r3, pc}

000d68a4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d68a4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d68a6:	7c00      	ldrb	r0, [r0, #16]
   d68a8:	f7fd ffa4 	bl	d47f4 <hal_usart_available>
}
   d68ac:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d68b0:	bd08      	pop	{r3, pc}

000d68b2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d68b2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d68b4:	7c00      	ldrb	r0, [r0, #16]
   d68b6:	f7fd ffad 	bl	d4814 <hal_usart_peek>
}
   d68ba:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d68be:	bd08      	pop	{r3, pc}

000d68c0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d68c0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d68c2:	7c00      	ldrb	r0, [r0, #16]
   d68c4:	f7fd ff9e 	bl	d4804 <hal_usart_read>
}
   d68c8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d68cc:	bd08      	pop	{r3, pc}

000d68ce <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d68ce:	7c00      	ldrb	r0, [r0, #16]
   d68d0:	f7fd bfa8 	b.w	d4824 <hal_usart_flush>

000d68d4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d68d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d68d6:	7c45      	ldrb	r5, [r0, #17]
{
   d68d8:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d68da:	b12d      	cbz	r5, d68e8 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d68dc:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d68de:	b003      	add	sp, #12
   d68e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d68e4:	f7fd bf7e 	b.w	d47e4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d68e8:	7c00      	ldrb	r0, [r0, #16]
   d68ea:	9101      	str	r1, [sp, #4]
   d68ec:	f7fd ffaa 	bl	d4844 <hal_usart_available_data_for_write>
   d68f0:	2800      	cmp	r0, #0
   d68f2:	9901      	ldr	r1, [sp, #4]
   d68f4:	dcf2      	bgt.n	d68dc <_ZN11USARTSerial5writeEh+0x8>
}
   d68f6:	4628      	mov	r0, r5
   d68f8:	b003      	add	sp, #12
   d68fa:	bd30      	pop	{r4, r5, pc}

000d68fc <_ZN11USARTSerialD0Ev>:
   d68fc:	b510      	push	{r4, lr}
   d68fe:	2114      	movs	r1, #20
   d6900:	4604      	mov	r4, r0
   d6902:	f000 fc34 	bl	d716e <_ZdlPvj>
   d6906:	4620      	mov	r0, r4
   d6908:	bd10      	pop	{r4, pc}
	...

000d690c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d690c:	b510      	push	{r4, lr}
   d690e:	f04f 0c00 	mov.w	ip, #0
   d6912:	4604      	mov	r4, r0
   d6914:	4608      	mov	r0, r1
   d6916:	4611      	mov	r1, r2
   d6918:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d691c:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d6920:	4a04      	ldr	r2, [pc, #16]	; (d6934 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d6922:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d6924:	2201      	movs	r2, #1
  _serial = serial;
   d6926:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d6928:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d692a:	461a      	mov	r2, r3
   d692c:	f7fd ff4a 	bl	d47c4 <hal_usart_init>
}
   d6930:	4620      	mov	r0, r4
   d6932:	bd10      	pop	{r4, pc}
   d6934:	000d76a8 	.word	0x000d76a8

000d6938 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   d6938:	7c00      	ldrb	r0, [r0, #16]
   d693a:	2300      	movs	r3, #0
   d693c:	f7fd bf8a 	b.w	d4854 <hal_usart_begin_config>

000d6940 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   d6940:	2200      	movs	r2, #0
   d6942:	f7ff bff9 	b.w	d6938 <_ZN11USARTSerial5beginEmm>

000d6946 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   d6946:	7c00      	ldrb	r0, [r0, #16]
   d6948:	f7fd bf44 	b.w	d47d4 <hal_usart_end>

000d694c <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d694c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
   d694e:	4c1b      	ldr	r4, [pc, #108]	; (d69bc <_Z22__fetch_global_Serial1v+0x70>)
   d6950:	6826      	ldr	r6, [r4, #0]
   d6952:	b94e      	cbnz	r6, d6968 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new hal_usart_ring_buffer_t();
   d6954:	2084      	movs	r0, #132	; 0x84
   d6956:	f7fd fb9c 	bl	d4092 <_Znwj>
   d695a:	4605      	mov	r5, r0
   d695c:	b118      	cbz	r0, d6966 <_Z22__fetch_global_Serial1v+0x1a>
   d695e:	2284      	movs	r2, #132	; 0x84
   d6960:	4631      	mov	r1, r6
   d6962:	f000 fc43 	bl	d71ec <memset>
   d6966:	6025      	str	r5, [r4, #0]
  }
  if (!serial1_tx_buffer) {
   d6968:	4d15      	ldr	r5, [pc, #84]	; (d69c0 <_Z22__fetch_global_Serial1v+0x74>)
   d696a:	682f      	ldr	r7, [r5, #0]
   d696c:	b94f      	cbnz	r7, d6982 <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
   d696e:	2084      	movs	r0, #132	; 0x84
   d6970:	f7fd fb8f 	bl	d4092 <_Znwj>
   d6974:	4606      	mov	r6, r0
   d6976:	b118      	cbz	r0, d6980 <_Z22__fetch_global_Serial1v+0x34>
   d6978:	2284      	movs	r2, #132	; 0x84
   d697a:	4639      	mov	r1, r7
   d697c:	f000 fc36 	bl	d71ec <memset>
   d6980:	602e      	str	r6, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   d6982:	4e10      	ldr	r6, [pc, #64]	; (d69c4 <_Z22__fetch_global_Serial1v+0x78>)
   d6984:	7831      	ldrb	r1, [r6, #0]
   d6986:	f3bf 8f5b 	dmb	ish
   d698a:	f011 0101 	ands.w	r1, r1, #1
   d698e:	d112      	bne.n	d69b6 <_Z22__fetch_global_Serial1v+0x6a>
   d6990:	4630      	mov	r0, r6
   d6992:	9101      	str	r1, [sp, #4]
   d6994:	f7fd fb8e 	bl	d40b4 <__cxa_guard_acquire>
   d6998:	9901      	ldr	r1, [sp, #4]
   d699a:	b160      	cbz	r0, d69b6 <_Z22__fetch_global_Serial1v+0x6a>
   d699c:	6822      	ldr	r2, [r4, #0]
   d699e:	682b      	ldr	r3, [r5, #0]
   d69a0:	4809      	ldr	r0, [pc, #36]	; (d69c8 <_Z22__fetch_global_Serial1v+0x7c>)
   d69a2:	f7ff ffb3 	bl	d690c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d69a6:	4630      	mov	r0, r6
   d69a8:	f7fd fb89 	bl	d40be <__cxa_guard_release>
   d69ac:	4a07      	ldr	r2, [pc, #28]	; (d69cc <_Z22__fetch_global_Serial1v+0x80>)
   d69ae:	4908      	ldr	r1, [pc, #32]	; (d69d0 <_Z22__fetch_global_Serial1v+0x84>)
   d69b0:	4805      	ldr	r0, [pc, #20]	; (d69c8 <_Z22__fetch_global_Serial1v+0x7c>)
   d69b2:	f000 fbd7 	bl	d7164 <__aeabi_atexit>
#endif
	return serial1;
}
   d69b6:	4804      	ldr	r0, [pc, #16]	; (d69c8 <_Z22__fetch_global_Serial1v+0x7c>)
   d69b8:	b003      	add	sp, #12
   d69ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d69bc:	2003e798 	.word	0x2003e798
   d69c0:	2003e79c 	.word	0x2003e79c
   d69c4:	2003e794 	.word	0x2003e794
   d69c8:	2003e7a0 	.word	0x2003e7a0
   d69cc:	2003e630 	.word	0x2003e630
   d69d0:	000d6891 	.word	0x000d6891

000d69d4 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d69d4:	b510      	push	{r4, lr}
      if (_M_empty())
   d69d6:	6883      	ldr	r3, [r0, #8]
   d69d8:	4604      	mov	r4, r0
   d69da:	b90b      	cbnz	r3, d69e0 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d69dc:	f000 fbcd 	bl	d717a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d69e0:	68c3      	ldr	r3, [r0, #12]
   d69e2:	4798      	blx	r3
      if (_M_manager)
   d69e4:	68a3      	ldr	r3, [r4, #8]
   d69e6:	b11b      	cbz	r3, d69f0 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d69e8:	2203      	movs	r2, #3
   d69ea:	4621      	mov	r1, r4
   d69ec:	4620      	mov	r0, r4
   d69ee:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d69f0:	4620      	mov	r0, r4
   d69f2:	2110      	movs	r1, #16
}
   d69f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d69f8:	f000 bbb9 	b.w	d716e <_ZdlPvj>

000d69fc <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d69fc:	4770      	bx	lr

000d69fe <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d69fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6a00:	4606      	mov	r6, r0
   d6a02:	4615      	mov	r5, r2
   d6a04:	460c      	mov	r4, r1
   d6a06:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6a08:	42bc      	cmp	r4, r7
   d6a0a:	d006      	beq.n	d6a1a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6a0c:	6833      	ldr	r3, [r6, #0]
   d6a0e:	f814 1b01 	ldrb.w	r1, [r4], #1
   d6a12:	689b      	ldr	r3, [r3, #8]
   d6a14:	4630      	mov	r0, r6
   d6a16:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d6a18:	e7f6      	b.n	d6a08 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d6a1a:	4628      	mov	r0, r5
   d6a1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6a1e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d6a1e:	7c00      	ldrb	r0, [r0, #16]
   d6a20:	2200      	movs	r2, #0
   d6a22:	f7fd bf1f 	b.w	d4864 <hal_i2c_write>

000d6a26 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d6a26:	7c00      	ldrb	r0, [r0, #16]
   d6a28:	2100      	movs	r1, #0
   d6a2a:	f7fd bf23 	b.w	d4874 <hal_i2c_available>

000d6a2e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d6a2e:	7c00      	ldrb	r0, [r0, #16]
   d6a30:	2100      	movs	r1, #0
   d6a32:	f7fd bf27 	b.w	d4884 <hal_i2c_read>

000d6a36 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d6a36:	7c00      	ldrb	r0, [r0, #16]
   d6a38:	2100      	movs	r1, #0
   d6a3a:	f7fd bf2b 	b.w	d4894 <hal_i2c_peek>

000d6a3e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d6a3e:	7c00      	ldrb	r0, [r0, #16]
   d6a40:	2100      	movs	r1, #0
   d6a42:	f7fd bf2f 	b.w	d48a4 <hal_i2c_flush>

000d6a46 <_ZN7TwoWireD0Ev>:
   d6a46:	b510      	push	{r4, lr}
   d6a48:	2114      	movs	r1, #20
   d6a4a:	4604      	mov	r4, r0
   d6a4c:	f000 fb8f 	bl	d716e <_ZdlPvj>
   d6a50:	4620      	mov	r0, r4
   d6a52:	bd10      	pop	{r4, pc}

000d6a54 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d6a54:	b510      	push	{r4, lr}
   d6a56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6a5a:	4604      	mov	r4, r0
   d6a5c:	4608      	mov	r0, r1
   d6a5e:	2100      	movs	r1, #0
   d6a60:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d6a64:	4b03      	ldr	r3, [pc, #12]	; (d6a74 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d6a66:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d6a68:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d6a6a:	4611      	mov	r1, r2
   d6a6c:	f7fd ff2a 	bl	d48c4 <hal_i2c_init>
}
   d6a70:	4620      	mov	r0, r4
   d6a72:	bd10      	pop	{r4, pc}
   d6a74:	000d76d8 	.word	0x000d76d8

000d6a78 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d6a78:	2200      	movs	r2, #0
   d6a7a:	6840      	ldr	r0, [r0, #4]
   d6a7c:	4611      	mov	r1, r2
   d6a7e:	f7fd bfed 	b.w	d4a5c <network_ready>

000d6a82 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6a82:	2200      	movs	r2, #0
   d6a84:	6840      	ldr	r0, [r0, #4]
   d6a86:	4611      	mov	r1, r2
   d6a88:	f7fe b808 	b.w	d4a9c <network_listening>

000d6a8c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d6a8c:	2200      	movs	r2, #0
   d6a8e:	6840      	ldr	r0, [r0, #4]
   d6a90:	4611      	mov	r1, r2
   d6a92:	f7fe b813 	b.w	d4abc <network_get_listen_timeout>

000d6a96 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d6a96:	6840      	ldr	r0, [r0, #4]
   d6a98:	2200      	movs	r2, #0
   d6a9a:	f7fe b807 	b.w	d4aac <network_set_listen_timeout>

000d6a9e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d6a9e:	6840      	ldr	r0, [r0, #4]
   d6aa0:	2200      	movs	r2, #0
   d6aa2:	f081 0101 	eor.w	r1, r1, #1
   d6aa6:	f7fd bff1 	b.w	d4a8c <network_listen>

000d6aaa <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d6aaa:	2300      	movs	r3, #0
   d6aac:	6840      	ldr	r0, [r0, #4]
   d6aae:	461a      	mov	r2, r3
   d6ab0:	4619      	mov	r1, r3
   d6ab2:	f7fd bfe3 	b.w	d4a7c <network_off>

000d6ab6 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d6ab6:	2300      	movs	r3, #0
   d6ab8:	6840      	ldr	r0, [r0, #4]
   d6aba:	461a      	mov	r2, r3
   d6abc:	4619      	mov	r1, r3
   d6abe:	f7fd bfd5 	b.w	d4a6c <network_on>

000d6ac2 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d6ac2:	2200      	movs	r2, #0
   d6ac4:	6840      	ldr	r0, [r0, #4]
   d6ac6:	4611      	mov	r1, r2
   d6ac8:	f7fd bfb8 	b.w	d4a3c <network_connecting>

000d6acc <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6acc:	6840      	ldr	r0, [r0, #4]
   d6ace:	2200      	movs	r2, #0
   d6ad0:	2102      	movs	r1, #2
   d6ad2:	f7fd bfbb 	b.w	d4a4c <network_disconnect>

000d6ad6 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d6ad6:	2300      	movs	r3, #0
   d6ad8:	6840      	ldr	r0, [r0, #4]
   d6ada:	461a      	mov	r2, r3
   d6adc:	f7fd bfa6 	b.w	d4a2c <network_connect>

000d6ae0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d6ae0:	4b02      	ldr	r3, [pc, #8]	; (d6aec <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d6ae2:	2204      	movs	r2, #4
   d6ae4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d6ae6:	4a02      	ldr	r2, [pc, #8]	; (d6af0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d6ae8:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d6aea:	4770      	bx	lr
   d6aec:	2003e7b4 	.word	0x2003e7b4
   d6af0:	000d7700 	.word	0x000d7700

000d6af4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6af4:	2300      	movs	r3, #0
   d6af6:	6840      	ldr	r0, [r0, #4]
   d6af8:	461a      	mov	r2, r3
   d6afa:	f7fd bf97 	b.w	d4a2c <network_connect>

000d6afe <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d6afe:	6840      	ldr	r0, [r0, #4]
   d6b00:	2200      	movs	r2, #0
   d6b02:	2102      	movs	r1, #2
   d6b04:	f7fd bfa2 	b.w	d4a4c <network_disconnect>

000d6b08 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6b08:	2200      	movs	r2, #0
   d6b0a:	6840      	ldr	r0, [r0, #4]
   d6b0c:	4611      	mov	r1, r2
   d6b0e:	f7fd bf95 	b.w	d4a3c <network_connecting>

000d6b12 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d6b12:	2200      	movs	r2, #0
   d6b14:	6840      	ldr	r0, [r0, #4]
   d6b16:	4611      	mov	r1, r2
   d6b18:	f7fd bfa0 	b.w	d4a5c <network_ready>

000d6b1c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6b1c:	2300      	movs	r3, #0
   d6b1e:	6840      	ldr	r0, [r0, #4]
   d6b20:	461a      	mov	r2, r3
   d6b22:	4619      	mov	r1, r3
   d6b24:	f7fd bfa2 	b.w	d4a6c <network_on>

000d6b28 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6b28:	2300      	movs	r3, #0
   d6b2a:	6840      	ldr	r0, [r0, #4]
   d6b2c:	461a      	mov	r2, r3
   d6b2e:	4619      	mov	r1, r3
   d6b30:	f7fd bfa4 	b.w	d4a7c <network_off>

000d6b34 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6b34:	6840      	ldr	r0, [r0, #4]
   d6b36:	2200      	movs	r2, #0
   d6b38:	f081 0101 	eor.w	r1, r1, #1
   d6b3c:	f7fd bfa6 	b.w	d4a8c <network_listen>

000d6b40 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6b40:	6840      	ldr	r0, [r0, #4]
   d6b42:	2200      	movs	r2, #0
   d6b44:	f7fd bfb2 	b.w	d4aac <network_set_listen_timeout>

000d6b48 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6b48:	2200      	movs	r2, #0
   d6b4a:	6840      	ldr	r0, [r0, #4]
   d6b4c:	4611      	mov	r1, r2
   d6b4e:	f7fd bfb5 	b.w	d4abc <network_get_listen_timeout>

000d6b52 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d6b52:	2200      	movs	r2, #0
   d6b54:	6840      	ldr	r0, [r0, #4]
   d6b56:	4611      	mov	r1, r2
   d6b58:	f7fd bfa0 	b.w	d4a9c <network_listening>

000d6b5c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6b5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6b60:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d6b62:	b095      	sub	sp, #84	; 0x54
   d6b64:	4616      	mov	r6, r2
   d6b66:	460d      	mov	r5, r1
   d6b68:	4607      	mov	r7, r0
    IPAddress addr;
   d6b6a:	f7ff fd5f 	bl	d662c <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d6b6e:	4621      	mov	r1, r4
   d6b70:	2218      	movs	r2, #24
   d6b72:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d6b74:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d6b76:	f000 fb39 	bl	d71ec <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d6b7a:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d6b7c:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d6b80:	4621      	mov	r1, r4
   d6b82:	466b      	mov	r3, sp
   d6b84:	aa0c      	add	r2, sp, #48	; 0x30
   d6b86:	4630      	mov	r0, r6
   d6b88:	f7fd fd6c 	bl	d4664 <netdb_getaddrinfo>
    if (!r) {
   d6b8c:	4604      	mov	r4, r0
   d6b8e:	2800      	cmp	r0, #0
   d6b90:	d146      	bne.n	d6c20 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6b92:	4602      	mov	r2, r0
   d6b94:	2101      	movs	r1, #1
   d6b96:	6868      	ldr	r0, [r5, #4]
   d6b98:	f7fd ff60 	bl	d4a5c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6b9c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6b9e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6ba0:	4622      	mov	r2, r4
   d6ba2:	6868      	ldr	r0, [r5, #4]
   d6ba4:	f7fd ff5a 	bl	d4a5c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6ba8:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6baa:	4681      	mov	r9, r0
        bool ok = false;
   d6bac:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6bae:	2e00      	cmp	r6, #0
   d6bb0:	d036      	beq.n	d6c20 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d6bb2:	2900      	cmp	r1, #0
   d6bb4:	d134      	bne.n	d6c20 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d6bb6:	6873      	ldr	r3, [r6, #4]
   d6bb8:	2b02      	cmp	r3, #2
   d6bba:	d003      	beq.n	d6bc4 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d6bbc:	2b0a      	cmp	r3, #10
   d6bbe:	d00b      	beq.n	d6bd8 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6bc0:	69f6      	ldr	r6, [r6, #28]
   d6bc2:	e7f4      	b.n	d6bae <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d6bc4:	f1b8 0f00 	cmp.w	r8, #0
   d6bc8:	d004      	beq.n	d6bd4 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d6bca:	6971      	ldr	r1, [r6, #20]
   d6bcc:	4638      	mov	r0, r7
   d6bce:	3104      	adds	r1, #4
   d6bd0:	f7ff fd59 	bl	d6686 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d6bd4:	4641      	mov	r1, r8
   d6bd6:	e7f3      	b.n	d6bc0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d6bd8:	f1b9 0f00 	cmp.w	r9, #0
   d6bdc:	d101      	bne.n	d6be2 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d6bde:	4649      	mov	r1, r9
   d6be0:	e7ee      	b.n	d6bc0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d6be2:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d6be4:	2210      	movs	r2, #16
   d6be6:	a801      	add	r0, sp, #4
   d6be8:	f000 fb00 	bl	d71ec <memset>
                    a.v = 6;
   d6bec:	2306      	movs	r3, #6
   d6bee:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6bf2:	ad01      	add	r5, sp, #4
   d6bf4:	f104 0308 	add.w	r3, r4, #8
   d6bf8:	3418      	adds	r4, #24
   d6bfa:	6818      	ldr	r0, [r3, #0]
   d6bfc:	6859      	ldr	r1, [r3, #4]
   d6bfe:	462a      	mov	r2, r5
   d6c00:	c203      	stmia	r2!, {r0, r1}
   d6c02:	3308      	adds	r3, #8
   d6c04:	42a3      	cmp	r3, r4
   d6c06:	4615      	mov	r5, r2
   d6c08:	d1f7      	bne.n	d6bfa <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d6c0a:	a901      	add	r1, sp, #4
   d6c0c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d6c0e:	ad07      	add	r5, sp, #28
   d6c10:	f7ff fd1a 	bl	d6648 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6c14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6c16:	1d3c      	adds	r4, r7, #4
   d6c18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6c1a:	682b      	ldr	r3, [r5, #0]
   d6c1c:	7023      	strb	r3, [r4, #0]
   d6c1e:	e7de      	b.n	d6bde <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d6c20:	9800      	ldr	r0, [sp, #0]
   d6c22:	f7fd fd17 	bl	d4654 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6c26:	4638      	mov	r0, r7
   d6c28:	b015      	add	sp, #84	; 0x54
   d6c2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d6c30 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6c30:	4b02      	ldr	r3, [pc, #8]	; (d6c3c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d6c32:	4a03      	ldr	r2, [pc, #12]	; (d6c40 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6c34:	601a      	str	r2, [r3, #0]
   d6c36:	2200      	movs	r2, #0
   d6c38:	605a      	str	r2, [r3, #4]

} // spark
   d6c3a:	4770      	bx	lr
   d6c3c:	2003e7bc 	.word	0x2003e7bc
   d6c40:	000d7734 	.word	0x000d7734

000d6c44 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   d6c44:	f100 0310 	add.w	r3, r0, #16
   d6c48:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d6c4a:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   d6c4e:	2901      	cmp	r1, #1
   d6c50:	4618      	mov	r0, r3
   d6c52:	d108      	bne.n	d6c66 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   d6c54:	f853 1c04 	ldr.w	r1, [r3, #-4]
   d6c58:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   d6c5c:	3a01      	subs	r2, #1
   d6c5e:	f103 0310 	add.w	r3, r3, #16
   d6c62:	d1f2      	bne.n	d6c4a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   d6c64:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   d6c66:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d6c68:	bf04      	itt	eq
   d6c6a:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   d6c6e:	1852      	addeq	r2, r2, r1
   d6c70:	e7f4      	b.n	d6c5c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000d6c72 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   d6c72:	b40e      	push	{r1, r2, r3}
   d6c74:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6c76:	b088      	sub	sp, #32
   d6c78:	af00      	add	r7, sp, #0
   d6c7a:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6c7e:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   d6c80:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6c84:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   d6c86:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6c88:	462b      	mov	r3, r5
   d6c8a:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   d6c8c:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6c8e:	f7fd ff5d 	bl	d4b4c <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   d6c92:	280f      	cmp	r0, #15
   d6c94:	687a      	ldr	r2, [r7, #4]
   d6c96:	d91a      	bls.n	d6cce <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   d6c98:	f100 0308 	add.w	r3, r0, #8
   d6c9c:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   d6ca0:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   d6ca2:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6ca6:	1c41      	adds	r1, r0, #1
   d6ca8:	462b      	mov	r3, r5
   d6caa:	4668      	mov	r0, sp
        va_start(args, fmt);
   d6cac:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6cae:	f7fd ff4d 	bl	d4b4c <vsnprintf>
        if (n > 0) {
   d6cb2:	1e02      	subs	r2, r0, #0
   d6cb4:	dd04      	ble.n	d6cc0 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   d6cb6:	6823      	ldr	r3, [r4, #0]
   d6cb8:	4669      	mov	r1, sp
   d6cba:	689b      	ldr	r3, [r3, #8]
   d6cbc:	4620      	mov	r0, r4
   d6cbe:	4798      	blx	r3
   d6cc0:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   d6cc2:	3720      	adds	r7, #32
   d6cc4:	46bd      	mov	sp, r7
   d6cc6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d6cca:	b003      	add	sp, #12
   d6ccc:	4770      	bx	lr
    } else if (n > 0) {
   d6cce:	2800      	cmp	r0, #0
   d6cd0:	d0f7      	beq.n	d6cc2 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   d6cd2:	6823      	ldr	r3, [r4, #0]
   d6cd4:	4602      	mov	r2, r0
   d6cd6:	689b      	ldr	r3, [r3, #8]
   d6cd8:	f107 0110 	add.w	r1, r7, #16
   d6cdc:	4620      	mov	r0, r4
   d6cde:	4798      	blx	r3
}
   d6ce0:	e7ef      	b.n	d6cc2 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000d6ce2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6ce2:	b510      	push	{r4, lr}
          _M_dispose();
   d6ce4:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6ce6:	4604      	mov	r4, r0
          _M_dispose();
   d6ce8:	689b      	ldr	r3, [r3, #8]
   d6cea:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d6cec:	68a3      	ldr	r3, [r4, #8]
   d6cee:	3b01      	subs	r3, #1
   d6cf0:	60a3      	str	r3, [r4, #8]
   d6cf2:	b92b      	cbnz	r3, d6d00 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d6cf4:	6823      	ldr	r3, [r4, #0]
   d6cf6:	4620      	mov	r0, r4
   d6cf8:	68db      	ldr	r3, [r3, #12]
    }
   d6cfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d6cfe:	4718      	bx	r3
    }
   d6d00:	bd10      	pop	{r4, pc}

000d6d02 <_ZN5spark10JSONWriter5writeEc>:
inline void spark::JSONWriter::write(char c) {
   d6d02:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d6d04:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   d6d06:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d6d0a:	689b      	ldr	r3, [r3, #8]
   d6d0c:	2201      	movs	r2, #1
   d6d0e:	f10d 0107 	add.w	r1, sp, #7
   d6d12:	4798      	blx	r3
}
   d6d14:	b003      	add	sp, #12
   d6d16:	f85d fb04 	ldr.w	pc, [sp], #4

000d6d1a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
    class __shared_ptr
   d6d1a:	b538      	push	{r3, r4, r5, lr}
   d6d1c:	680b      	ldr	r3, [r1, #0]
   d6d1e:	6003      	str	r3, [r0, #0]
   d6d20:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   d6d22:	6843      	ldr	r3, [r0, #4]
   d6d24:	429d      	cmp	r5, r3
    class __shared_ptr
   d6d26:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   d6d28:	d00c      	beq.n	d6d44 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
   d6d2a:	b115      	cbz	r5, d6d32 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
   d6d2c:	686b      	ldr	r3, [r5, #4]
   d6d2e:	3301      	adds	r3, #1
   d6d30:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   d6d32:	6860      	ldr	r0, [r4, #4]
   d6d34:	b128      	cbz	r0, d6d42 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
   d6d36:	6843      	ldr	r3, [r0, #4]
   d6d38:	3b01      	subs	r3, #1
   d6d3a:	6043      	str	r3, [r0, #4]
   d6d3c:	b90b      	cbnz	r3, d6d42 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
   d6d3e:	f7ff ffd0 	bl	d6ce2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
   d6d42:	6065      	str	r5, [r4, #4]
    class __shared_ptr
   d6d44:	4620      	mov	r0, r4
   d6d46:	bd38      	pop	{r3, r4, r5, pc}

000d6d48 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d6d48:	460b      	mov	r3, r1
   d6d4a:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   d6d4c:	2200      	movs	r2, #0
   d6d4e:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   d6d50:	e9c0 2200 	strd	r2, r2, [r0]
   d6d54:	4604      	mov	r4, r0
        t_ = t;
   d6d56:	6083      	str	r3, [r0, #8]
    if (t) {
   d6d58:	b90b      	cbnz	r3, d6d5e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   d6d5a:	4620      	mov	r0, r4
   d6d5c:	bd10      	pop	{r4, pc}
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
   d6d5e:	f7ff ffdc 	bl	d6d1a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
   d6d62:	e7fa      	b.n	d6d5a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000d6d64 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   d6d64:	6883      	ldr	r3, [r0, #8]
   d6d66:	b1eb      	cbz	r3, d6da4 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   d6d68:	781a      	ldrb	r2, [r3, #0]
   d6d6a:	2a03      	cmp	r2, #3
   d6d6c:	d81a      	bhi.n	d6da4 <_ZNK5spark9JSONValue4typeEv+0x40>
   d6d6e:	e8df f002 	tbb	[pc, r2]
   d6d72:	1704      	.short	0x1704
   d6d74:	1b02      	.short	0x1b02
   d6d76:	2005      	movs	r0, #5
   d6d78:	4770      	bx	lr
        const char c = d_->json[t_->start];
   d6d7a:	6802      	ldr	r2, [r0, #0]
   d6d7c:	685b      	ldr	r3, [r3, #4]
   d6d7e:	6852      	ldr	r2, [r2, #4]
   d6d80:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d6d82:	282d      	cmp	r0, #45	; 0x2d
   d6d84:	d012      	beq.n	d6dac <_ZNK5spark9JSONValue4typeEv+0x48>
   d6d86:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d6d8a:	2b09      	cmp	r3, #9
   d6d8c:	d90e      	bls.n	d6dac <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d6d8e:	2874      	cmp	r0, #116	; 0x74
   d6d90:	d00e      	beq.n	d6db0 <_ZNK5spark9JSONValue4typeEv+0x4c>
   d6d92:	2866      	cmp	r0, #102	; 0x66
   d6d94:	d00c      	beq.n	d6db0 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   d6d96:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d6d9a:	4258      	negs	r0, r3
   d6d9c:	4158      	adcs	r0, r3
   d6d9e:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   d6da0:	2006      	movs	r0, #6
   d6da2:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   d6da4:	2000      	movs	r0, #0
   d6da6:	4770      	bx	lr
        return JSON_TYPE_STRING;
   d6da8:	2004      	movs	r0, #4
   d6daa:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   d6dac:	2003      	movs	r0, #3
   d6dae:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   d6db0:	2002      	movs	r0, #2
}
   d6db2:	4770      	bx	lr

000d6db4 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   d6db4:	b510      	push	{r4, lr}
   d6db6:	4604      	mov	r4, r0
    switch (type()) {
   d6db8:	f7ff ffd4 	bl	d6d64 <_ZNK5spark9JSONValue4typeEv>
   d6dbc:	2802      	cmp	r0, #2
   d6dbe:	d00e      	beq.n	d6dde <_ZNK5spark9JSONValue5toIntEv+0x2a>
   d6dc0:	1ec3      	subs	r3, r0, #3
   d6dc2:	b2db      	uxtb	r3, r3
   d6dc4:	2b01      	cmp	r3, #1
   d6dc6:	d814      	bhi.n	d6df2 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   d6dc8:	6822      	ldr	r2, [r4, #0]
   d6dca:	68a3      	ldr	r3, [r4, #8]
   d6dcc:	6850      	ldr	r0, [r2, #4]
   d6dce:	685b      	ldr	r3, [r3, #4]
}
   d6dd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   d6dd4:	220a      	movs	r2, #10
   d6dd6:	2100      	movs	r1, #0
   d6dd8:	4418      	add	r0, r3
   d6dda:	f000 bb23 	b.w	d7424 <strtol>
        const char* const s = d_->json + t_->start;
   d6dde:	6822      	ldr	r2, [r4, #0]
   d6de0:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d6de2:	6852      	ldr	r2, [r2, #4]
   d6de4:	685b      	ldr	r3, [r3, #4]
   d6de6:	5cd0      	ldrb	r0, [r2, r3]
   d6de8:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d6dec:	4258      	negs	r0, r3
   d6dee:	4158      	adcs	r0, r3
}
   d6df0:	bd10      	pop	{r4, pc}
    switch (type()) {
   d6df2:	2000      	movs	r0, #0
   d6df4:	e7fc      	b.n	d6df0 <_ZNK5spark9JSONValue5toIntEv+0x3c>
	...

000d6df8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d6df8:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d6dfa:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d6dfc:	e9c0 3300 	strd	r3, r3, [r0]
   d6e00:	4604      	mov	r4, r0
        n_(0) {
   d6e02:	480e      	ldr	r0, [pc, #56]	; (d6e3c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   d6e04:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d6e08:	b1a9      	cbz	r1, d6e36 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   d6e0a:	780b      	ldrb	r3, [r1, #0]
   d6e0c:	2b03      	cmp	r3, #3
   d6e0e:	d006      	beq.n	d6e1e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d6e10:	b98b      	cbnz	r3, d6e36 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d6e12:	6813      	ldr	r3, [r2, #0]
   d6e14:	6858      	ldr	r0, [r3, #4]
   d6e16:	684b      	ldr	r3, [r1, #4]
   d6e18:	5cc3      	ldrb	r3, [r0, r3]
   d6e1a:	2b6e      	cmp	r3, #110	; 0x6e
   d6e1c:	d007      	beq.n	d6e2e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   d6e1e:	6813      	ldr	r3, [r2, #0]
   d6e20:	684d      	ldr	r5, [r1, #4]
   d6e22:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   d6e24:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   d6e26:	4428      	add	r0, r5
            n_ = t->end - t->start;
   d6e28:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   d6e2a:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   d6e2c:	60e3      	str	r3, [r4, #12]
   d6e2e:	4611      	mov	r1, r2
   d6e30:	4620      	mov	r0, r4
   d6e32:	f7ff ff72 	bl	d6d1a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d6e36:	4620      	mov	r0, r4
   d6e38:	bd38      	pop	{r3, r4, r5, pc}
   d6e3a:	bf00      	nop
   d6e3c:	000d7591 	.word	0x000d7591

000d6e40 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d6e40:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d6e42:	2500      	movs	r5, #0
   d6e44:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   d6e46:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   d6e4a:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d6e4e:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d6e52:	4604      	mov	r4, r0
   d6e54:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   d6e56:	b14b      	cbz	r3, d6e6c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   d6e58:	781a      	ldrb	r2, [r3, #0]
   d6e5a:	2a01      	cmp	r2, #1
   d6e5c:	d106      	bne.n	d6e6c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   d6e5e:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   d6e62:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   d6e64:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   d6e66:	6143      	str	r3, [r0, #20]
   d6e68:	f7ff ff57 	bl	d6d1a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d6e6c:	4620      	mov	r0, r4
   d6e6e:	bd38      	pop	{r3, r4, r5, pc}

000d6e70 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   d6e70:	b510      	push	{r4, lr}
    if (!n_) {
   d6e72:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   d6e74:	4604      	mov	r4, r0
    if (!n_) {
   d6e76:	b163      	cbz	r3, d6e92 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   d6e78:	6880      	ldr	r0, [r0, #8]
   d6e7a:	60e0      	str	r0, [r4, #12]
    --n_;
   d6e7c:	3b01      	subs	r3, #1
    ++t_;
   d6e7e:	3010      	adds	r0, #16
   d6e80:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d6e82:	6120      	str	r0, [r4, #16]
    --n_;
   d6e84:	6163      	str	r3, [r4, #20]
    if (n_) {
   d6e86:	b113      	cbz	r3, d6e8e <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   d6e88:	f7ff fedc 	bl	d6c44 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d6e8c:	60a0      	str	r0, [r4, #8]
    return true;
   d6e8e:	2001      	movs	r0, #1
   d6e90:	e000      	b.n	d6e94 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   d6e92:	4618      	mov	r0, r3
}
   d6e94:	bd10      	pop	{r4, pc}

000d6e96 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   d6e96:	b510      	push	{r4, lr}
    write('}');
   d6e98:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   d6e9a:	4604      	mov	r4, r0
    write('}');
   d6e9c:	f7ff ff31 	bl	d6d02 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   d6ea0:	2301      	movs	r3, #1
   d6ea2:	7123      	strb	r3, [r4, #4]
}
   d6ea4:	4620      	mov	r0, r4
   d6ea6:	bd10      	pop	{r4, pc}

000d6ea8 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   d6ea8:	b508      	push	{r3, lr}
    switch (state_) {
   d6eaa:	7903      	ldrb	r3, [r0, #4]
   d6eac:	2b01      	cmp	r3, #1
   d6eae:	d002      	beq.n	d6eb6 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   d6eb0:	2b02      	cmp	r3, #2
   d6eb2:	d004      	beq.n	d6ebe <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   d6eb4:	bd08      	pop	{r3, pc}
        write(',');
   d6eb6:	212c      	movs	r1, #44	; 0x2c
        write(':');
   d6eb8:	f7ff ff23 	bl	d6d02 <_ZN5spark10JSONWriter5writeEc>
}
   d6ebc:	e7fa      	b.n	d6eb4 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   d6ebe:	213a      	movs	r1, #58	; 0x3a
   d6ec0:	e7fa      	b.n	d6eb8 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000d6ec2 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   d6ec2:	b510      	push	{r4, lr}
   d6ec4:	4604      	mov	r4, r0
    writeSeparator();
   d6ec6:	f7ff ffef 	bl	d6ea8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   d6eca:	4620      	mov	r0, r4
   d6ecc:	217b      	movs	r1, #123	; 0x7b
   d6ece:	f7ff ff18 	bl	d6d02 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   d6ed2:	2300      	movs	r3, #0
   d6ed4:	7123      	strb	r3, [r4, #4]
}
   d6ed6:	4620      	mov	r0, r4
   d6ed8:	bd10      	pop	{r4, pc}
	...

000d6edc <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   d6edc:	b513      	push	{r0, r1, r4, lr}
   d6ede:	4604      	mov	r4, r0
   d6ee0:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d6ee2:	f7ff ffe1 	bl	d6ea8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   d6ee6:	6823      	ldr	r3, [r4, #0]
   d6ee8:	9a01      	ldr	r2, [sp, #4]
   d6eea:	68db      	ldr	r3, [r3, #12]
   d6eec:	4903      	ldr	r1, [pc, #12]	; (d6efc <_ZN5spark10JSONWriter5valueEi+0x20>)
   d6eee:	4620      	mov	r0, r4
   d6ef0:	4798      	blx	r3
    state_ = NEXT;
   d6ef2:	2301      	movs	r3, #1
}
   d6ef4:	4620      	mov	r0, r4
    state_ = NEXT;
   d6ef6:	7123      	strb	r3, [r4, #4]
}
   d6ef8:	b002      	add	sp, #8
   d6efa:	bd10      	pop	{r4, pc}
   d6efc:	000d756b 	.word	0x000d756b

000d6f00 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   d6f00:	b513      	push	{r0, r1, r4, lr}
   d6f02:	4604      	mov	r4, r0
   d6f04:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d6f06:	f7ff ffcf 	bl	d6ea8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   d6f0a:	6823      	ldr	r3, [r4, #0]
   d6f0c:	9a01      	ldr	r2, [sp, #4]
   d6f0e:	68db      	ldr	r3, [r3, #12]
   d6f10:	4903      	ldr	r1, [pc, #12]	; (d6f20 <_ZN5spark10JSONWriter5valueEj+0x20>)
   d6f12:	4620      	mov	r0, r4
   d6f14:	4798      	blx	r3
    state_ = NEXT;
   d6f16:	2301      	movs	r3, #1
}
   d6f18:	4620      	mov	r0, r4
    state_ = NEXT;
   d6f1a:	7123      	strb	r3, [r4, #4]
}
   d6f1c:	b002      	add	sp, #8
   d6f1e:	bd10      	pop	{r4, pc}
   d6f20:	000d7760 	.word	0x000d7760

000d6f24 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d6f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6f28:	460d      	mov	r5, r1
   d6f2a:	4617      	mov	r7, r2
    write('"');
   d6f2c:	2122      	movs	r1, #34	; 0x22
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   d6f2e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; d6fd0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xac>
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d6f32:	4604      	mov	r4, r0
    const char* const end = str + size;
   d6f34:	442f      	add	r7, r5
    write('"');
   d6f36:	f7ff fee4 	bl	d6d02 <_ZN5spark10JSONWriter5writeEc>
    const char* const end = str + size;
   d6f3a:	4629      	mov	r1, r5
    while (s != end) {
   d6f3c:	42bd      	cmp	r5, r7
   d6f3e:	462a      	mov	r2, r5
   d6f40:	d038      	beq.n	d6fb4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x90>
        const char c = *s;
   d6f42:	f815 6b01 	ldrb.w	r6, [r5], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   d6f46:	2e22      	cmp	r6, #34	; 0x22
   d6f48:	d003      	beq.n	d6f52 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d6f4a:	2e5c      	cmp	r6, #92	; 0x5c
   d6f4c:	d001      	beq.n	d6f52 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d6f4e:	2e1f      	cmp	r6, #31
   d6f50:	d8f4      	bhi.n	d6f3c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   d6f52:	6823      	ldr	r3, [r4, #0]
   d6f54:	1a52      	subs	r2, r2, r1
   d6f56:	689b      	ldr	r3, [r3, #8]
   d6f58:	4620      	mov	r0, r4
   d6f5a:	4798      	blx	r3
            write('\\');
   d6f5c:	215c      	movs	r1, #92	; 0x5c
   d6f5e:	4620      	mov	r0, r4
   d6f60:	f7ff fecf 	bl	d6d02 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   d6f64:	2e0d      	cmp	r6, #13
   d6f66:	d80a      	bhi.n	d6f7e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x5a>
   d6f68:	2e07      	cmp	r6, #7
   d6f6a:	d91c      	bls.n	d6fa6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d6f6c:	f1a6 0308 	sub.w	r3, r6, #8
   d6f70:	2b05      	cmp	r3, #5
   d6f72:	d818      	bhi.n	d6fa6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d6f74:	e8df f003 	tbb	[pc, r3]
   d6f78:	17110f0d 	.word	0x17110f0d
   d6f7c:	1513      	.short	0x1513
   d6f7e:	2e22      	cmp	r6, #34	; 0x22
   d6f80:	d001      	beq.n	d6f86 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d6f82:	2e5c      	cmp	r6, #92	; 0x5c
   d6f84:	d10f      	bne.n	d6fa6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
                write(c);
   d6f86:	4631      	mov	r1, r6
                write('b');
   d6f88:	4620      	mov	r0, r4
   d6f8a:	f7ff feba 	bl	d6d02 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   d6f8e:	4629      	mov	r1, r5
    while (s != end) {
   d6f90:	e7d4      	b.n	d6f3c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   d6f92:	2162      	movs	r1, #98	; 0x62
   d6f94:	e7f8      	b.n	d6f88 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('t');
   d6f96:	2174      	movs	r1, #116	; 0x74
   d6f98:	e7f6      	b.n	d6f88 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('n');
   d6f9a:	216e      	movs	r1, #110	; 0x6e
   d6f9c:	e7f4      	b.n	d6f88 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('f');
   d6f9e:	2166      	movs	r1, #102	; 0x66
   d6fa0:	e7f2      	b.n	d6f88 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('r');
   d6fa2:	2172      	movs	r1, #114	; 0x72
   d6fa4:	e7f0      	b.n	d6f88 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                printf("u%04x", (unsigned)c);
   d6fa6:	6823      	ldr	r3, [r4, #0]
   d6fa8:	4632      	mov	r2, r6
   d6faa:	68db      	ldr	r3, [r3, #12]
   d6fac:	4641      	mov	r1, r8
   d6fae:	4620      	mov	r0, r4
   d6fb0:	4798      	blx	r3
                break;
   d6fb2:	e7ec      	b.n	d6f8e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6a>
        }
        ++s;
    }
    if (s != str) {
   d6fb4:	428d      	cmp	r5, r1
   d6fb6:	d004      	beq.n	d6fc2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9e>
        write(str, s - str); // Write remaining characters
   d6fb8:	6823      	ldr	r3, [r4, #0]
   d6fba:	1a6a      	subs	r2, r5, r1
   d6fbc:	689b      	ldr	r3, [r3, #8]
   d6fbe:	4620      	mov	r0, r4
   d6fc0:	4798      	blx	r3
    }
    write('"');
   d6fc2:	2122      	movs	r1, #34	; 0x22
   d6fc4:	4620      	mov	r0, r4
   d6fc6:	f7ff fe9c 	bl	d6d02 <_ZN5spark10JSONWriter5writeEc>
}
   d6fca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6fce:	bf00      	nop
   d6fd0:	000d7763 	.word	0x000d7763

000d6fd4 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   d6fd4:	b513      	push	{r0, r1, r4, lr}
   d6fd6:	4604      	mov	r4, r0
   d6fd8:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d6fdc:	f7ff ff64 	bl	d6ea8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   d6fe0:	4620      	mov	r0, r4
   d6fe2:	e9dd 2100 	ldrd	r2, r1, [sp]
   d6fe6:	f7ff ff9d 	bl	d6f24 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   d6fea:	2302      	movs	r3, #2
}
   d6fec:	4620      	mov	r0, r4
    state_ = VALUE;
   d6fee:	7123      	strb	r3, [r4, #4]
}
   d6ff0:	b002      	add	sp, #8
   d6ff2:	bd10      	pop	{r4, pc}

000d6ff4 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   d6ff4:	b513      	push	{r0, r1, r4, lr}
   d6ff6:	4604      	mov	r4, r0
   d6ff8:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d6ffc:	f7ff ff54 	bl	d6ea8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   d7000:	4620      	mov	r0, r4
   d7002:	e9dd 2100 	ldrd	r2, r1, [sp]
   d7006:	f7ff ff8d 	bl	d6f24 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   d700a:	2301      	movs	r3, #1
}
   d700c:	4620      	mov	r0, r4
    state_ = NEXT;
   d700e:	7123      	strb	r3, [r4, #4]
}
   d7010:	b002      	add	sp, #8
   d7012:	bd10      	pop	{r4, pc}

000d7014 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d7014:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d7016:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d7018:	d902      	bls.n	d7020 <pinAvailable+0xc>
    return false;
   d701a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d701c:	b002      	add	sp, #8
   d701e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d7020:	f1a0 030b 	sub.w	r3, r0, #11
   d7024:	2b02      	cmp	r3, #2
   d7026:	d81a      	bhi.n	d705e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d7028:	4c17      	ldr	r4, [pc, #92]	; (d7088 <pinAvailable+0x74>)
   d702a:	7821      	ldrb	r1, [r4, #0]
   d702c:	f3bf 8f5b 	dmb	ish
   d7030:	f011 0101 	ands.w	r1, r1, #1
   d7034:	d10b      	bne.n	d704e <pinAvailable+0x3a>
   d7036:	4620      	mov	r0, r4
   d7038:	9101      	str	r1, [sp, #4]
   d703a:	f7fd f83b 	bl	d40b4 <__cxa_guard_acquire>
   d703e:	9901      	ldr	r1, [sp, #4]
   d7040:	b128      	cbz	r0, d704e <pinAvailable+0x3a>
   d7042:	4812      	ldr	r0, [pc, #72]	; (d708c <pinAvailable+0x78>)
   d7044:	f7fd fde0 	bl	d4c08 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d7048:	4620      	mov	r0, r4
   d704a:	f7fd f838 	bl	d40be <__cxa_guard_release>
   d704e:	4b0f      	ldr	r3, [pc, #60]	; (d708c <pinAvailable+0x78>)
   d7050:	7818      	ldrb	r0, [r3, #0]
   d7052:	f7fd fc47 	bl	d48e4 <hal_spi_is_enabled>
   d7056:	2800      	cmp	r0, #0
   d7058:	d1df      	bne.n	d701a <pinAvailable+0x6>
  return true; // 'pin' is available
   d705a:	2001      	movs	r0, #1
   d705c:	e7de      	b.n	d701c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d705e:	2801      	cmp	r0, #1
   d7060:	d809      	bhi.n	d7076 <pinAvailable+0x62>
   d7062:	f000 f857 	bl	d7114 <_Z19__fetch_global_Wirev>
   d7066:	2100      	movs	r1, #0
   d7068:	7c00      	ldrb	r0, [r0, #16]
   d706a:	f7fd fc23 	bl	d48b4 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d706e:	f080 0001 	eor.w	r0, r0, #1
   d7072:	b2c0      	uxtb	r0, r0
   d7074:	e7d2      	b.n	d701c <pinAvailable+0x8>
   d7076:	3809      	subs	r0, #9
   d7078:	2801      	cmp	r0, #1
   d707a:	d8ee      	bhi.n	d705a <pinAvailable+0x46>
   d707c:	f7ff fc66 	bl	d694c <_Z22__fetch_global_Serial1v>
   d7080:	7c00      	ldrb	r0, [r0, #16]
   d7082:	f7fd fbd7 	bl	d4834 <hal_usart_is_enabled>
   d7086:	e7f2      	b.n	d706e <pinAvailable+0x5a>
   d7088:	2003e7c4 	.word	0x2003e7c4
   d708c:	2003e7c8 	.word	0x2003e7c8

000d7090 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7090:	2823      	cmp	r0, #35	; 0x23
{
   d7092:	b538      	push	{r3, r4, r5, lr}
   d7094:	4604      	mov	r4, r0
   d7096:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7098:	d80a      	bhi.n	d70b0 <pinMode+0x20>
   d709a:	29ff      	cmp	r1, #255	; 0xff
   d709c:	d008      	beq.n	d70b0 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d709e:	f7ff ffb9 	bl	d7014 <pinAvailable>
   d70a2:	b128      	cbz	r0, d70b0 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d70a4:	4629      	mov	r1, r5
   d70a6:	4620      	mov	r0, r4
}
   d70a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d70ac:	f7fd baea 	b.w	d4684 <HAL_Pin_Mode>
}
   d70b0:	bd38      	pop	{r3, r4, r5, pc}

000d70b2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d70b2:	b538      	push	{r3, r4, r5, lr}
   d70b4:	4604      	mov	r4, r0
   d70b6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d70b8:	f7fd faec 	bl	d4694 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d70bc:	28ff      	cmp	r0, #255	; 0xff
   d70be:	d010      	beq.n	d70e2 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d70c0:	2806      	cmp	r0, #6
   d70c2:	d804      	bhi.n	d70ce <digitalWrite+0x1c>
   d70c4:	234d      	movs	r3, #77	; 0x4d
   d70c6:	fa23 f000 	lsr.w	r0, r3, r0
   d70ca:	07c3      	lsls	r3, r0, #31
   d70cc:	d409      	bmi.n	d70e2 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d70ce:	4620      	mov	r0, r4
   d70d0:	f7ff ffa0 	bl	d7014 <pinAvailable>
   d70d4:	b128      	cbz	r0, d70e2 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d70d6:	4629      	mov	r1, r5
   d70d8:	4620      	mov	r0, r4
}
   d70da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d70de:	f7fd bae1 	b.w	d46a4 <HAL_GPIO_Write>
}
   d70e2:	bd38      	pop	{r3, r4, r5, pc}

000d70e4 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d70e4:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d70e6:	2300      	movs	r3, #0
   d70e8:	2520      	movs	r5, #32
   d70ea:	8043      	strh	r3, [r0, #2]
   d70ec:	2314      	movs	r3, #20
{
   d70ee:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d70f0:	8003      	strh	r3, [r0, #0]
   d70f2:	6085      	str	r5, [r0, #8]
   d70f4:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d70f6:	4906      	ldr	r1, [pc, #24]	; (d7110 <_Z17acquireWireBufferv+0x2c>)
   d70f8:	4628      	mov	r0, r5
   d70fa:	f000 f83c 	bl	d7176 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d70fe:	4904      	ldr	r1, [pc, #16]	; (d7110 <_Z17acquireWireBufferv+0x2c>)
	};
   d7100:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7102:	4628      	mov	r0, r5
   d7104:	f000 f837 	bl	d7176 <_ZnajRKSt9nothrow_t>
	};
   d7108:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d710a:	4620      	mov	r0, r4
   d710c:	bd38      	pop	{r3, r4, r5, pc}
   d710e:	bf00      	nop
   d7110:	000d7769 	.word	0x000d7769

000d7114 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d7114:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7116:	4d0f      	ldr	r5, [pc, #60]	; (d7154 <_Z19__fetch_global_Wirev+0x40>)
   d7118:	7829      	ldrb	r1, [r5, #0]
   d711a:	f3bf 8f5b 	dmb	ish
   d711e:	f011 0401 	ands.w	r4, r1, #1
{
   d7122:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7124:	d113      	bne.n	d714e <_Z19__fetch_global_Wirev+0x3a>
   d7126:	4628      	mov	r0, r5
   d7128:	f7fc ffc4 	bl	d40b4 <__cxa_guard_acquire>
   d712c:	b178      	cbz	r0, d714e <_Z19__fetch_global_Wirev+0x3a>
   d712e:	a801      	add	r0, sp, #4
   d7130:	f7ff ffd8 	bl	d70e4 <_Z17acquireWireBufferv>
   d7134:	aa01      	add	r2, sp, #4
   d7136:	4621      	mov	r1, r4
   d7138:	4807      	ldr	r0, [pc, #28]	; (d7158 <_Z19__fetch_global_Wirev+0x44>)
   d713a:	f7ff fc8b 	bl	d6a54 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d713e:	4628      	mov	r0, r5
   d7140:	f7fc ffbd 	bl	d40be <__cxa_guard_release>
   d7144:	4a05      	ldr	r2, [pc, #20]	; (d715c <_Z19__fetch_global_Wirev+0x48>)
   d7146:	4906      	ldr	r1, [pc, #24]	; (d7160 <_Z19__fetch_global_Wirev+0x4c>)
   d7148:	4803      	ldr	r0, [pc, #12]	; (d7158 <_Z19__fetch_global_Wirev+0x44>)
   d714a:	f000 f80b 	bl	d7164 <__aeabi_atexit>
	return wire;
}
   d714e:	4802      	ldr	r0, [pc, #8]	; (d7158 <_Z19__fetch_global_Wirev+0x44>)
   d7150:	b007      	add	sp, #28
   d7152:	bd30      	pop	{r4, r5, pc}
   d7154:	2003e7d8 	.word	0x2003e7d8
   d7158:	2003e7dc 	.word	0x2003e7dc
   d715c:	2003e630 	.word	0x2003e630
   d7160:	000d69fd 	.word	0x000d69fd

000d7164 <__aeabi_atexit>:
   d7164:	460b      	mov	r3, r1
   d7166:	4601      	mov	r1, r0
   d7168:	4618      	mov	r0, r3
   d716a:	f000 b809 	b.w	d7180 <__cxa_atexit>

000d716e <_ZdlPvj>:
   d716e:	f7fc bf94 	b.w	d409a <_ZdlPv>

000d7172 <_ZnwjRKSt9nothrow_t>:
   d7172:	f7fc bf8e 	b.w	d4092 <_Znwj>

000d7176 <_ZnajRKSt9nothrow_t>:
   d7176:	f7fc bf8e 	b.w	d4096 <_Znaj>

000d717a <_ZSt25__throw_bad_function_callv>:
   d717a:	b508      	push	{r3, lr}
   d717c:	f7fd fcee 	bl	d4b5c <abort>

000d7180 <__cxa_atexit>:
   d7180:	b510      	push	{r4, lr}
   d7182:	4c05      	ldr	r4, [pc, #20]	; (d7198 <__cxa_atexit+0x18>)
   d7184:	4613      	mov	r3, r2
   d7186:	b12c      	cbz	r4, d7194 <__cxa_atexit+0x14>
   d7188:	460a      	mov	r2, r1
   d718a:	4601      	mov	r1, r0
   d718c:	2002      	movs	r0, #2
   d718e:	f3af 8000 	nop.w
   d7192:	bd10      	pop	{r4, pc}
   d7194:	4620      	mov	r0, r4
   d7196:	e7fc      	b.n	d7192 <__cxa_atexit+0x12>
   d7198:	00000000 	.word	0x00000000

000d719c <memcpy>:
   d719c:	440a      	add	r2, r1
   d719e:	4291      	cmp	r1, r2
   d71a0:	f100 33ff 	add.w	r3, r0, #4294967295
   d71a4:	d100      	bne.n	d71a8 <memcpy+0xc>
   d71a6:	4770      	bx	lr
   d71a8:	b510      	push	{r4, lr}
   d71aa:	f811 4b01 	ldrb.w	r4, [r1], #1
   d71ae:	f803 4f01 	strb.w	r4, [r3, #1]!
   d71b2:	4291      	cmp	r1, r2
   d71b4:	d1f9      	bne.n	d71aa <memcpy+0xe>
   d71b6:	bd10      	pop	{r4, pc}

000d71b8 <memmove>:
   d71b8:	4288      	cmp	r0, r1
   d71ba:	b510      	push	{r4, lr}
   d71bc:	eb01 0402 	add.w	r4, r1, r2
   d71c0:	d902      	bls.n	d71c8 <memmove+0x10>
   d71c2:	4284      	cmp	r4, r0
   d71c4:	4623      	mov	r3, r4
   d71c6:	d807      	bhi.n	d71d8 <memmove+0x20>
   d71c8:	1e43      	subs	r3, r0, #1
   d71ca:	42a1      	cmp	r1, r4
   d71cc:	d008      	beq.n	d71e0 <memmove+0x28>
   d71ce:	f811 2b01 	ldrb.w	r2, [r1], #1
   d71d2:	f803 2f01 	strb.w	r2, [r3, #1]!
   d71d6:	e7f8      	b.n	d71ca <memmove+0x12>
   d71d8:	4402      	add	r2, r0
   d71da:	4601      	mov	r1, r0
   d71dc:	428a      	cmp	r2, r1
   d71de:	d100      	bne.n	d71e2 <memmove+0x2a>
   d71e0:	bd10      	pop	{r4, pc}
   d71e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d71e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
   d71ea:	e7f7      	b.n	d71dc <memmove+0x24>

000d71ec <memset>:
   d71ec:	4402      	add	r2, r0
   d71ee:	4603      	mov	r3, r0
   d71f0:	4293      	cmp	r3, r2
   d71f2:	d100      	bne.n	d71f6 <memset+0xa>
   d71f4:	4770      	bx	lr
   d71f6:	f803 1b01 	strb.w	r1, [r3], #1
   d71fa:	e7f9      	b.n	d71f0 <memset+0x4>

000d71fc <srand>:
   d71fc:	b538      	push	{r3, r4, r5, lr}
   d71fe:	4b0d      	ldr	r3, [pc, #52]	; (d7234 <srand+0x38>)
   d7200:	681d      	ldr	r5, [r3, #0]
   d7202:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d7204:	4604      	mov	r4, r0
   d7206:	b97b      	cbnz	r3, d7228 <srand+0x2c>
   d7208:	2018      	movs	r0, #24
   d720a:	f7fd fc87 	bl	d4b1c <malloc>
   d720e:	4a0a      	ldr	r2, [pc, #40]	; (d7238 <srand+0x3c>)
   d7210:	4b0a      	ldr	r3, [pc, #40]	; (d723c <srand+0x40>)
   d7212:	63a8      	str	r0, [r5, #56]	; 0x38
   d7214:	e9c0 2300 	strd	r2, r3, [r0]
   d7218:	4b09      	ldr	r3, [pc, #36]	; (d7240 <srand+0x44>)
   d721a:	6083      	str	r3, [r0, #8]
   d721c:	230b      	movs	r3, #11
   d721e:	8183      	strh	r3, [r0, #12]
   d7220:	2201      	movs	r2, #1
   d7222:	2300      	movs	r3, #0
   d7224:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d7228:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d722a:	2200      	movs	r2, #0
   d722c:	611c      	str	r4, [r3, #16]
   d722e:	615a      	str	r2, [r3, #20]
   d7230:	bd38      	pop	{r3, r4, r5, pc}
   d7232:	bf00      	nop
   d7234:	2003e5cc 	.word	0x2003e5cc
   d7238:	abcd330e 	.word	0xabcd330e
   d723c:	e66d1234 	.word	0xe66d1234
   d7240:	0005deec 	.word	0x0005deec

000d7244 <strchr>:
   d7244:	b2c9      	uxtb	r1, r1
   d7246:	4603      	mov	r3, r0
   d7248:	f810 2b01 	ldrb.w	r2, [r0], #1
   d724c:	b11a      	cbz	r2, d7256 <strchr+0x12>
   d724e:	428a      	cmp	r2, r1
   d7250:	d1f9      	bne.n	d7246 <strchr+0x2>
   d7252:	4618      	mov	r0, r3
   d7254:	4770      	bx	lr
   d7256:	2900      	cmp	r1, #0
   d7258:	bf18      	it	ne
   d725a:	2300      	movne	r3, #0
   d725c:	e7f9      	b.n	d7252 <strchr+0xe>

000d725e <strchrnul>:
   d725e:	b510      	push	{r4, lr}
   d7260:	4604      	mov	r4, r0
   d7262:	f7ff ffef 	bl	d7244 <strchr>
   d7266:	b918      	cbnz	r0, d7270 <strchrnul+0x12>
   d7268:	4620      	mov	r0, r4
   d726a:	f000 f832 	bl	d72d2 <strlen>
   d726e:	4420      	add	r0, r4
   d7270:	bd10      	pop	{r4, pc}

000d7272 <strcmp>:
   d7272:	f810 2b01 	ldrb.w	r2, [r0], #1
   d7276:	f811 3b01 	ldrb.w	r3, [r1], #1
   d727a:	2a01      	cmp	r2, #1
   d727c:	bf28      	it	cs
   d727e:	429a      	cmpcs	r2, r3
   d7280:	d0f7      	beq.n	d7272 <strcmp>
   d7282:	1ad0      	subs	r0, r2, r3
   d7284:	4770      	bx	lr

000d7286 <strcpy>:
   d7286:	4603      	mov	r3, r0
   d7288:	f811 2b01 	ldrb.w	r2, [r1], #1
   d728c:	f803 2b01 	strb.w	r2, [r3], #1
   d7290:	2a00      	cmp	r2, #0
   d7292:	d1f9      	bne.n	d7288 <strcpy+0x2>
   d7294:	4770      	bx	lr
	...

000d7298 <strdup>:
   d7298:	4b02      	ldr	r3, [pc, #8]	; (d72a4 <strdup+0xc>)
   d729a:	4601      	mov	r1, r0
   d729c:	6818      	ldr	r0, [r3, #0]
   d729e:	f000 b803 	b.w	d72a8 <_strdup_r>
   d72a2:	bf00      	nop
   d72a4:	2003e5cc 	.word	0x2003e5cc

000d72a8 <_strdup_r>:
   d72a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d72aa:	4604      	mov	r4, r0
   d72ac:	4608      	mov	r0, r1
   d72ae:	460d      	mov	r5, r1
   d72b0:	f000 f80f 	bl	d72d2 <strlen>
   d72b4:	1c42      	adds	r2, r0, #1
   d72b6:	4611      	mov	r1, r2
   d72b8:	4620      	mov	r0, r4
   d72ba:	9201      	str	r2, [sp, #4]
   d72bc:	f7fd fc56 	bl	d4b6c <_malloc_r>
   d72c0:	4604      	mov	r4, r0
   d72c2:	b118      	cbz	r0, d72cc <_strdup_r+0x24>
   d72c4:	9a01      	ldr	r2, [sp, #4]
   d72c6:	4629      	mov	r1, r5
   d72c8:	f7ff ff68 	bl	d719c <memcpy>
   d72cc:	4620      	mov	r0, r4
   d72ce:	b003      	add	sp, #12
   d72d0:	bd30      	pop	{r4, r5, pc}

000d72d2 <strlen>:
   d72d2:	4603      	mov	r3, r0
   d72d4:	f813 2b01 	ldrb.w	r2, [r3], #1
   d72d8:	2a00      	cmp	r2, #0
   d72da:	d1fb      	bne.n	d72d4 <strlen+0x2>
   d72dc:	1a18      	subs	r0, r3, r0
   d72de:	3801      	subs	r0, #1
   d72e0:	4770      	bx	lr

000d72e2 <strncmp>:
   d72e2:	b510      	push	{r4, lr}
   d72e4:	b16a      	cbz	r2, d7302 <strncmp+0x20>
   d72e6:	3901      	subs	r1, #1
   d72e8:	1884      	adds	r4, r0, r2
   d72ea:	f810 3b01 	ldrb.w	r3, [r0], #1
   d72ee:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   d72f2:	4293      	cmp	r3, r2
   d72f4:	d103      	bne.n	d72fe <strncmp+0x1c>
   d72f6:	42a0      	cmp	r0, r4
   d72f8:	d001      	beq.n	d72fe <strncmp+0x1c>
   d72fa:	2b00      	cmp	r3, #0
   d72fc:	d1f5      	bne.n	d72ea <strncmp+0x8>
   d72fe:	1a98      	subs	r0, r3, r2
   d7300:	bd10      	pop	{r4, pc}
   d7302:	4610      	mov	r0, r2
   d7304:	e7fc      	b.n	d7300 <strncmp+0x1e>

000d7306 <strrchr>:
   d7306:	b538      	push	{r3, r4, r5, lr}
   d7308:	4603      	mov	r3, r0
   d730a:	460c      	mov	r4, r1
   d730c:	b969      	cbnz	r1, d732a <strrchr+0x24>
   d730e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d7312:	f7ff bf97 	b.w	d7244 <strchr>
   d7316:	1c43      	adds	r3, r0, #1
   d7318:	4605      	mov	r5, r0
   d731a:	4621      	mov	r1, r4
   d731c:	4618      	mov	r0, r3
   d731e:	f7ff ff91 	bl	d7244 <strchr>
   d7322:	2800      	cmp	r0, #0
   d7324:	d1f7      	bne.n	d7316 <strrchr+0x10>
   d7326:	4628      	mov	r0, r5
   d7328:	bd38      	pop	{r3, r4, r5, pc}
   d732a:	2500      	movs	r5, #0
   d732c:	e7f5      	b.n	d731a <strrchr+0x14>
	...

000d7330 <_strtol_l.isra.0>:
   d7330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7334:	4e3a      	ldr	r6, [pc, #232]	; (d7420 <_strtol_l.isra.0+0xf0>)
   d7336:	4686      	mov	lr, r0
   d7338:	468c      	mov	ip, r1
   d733a:	4660      	mov	r0, ip
   d733c:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d7340:	5da5      	ldrb	r5, [r4, r6]
   d7342:	f015 0508 	ands.w	r5, r5, #8
   d7346:	d1f8      	bne.n	d733a <_strtol_l.isra.0+0xa>
   d7348:	2c2d      	cmp	r4, #45	; 0x2d
   d734a:	d133      	bne.n	d73b4 <_strtol_l.isra.0+0x84>
   d734c:	f89c 4000 	ldrb.w	r4, [ip]
   d7350:	f04f 0801 	mov.w	r8, #1
   d7354:	f100 0c02 	add.w	ip, r0, #2
   d7358:	2b00      	cmp	r3, #0
   d735a:	d05c      	beq.n	d7416 <_strtol_l.isra.0+0xe6>
   d735c:	2b10      	cmp	r3, #16
   d735e:	d10c      	bne.n	d737a <_strtol_l.isra.0+0x4a>
   d7360:	2c30      	cmp	r4, #48	; 0x30
   d7362:	d10a      	bne.n	d737a <_strtol_l.isra.0+0x4a>
   d7364:	f89c 0000 	ldrb.w	r0, [ip]
   d7368:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d736c:	2858      	cmp	r0, #88	; 0x58
   d736e:	d14d      	bne.n	d740c <_strtol_l.isra.0+0xdc>
   d7370:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d7374:	2310      	movs	r3, #16
   d7376:	f10c 0c02 	add.w	ip, ip, #2
   d737a:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   d737e:	3f01      	subs	r7, #1
   d7380:	2600      	movs	r6, #0
   d7382:	fbb7 f9f3 	udiv	r9, r7, r3
   d7386:	4630      	mov	r0, r6
   d7388:	fb03 7a19 	mls	sl, r3, r9, r7
   d738c:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   d7390:	2d09      	cmp	r5, #9
   d7392:	d818      	bhi.n	d73c6 <_strtol_l.isra.0+0x96>
   d7394:	462c      	mov	r4, r5
   d7396:	42a3      	cmp	r3, r4
   d7398:	dd24      	ble.n	d73e4 <_strtol_l.isra.0+0xb4>
   d739a:	1c75      	adds	r5, r6, #1
   d739c:	d007      	beq.n	d73ae <_strtol_l.isra.0+0x7e>
   d739e:	4581      	cmp	r9, r0
   d73a0:	d31d      	bcc.n	d73de <_strtol_l.isra.0+0xae>
   d73a2:	d101      	bne.n	d73a8 <_strtol_l.isra.0+0x78>
   d73a4:	45a2      	cmp	sl, r4
   d73a6:	db1a      	blt.n	d73de <_strtol_l.isra.0+0xae>
   d73a8:	fb00 4003 	mla	r0, r0, r3, r4
   d73ac:	2601      	movs	r6, #1
   d73ae:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d73b2:	e7eb      	b.n	d738c <_strtol_l.isra.0+0x5c>
   d73b4:	2c2b      	cmp	r4, #43	; 0x2b
   d73b6:	bf08      	it	eq
   d73b8:	f89c 4000 	ldrbeq.w	r4, [ip]
   d73bc:	46a8      	mov	r8, r5
   d73be:	bf08      	it	eq
   d73c0:	f100 0c02 	addeq.w	ip, r0, #2
   d73c4:	e7c8      	b.n	d7358 <_strtol_l.isra.0+0x28>
   d73c6:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   d73ca:	2d19      	cmp	r5, #25
   d73cc:	d801      	bhi.n	d73d2 <_strtol_l.isra.0+0xa2>
   d73ce:	3c37      	subs	r4, #55	; 0x37
   d73d0:	e7e1      	b.n	d7396 <_strtol_l.isra.0+0x66>
   d73d2:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   d73d6:	2d19      	cmp	r5, #25
   d73d8:	d804      	bhi.n	d73e4 <_strtol_l.isra.0+0xb4>
   d73da:	3c57      	subs	r4, #87	; 0x57
   d73dc:	e7db      	b.n	d7396 <_strtol_l.isra.0+0x66>
   d73de:	f04f 36ff 	mov.w	r6, #4294967295
   d73e2:	e7e4      	b.n	d73ae <_strtol_l.isra.0+0x7e>
   d73e4:	1c73      	adds	r3, r6, #1
   d73e6:	d106      	bne.n	d73f6 <_strtol_l.isra.0+0xc6>
   d73e8:	2322      	movs	r3, #34	; 0x22
   d73ea:	f8ce 3000 	str.w	r3, [lr]
   d73ee:	4638      	mov	r0, r7
   d73f0:	b942      	cbnz	r2, d7404 <_strtol_l.isra.0+0xd4>
   d73f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d73f6:	f1b8 0f00 	cmp.w	r8, #0
   d73fa:	d000      	beq.n	d73fe <_strtol_l.isra.0+0xce>
   d73fc:	4240      	negs	r0, r0
   d73fe:	2a00      	cmp	r2, #0
   d7400:	d0f7      	beq.n	d73f2 <_strtol_l.isra.0+0xc2>
   d7402:	b10e      	cbz	r6, d7408 <_strtol_l.isra.0+0xd8>
   d7404:	f10c 31ff 	add.w	r1, ip, #4294967295
   d7408:	6011      	str	r1, [r2, #0]
   d740a:	e7f2      	b.n	d73f2 <_strtol_l.isra.0+0xc2>
   d740c:	2430      	movs	r4, #48	; 0x30
   d740e:	2b00      	cmp	r3, #0
   d7410:	d1b3      	bne.n	d737a <_strtol_l.isra.0+0x4a>
   d7412:	2308      	movs	r3, #8
   d7414:	e7b1      	b.n	d737a <_strtol_l.isra.0+0x4a>
   d7416:	2c30      	cmp	r4, #48	; 0x30
   d7418:	d0a4      	beq.n	d7364 <_strtol_l.isra.0+0x34>
   d741a:	230a      	movs	r3, #10
   d741c:	e7ad      	b.n	d737a <_strtol_l.isra.0+0x4a>
   d741e:	bf00      	nop
   d7420:	000d776b 	.word	0x000d776b

000d7424 <strtol>:
   d7424:	4613      	mov	r3, r2
   d7426:	460a      	mov	r2, r1
   d7428:	4601      	mov	r1, r0
   d742a:	4802      	ldr	r0, [pc, #8]	; (d7434 <strtol+0x10>)
   d742c:	6800      	ldr	r0, [r0, #0]
   d742e:	f7ff bf7f 	b.w	d7330 <_strtol_l.isra.0>
   d7432:	bf00      	nop
   d7434:	2003e5cc 	.word	0x2003e5cc

000d7438 <dynalib_user>:
   d7438:	000d401d 000d4059 000d4081 000d4085     .@..Y@...@...@..
   d7448:	00000000 6e756f73 616c4164 53006d72     ....soundAlarm.S
   d7458:	70757465 75420021 6e6f7474 65727020     etup!.Button pre
   d7468:	64657373 75620021 6e6f7474 6572702d     ssed!.button-pre
   d7478:	64657373 6d695400 73207265 61707275     ssed.Timer surpa
   d7488:	64657373 69740021 2d72656d 70727573     ssed!.timer-surp
   d7498:	65737361 75720064 7277006e 2d676e6f     assed.run.wrong-
   d74a8:	6d6d6f63 00646e61 6e6e7552 21676e69     command.Running!
   d74b8:	00000000                                ....

000d74bc <_ZTV5Timer>:
	...
   d74c4:	000d41c1 000d4209 000d4103              .A...B...A..

000d74d0 <_ZTVN5spark10LogHandlerE>:
	...
   d74e0:	000d40a1 000d40c5                       .@...@..

000d74e8 <_ZTVN5spark16SerialLogHandlerE>:
	...
   d74f0:	000d4149 000d417d 000d5b8d 000d40c7     IA..}A...[...@..

000d7500 <_ZTVN5spark13EthernetClassE>:
	...
   d7508:	000d4beb 000d4be1 000d4bd7 000d4bcd     .K...K...K...K..
   d7518:	000d4bc1 000d4bb5 000d4ba9 000d4ba1     .K...K...K...K..
   d7528:	000d4b97 000d4b8d 000d6b5d 64756162     .K...K..]k..baud
   d7538:	72655300 006c6169 69726553 00316c61     .Serial.Serial1.
   d7548:	4e4f534a 65727453 6f4c6d61 6e614867     JSONStreamLogHan
   d7558:	72656c64 70706100 31302500 00207530     dler.app.%010u .
   d7568:	2500205d 202c0064 3a292800 5b200020     ] .%d., .(): . [
   d7578:	646f6300 203d2065 00692500 61746564     .code = .%i.deta
   d7588:	20736c69 0d00203d 0063000a 6e6c0066     ils = ....c.f.ln
   d7598:	006e6600 6f630074 64006564 69617465     .fn.t.code.detai
   d75a8:	0000006c                                l...

000d75ac <_ZTVN5spark16JSONStreamWriterE>:
	...
   d75b4:	000d4f4b 000d4f71 000d4f31 000d6c73     KO..qO..1O..sl..

000d75c4 <_ZTVN5spark16StreamLogHandlerE>:
	...
   d75cc:	000d53b5 000d53cd 000d5b8d 000d40c7     .S...S...[...@..

000d75dc <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   d75e4:	000d53e1 000d53f5 000d5d31 000d4f39     .S...S..1]..9O..

000d75f4 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   d75fc:	000d4f49 000d4f7f 000d5ac9 000d4f3b     IO...O...Z..;O..

000d760c <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   d7614:	000d4f47 000d4f8d 000d52fd 000d4fa9     GO...O...R...O..
   d7624:	252d5925 64252d6d 3a482554 253a4d25     %Y-%m-%dT%H:%M:%
   d7634:	007a2553 74637361 00656d69              S%z.asctime.

000d7640 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d7648:	000d6029 000d602f 000d606d 000d603d     )`../`..m`..=`..
   d7658:	000d602b                                +`..

000d765c <_ZTV9IPAddress>:
	...
   d7664:	000d65c9 000d65b9 000d65bb              .e...e...e..

000d7670 <_ZTV9USBSerial>:
	...
   d7678:	000d669f 000d6707 000d66dd 000d4e25     .f...g...f..%N..
   d7688:	000d66cf 000d66a1 000d66b1 000d6701     .f...f...f...g..
   d7698:	000d66c1 000d669b                       .f...f..

000d76a0 <_ZTV11USARTSerial>:
	...
   d76a8:	000d6891 000d68fd 000d68d5 000d4e25     .h...h...h..%N..
   d76b8:	000d68a5 000d68c1 000d68b3 000d68cf     .h...h...h...h..
   d76c8:	000d6893 000d6897                       .h...h..

000d76d0 <_ZTV7TwoWire>:
	...
   d76d8:	000d69fd 000d6a47 000d6a1f 000d69ff     .i..Gj...j...i..
   d76e8:	000d6a27 000d6a2f 000d6a37 000d6a3f     'j../j..7j..?j..

000d76f8 <_ZTVN5spark9WiFiClassE>:
	...
   d7700:	000d6ad7 000d6acd 000d6ac3 000d6a79     .j...j...j..yj..
   d7710:	000d6ab7 000d6aab 000d6a9f 000d6a97     .j...j...j...j..
   d7720:	000d6a8d 000d6a83 000d6b5d              .j...j..]k..

000d772c <_ZTVN5spark12NetworkClassE>:
	...
   d7734:	000d6af5 000d6aff 000d6b09 000d6b13     .j...j...k...k..
   d7744:	000d6b1d 000d6b29 000d6b35 000d6b41     .k..)k..5k..Ak..
   d7754:	000d6b49 000d6b53 000d6b5d 75007525     Ik..Sk..]k..%u.u
   d7764:	78343025                                 %04x.

000d7769 <_ZSt7nothrow>:
	...

000d776a <_ctype_>:
   d776a:	20202000 20202020 28282020 20282828     .         ((((( 
   d777a:	20202020 20202020 20202020 20202020                     
   d778a:	10108820 10101010 10101010 10101010      ...............
   d779a:	04040410 04040404 10040404 10101010     ................
   d77aa:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d77ba:	01010101 01010101 01010101 10101010     ................
   d77ca:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d77da:	02020202 02020202 02020202 10101010     ................
   d77ea:	00000020 00000000 00000000 00000000      ...............
	...

000d786b <link_const_variable_data_end>:
	...

000d786c <link_constructors_location>:
   d786c:	000d4529 	.word	0x000d4529
   d7870:	000d4bf5 	.word	0x000d4bf5
   d7874:	000d4c3d 	.word	0x000d4c3d
   d7878:	000d4dfd 	.word	0x000d4dfd
   d787c:	000d5b7d 	.word	0x000d5b7d
   d7880:	000d5ea5 	.word	0x000d5ea5
   d7884:	000d5ee9 	.word	0x000d5ee9
   d7888:	000d6ae1 	.word	0x000d6ae1
   d788c:	000d6c31 	.word	0x000d6c31
