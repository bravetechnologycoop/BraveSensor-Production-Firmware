
c:/Users/phela/brave/traffic_light/BraveSensor-Production-Firmware/target/2.0.1/argon/BraveSensor-Production-Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001fb4  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d5fd0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  2003e620  000d5fd4  0001e620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000168  2003e688  2003e688  0002e688  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d603c  000d603c  0002603c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d6064  000d6064  00026064  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0012f327  00000000  00000000  00026068  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00014f9c  00000000  00000000  0015538f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00029d84  00000000  00000000  0016a32b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000025c8  00000000  00000000  001940af  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000074c0  00000000  00000000  00196677  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000361b4  00000000  00000000  0019db37  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00034217  00000000  00000000  001d3ceb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001085f2  00000000  00000000  00207f02  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000066c4  00000000  00000000  003104f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f001 fd2d 	bl	d5a8c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f001 fd35 	bl	d5aa8 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e620 	.word	0x2003e620
   d4048:	000d5fd4 	.word	0x000d5fd4
   d404c:	2003e688 	.word	0x2003e688
   d4050:	2003e688 	.word	0x2003e688
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f000 fe4b 	bl	d4cf8 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d5fac 	.word	0x000d5fac
   d407c:	000d5fd0 	.word	0x000d5fd0

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b8f8 	b.w	d4274 <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f9bd 	bl	d4404 <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f000 bdf5 	b.w	d4c7c <_post_loop>

000d4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4092:	f000 bbfb 	b.w	d488c <malloc>

000d4096 <_Znaj>:
   d4096:	f000 bbf9 	b.w	d488c <malloc>

000d409a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409a:	f000 bbff 	b.w	d489c <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr

000d40ae <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d40ae:	6803      	ldr	r3, [r0, #0]
   d40b0:	4718      	bx	r3

000d40b2 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	  switch (__op)
   d40b2:	2a01      	cmp	r2, #1
   d40b4:	d003      	beq.n	d40be <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xc>
   d40b6:	2a02      	cmp	r2, #2
   d40b8:	d003      	beq.n	d40c2 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x10>
	}
   d40ba:	2000      	movs	r0, #0
   d40bc:	4770      	bx	lr
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d40be:	6001      	str	r1, [r0, #0]
	      break;
   d40c0:	e7fb      	b.n	d40ba <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d40c2:	680b      	ldr	r3, [r1, #0]
   d40c4:	6003      	str	r3, [r0, #0]
	}
   d40c6:	e7f8      	b.n	d40ba <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>

000d40c8 <_Z19change_timer_length6String>:
{
    publish_messages();
}

int change_timer_length(String command)
{
   d40c8:	b5b0      	push	{r4, r5, r7, lr}
   d40ca:	b082      	sub	sp, #8
    char command_arr[command.length() + 1];
   d40cc:	6884      	ldr	r4, [r0, #8]
    strcpy(command_arr, command.c_str());
   d40ce:	6805      	ldr	r5, [r0, #0]
    char command_arr[command.length() + 1];
   d40d0:	f104 0308 	add.w	r3, r4, #8
   d40d4:	f023 0307 	bic.w	r3, r3, #7
{
   d40d8:	af02      	add	r7, sp, #8
    char command_arr[command.length() + 1];
   d40da:	ebad 0d03 	sub.w	sp, sp, r3
   d40de:	ab02      	add	r3, sp, #8
    strcpy(command_arr, command.c_str());
   d40e0:	4629      	mov	r1, r5
   d40e2:	4618      	mov	r0, r3
   d40e4:	f001 fd16 	bl	d5b14 <strcpy>
    for (unsigned int i = 0; i < command.length(); i++)
   d40e8:	4404      	add	r4, r0
   d40ea:	42a0      	cmp	r0, r4
   d40ec:	d00b      	beq.n	d4106 <_Z19change_timer_length6String+0x3e>
    {
        char temp = command_arr[i];
   d40ee:	f810 3b01 	ldrb.w	r3, [r0], #1
        if (temp != '0' && temp != '1' && temp != '2' && temp != '3' && temp != '4' && temp != '5' && temp != '6' && temp != '7' && temp != '8' && temp != '9')
   d40f2:	3b30      	subs	r3, #48	; 0x30
   d40f4:	2b09      	cmp	r3, #9
   d40f6:	d9f8      	bls.n	d40ea <_Z19change_timer_length6String+0x22>
        {
            flag = 4;
   d40f8:	4b0d      	ldr	r3, [pc, #52]	; (d4130 <_Z19change_timer_length6String+0x68>)
   d40fa:	2204      	movs	r2, #4
   d40fc:	601a      	str	r2, [r3, #0]
            return -1;
   d40fe:	f04f 30ff 	mov.w	r0, #4294967295
        }
    }
    timer.changePeriod(atoi(command));
    flag = 5;
    return 1;
}
   d4102:	46bd      	mov	sp, r7
   d4104:	bdb0      	pop	{r4, r5, r7, pc}
    timer.changePeriod(atoi(command));
   d4106:	4628      	mov	r0, r5
   d4108:	f001 fcae 	bl	d5a68 <atoi>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_RESET, fromISR, 0, block, nullptr) : false;
    }

    bool _changePeriod(unsigned period, unsigned block, bool fromISR=false)
    {
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
   d410c:	4a09      	ldr	r2, [pc, #36]	; (d4134 <_Z19change_timer_length6String+0x6c>)
   d410e:	4603      	mov	r3, r0
   d4110:	6890      	ldr	r0, [r2, #8]
   d4112:	b138      	cbz	r0, d4124 <_Z19change_timer_length6String+0x5c>
   d4114:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d4118:	2200      	movs	r2, #0
   d411a:	e9cd 1200 	strd	r1, r2, [sp]
   d411e:	2103      	movs	r1, #3
   d4120:	f000 fa30 	bl	d4584 <os_timer_change>
    flag = 5;
   d4124:	4b02      	ldr	r3, [pc, #8]	; (d4130 <_Z19change_timer_length6String+0x68>)
   d4126:	2205      	movs	r2, #5
   d4128:	601a      	str	r2, [r3, #0]
    return 1;
   d412a:	2001      	movs	r0, #1
   d412c:	e7e9      	b.n	d4102 <_Z19change_timer_length6String+0x3a>
   d412e:	bf00      	nop
   d4130:	2003e690 	.word	0x2003e690
   d4134:	2003e694 	.word	0x2003e694

000d4138 <_Z14timer_overflowv>:
    flag = 3; // alarm sounded msg
    return 1;
}

void timer_overflow()
{
   d4138:	b508      	push	{r3, lr}
    detachInterrupt(BUTTON);
   d413a:	2005      	movs	r0, #5
   d413c:	f001 f9f6 	bl	d552c <_Z15detachInterruptt>
    digitalWrite(BUZZER, LOW);
   d4140:	2100      	movs	r1, #0
   d4142:	2006      	movs	r0, #6
   d4144:	f001 fc2b 	bl	d599e <digitalWrite>
    flag = 2; // escalate response msg
   d4148:	4b01      	ldr	r3, [pc, #4]	; (d4150 <_Z14timer_overflowv+0x18>)
   d414a:	2202      	movs	r2, #2
   d414c:	601a      	str	r2, [r3, #0]
}
   d414e:	bd08      	pop	{r3, pc}
   d4150:	2003e690 	.word	0x2003e690

000d4154 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   d4154:	6943      	ldr	r3, [r0, #20]
   d4156:	b113      	cbz	r3, d415e <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4158:	6983      	ldr	r3, [r0, #24]
   d415a:	300c      	adds	r0, #12
   d415c:	4718      	bx	r3
            callback();
        }
    }
   d415e:	4770      	bx	lr

000d4160 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   d4160:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d4162:	2100      	movs	r1, #0
   d4164:	4604      	mov	r4, r0
   d4166:	4608      	mov	r0, r1
   d4168:	f000 f9ec 	bl	d4544 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d416c:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   d416e:	4620      	mov	r0, r4
   d4170:	a901      	add	r1, sp, #4
            void* id = nullptr;
   d4172:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   d4174:	f000 f9fe 	bl	d4574 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   d4178:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   d417a:	b10c      	cbz	r4, d4180 <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   d417c:	2301      	movs	r3, #1
   d417e:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d4180:	2100      	movs	r1, #0
   d4182:	2001      	movs	r0, #1
   d4184:	f000 f9de 	bl	d4544 <os_thread_scheduling>
            }
        }
        if (t) {
   d4188:	b12c      	cbz	r4, d4196 <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   d418a:	6823      	ldr	r3, [r4, #0]
   d418c:	4620      	mov	r0, r4
   d418e:	689b      	ldr	r3, [r3, #8]
   d4190:	4798      	blx	r3
            t->running = false;
   d4192:	2300      	movs	r3, #0
   d4194:	7123      	strb	r3, [r4, #4]
        }
    }
   d4196:	b002      	add	sp, #8
   d4198:	bd10      	pop	{r4, pc}
	...

000d419c <_ZN10CloudClass7publishEPKc.isra.0>:

inline bool CloudDisconnectOptions::isTimeoutSet() const {
    return (flags_ & OptionFlag::TIMEOUT);
}

inline particle::Future<bool> CloudClass::publish(const char* name) {
   d419c:	b513      	push	{r0, r1, r4, lr}
   d419e:	4b06      	ldr	r3, [pc, #24]	; (d41b8 <_ZN10CloudClass7publishEPKc.isra.0+0x1c>)
   d41a0:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d41a2:	f88d 3000 	strb.w	r3, [sp]
   d41a6:	2200      	movs	r2, #0
   d41a8:	233c      	movs	r3, #60	; 0x3c
inline particle::Future<bool> CloudClass::publish(const char* name) {
   d41aa:	4604      	mov	r4, r0
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d41ac:	f000 ff28 	bl	d5000 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    return publish(name, PUBLIC);
}
   d41b0:	4620      	mov	r0, r4
   d41b2:	b002      	add	sp, #8
   d41b4:	bd10      	pop	{r4, pc}
   d41b6:	bf00      	nop
   d41b8:	2003e68c 	.word	0x2003e68c

000d41bc <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d41bc:	b510      	push	{r4, lr}
      if (_M_manager)
   d41be:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d41c0:	4604      	mov	r4, r0
      if (_M_manager)
   d41c2:	b113      	cbz	r3, d41ca <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d41c4:	2203      	movs	r2, #3
   d41c6:	4601      	mov	r1, r0
   d41c8:	4798      	blx	r3
    }
   d41ca:	4620      	mov	r0, r4
   d41cc:	bd10      	pop	{r4, pc}

000d41ce <_ZN5Timer5_stopEjb>:
    bool _stop(unsigned block, bool fromISR=false)
   d41ce:	b507      	push	{r0, r1, r2, lr}
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   d41d0:	6880      	ldr	r0, [r0, #8]
   d41d2:	2300      	movs	r3, #0
   d41d4:	b138      	cbz	r0, d41e6 <_ZN5Timer5_stopEjb+0x18>
   d41d6:	e9cd 1300 	strd	r1, r3, [sp]
   d41da:	2102      	movs	r1, #2
   d41dc:	f000 f9d2 	bl	d4584 <os_timer_change>
   d41e0:	fab0 f080 	clz	r0, r0
   d41e4:	0940      	lsrs	r0, r0, #5
    }
   d41e6:	b003      	add	sp, #12
   d41e8:	f85d fb04 	ldr.w	pc, [sp], #4

000d41ec <_Z16button_interruptv>:

void button_interrupt()
{
   d41ec:	b508      	push	{r3, lr}
    detachInterrupt(BUTTON);
   d41ee:	2005      	movs	r0, #5
   d41f0:	f001 f99c 	bl	d552c <_Z15detachInterruptt>
    digitalWrite(BUZZER, LOW);
   d41f4:	2100      	movs	r1, #0
   d41f6:	2006      	movs	r0, #6
   d41f8:	f001 fbd1 	bl	d599e <digitalWrite>
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d41fc:	2200      	movs	r2, #0
   d41fe:	4804      	ldr	r0, [pc, #16]	; (d4210 <_Z16button_interruptv+0x24>)
   d4200:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d4204:	f7ff ffe3 	bl	d41ce <_ZN5Timer5_stopEjb>
    timer.stop();
    flag = 1; // button pressed msg
   d4208:	4b02      	ldr	r3, [pc, #8]	; (d4214 <_Z16button_interruptv+0x28>)
   d420a:	2201      	movs	r2, #1
   d420c:	601a      	str	r2, [r3, #0]
}
   d420e:	bd08      	pop	{r3, pc}
   d4210:	2003e694 	.word	0x2003e694
   d4214:	2003e690 	.word	0x2003e690

000d4218 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   d4218:	b538      	push	{r3, r4, r5, lr}
   d421a:	4b10      	ldr	r3, [pc, #64]	; (d425c <_ZN5TimerD1Ev+0x44>)
   d421c:	6003      	str	r3, [r0, #0]
        if (handle) {
   d421e:	6883      	ldr	r3, [r0, #8]
    virtual ~Timer() {
   d4220:	4604      	mov	r4, r0
        if (handle) {
   d4222:	b1a3      	cbz	r3, d424e <_ZN5TimerD1Ev+0x36>
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d4224:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   d4228:	2200      	movs	r2, #0
   d422a:	f7ff ffd0 	bl	d41ce <_ZN5Timer5_stopEjb>
            os_timer_set_id(handle, nullptr);
   d422e:	68a0      	ldr	r0, [r4, #8]
   d4230:	2100      	movs	r1, #0
   d4232:	f000 f9bf 	bl	d45b4 <os_timer_set_id>
            while (running) {
   d4236:	7923      	ldrb	r3, [r4, #4]
   d4238:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d423c:	b113      	cbz	r3, d4244 <_ZN5TimerD1Ev+0x2c>
                os_thread_yield();
   d423e:	f000 f979 	bl	d4534 <os_thread_yield>
            while (running) {
   d4242:	e7f8      	b.n	d4236 <_ZN5TimerD1Ev+0x1e>
            os_timer_destroy(handle, nullptr);
   d4244:	68a0      	ldr	r0, [r4, #8]
   d4246:	4629      	mov	r1, r5
   d4248:	f000 f98c 	bl	d4564 <os_timer_destroy>
            handle = nullptr;
   d424c:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   d424e:	f104 000c 	add.w	r0, r4, #12
   d4252:	f7ff ffb3 	bl	d41bc <_ZNSt14_Function_baseD1Ev>
    }
   d4256:	4620      	mov	r0, r4
   d4258:	bd38      	pop	{r3, r4, r5, pc}
   d425a:	bf00      	nop
   d425c:	000d5d28 	.word	0x000d5d28

000d4260 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   d4260:	b510      	push	{r4, lr}
   d4262:	4604      	mov	r4, r0
    }
   d4264:	f7ff ffd8 	bl	d4218 <_ZN5TimerD1Ev>
   d4268:	4620      	mov	r0, r4
   d426a:	211c      	movs	r1, #28
   d426c:	f001 fbf5 	bl	d5a5a <_ZdlPvj>
   d4270:	4620      	mov	r0, r4
   d4272:	bd10      	pop	{r4, pc}

000d4274 <setup>:
{
   d4274:	b510      	push	{r4, lr}
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d4276:	4c0c      	ldr	r4, [pc, #48]	; (d42a8 <setup+0x34>)
    Particle.publishVitals(60);
   d4278:	480c      	ldr	r0, [pc, #48]	; (d42ac <setup+0x38>)
   d427a:	213c      	movs	r1, #60	; 0x3c
   d427c:	f000 fdda 	bl	d4e34 <_ZN10CloudClass13publishVitalsEm>
   d4280:	4a0b      	ldr	r2, [pc, #44]	; (d42b0 <setup+0x3c>)
   d4282:	490c      	ldr	r1, [pc, #48]	; (d42b4 <setup+0x40>)
   d4284:	4620      	mov	r0, r4
   d4286:	f000 fdc4 	bl	d4e12 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d428a:	4a0b      	ldr	r2, [pc, #44]	; (d42b8 <setup+0x44>)
   d428c:	490b      	ldr	r1, [pc, #44]	; (d42bc <setup+0x48>)
   d428e:	4620      	mov	r0, r4
   d4290:	f000 fdbf 	bl	d4e12 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
    pinMode(BUTTON, INPUT);
   d4294:	2100      	movs	r1, #0
   d4296:	2005      	movs	r0, #5
   d4298:	f001 fb70 	bl	d597c <pinMode>
}
   d429c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    pinMode(BUZZER, OUTPUT);
   d42a0:	2101      	movs	r1, #1
   d42a2:	2006      	movs	r0, #6
   d42a4:	f001 bb6a 	b.w	d597c <pinMode>
   d42a8:	000d4de7 	.word	0x000d4de7
   d42ac:	2003e7d4 	.word	0x2003e7d4
   d42b0:	000d5c8c 	.word	0x000d5c8c
   d42b4:	000d42ed 	.word	0x000d42ed
   d42b8:	000d5c92 	.word	0x000d5c92
   d42bc:	000d40c9 	.word	0x000d40c9

000d42c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d42c0:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d42c2:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d42c4:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d42c6:	b17c      	cbz	r4, d42e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d42c8:	6863      	ldr	r3, [r4, #4]
   d42ca:	3b01      	subs	r3, #1
   d42cc:	6063      	str	r3, [r4, #4]
   d42ce:	b95b      	cbnz	r3, d42e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d42d0:	6823      	ldr	r3, [r4, #0]
   d42d2:	4620      	mov	r0, r4
   d42d4:	689b      	ldr	r3, [r3, #8]
   d42d6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d42d8:	68a3      	ldr	r3, [r4, #8]
   d42da:	3b01      	subs	r3, #1
   d42dc:	60a3      	str	r3, [r4, #8]
   d42de:	b91b      	cbnz	r3, d42e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d42e0:	6823      	ldr	r3, [r4, #0]
   d42e2:	4620      	mov	r0, r4
   d42e4:	68db      	ldr	r3, [r3, #12]
   d42e6:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d42e8:	4628      	mov	r0, r5
   d42ea:	bd38      	pop	{r3, r4, r5, pc}

000d42ec <_Z11start_siren6String>:
{
   d42ec:	b530      	push	{r4, r5, lr}
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d42ee:	4919      	ldr	r1, [pc, #100]	; (d4354 <_Z11start_siren6String+0x68>)
   d42f0:	b085      	sub	sp, #20
   d42f2:	f000 fbea 	bl	d4aca <_ZNK6String6equalsEPKc>
    if (command != "start")
   d42f6:	b950      	cbnz	r0, d430e <_Z11start_siren6String+0x22>
        Particle.publish("wrong-command");
   d42f8:	4917      	ldr	r1, [pc, #92]	; (d4358 <_Z11start_siren6String+0x6c>)
   d42fa:	a802      	add	r0, sp, #8
   d42fc:	f7ff ff4e 	bl	d419c <_ZN10CloudClass7publishEPKc.isra.0>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4300:	a803      	add	r0, sp, #12
   d4302:	f7ff ffdd 	bl	d42c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4306:	f04f 30ff 	mov.w	r0, #4294967295
}
   d430a:	b005      	add	sp, #20
   d430c:	bd30      	pop	{r4, r5, pc}
    attachInterrupt(BUTTON, button_interrupt, RISING);
   d430e:	2400      	movs	r4, #0
   d4310:	f04f 33ff 	mov.w	r3, #4294967295
   d4314:	2201      	movs	r2, #1
   d4316:	4911      	ldr	r1, [pc, #68]	; (d435c <_Z11start_siren6String+0x70>)
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   d4318:	4d11      	ldr	r5, [pc, #68]	; (d4360 <_Z11start_siren6String+0x74>)
   d431a:	9400      	str	r4, [sp, #0]
   d431c:	2005      	movs	r0, #5
   d431e:	f001 f8db 	bl	d54d8 <_Z15attachInterrupttPFvvE13InterruptModeah>
    digitalWrite(BUZZER, HIGH);
   d4322:	2101      	movs	r1, #1
   d4324:	2006      	movs	r0, #6
   d4326:	f001 fb3a 	bl	d599e <digitalWrite>
   d432a:	4622      	mov	r2, r4
   d432c:	4621      	mov	r1, r4
   d432e:	4628      	mov	r0, r5
   d4330:	f7ff ff4d 	bl	d41ce <_ZN5Timer5_stopEjb>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   d4334:	68a8      	ldr	r0, [r5, #8]
   d4336:	b140      	cbz	r0, d434a <_Z11start_siren6String+0x5e>
   d4338:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   d433c:	9300      	str	r3, [sp, #0]
   d433e:	9401      	str	r4, [sp, #4]
   d4340:	4623      	mov	r3, r4
   d4342:	4622      	mov	r2, r4
   d4344:	4621      	mov	r1, r4
   d4346:	f000 f91d 	bl	d4584 <os_timer_change>
    flag = 3; // alarm sounded msg
   d434a:	4b06      	ldr	r3, [pc, #24]	; (d4364 <_Z11start_siren6String+0x78>)
   d434c:	2203      	movs	r2, #3
   d434e:	601a      	str	r2, [r3, #0]
    return 1;
   d4350:	2001      	movs	r0, #1
   d4352:	e7da      	b.n	d430a <_Z11start_siren6String+0x1e>
   d4354:	000d5c8c 	.word	0x000d5c8c
   d4358:	000d5caf 	.word	0x000d5caf
   d435c:	000d41ed 	.word	0x000d41ed
   d4360:	2003e694 	.word	0x2003e694
   d4364:	2003e690 	.word	0x2003e690

000d4368 <_Z16publish_messagesv>:

void publish_messages()
{
   d4368:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    switch (flag)
   d436a:	4c1d      	ldr	r4, [pc, #116]	; (d43e0 <_Z16publish_messagesv+0x78>)
   d436c:	6823      	ldr	r3, [r4, #0]
   d436e:	3b01      	subs	r3, #1
   d4370:	2b04      	cmp	r3, #4
   d4372:	d81a      	bhi.n	d43aa <_Z16publish_messagesv+0x42>
   d4374:	e8df f003 	tbb	[pc, r3]
   d4378:	2f2a1b03 	.word	0x2f2a1b03
   d437c:	31          	.byte	0x31
   d437d:	00          	.byte	0x00
    {
    case 0:
        break;
    case 1:
        Particle.publish("siren-addressed");
   d437e:	4919      	ldr	r1, [pc, #100]	; (d43e4 <_Z16publish_messagesv+0x7c>)
   d4380:	a802      	add	r0, sp, #8
   d4382:	f7ff ff0b 	bl	d419c <_ZN10CloudClass7publishEPKc.isra.0>
   d4386:	a803      	add	r0, sp, #12
   d4388:	f7ff ff9a 	bl	d42c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d438c:	4b16      	ldr	r3, [pc, #88]	; (d43e8 <_Z16publish_messagesv+0x80>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d438e:	4a15      	ldr	r2, [pc, #84]	; (d43e4 <_Z16publish_messagesv+0x7c>)
   d4390:	781b      	ldrb	r3, [r3, #0]
   d4392:	4916      	ldr	r1, [pc, #88]	; (d43ec <_Z16publish_messagesv+0x84>)
   d4394:	f88d 3000 	strb.w	r3, [sp]
   d4398:	233c      	movs	r3, #60	; 0x3c
   d439a:	a802      	add	r0, sp, #8
   d439c:	f000 fe30 	bl	d5000 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d43a0:	a803      	add	r0, sp, #12
   d43a2:	f7ff ff8d 	bl	d42c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        Particle.publish("positive-integer-please");
        flag = 0;
        break;
    case 5:
        Particle.publish("timer-length-updated");
        flag = 0;
   d43a6:	2300      	movs	r3, #0
   d43a8:	6023      	str	r3, [r4, #0]
        break;
    default:
        break;
    }
}
   d43aa:	b004      	add	sp, #16
   d43ac:	bd10      	pop	{r4, pc}
        Particle.publish("escalate-siren");
   d43ae:	4910      	ldr	r1, [pc, #64]	; (d43f0 <_Z16publish_messagesv+0x88>)
   d43b0:	a802      	add	r0, sp, #8
   d43b2:	f7ff fef3 	bl	d419c <_ZN10CloudClass7publishEPKc.isra.0>
   d43b6:	a803      	add	r0, sp, #12
   d43b8:	f7ff ff82 	bl	d42c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d43bc:	4b0a      	ldr	r3, [pc, #40]	; (d43e8 <_Z16publish_messagesv+0x80>)
   d43be:	4a0c      	ldr	r2, [pc, #48]	; (d43f0 <_Z16publish_messagesv+0x88>)
   d43c0:	781b      	ldrb	r3, [r3, #0]
   d43c2:	f88d 3000 	strb.w	r3, [sp]
   d43c6:	490b      	ldr	r1, [pc, #44]	; (d43f4 <_Z16publish_messagesv+0x8c>)
   d43c8:	233c      	movs	r3, #60	; 0x3c
   d43ca:	e7e6      	b.n	d439a <_Z16publish_messagesv+0x32>
        Particle.publish("alarm-sounded");
   d43cc:	490a      	ldr	r1, [pc, #40]	; (d43f8 <_Z16publish_messagesv+0x90>)
        Particle.publish("timer-length-updated");
   d43ce:	a802      	add	r0, sp, #8
   d43d0:	f7ff fee4 	bl	d419c <_ZN10CloudClass7publishEPKc.isra.0>
   d43d4:	e7e4      	b.n	d43a0 <_Z16publish_messagesv+0x38>
        Particle.publish("positive-integer-please");
   d43d6:	4909      	ldr	r1, [pc, #36]	; (d43fc <_Z16publish_messagesv+0x94>)
   d43d8:	e7f9      	b.n	d43ce <_Z16publish_messagesv+0x66>
        Particle.publish("timer-length-updated");
   d43da:	4909      	ldr	r1, [pc, #36]	; (d4400 <_Z16publish_messagesv+0x98>)
   d43dc:	e7f7      	b.n	d43ce <_Z16publish_messagesv+0x66>
   d43de:	bf00      	nop
   d43e0:	2003e690 	.word	0x2003e690
   d43e4:	000d5cbd 	.word	0x000d5cbd
   d43e8:	2003e68d 	.word	0x2003e68d
   d43ec:	000d5cc3 	.word	0x000d5cc3
   d43f0:	000d5ccd 	.word	0x000d5ccd
   d43f4:	000d5cdc 	.word	0x000d5cdc
   d43f8:	000d5ce5 	.word	0x000d5ce5
   d43fc:	000d5cf3 	.word	0x000d5cf3
   d4400:	000d5d0b 	.word	0x000d5d0b

000d4404 <loop>:
    publish_messages();
   d4404:	f7ff bfb0 	b.w	d4368 <_Z16publish_messagesv>

000d4408 <_GLOBAL__sub_I_flag>:
}
   d4408:	b5f0      	push	{r4, r5, r6, r7, lr}
        val_(val) {
   d440a:	4a1c      	ldr	r2, [pc, #112]	; (d447c <_GLOBAL__sub_I_flag+0x74>)
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d440c:	4c1c      	ldr	r4, [pc, #112]	; (d4480 <_GLOBAL__sub_I_flag+0x78>)
   d440e:	2300      	movs	r3, #0
   d4410:	7013      	strb	r3, [r2, #0]
   d4412:	4a1c      	ldr	r2, [pc, #112]	; (d4484 <_GLOBAL__sub_I_flag+0x7c>)
   d4414:	7123      	strb	r3, [r4, #4]
   d4416:	b089      	sub	sp, #36	; 0x24
   d4418:	2701      	movs	r7, #1
   d441a:	7017      	strb	r7, [r2, #0]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d441c:	4a1a      	ldr	r2, [pc, #104]	; (d4488 <_GLOBAL__sub_I_flag+0x80>)
   d441e:	9204      	str	r2, [sp, #16]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4420:	ad04      	add	r5, sp, #16
   d4422:	e895 0003 	ldmia.w	r5, {r0, r1}
   d4426:	4a19      	ldr	r2, [pc, #100]	; (d448c <_GLOBAL__sub_I_flag+0x84>)
   d4428:	6022      	str	r2, [r4, #0]
   d442a:	ae02      	add	r6, sp, #8
      __a = _GLIBCXX_MOVE(__b);
   d442c:	f104 020c 	add.w	r2, r4, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4430:	e886 0003 	stmia.w	r6, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4434:	e892 0003 	ldmia.w	r2, {r0, r1}
   d4438:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d443c:	e896 0003 	ldmia.w	r6, {r0, r1}
   d4440:	e882 0003 	stmia.w	r2, {r0, r1}
   d4444:	4a12      	ldr	r2, [pc, #72]	; (d4490 <_GLOBAL__sub_I_flag+0x88>)
   d4446:	6162      	str	r2, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   d4448:	69a2      	ldr	r2, [r4, #24]
   d444a:	9207      	str	r2, [sp, #28]
      __b = _GLIBCXX_MOVE(__tmp);
   d444c:	4a11      	ldr	r2, [pc, #68]	; (d4494 <_GLOBAL__sub_I_flag+0x8c>)
   d444e:	60a3      	str	r3, [r4, #8]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d4450:	e9cd 7300 	strd	r7, r3, [sp]
      __a = _GLIBCXX_MOVE(__b);
   d4454:	9306      	str	r3, [sp, #24]
      __b = _GLIBCXX_MOVE(__tmp);
   d4456:	61a2      	str	r2, [r4, #24]
   d4458:	4623      	mov	r3, r4
   d445a:	4a0f      	ldr	r2, [pc, #60]	; (d4498 <_GLOBAL__sub_I_flag+0x90>)
   d445c:	f241 3188 	movw	r1, #5000	; 0x1388
   d4460:	f104 0008 	add.w	r0, r4, #8
   d4464:	f000 f876 	bl	d4554 <os_timer_create>
    class function<_Res(_ArgTypes...)>
   d4468:	4628      	mov	r0, r5
   d446a:	f7ff fea7 	bl	d41bc <_ZNSt14_Function_baseD1Ev>
Timer timer(5000, timer_overflow, true);
   d446e:	4a0b      	ldr	r2, [pc, #44]	; (d449c <_GLOBAL__sub_I_flag+0x94>)
   d4470:	490b      	ldr	r1, [pc, #44]	; (d44a0 <_GLOBAL__sub_I_flag+0x98>)
   d4472:	4620      	mov	r0, r4
   d4474:	f001 faec 	bl	d5a50 <__aeabi_atexit>
}
   d4478:	b009      	add	sp, #36	; 0x24
   d447a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d447c:	2003e68c 	.word	0x2003e68c
   d4480:	2003e694 	.word	0x2003e694
   d4484:	2003e68d 	.word	0x2003e68d
   d4488:	000d4139 	.word	0x000d4139
   d448c:	000d5d28 	.word	0x000d5d28
   d4490:	000d40b3 	.word	0x000d40b3
   d4494:	000d40af 	.word	0x000d40af
   d4498:	000d4161 	.word	0x000d4161
   d449c:	2003e688 	.word	0x2003e688
   d44a0:	000d4219 	.word	0x000d4219

000d44a4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d44a4:	b508      	push	{r3, lr}
   d44a6:	4b02      	ldr	r3, [pc, #8]	; (d44b0 <netdb_freeaddrinfo+0xc>)
   d44a8:	681b      	ldr	r3, [r3, #0]
   d44aa:	689b      	ldr	r3, [r3, #8]
   d44ac:	9301      	str	r3, [sp, #4]
   d44ae:	bd08      	pop	{r3, pc}
   d44b0:	00030268 	.word	0x00030268

000d44b4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d44b4:	b508      	push	{r3, lr}
   d44b6:	4b02      	ldr	r3, [pc, #8]	; (d44c0 <netdb_getaddrinfo+0xc>)
   d44b8:	681b      	ldr	r3, [r3, #0]
   d44ba:	68db      	ldr	r3, [r3, #12]
   d44bc:	9301      	str	r3, [sp, #4]
   d44be:	bd08      	pop	{r3, pc}
   d44c0:	00030268 	.word	0x00030268

000d44c4 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d44c4:	b508      	push	{r3, lr}
   d44c6:	4b02      	ldr	r3, [pc, #8]	; (d44d0 <HAL_Pin_Mode+0xc>)
   d44c8:	681b      	ldr	r3, [r3, #0]
   d44ca:	689b      	ldr	r3, [r3, #8]
   d44cc:	9301      	str	r3, [sp, #4]
   d44ce:	bd08      	pop	{r3, pc}
   d44d0:	0003022c 	.word	0x0003022c

000d44d4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d44d4:	b508      	push	{r3, lr}
   d44d6:	4b02      	ldr	r3, [pc, #8]	; (d44e0 <HAL_Get_Pin_Mode+0xc>)
   d44d8:	681b      	ldr	r3, [r3, #0]
   d44da:	68db      	ldr	r3, [r3, #12]
   d44dc:	9301      	str	r3, [sp, #4]
   d44de:	bd08      	pop	{r3, pc}
   d44e0:	0003022c 	.word	0x0003022c

000d44e4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d44e4:	b508      	push	{r3, lr}
   d44e6:	4b02      	ldr	r3, [pc, #8]	; (d44f0 <HAL_GPIO_Write+0xc>)
   d44e8:	681b      	ldr	r3, [r3, #0]
   d44ea:	691b      	ldr	r3, [r3, #16]
   d44ec:	9301      	str	r3, [sp, #4]
   d44ee:	bd08      	pop	{r3, pc}
   d44f0:	0003022c 	.word	0x0003022c

000d44f4 <HAL_Interrupts_Attach>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d44f4:	b508      	push	{r3, lr}
   d44f6:	4b02      	ldr	r3, [pc, #8]	; (d4500 <HAL_Interrupts_Attach+0xc>)
   d44f8:	681b      	ldr	r3, [r3, #0]
   d44fa:	699b      	ldr	r3, [r3, #24]
   d44fc:	9301      	str	r3, [sp, #4]
   d44fe:	bd08      	pop	{r3, pc}
   d4500:	0003022c 	.word	0x0003022c

000d4504 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d4504:	b508      	push	{r3, lr}
   d4506:	4b02      	ldr	r3, [pc, #8]	; (d4510 <HAL_Interrupts_Detach+0xc>)
   d4508:	681b      	ldr	r3, [r3, #0]
   d450a:	69db      	ldr	r3, [r3, #28]
   d450c:	9301      	str	r3, [sp, #4]
   d450e:	bd08      	pop	{r3, pc}
   d4510:	0003022c 	.word	0x0003022c

000d4514 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4514:	b508      	push	{r3, lr}
   d4516:	4b02      	ldr	r3, [pc, #8]	; (d4520 <HAL_RNG_GetRandomNumber+0xc>)
   d4518:	681b      	ldr	r3, [r3, #0]
   d451a:	685b      	ldr	r3, [r3, #4]
   d451c:	9301      	str	r3, [sp, #4]
   d451e:	bd08      	pop	{r3, pc}
   d4520:	00030218 	.word	0x00030218

000d4524 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4524:	b508      	push	{r3, lr}
   d4526:	4b02      	ldr	r3, [pc, #8]	; (d4530 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4528:	681b      	ldr	r3, [r3, #0]
   d452a:	695b      	ldr	r3, [r3, #20]
   d452c:	9301      	str	r3, [sp, #4]
   d452e:	bd08      	pop	{r3, pc}
   d4530:	00030218 	.word	0x00030218

000d4534 <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d4534:	b508      	push	{r3, lr}
   d4536:	4b02      	ldr	r3, [pc, #8]	; (d4540 <os_thread_yield+0xc>)
   d4538:	681b      	ldr	r3, [r3, #0]
   d453a:	68db      	ldr	r3, [r3, #12]
   d453c:	9301      	str	r3, [sp, #4]
   d453e:	bd08      	pop	{r3, pc}
   d4540:	00030248 	.word	0x00030248

000d4544 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   d4544:	b508      	push	{r3, lr}
   d4546:	4b02      	ldr	r3, [pc, #8]	; (d4550 <os_thread_scheduling+0xc>)
   d4548:	681b      	ldr	r3, [r3, #0]
   d454a:	69db      	ldr	r3, [r3, #28]
   d454c:	9301      	str	r3, [sp, #4]
   d454e:	bd08      	pop	{r3, pc}
   d4550:	00030248 	.word	0x00030248

000d4554 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   d4554:	b508      	push	{r3, lr}
   d4556:	4b02      	ldr	r3, [pc, #8]	; (d4560 <os_timer_create+0xc>)
   d4558:	681b      	ldr	r3, [r3, #0]
   d455a:	6a1b      	ldr	r3, [r3, #32]
   d455c:	9301      	str	r3, [sp, #4]
   d455e:	bd08      	pop	{r3, pc}
   d4560:	00030248 	.word	0x00030248

000d4564 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   d4564:	b508      	push	{r3, lr}
   d4566:	4b02      	ldr	r3, [pc, #8]	; (d4570 <os_timer_destroy+0xc>)
   d4568:	681b      	ldr	r3, [r3, #0]
   d456a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d456c:	9301      	str	r3, [sp, #4]
   d456e:	bd08      	pop	{r3, pc}
   d4570:	00030248 	.word	0x00030248

000d4574 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   d4574:	b508      	push	{r3, lr}
   d4576:	4b02      	ldr	r3, [pc, #8]	; (d4580 <os_timer_get_id+0xc>)
   d4578:	681b      	ldr	r3, [r3, #0]
   d457a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d457c:	9301      	str	r3, [sp, #4]
   d457e:	bd08      	pop	{r3, pc}
   d4580:	00030248 	.word	0x00030248

000d4584 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   d4584:	b508      	push	{r3, lr}
   d4586:	4b02      	ldr	r3, [pc, #8]	; (d4590 <os_timer_change+0xc>)
   d4588:	681b      	ldr	r3, [r3, #0]
   d458a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d458c:	9301      	str	r3, [sp, #4]
   d458e:	bd08      	pop	{r3, pc}
   d4590:	00030248 	.word	0x00030248

000d4594 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4594:	b508      	push	{r3, lr}
   d4596:	4b02      	ldr	r3, [pc, #8]	; (d45a0 <os_mutex_recursive_create+0xc>)
   d4598:	681b      	ldr	r3, [r3, #0]
   d459a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d459c:	9301      	str	r3, [sp, #4]
   d459e:	bd08      	pop	{r3, pc}
   d45a0:	00030248 	.word	0x00030248

000d45a4 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d45a4:	b508      	push	{r3, lr}
   d45a6:	4b02      	ldr	r3, [pc, #8]	; (d45b0 <os_mutex_recursive_destroy+0xc>)
   d45a8:	681b      	ldr	r3, [r3, #0]
   d45aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d45ac:	9301      	str	r3, [sp, #4]
   d45ae:	bd08      	pop	{r3, pc}
   d45b0:	00030248 	.word	0x00030248

000d45b4 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   d45b4:	b508      	push	{r3, lr}
   d45b6:	4b02      	ldr	r3, [pc, #8]	; (d45c0 <os_timer_set_id+0xc>)
   d45b8:	681b      	ldr	r3, [r3, #0]
   d45ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d45bc:	9301      	str	r3, [sp, #4]
   d45be:	bd08      	pop	{r3, pc}
   d45c0:	00030248 	.word	0x00030248

000d45c4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d45c4:	b508      	push	{r3, lr}
   d45c6:	4b02      	ldr	r3, [pc, #8]	; (d45d0 <inet_inet_ntop+0xc>)
   d45c8:	681b      	ldr	r3, [r3, #0]
   d45ca:	695b      	ldr	r3, [r3, #20]
   d45cc:	9301      	str	r3, [sp, #4]
   d45ce:	bd08      	pop	{r3, pc}
   d45d0:	00030264 	.word	0x00030264

000d45d4 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d45d4:	b508      	push	{r3, lr}
   d45d6:	4b02      	ldr	r3, [pc, #8]	; (d45e0 <hal_usart_init+0xc>)
   d45d8:	681b      	ldr	r3, [r3, #0]
   d45da:	681b      	ldr	r3, [r3, #0]
   d45dc:	9301      	str	r3, [sp, #4]
   d45de:	bd08      	pop	{r3, pc}
   d45e0:	0003023c 	.word	0x0003023c

000d45e4 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d45e4:	b508      	push	{r3, lr}
   d45e6:	4b02      	ldr	r3, [pc, #8]	; (d45f0 <hal_usart_write+0xc>)
   d45e8:	681b      	ldr	r3, [r3, #0]
   d45ea:	68db      	ldr	r3, [r3, #12]
   d45ec:	9301      	str	r3, [sp, #4]
   d45ee:	bd08      	pop	{r3, pc}
   d45f0:	0003023c 	.word	0x0003023c

000d45f4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d45f4:	b508      	push	{r3, lr}
   d45f6:	4b02      	ldr	r3, [pc, #8]	; (d4600 <hal_usart_available+0xc>)
   d45f8:	681b      	ldr	r3, [r3, #0]
   d45fa:	691b      	ldr	r3, [r3, #16]
   d45fc:	9301      	str	r3, [sp, #4]
   d45fe:	bd08      	pop	{r3, pc}
   d4600:	0003023c 	.word	0x0003023c

000d4604 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d4604:	b508      	push	{r3, lr}
   d4606:	4b02      	ldr	r3, [pc, #8]	; (d4610 <hal_usart_read+0xc>)
   d4608:	681b      	ldr	r3, [r3, #0]
   d460a:	695b      	ldr	r3, [r3, #20]
   d460c:	9301      	str	r3, [sp, #4]
   d460e:	bd08      	pop	{r3, pc}
   d4610:	0003023c 	.word	0x0003023c

000d4614 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d4614:	b508      	push	{r3, lr}
   d4616:	4b02      	ldr	r3, [pc, #8]	; (d4620 <hal_usart_peek+0xc>)
   d4618:	681b      	ldr	r3, [r3, #0]
   d461a:	699b      	ldr	r3, [r3, #24]
   d461c:	9301      	str	r3, [sp, #4]
   d461e:	bd08      	pop	{r3, pc}
   d4620:	0003023c 	.word	0x0003023c

000d4624 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d4624:	b508      	push	{r3, lr}
   d4626:	4b02      	ldr	r3, [pc, #8]	; (d4630 <hal_usart_flush+0xc>)
   d4628:	681b      	ldr	r3, [r3, #0]
   d462a:	69db      	ldr	r3, [r3, #28]
   d462c:	9301      	str	r3, [sp, #4]
   d462e:	bd08      	pop	{r3, pc}
   d4630:	0003023c 	.word	0x0003023c

000d4634 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d4634:	b508      	push	{r3, lr}
   d4636:	4b02      	ldr	r3, [pc, #8]	; (d4640 <hal_usart_is_enabled+0xc>)
   d4638:	681b      	ldr	r3, [r3, #0]
   d463a:	6a1b      	ldr	r3, [r3, #32]
   d463c:	9301      	str	r3, [sp, #4]
   d463e:	bd08      	pop	{r3, pc}
   d4640:	0003023c 	.word	0x0003023c

000d4644 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d4644:	b508      	push	{r3, lr}
   d4646:	4b02      	ldr	r3, [pc, #8]	; (d4650 <hal_usart_available_data_for_write+0xc>)
   d4648:	681b      	ldr	r3, [r3, #0]
   d464a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d464c:	9301      	str	r3, [sp, #4]
   d464e:	bd08      	pop	{r3, pc}
   d4650:	0003023c 	.word	0x0003023c

000d4654 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d4654:	b508      	push	{r3, lr}
   d4656:	4b02      	ldr	r3, [pc, #8]	; (d4660 <hal_i2c_write+0xc>)
   d4658:	681b      	ldr	r3, [r3, #0]
   d465a:	6a1b      	ldr	r3, [r3, #32]
   d465c:	9301      	str	r3, [sp, #4]
   d465e:	bd08      	pop	{r3, pc}
   d4660:	00030228 	.word	0x00030228

000d4664 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d4664:	b508      	push	{r3, lr}
   d4666:	4b02      	ldr	r3, [pc, #8]	; (d4670 <hal_i2c_available+0xc>)
   d4668:	681b      	ldr	r3, [r3, #0]
   d466a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d466c:	9301      	str	r3, [sp, #4]
   d466e:	bd08      	pop	{r3, pc}
   d4670:	00030228 	.word	0x00030228

000d4674 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d4674:	b508      	push	{r3, lr}
   d4676:	4b02      	ldr	r3, [pc, #8]	; (d4680 <hal_i2c_read+0xc>)
   d4678:	681b      	ldr	r3, [r3, #0]
   d467a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d467c:	9301      	str	r3, [sp, #4]
   d467e:	bd08      	pop	{r3, pc}
   d4680:	00030228 	.word	0x00030228

000d4684 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d4684:	b508      	push	{r3, lr}
   d4686:	4b02      	ldr	r3, [pc, #8]	; (d4690 <hal_i2c_peek+0xc>)
   d4688:	681b      	ldr	r3, [r3, #0]
   d468a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d468c:	9301      	str	r3, [sp, #4]
   d468e:	bd08      	pop	{r3, pc}
   d4690:	00030228 	.word	0x00030228

000d4694 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d4694:	b508      	push	{r3, lr}
   d4696:	4b02      	ldr	r3, [pc, #8]	; (d46a0 <hal_i2c_flush+0xc>)
   d4698:	681b      	ldr	r3, [r3, #0]
   d469a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d469c:	9301      	str	r3, [sp, #4]
   d469e:	bd08      	pop	{r3, pc}
   d46a0:	00030228 	.word	0x00030228

000d46a4 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d46a4:	b508      	push	{r3, lr}
   d46a6:	4b02      	ldr	r3, [pc, #8]	; (d46b0 <hal_i2c_is_enabled+0xc>)
   d46a8:	681b      	ldr	r3, [r3, #0]
   d46aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d46ac:	9301      	str	r3, [sp, #4]
   d46ae:	bd08      	pop	{r3, pc}
   d46b0:	00030228 	.word	0x00030228

000d46b4 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d46b4:	b508      	push	{r3, lr}
   d46b6:	4b02      	ldr	r3, [pc, #8]	; (d46c0 <hal_i2c_init+0xc>)
   d46b8:	681b      	ldr	r3, [r3, #0]
   d46ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d46bc:	9301      	str	r3, [sp, #4]
   d46be:	bd08      	pop	{r3, pc}
   d46c0:	00030228 	.word	0x00030228

000d46c4 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d46c4:	b508      	push	{r3, lr}
   d46c6:	4b02      	ldr	r3, [pc, #8]	; (d46d0 <hal_spi_init+0xc>)
   d46c8:	681b      	ldr	r3, [r3, #0]
   d46ca:	69db      	ldr	r3, [r3, #28]
   d46cc:	9301      	str	r3, [sp, #4]
   d46ce:	bd08      	pop	{r3, pc}
   d46d0:	00030230 	.word	0x00030230

000d46d4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d46d4:	b508      	push	{r3, lr}
   d46d6:	4b02      	ldr	r3, [pc, #8]	; (d46e0 <hal_spi_is_enabled+0xc>)
   d46d8:	681b      	ldr	r3, [r3, #0]
   d46da:	6a1b      	ldr	r3, [r3, #32]
   d46dc:	9301      	str	r3, [sp, #4]
   d46de:	bd08      	pop	{r3, pc}
   d46e0:	00030230 	.word	0x00030230

000d46e4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d46e4:	b508      	push	{r3, lr}
   d46e6:	4b02      	ldr	r3, [pc, #8]	; (d46f0 <HAL_USB_USART_Init+0xc>)
   d46e8:	681b      	ldr	r3, [r3, #0]
   d46ea:	681b      	ldr	r3, [r3, #0]
   d46ec:	9301      	str	r3, [sp, #4]
   d46ee:	bd08      	pop	{r3, pc}
   d46f0:	0003024c 	.word	0x0003024c

000d46f4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d46f4:	b508      	push	{r3, lr}
   d46f6:	4b02      	ldr	r3, [pc, #8]	; (d4700 <HAL_USB_USART_Available_Data+0xc>)
   d46f8:	681b      	ldr	r3, [r3, #0]
   d46fa:	691b      	ldr	r3, [r3, #16]
   d46fc:	9301      	str	r3, [sp, #4]
   d46fe:	bd08      	pop	{r3, pc}
   d4700:	0003024c 	.word	0x0003024c

000d4704 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4704:	b508      	push	{r3, lr}
   d4706:	4b02      	ldr	r3, [pc, #8]	; (d4710 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4708:	681b      	ldr	r3, [r3, #0]
   d470a:	695b      	ldr	r3, [r3, #20]
   d470c:	9301      	str	r3, [sp, #4]
   d470e:	bd08      	pop	{r3, pc}
   d4710:	0003024c 	.word	0x0003024c

000d4714 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4714:	b508      	push	{r3, lr}
   d4716:	4b02      	ldr	r3, [pc, #8]	; (d4720 <HAL_USB_USART_Receive_Data+0xc>)
   d4718:	681b      	ldr	r3, [r3, #0]
   d471a:	699b      	ldr	r3, [r3, #24]
   d471c:	9301      	str	r3, [sp, #4]
   d471e:	bd08      	pop	{r3, pc}
   d4720:	0003024c 	.word	0x0003024c

000d4724 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4724:	b508      	push	{r3, lr}
   d4726:	4b02      	ldr	r3, [pc, #8]	; (d4730 <HAL_USB_USART_Send_Data+0xc>)
   d4728:	681b      	ldr	r3, [r3, #0]
   d472a:	69db      	ldr	r3, [r3, #28]
   d472c:	9301      	str	r3, [sp, #4]
   d472e:	bd08      	pop	{r3, pc}
   d4730:	0003024c 	.word	0x0003024c

000d4734 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4734:	b508      	push	{r3, lr}
   d4736:	4b02      	ldr	r3, [pc, #8]	; (d4740 <HAL_USB_USART_Flush_Data+0xc>)
   d4738:	681b      	ldr	r3, [r3, #0]
   d473a:	6a1b      	ldr	r3, [r3, #32]
   d473c:	9301      	str	r3, [sp, #4]
   d473e:	bd08      	pop	{r3, pc}
   d4740:	0003024c 	.word	0x0003024c

000d4744 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4744:	b508      	push	{r3, lr}
   d4746:	4b02      	ldr	r3, [pc, #8]	; (d4750 <set_system_mode+0xc>)
   d4748:	681b      	ldr	r3, [r3, #0]
   d474a:	685b      	ldr	r3, [r3, #4]
   d474c:	9301      	str	r3, [sp, #4]
   d474e:	bd08      	pop	{r3, pc}
   d4750:	00030220 	.word	0x00030220

000d4754 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d4754:	b508      	push	{r3, lr}
   d4756:	4b02      	ldr	r3, [pc, #8]	; (d4760 <application_thread_current+0xc>)
   d4758:	681b      	ldr	r3, [r3, #0]
   d475a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d475c:	9301      	str	r3, [sp, #4]
   d475e:	bd08      	pop	{r3, pc}
   d4760:	00030220 	.word	0x00030220

000d4764 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4764:	b508      	push	{r3, lr}
   d4766:	4b02      	ldr	r3, [pc, #8]	; (d4770 <application_thread_invoke+0xc>)
   d4768:	681b      	ldr	r3, [r3, #0]
   d476a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d476c:	9301      	str	r3, [sp, #4]
   d476e:	bd08      	pop	{r3, pc}
   d4770:	00030220 	.word	0x00030220

000d4774 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4774:	b508      	push	{r3, lr}
   d4776:	4b03      	ldr	r3, [pc, #12]	; (d4784 <system_ctrl_set_app_request_handler+0x10>)
   d4778:	681b      	ldr	r3, [r3, #0]
   d477a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d477e:	9301      	str	r3, [sp, #4]
   d4780:	bd08      	pop	{r3, pc}
   d4782:	0000      	.short	0x0000
   d4784:	00030220 	.word	0x00030220

000d4788 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4788:	b508      	push	{r3, lr}
   d478a:	4b03      	ldr	r3, [pc, #12]	; (d4798 <system_ctrl_set_result+0x10>)
   d478c:	681b      	ldr	r3, [r3, #0]
   d478e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4792:	9301      	str	r3, [sp, #4]
   d4794:	bd08      	pop	{r3, pc}
   d4796:	0000      	.short	0x0000
   d4798:	00030220 	.word	0x00030220

000d479c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d479c:	b508      	push	{r3, lr}
   d479e:	4b02      	ldr	r3, [pc, #8]	; (d47a8 <network_connect+0xc>)
   d47a0:	681b      	ldr	r3, [r3, #0]
   d47a2:	685b      	ldr	r3, [r3, #4]
   d47a4:	9301      	str	r3, [sp, #4]
   d47a6:	bd08      	pop	{r3, pc}
   d47a8:	00030240 	.word	0x00030240

000d47ac <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d47ac:	b508      	push	{r3, lr}
   d47ae:	4b02      	ldr	r3, [pc, #8]	; (d47b8 <network_connecting+0xc>)
   d47b0:	681b      	ldr	r3, [r3, #0]
   d47b2:	689b      	ldr	r3, [r3, #8]
   d47b4:	9301      	str	r3, [sp, #4]
   d47b6:	bd08      	pop	{r3, pc}
   d47b8:	00030240 	.word	0x00030240

000d47bc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d47bc:	b508      	push	{r3, lr}
   d47be:	4b02      	ldr	r3, [pc, #8]	; (d47c8 <network_disconnect+0xc>)
   d47c0:	681b      	ldr	r3, [r3, #0]
   d47c2:	68db      	ldr	r3, [r3, #12]
   d47c4:	9301      	str	r3, [sp, #4]
   d47c6:	bd08      	pop	{r3, pc}
   d47c8:	00030240 	.word	0x00030240

000d47cc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d47cc:	b508      	push	{r3, lr}
   d47ce:	4b02      	ldr	r3, [pc, #8]	; (d47d8 <network_ready+0xc>)
   d47d0:	681b      	ldr	r3, [r3, #0]
   d47d2:	691b      	ldr	r3, [r3, #16]
   d47d4:	9301      	str	r3, [sp, #4]
   d47d6:	bd08      	pop	{r3, pc}
   d47d8:	00030240 	.word	0x00030240

000d47dc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d47dc:	b508      	push	{r3, lr}
   d47de:	4b02      	ldr	r3, [pc, #8]	; (d47e8 <network_on+0xc>)
   d47e0:	681b      	ldr	r3, [r3, #0]
   d47e2:	695b      	ldr	r3, [r3, #20]
   d47e4:	9301      	str	r3, [sp, #4]
   d47e6:	bd08      	pop	{r3, pc}
   d47e8:	00030240 	.word	0x00030240

000d47ec <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d47ec:	b508      	push	{r3, lr}
   d47ee:	4b02      	ldr	r3, [pc, #8]	; (d47f8 <network_off+0xc>)
   d47f0:	681b      	ldr	r3, [r3, #0]
   d47f2:	699b      	ldr	r3, [r3, #24]
   d47f4:	9301      	str	r3, [sp, #4]
   d47f6:	bd08      	pop	{r3, pc}
   d47f8:	00030240 	.word	0x00030240

000d47fc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d47fc:	b508      	push	{r3, lr}
   d47fe:	4b02      	ldr	r3, [pc, #8]	; (d4808 <network_listen+0xc>)
   d4800:	681b      	ldr	r3, [r3, #0]
   d4802:	69db      	ldr	r3, [r3, #28]
   d4804:	9301      	str	r3, [sp, #4]
   d4806:	bd08      	pop	{r3, pc}
   d4808:	00030240 	.word	0x00030240

000d480c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d480c:	b508      	push	{r3, lr}
   d480e:	4b02      	ldr	r3, [pc, #8]	; (d4818 <network_listening+0xc>)
   d4810:	681b      	ldr	r3, [r3, #0]
   d4812:	6a1b      	ldr	r3, [r3, #32]
   d4814:	9301      	str	r3, [sp, #4]
   d4816:	bd08      	pop	{r3, pc}
   d4818:	00030240 	.word	0x00030240

000d481c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d481c:	b508      	push	{r3, lr}
   d481e:	4b02      	ldr	r3, [pc, #8]	; (d4828 <network_set_listen_timeout+0xc>)
   d4820:	681b      	ldr	r3, [r3, #0]
   d4822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4824:	9301      	str	r3, [sp, #4]
   d4826:	bd08      	pop	{r3, pc}
   d4828:	00030240 	.word	0x00030240

000d482c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d482c:	b508      	push	{r3, lr}
   d482e:	4b02      	ldr	r3, [pc, #8]	; (d4838 <network_get_listen_timeout+0xc>)
   d4830:	681b      	ldr	r3, [r3, #0]
   d4832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4834:	9301      	str	r3, [sp, #4]
   d4836:	bd08      	pop	{r3, pc}
   d4838:	00030240 	.word	0x00030240

000d483c <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d483c:	b508      	push	{r3, lr}
   d483e:	4b02      	ldr	r3, [pc, #8]	; (d4848 <spark_function+0xc>)
   d4840:	681b      	ldr	r3, [r3, #0]
   d4842:	685b      	ldr	r3, [r3, #4]
   d4844:	9301      	str	r3, [sp, #4]
   d4846:	bd08      	pop	{r3, pc}
   d4848:	00030244 	.word	0x00030244

000d484c <spark_cloud_flag_connected>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d484c:	b508      	push	{r3, lr}
   d484e:	4b02      	ldr	r3, [pc, #8]	; (d4858 <spark_cloud_flag_connected+0xc>)
   d4850:	681b      	ldr	r3, [r3, #0]
   d4852:	695b      	ldr	r3, [r3, #20]
   d4854:	9301      	str	r3, [sp, #4]
   d4856:	bd08      	pop	{r3, pc}
   d4858:	00030244 	.word	0x00030244

000d485c <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d485c:	b508      	push	{r3, lr}
   d485e:	4b02      	ldr	r3, [pc, #8]	; (d4868 <spark_send_event+0xc>)
   d4860:	681b      	ldr	r3, [r3, #0]
   d4862:	6a1b      	ldr	r3, [r3, #32]
   d4864:	9301      	str	r3, [sp, #4]
   d4866:	bd08      	pop	{r3, pc}
   d4868:	00030244 	.word	0x00030244

000d486c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d486c:	b508      	push	{r3, lr}
   d486e:	4b02      	ldr	r3, [pc, #8]	; (d4878 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4870:	681b      	ldr	r3, [r3, #0]
   d4872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4874:	9301      	str	r3, [sp, #4]
   d4876:	bd08      	pop	{r3, pc}
   d4878:	00030244 	.word	0x00030244

000d487c <spark_publish_vitals>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
   d487c:	b508      	push	{r3, lr}
   d487e:	4b02      	ldr	r3, [pc, #8]	; (d4888 <spark_publish_vitals+0xc>)
   d4880:	681b      	ldr	r3, [r3, #0]
   d4882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4884:	9301      	str	r3, [sp, #4]
   d4886:	bd08      	pop	{r3, pc}
   d4888:	00030244 	.word	0x00030244

000d488c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d488c:	b508      	push	{r3, lr}
   d488e:	4b02      	ldr	r3, [pc, #8]	; (d4898 <malloc+0xc>)
   d4890:	681b      	ldr	r3, [r3, #0]
   d4892:	681b      	ldr	r3, [r3, #0]
   d4894:	9301      	str	r3, [sp, #4]
   d4896:	bd08      	pop	{r3, pc}
   d4898:	0003021c 	.word	0x0003021c

000d489c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d489c:	b508      	push	{r3, lr}
   d489e:	4b02      	ldr	r3, [pc, #8]	; (d48a8 <free+0xc>)
   d48a0:	681b      	ldr	r3, [r3, #0]
   d48a2:	685b      	ldr	r3, [r3, #4]
   d48a4:	9301      	str	r3, [sp, #4]
   d48a6:	bd08      	pop	{r3, pc}
   d48a8:	0003021c 	.word	0x0003021c

000d48ac <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d48ac:	b508      	push	{r3, lr}
   d48ae:	4b02      	ldr	r3, [pc, #8]	; (d48b8 <realloc+0xc>)
   d48b0:	681b      	ldr	r3, [r3, #0]
   d48b2:	689b      	ldr	r3, [r3, #8]
   d48b4:	9301      	str	r3, [sp, #4]
   d48b6:	bd08      	pop	{r3, pc}
   d48b8:	0003021c 	.word	0x0003021c

000d48bc <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d48bc:	b508      	push	{r3, lr}
   d48be:	4b02      	ldr	r3, [pc, #8]	; (d48c8 <abort+0xc>)
   d48c0:	681b      	ldr	r3, [r3, #0]
   d48c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d48c4:	9301      	str	r3, [sp, #4]
   d48c6:	bd08      	pop	{r3, pc}
   d48c8:	0003021c 	.word	0x0003021c

000d48cc <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d48cc:	b508      	push	{r3, lr}
   d48ce:	4b02      	ldr	r3, [pc, #8]	; (d48d8 <_malloc_r+0xc>)
   d48d0:	681b      	ldr	r3, [r3, #0]
   d48d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d48d4:	9301      	str	r3, [sp, #4]
   d48d6:	bd08      	pop	{r3, pc}
   d48d8:	0003021c 	.word	0x0003021c

000d48dc <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d48dc:	b508      	push	{r3, lr}
   d48de:	4b02      	ldr	r3, [pc, #8]	; (d48e8 <newlib_impure_ptr_callback+0xc>)
   d48e0:	681b      	ldr	r3, [r3, #0]
   d48e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d48e4:	9301      	str	r3, [sp, #4]
   d48e6:	bd08      	pop	{r3, pc}
   d48e8:	0003021c 	.word	0x0003021c

000d48ec <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d48ec:	2200      	movs	r2, #0
   d48ee:	6840      	ldr	r0, [r0, #4]
   d48f0:	4611      	mov	r1, r2
   d48f2:	f7ff bf8b 	b.w	d480c <network_listening>

000d48f6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d48f6:	2200      	movs	r2, #0
   d48f8:	6840      	ldr	r0, [r0, #4]
   d48fa:	4611      	mov	r1, r2
   d48fc:	f7ff bf96 	b.w	d482c <network_get_listen_timeout>

000d4900 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d4900:	6840      	ldr	r0, [r0, #4]
   d4902:	2200      	movs	r2, #0
   d4904:	f7ff bf8a 	b.w	d481c <network_set_listen_timeout>

000d4908 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d4908:	6840      	ldr	r0, [r0, #4]
   d490a:	2200      	movs	r2, #0
   d490c:	f081 0101 	eor.w	r1, r1, #1
   d4910:	f7ff bf74 	b.w	d47fc <network_listen>

000d4914 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d4914:	2300      	movs	r3, #0
   d4916:	6840      	ldr	r0, [r0, #4]
   d4918:	461a      	mov	r2, r3
   d491a:	4619      	mov	r1, r3
   d491c:	f7ff bf66 	b.w	d47ec <network_off>

000d4920 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d4920:	2300      	movs	r3, #0
   d4922:	6840      	ldr	r0, [r0, #4]
   d4924:	461a      	mov	r2, r3
   d4926:	4619      	mov	r1, r3
   d4928:	f7ff bf58 	b.w	d47dc <network_on>

000d492c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d492c:	2200      	movs	r2, #0
   d492e:	6840      	ldr	r0, [r0, #4]
   d4930:	4611      	mov	r1, r2
   d4932:	f7ff bf4b 	b.w	d47cc <network_ready>

000d4936 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d4936:	2200      	movs	r2, #0
   d4938:	6840      	ldr	r0, [r0, #4]
   d493a:	4611      	mov	r1, r2
   d493c:	f7ff bf36 	b.w	d47ac <network_connecting>

000d4940 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4940:	6840      	ldr	r0, [r0, #4]
   d4942:	2200      	movs	r2, #0
   d4944:	2102      	movs	r1, #2
   d4946:	f7ff bf39 	b.w	d47bc <network_disconnect>

000d494a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d494a:	2300      	movs	r3, #0
   d494c:	6840      	ldr	r0, [r0, #4]
   d494e:	461a      	mov	r2, r3
   d4950:	f7ff bf24 	b.w	d479c <network_connect>

000d4954 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4954:	4b02      	ldr	r3, [pc, #8]	; (d4960 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4956:	2203      	movs	r2, #3
   d4958:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d495a:	4a02      	ldr	r2, [pc, #8]	; (d4964 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d495c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d495e:	4770      	bx	lr
   d4960:	2003e6b0 	.word	0x2003e6b0
   d4964:	000d5d3c 	.word	0x000d5d3c

000d4968 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d4968:	b510      	push	{r4, lr}
   d496a:	4604      	mov	r4, r0
   d496c:	4608      	mov	r0, r1
{
    _spi = spi;
   d496e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d4970:	f7ff fea8 	bl	d46c4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d4974:	2300      	movs	r3, #0
   d4976:	6063      	str	r3, [r4, #4]
}
   d4978:	4620      	mov	r0, r4
   d497a:	bd10      	pop	{r4, pc}

000d497c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d497c:	b510      	push	{r4, lr}
   d497e:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d4980:	6800      	ldr	r0, [r0, #0]
   d4982:	b118      	cbz	r0, d498c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d4984:	f7ff ff8a 	bl	d489c <free>
            wakeupSource_ = nullptr;
   d4988:	2300      	movs	r3, #0
   d498a:	6023      	str	r3, [r4, #0]
        }
    }
   d498c:	bd10      	pop	{r4, pc}

000d498e <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d498e:	b510      	push	{r4, lr}
   d4990:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d4992:	f7ff fff3 	bl	d497c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d4996:	4620      	mov	r0, r4
   d4998:	bd10      	pop	{r4, pc}
	...

000d499c <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d499c:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d499e:	4b09      	ldr	r3, [pc, #36]	; (d49c4 <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d49a0:	4c09      	ldr	r4, [pc, #36]	; (d49c8 <_GLOBAL__sub_I_System+0x2c>)
   d49a2:	2202      	movs	r2, #2
   d49a4:	2000      	movs	r0, #0
   d49a6:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d49a8:	4b08      	ldr	r3, [pc, #32]	; (d49cc <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d49aa:	6020      	str	r0, [r4, #0]
   d49ac:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d49ae:	71a0      	strb	r0, [r4, #6]
   d49b0:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d49b2:	f7ff fec7 	bl	d4744 <set_system_mode>
SystemClass System;
   d49b6:	4620      	mov	r0, r4
   d49b8:	4a05      	ldr	r2, [pc, #20]	; (d49d0 <_GLOBAL__sub_I_System+0x34>)
   d49ba:	4906      	ldr	r1, [pc, #24]	; (d49d4 <_GLOBAL__sub_I_System+0x38>)
   d49bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d49c0:	f001 b846 	b.w	d5a50 <__aeabi_atexit>
   d49c4:	2003e6c4 	.word	0x2003e6c4
   d49c8:	2003e6b8 	.word	0x2003e6b8
   d49cc:	ffff0000 	.word	0xffff0000
   d49d0:	2003e688 	.word	0x2003e688
   d49d4:	000d498f 	.word	0x000d498f

000d49d8 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d49d8:	b510      	push	{r4, lr}
   d49da:	4604      	mov	r4, r0
{
	free(buffer);
   d49dc:	6800      	ldr	r0, [r0, #0]
   d49de:	f7ff ff5d 	bl	d489c <free>
}
   d49e2:	4620      	mov	r0, r4
   d49e4:	bd10      	pop	{r4, pc}

000d49e6 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d49e6:	b510      	push	{r4, lr}
   d49e8:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d49ea:	6800      	ldr	r0, [r0, #0]
   d49ec:	b108      	cbz	r0, d49f2 <_ZN6String10invalidateEv+0xc>
   d49ee:	f7ff ff55 	bl	d489c <free>
	buffer = NULL;
   d49f2:	2300      	movs	r3, #0
	capacity = len = 0;
   d49f4:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d49f8:	6023      	str	r3, [r4, #0]
}
   d49fa:	bd10      	pop	{r4, pc}

000d49fc <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d49fc:	b538      	push	{r3, r4, r5, lr}
   d49fe:	4604      	mov	r4, r0
   d4a00:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d4a02:	6800      	ldr	r0, [r0, #0]
   d4a04:	3101      	adds	r1, #1
   d4a06:	f7ff ff51 	bl	d48ac <realloc>
	if (newbuffer) {
   d4a0a:	b110      	cbz	r0, d4a12 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d4a0c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d4a10:	2001      	movs	r0, #1
	}
	return 0;
}
   d4a12:	bd38      	pop	{r3, r4, r5, pc}

000d4a14 <_ZN6String7reserveEj>:
{
   d4a14:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d4a16:	6803      	ldr	r3, [r0, #0]
{
   d4a18:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d4a1a:	b123      	cbz	r3, d4a26 <_ZN6String7reserveEj+0x12>
   d4a1c:	6843      	ldr	r3, [r0, #4]
   d4a1e:	428b      	cmp	r3, r1
   d4a20:	d301      	bcc.n	d4a26 <_ZN6String7reserveEj+0x12>
   d4a22:	2001      	movs	r0, #1
}
   d4a24:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d4a26:	4620      	mov	r0, r4
   d4a28:	f7ff ffe8 	bl	d49fc <_ZN6String12changeBufferEj>
   d4a2c:	2800      	cmp	r0, #0
   d4a2e:	d0f9      	beq.n	d4a24 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d4a30:	68a3      	ldr	r3, [r4, #8]
   d4a32:	2b00      	cmp	r3, #0
   d4a34:	d1f5      	bne.n	d4a22 <_ZN6String7reserveEj+0xe>
   d4a36:	6822      	ldr	r2, [r4, #0]
   d4a38:	7013      	strb	r3, [r2, #0]
   d4a3a:	e7f2      	b.n	d4a22 <_ZN6String7reserveEj+0xe>

000d4a3c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4a3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4a3e:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d4a40:	4611      	mov	r1, r2
   d4a42:	9201      	str	r2, [sp, #4]
{
   d4a44:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d4a46:	f7ff ffe5 	bl	d4a14 <_ZN6String7reserveEj>
   d4a4a:	9a01      	ldr	r2, [sp, #4]
   d4a4c:	b928      	cbnz	r0, d4a5a <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d4a4e:	4620      	mov	r0, r4
   d4a50:	f7ff ffc9 	bl	d49e6 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d4a54:	4620      	mov	r0, r4
   d4a56:	b003      	add	sp, #12
   d4a58:	bd30      	pop	{r4, r5, pc}
	len = length;
   d4a5a:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d4a5c:	4629      	mov	r1, r5
   d4a5e:	6820      	ldr	r0, [r4, #0]
   d4a60:	f001 f814 	bl	d5a8c <memcpy>
	buffer[len] = 0;
   d4a64:	6822      	ldr	r2, [r4, #0]
   d4a66:	68a3      	ldr	r3, [r4, #8]
   d4a68:	2100      	movs	r1, #0
   d4a6a:	54d1      	strb	r1, [r2, r3]
	return *this;
   d4a6c:	e7f2      	b.n	d4a54 <_ZN6String4copyEPKcj+0x18>

000d4a6e <_ZN6StringC1EPKc>:
	buffer = NULL;
   d4a6e:	2300      	movs	r3, #0
String::String(const char *cstr)
   d4a70:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d4a72:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d4a76:	4604      	mov	r4, r0
	len = 0;
   d4a78:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4a7a:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d4a7c:	b141      	cbz	r1, d4a90 <_ZN6StringC1EPKc+0x22>
   d4a7e:	4608      	mov	r0, r1
   d4a80:	9101      	str	r1, [sp, #4]
   d4a82:	f001 f86c 	bl	d5b5e <strlen>
   d4a86:	9901      	ldr	r1, [sp, #4]
   d4a88:	4602      	mov	r2, r0
   d4a8a:	4620      	mov	r0, r4
   d4a8c:	f7ff ffd6 	bl	d4a3c <_ZN6String4copyEPKcj>
}
   d4a90:	4620      	mov	r0, r4
   d4a92:	b002      	add	sp, #8
   d4a94:	bd10      	pop	{r4, pc}

000d4a96 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d4a96:	4288      	cmp	r0, r1
{
   d4a98:	b510      	push	{r4, lr}
   d4a9a:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d4a9c:	d005      	beq.n	d4aaa <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d4a9e:	680b      	ldr	r3, [r1, #0]
   d4aa0:	b12b      	cbz	r3, d4aae <_ZN6StringaSERKS_+0x18>
   d4aa2:	688a      	ldr	r2, [r1, #8]
   d4aa4:	4619      	mov	r1, r3
   d4aa6:	f7ff ffc9 	bl	d4a3c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d4aaa:	4620      	mov	r0, r4
   d4aac:	bd10      	pop	{r4, pc}
	else invalidate();
   d4aae:	f7ff ff9a 	bl	d49e6 <_ZN6String10invalidateEv>
   d4ab2:	e7fa      	b.n	d4aaa <_ZN6StringaSERKS_+0x14>

000d4ab4 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d4ab4:	b510      	push	{r4, lr}
	buffer = NULL;
   d4ab6:	2300      	movs	r3, #0
String::String(const String &value)
   d4ab8:	4604      	mov	r4, r0
	capacity = 0;
   d4aba:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d4abe:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4ac0:	7303      	strb	r3, [r0, #12]
	*this = value;
   d4ac2:	f7ff ffe8 	bl	d4a96 <_ZN6StringaSERKS_>
}
   d4ac6:	4620      	mov	r0, r4
   d4ac8:	bd10      	pop	{r4, pc}

000d4aca <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d4aca:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d4acc:	6882      	ldr	r2, [r0, #8]
   d4ace:	b93a      	cbnz	r2, d4ae0 <_ZNK6String6equalsEPKc+0x16>
   d4ad0:	b121      	cbz	r1, d4adc <_ZNK6String6equalsEPKc+0x12>
   d4ad2:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   d4ad4:	fab0 f080 	clz	r0, r0
   d4ad8:	0940      	lsrs	r0, r0, #5
   d4ada:	e000      	b.n	d4ade <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d4adc:	2001      	movs	r0, #1
}
   d4ade:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d4ae0:	6800      	ldr	r0, [r0, #0]
   d4ae2:	b909      	cbnz	r1, d4ae8 <_ZNK6String6equalsEPKc+0x1e>
   d4ae4:	7800      	ldrb	r0, [r0, #0]
   d4ae6:	e7f5      	b.n	d4ad4 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   d4ae8:	f001 f80a 	bl	d5b00 <strcmp>
   d4aec:	e7f2      	b.n	d4ad4 <_ZNK6String6equalsEPKc+0xa>

000d4aee <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4aee:	b510      	push	{r4, lr}
   d4af0:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4af2:	6800      	ldr	r0, [r0, #0]
   d4af4:	b108      	cbz	r0, d4afa <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4af6:	f7ff fd55 	bl	d45a4 <os_mutex_recursive_destroy>
    }
   d4afa:	4620      	mov	r0, r4
   d4afc:	bd10      	pop	{r4, pc}

000d4afe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d4afe:	680b      	ldr	r3, [r1, #0]
   d4b00:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d4b02:	b113      	cbz	r3, d4b0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d4b04:	685a      	ldr	r2, [r3, #4]
   d4b06:	3201      	adds	r2, #1
   d4b08:	605a      	str	r2, [r3, #4]
      }
   d4b0a:	4770      	bx	lr

000d4b0c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4b0c:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d4b0e:	4c06      	ldr	r4, [pc, #24]	; (d4b28 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4b10:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d4b12:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d4b14:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d4b16:	f7ff fd3d 	bl	d4594 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d4b1a:	4620      	mov	r0, r4
   d4b1c:	4a03      	ldr	r2, [pc, #12]	; (d4b2c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d4b1e:	4904      	ldr	r1, [pc, #16]	; (d4b30 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d4b20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d4b24:	f000 bf94 	b.w	d5a50 <__aeabi_atexit>
   d4b28:	2003e6c8 	.word	0x2003e6c8
   d4b2c:	2003e688 	.word	0x2003e688
   d4b30:	000d4aef 	.word	0x000d4aef

000d4b34 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4b36:	4606      	mov	r6, r0
   d4b38:	460d      	mov	r5, r1
  size_t n = 0;
   d4b3a:	188f      	adds	r7, r1, r2
   d4b3c:	2400      	movs	r4, #0
  while (size--) {
   d4b3e:	42bd      	cmp	r5, r7
   d4b40:	d00c      	beq.n	d4b5c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4b42:	6833      	ldr	r3, [r6, #0]
   d4b44:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4b48:	689b      	ldr	r3, [r3, #8]
   d4b4a:	4630      	mov	r0, r6
   d4b4c:	4798      	blx	r3
     if (chunk>=0)
   d4b4e:	1e03      	subs	r3, r0, #0
   d4b50:	db01      	blt.n	d4b56 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4b52:	441c      	add	r4, r3
  while (size--) {
   d4b54:	e7f3      	b.n	d4b3e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4b56:	2c00      	cmp	r4, #0
   d4b58:	bf08      	it	eq
   d4b5a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d4b5c:	4620      	mov	r0, r4
   d4b5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4b60 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4b60:	b513      	push	{r0, r1, r4, lr}
   d4b62:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d4b64:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d4b66:	b159      	cbz	r1, d4b80 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d4b68:	9101      	str	r1, [sp, #4]
   d4b6a:	f000 fff8 	bl	d5b5e <strlen>
   d4b6e:	6823      	ldr	r3, [r4, #0]
   d4b70:	9901      	ldr	r1, [sp, #4]
   d4b72:	68db      	ldr	r3, [r3, #12]
   d4b74:	4602      	mov	r2, r0
   d4b76:	4620      	mov	r0, r4
    }
   d4b78:	b002      	add	sp, #8
   d4b7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d4b7e:	4718      	bx	r3
    }
   d4b80:	b002      	add	sp, #8
   d4b82:	bd10      	pop	{r4, pc}

000d4b84 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4b84:	6803      	ldr	r3, [r0, #0]
   d4b86:	689b      	ldr	r3, [r3, #8]
   d4b88:	4718      	bx	r3

000d4b8a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4b8a:	b530      	push	{r4, r5, lr}
   d4b8c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4b8e:	2300      	movs	r3, #0
   d4b90:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4b94:	2a01      	cmp	r2, #1
   d4b96:	bf98      	it	ls
   d4b98:	220a      	movls	r2, #10
   d4b9a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d4b9c:	460d      	mov	r5, r1
   d4b9e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d4ba2:	fb01 5312 	mls	r3, r1, r2, r5
   d4ba6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4baa:	2b09      	cmp	r3, #9
   d4bac:	bf94      	ite	ls
   d4bae:	3330      	addls	r3, #48	; 0x30
   d4bb0:	3337      	addhi	r3, #55	; 0x37
   d4bb2:	b2db      	uxtb	r3, r3
  } while(n);
   d4bb4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4bb6:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d4bba:	d9ef      	bls.n	d4b9c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d4bbc:	4621      	mov	r1, r4
   d4bbe:	f7ff ffcf 	bl	d4b60 <_ZN5Print5writeEPKc>
}
   d4bc2:	b00b      	add	sp, #44	; 0x2c
   d4bc4:	bd30      	pop	{r4, r5, pc}
	...

000d4bc8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4bc8:	4b01      	ldr	r3, [pc, #4]	; (d4bd0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4bca:	4a02      	ldr	r2, [pc, #8]	; (d4bd4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4bcc:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d4bce:	4770      	bx	lr
   d4bd0:	2003e6cc 	.word	0x2003e6cc
   d4bd4:	000d5d68 	.word	0x000d5d68

000d4bd8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4bd8:	4b02      	ldr	r3, [pc, #8]	; (d4be4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d4bda:	681a      	ldr	r2, [r3, #0]
   d4bdc:	4b02      	ldr	r3, [pc, #8]	; (d4be8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d4bde:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d4be0:	4770      	bx	lr
   d4be2:	bf00      	nop
   d4be4:	2003e620 	.word	0x2003e620
   d4be8:	2003e6d0 	.word	0x2003e6d0

000d4bec <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4bec:	b510      	push	{r4, lr}
   d4bee:	4604      	mov	r4, r0
   d4bf0:	f7ff fae4 	bl	d41bc <_ZNSt14_Function_baseD1Ev>
   d4bf4:	4620      	mov	r0, r4
   d4bf6:	bd10      	pop	{r4, pc}

000d4bf8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d4bf8:	b513      	push	{r0, r1, r4, lr}
   d4bfa:	460b      	mov	r3, r1
   d4bfc:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4bfe:	e9d0 0100 	ldrd	r0, r1, [r0]
   d4c02:	466c      	mov	r4, sp
   d4c04:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4c08:	e893 0003 	ldmia.w	r3, {r0, r1}
   d4c0c:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4c10:	e894 0003 	ldmia.w	r4, {r0, r1}
   d4c14:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d4c18:	b002      	add	sp, #8
   d4c1a:	bd10      	pop	{r4, pc}

000d4c1c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d4c1c:	4803      	ldr	r0, [pc, #12]	; (d4c2c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d4c1e:	4a04      	ldr	r2, [pc, #16]	; (d4c30 <_GLOBAL__sub_I_RGB+0x14>)
   d4c20:	4904      	ldr	r1, [pc, #16]	; (d4c34 <_GLOBAL__sub_I_RGB+0x18>)
   d4c22:	2300      	movs	r3, #0
   d4c24:	6083      	str	r3, [r0, #8]
   d4c26:	f000 bf13 	b.w	d5a50 <__aeabi_atexit>
   d4c2a:	bf00      	nop
   d4c2c:	2003e6d4 	.word	0x2003e6d4
   d4c30:	2003e688 	.word	0x2003e688
   d4c34:	000d4bed 	.word	0x000d4bed

000d4c38 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d4c38:	4b01      	ldr	r3, [pc, #4]	; (d4c40 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d4c3a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d4c3c:	4770      	bx	lr
   d4c3e:	bf00      	nop
   d4c40:	2003e624 	.word	0x2003e624

000d4c44 <serialEventRun>:
{
   d4c44:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d4c46:	4b0b      	ldr	r3, [pc, #44]	; (d4c74 <serialEventRun+0x30>)
   d4c48:	b143      	cbz	r3, d4c5c <serialEventRun+0x18>
   d4c4a:	f000 fc19 	bl	d5480 <_Z16_fetch_usbserialv>
   d4c4e:	6803      	ldr	r3, [r0, #0]
   d4c50:	691b      	ldr	r3, [r3, #16]
   d4c52:	4798      	blx	r3
   d4c54:	2800      	cmp	r0, #0
   d4c56:	dd01      	ble.n	d4c5c <serialEventRun+0x18>
        serialEvent();
   d4c58:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d4c5c:	4b06      	ldr	r3, [pc, #24]	; (d4c78 <serialEventRun+0x34>)
   d4c5e:	b143      	cbz	r3, d4c72 <serialEventRun+0x2e>
   d4c60:	f000 fcd2 	bl	d5608 <_Z22__fetch_global_Serial1v>
   d4c64:	6803      	ldr	r3, [r0, #0]
   d4c66:	691b      	ldr	r3, [r3, #16]
   d4c68:	4798      	blx	r3
   d4c6a:	2800      	cmp	r0, #0
   d4c6c:	dd01      	ble.n	d4c72 <serialEventRun+0x2e>
        serialEvent1();
   d4c6e:	f3af 8000 	nop.w
}
   d4c72:	bd08      	pop	{r3, pc}
	...

000d4c7c <_post_loop>:
{
   d4c7c:	b508      	push	{r3, lr}
	serialEventRun();
   d4c7e:	f7ff ffe1 	bl	d4c44 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4c82:	f7ff fc4f 	bl	d4524 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4c86:	4b01      	ldr	r3, [pc, #4]	; (d4c8c <_post_loop+0x10>)
   d4c88:	6018      	str	r0, [r3, #0]
}
   d4c8a:	bd08      	pop	{r3, pc}
   d4c8c:	2003e7d0 	.word	0x2003e7d0

000d4c90 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d4c90:	4802      	ldr	r0, [pc, #8]	; (d4c9c <_Z33system_initialize_user_backup_ramv+0xc>)
   d4c92:	4a03      	ldr	r2, [pc, #12]	; (d4ca0 <_Z33system_initialize_user_backup_ramv+0x10>)
   d4c94:	4903      	ldr	r1, [pc, #12]	; (d4ca4 <_Z33system_initialize_user_backup_ramv+0x14>)
   d4c96:	1a12      	subs	r2, r2, r0
   d4c98:	f000 bef8 	b.w	d5a8c <memcpy>
   d4c9c:	2003f400 	.word	0x2003f400
   d4ca0:	2003f404 	.word	0x2003f404
   d4ca4:	000d5fd0 	.word	0x000d5fd0

000d4ca8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d4ca8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4caa:	2300      	movs	r3, #0
   d4cac:	9300      	str	r3, [sp, #0]
   d4cae:	461a      	mov	r2, r3
   d4cb0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4cb4:	f7ff fd68 	bl	d4788 <system_ctrl_set_result>
}
   d4cb8:	b003      	add	sp, #12
   d4cba:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4cc0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d4cc0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d4cc2:	8843      	ldrh	r3, [r0, #2]
   d4cc4:	2b0a      	cmp	r3, #10
   d4cc6:	d008      	beq.n	d4cda <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d4cc8:	2b50      	cmp	r3, #80	; 0x50
   d4cca:	d10b      	bne.n	d4ce4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d4ccc:	4b09      	ldr	r3, [pc, #36]	; (d4cf4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d4cce:	681b      	ldr	r3, [r3, #0]
   d4cd0:	b14b      	cbz	r3, d4ce6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d4cd2:	b003      	add	sp, #12
   d4cd4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d4cd8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d4cda:	f7ff ffe5 	bl	d4ca8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d4cde:	b003      	add	sp, #12
   d4ce0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4ce4:	2300      	movs	r3, #0
   d4ce6:	9300      	str	r3, [sp, #0]
   d4ce8:	461a      	mov	r2, r3
   d4cea:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4cee:	f7ff fd4b 	bl	d4788 <system_ctrl_set_result>
}
   d4cf2:	e7f4      	b.n	d4cde <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d4cf4:	2003e6e8 	.word	0x2003e6e8

000d4cf8 <module_user_init_hook>:
{
   d4cf8:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4cfa:	4c12      	ldr	r4, [pc, #72]	; (d4d44 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d4cfc:	4812      	ldr	r0, [pc, #72]	; (d4d48 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4cfe:	4d13      	ldr	r5, [pc, #76]	; (d4d4c <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d4d00:	2100      	movs	r1, #0
   d4d02:	f7ff fdeb 	bl	d48dc <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4d06:	6823      	ldr	r3, [r4, #0]
   d4d08:	42ab      	cmp	r3, r5
   d4d0a:	4b11      	ldr	r3, [pc, #68]	; (d4d50 <module_user_init_hook+0x58>)
   d4d0c:	bf0c      	ite	eq
   d4d0e:	2201      	moveq	r2, #1
   d4d10:	2200      	movne	r2, #0
   d4d12:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d4d14:	d002      	beq.n	d4d1c <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d4d16:	f7ff ffbb 	bl	d4c90 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d4d1a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d4d1c:	f7ff fbfa 	bl	d4514 <HAL_RNG_GetRandomNumber>
   d4d20:	4604      	mov	r4, r0
    srand(seed);
   d4d22:	f000 fec9 	bl	d5ab8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d4d26:	4b0b      	ldr	r3, [pc, #44]	; (d4d54 <module_user_init_hook+0x5c>)
   d4d28:	b113      	cbz	r3, d4d30 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d4d2a:	4620      	mov	r0, r4
   d4d2c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d4d30:	2100      	movs	r1, #0
   d4d32:	4808      	ldr	r0, [pc, #32]	; (d4d54 <module_user_init_hook+0x5c>)
   d4d34:	f7ff fd9a 	bl	d486c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d4d38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4d3c:	4806      	ldr	r0, [pc, #24]	; (d4d58 <module_user_init_hook+0x60>)
   d4d3e:	2100      	movs	r1, #0
   d4d40:	f7ff bd18 	b.w	d4774 <system_ctrl_set_app_request_handler>
   d4d44:	2003f400 	.word	0x2003f400
   d4d48:	000d4c39 	.word	0x000d4c39
   d4d4c:	9a271c1e 	.word	0x9a271c1e
   d4d50:	2003e6e4 	.word	0x2003e6e4
   d4d54:	00000000 	.word	0x00000000
   d4d58:	000d4cc1 	.word	0x000d4cc1

000d4d5c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4d5c:	4770      	bx	lr

000d4d5e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d4d5e:	2000      	movs	r0, #0
   d4d60:	4770      	bx	lr

000d4d62 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4d62:	b510      	push	{r4, lr}
   d4d64:	2110      	movs	r1, #16
   d4d66:	4604      	mov	r4, r0
   d4d68:	f000 fe77 	bl	d5a5a <_ZdlPvj>
   d4d6c:	4620      	mov	r0, r4
   d4d6e:	bd10      	pop	{r4, pc}

000d4d70 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d4d70:	b508      	push	{r3, lr}
      { delete this; }
   d4d72:	f7ff fff6 	bl	d4d62 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d4d76:	bd08      	pop	{r3, pc}

000d4d78 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d4d78:	b530      	push	{r4, r5, lr}
        type_(type) {
   d4d7a:	2200      	movs	r2, #0
   d4d7c:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d4d80:	6002      	str	r2, [r0, #0]
   d4d82:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d4d84:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d4d86:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d4d88:	680c      	ldr	r4, [r1, #0]
   d4d8a:	8085      	strh	r5, [r0, #4]
   d4d8c:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d4d8e:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d4d90:	bd30      	pop	{r4, r5, pc}

000d4d92 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d4d92:	b510      	push	{r4, lr}
   d4d94:	4604      	mov	r4, r0
    free((void*)msg_);
   d4d96:	6800      	ldr	r0, [r0, #0]
   d4d98:	f7ff fd80 	bl	d489c <free>
}
   d4d9c:	4620      	mov	r0, r4
   d4d9e:	bd10      	pop	{r4, pc}

000d4da0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d4da0:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d4da2:	68c4      	ldr	r4, [r0, #12]
   d4da4:	b1f4      	cbz	r4, d4de4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d4da6:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d4da8:	2b02      	cmp	r3, #2
   d4daa:	d103      	bne.n	d4db4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d4dac:	f104 000c 	add.w	r0, r4, #12
   d4db0:	f7ff ffef 	bl	d4d92 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d4db4:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d4db6:	b135      	cbz	r5, d4dc6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d4db8:	4628      	mov	r0, r5
   d4dba:	f7ff f9ff 	bl	d41bc <_ZNSt14_Function_baseD1Ev>
   d4dbe:	2110      	movs	r1, #16
   d4dc0:	4628      	mov	r0, r5
   d4dc2:	f000 fe4a 	bl	d5a5a <_ZdlPvj>
   d4dc6:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d4dc8:	b135      	cbz	r5, d4dd8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d4dca:	4628      	mov	r0, r5
   d4dcc:	f7ff f9f6 	bl	d41bc <_ZNSt14_Function_baseD1Ev>
   d4dd0:	2110      	movs	r1, #16
   d4dd2:	4628      	mov	r0, r5
   d4dd4:	f000 fe41 	bl	d5a5a <_ZdlPvj>
   d4dd8:	4620      	mov	r0, r4
   d4dda:	2114      	movs	r1, #20
   d4ddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4de0:	f000 be3b 	b.w	d5a5a <_ZdlPvj>
   d4de4:	bd38      	pop	{r3, r4, r5, pc}

000d4de6 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
{
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d4de6:	b510      	push	{r4, lr}
   d4de8:	b088      	sub	sp, #32
   d4dea:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d4dec:	4668      	mov	r0, sp
   d4dee:	f7ff fe3e 	bl	d4a6e <_ZN6StringC1EPKc>
    return (*fn)(p);
   d4df2:	4669      	mov	r1, sp
   d4df4:	a804      	add	r0, sp, #16
   d4df6:	f7ff fe5d 	bl	d4ab4 <_ZN6StringC1ERKS_>
   d4dfa:	a804      	add	r0, sp, #16
   d4dfc:	47a0      	blx	r4
   d4dfe:	4604      	mov	r4, r0
   d4e00:	a804      	add	r0, sp, #16
   d4e02:	f7ff fde9 	bl	d49d8 <_ZN6StringD1Ev>
    String p(param);
   d4e06:	4668      	mov	r0, sp
   d4e08:	f7ff fde6 	bl	d49d8 <_ZN6StringD1Ev>
}
   d4e0c:	4620      	mov	r0, r4
   d4e0e:	b008      	add	sp, #32
   d4e10:	bd10      	pop	{r4, pc}

000d4e12 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d4e12:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d4e14:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   d4e16:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   d4e1a:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   d4e1c:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d4e1e:	461a      	mov	r2, r3
   d4e20:	4669      	mov	r1, sp
   d4e22:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   d4e24:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   d4e28:	f8ad 4000 	strh.w	r4, [sp]
   d4e2c:	f7ff fd06 	bl	d483c <spark_function>
}
   d4e30:	b004      	add	sp, #16
   d4e32:	bd10      	pop	{r4, pc}

000d4e34 <_ZN10CloudClass13publishVitalsEm>:
    }

    return p.future();
}

int CloudClass::publishVitals(system_tick_t period_s_) {
   d4e34:	4608      	mov	r0, r1
    return spark_publish_vitals(period_s_, nullptr);
   d4e36:	2100      	movs	r1, #0
   d4e38:	f7ff bd20 	b.w	d487c <spark_publish_vitals>

000d4e3c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d4e3c:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4e3e:	460e      	mov	r6, r1
   d4e40:	4604      	mov	r4, r0
   d4e42:	f856 3b04 	ldr.w	r3, [r6], #4
   d4e46:	9300      	str	r3, [sp, #0]
   d4e48:	460d      	mov	r5, r1
   d4e4a:	a801      	add	r0, sp, #4
   d4e4c:	4631      	mov	r1, r6
   d4e4e:	f7ff fe56 	bl	d4afe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d4e52:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4e54:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d4e56:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4e58:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d4e5a:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d4e5c:	2300      	movs	r3, #0
   d4e5e:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4e60:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d4e62:	f7ff fa2d 	bl	d42c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4e66:	4630      	mov	r0, r6
   d4e68:	f7ff fa2a 	bl	d42c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d4e6c:	4628      	mov	r0, r5
   d4e6e:	2108      	movs	r1, #8
   d4e70:	f000 fdf3 	bl	d5a5a <_ZdlPvj>
        return p;
    }
   d4e74:	4620      	mov	r0, r4
   d4e76:	b002      	add	sp, #8
   d4e78:	bd70      	pop	{r4, r5, r6, pc}

000d4e7a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d4e7a:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d4e7c:	b510      	push	{r4, lr}
      if (_M_empty())
   d4e7e:	b90a      	cbnz	r2, d4e84 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d4e80:	f000 fdef 	bl	d5a62 <_ZSt25__throw_bad_function_callv>
    }
   d4e84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4e88:	68c3      	ldr	r3, [r0, #12]
   d4e8a:	4718      	bx	r3

000d4e8c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4e8c:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d4e8e:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d4e90:	f100 0110 	add.w	r1, r0, #16
   d4e94:	f7ff fff1 	bl	d4e7a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d4e98:	bd08      	pop	{r3, pc}

000d4e9a <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d4e9a:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d4e9c:	b510      	push	{r4, lr}
      if (_M_empty())
   d4e9e:	b90a      	cbnz	r2, d4ea4 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d4ea0:	f000 fddf 	bl	d5a62 <_ZSt25__throw_bad_function_callv>
    }
   d4ea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4ea8:	68c3      	ldr	r3, [r0, #12]
   d4eaa:	4718      	bx	r3

000d4eac <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4eac:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d4eae:	6800      	ldr	r0, [r0, #0]
   d4eb0:	f100 0110 	add.w	r1, r0, #16
   d4eb4:	f7ff fff1 	bl	d4e9a <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d4eb8:	bd08      	pop	{r3, pc}
	...

000d4ebc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d4ebc:	b538      	push	{r3, r4, r5, lr}
   d4ebe:	2300      	movs	r3, #0
   d4ec0:	4604      	mov	r4, r0
   d4ec2:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4ec4:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d4ec6:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4ec8:	f7ff f8e3 	bl	d4092 <_Znwj>
   d4ecc:	b128      	cbz	r0, d4eda <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d4ece:	2301      	movs	r3, #1
   d4ed0:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d4ed4:	4b02      	ldr	r3, [pc, #8]	; (d4ee0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d4ed6:	6003      	str	r3, [r0, #0]
   d4ed8:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4eda:	6020      	str	r0, [r4, #0]
	}
   d4edc:	4620      	mov	r0, r4
   d4ede:	bd38      	pop	{r3, r4, r5, pc}
   d4ee0:	000d5d90 	.word	0x000d5d90

000d4ee4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d4ee4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d4ee6:	2300      	movs	r3, #0
   d4ee8:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d4eea:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d4eec:	4604      	mov	r4, r0
   d4eee:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d4ef0:	b12b      	cbz	r3, d4efe <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4ef2:	2202      	movs	r2, #2
   d4ef4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4ef6:	68eb      	ldr	r3, [r5, #12]
   d4ef8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4efa:	68ab      	ldr	r3, [r5, #8]
   d4efc:	60a3      	str	r3, [r4, #8]
    }
   d4efe:	4620      	mov	r0, r4
   d4f00:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4f04 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d4f04:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4f06:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d4f08:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d4f0a:	4668      	mov	r0, sp
   d4f0c:	f7ff ff34 	bl	d4d78 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d4f10:	f04f 0302 	mov.w	r3, #2
   d4f14:	e8d4 2f4f 	ldrexb	r2, [r4]
   d4f18:	2a00      	cmp	r2, #0
   d4f1a:	d103      	bne.n	d4f24 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d4f1c:	e8c4 3f41 	strexb	r1, r3, [r4]
   d4f20:	2900      	cmp	r1, #0
   d4f22:	d1f7      	bne.n	d4f14 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d4f24:	d125      	bne.n	d4f72 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d4f26:	f104 050c 	add.w	r5, r4, #12
   d4f2a:	4669      	mov	r1, sp
   d4f2c:	4628      	mov	r0, r5
   d4f2e:	f7ff ff23 	bl	d4d78 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d4f32:	f3bf 8f5b 	dmb	ish
   d4f36:	2301      	movs	r3, #1
   d4f38:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d4f3a:	2000      	movs	r0, #0
   d4f3c:	f104 0308 	add.w	r3, r4, #8
   d4f40:	f3bf 8f5b 	dmb	ish
   d4f44:	e853 6f00 	ldrex	r6, [r3]
   d4f48:	e843 0200 	strex	r2, r0, [r3]
   d4f4c:	2a00      	cmp	r2, #0
   d4f4e:	d1f9      	bne.n	d4f44 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d4f50:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d4f54:	b16e      	cbz	r6, d4f72 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d4f56:	f7ff fbfd 	bl	d4754 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d4f5a:	b178      	cbz	r0, d4f7c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d4f5c:	4629      	mov	r1, r5
   d4f5e:	4630      	mov	r0, r6
   d4f60:	f7ff ff8b 	bl	d4e7a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d4f64:	4630      	mov	r0, r6
   d4f66:	f7ff f929 	bl	d41bc <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d4f6a:	2110      	movs	r1, #16
   d4f6c:	4630      	mov	r0, r6
   d4f6e:	f000 fd74 	bl	d5a5a <_ZdlPvj>
        p_->setError(std::move(error));
   d4f72:	4668      	mov	r0, sp
   d4f74:	f7ff ff0d 	bl	d4d92 <_ZN8particle5ErrorD1Ev>
    }
   d4f78:	b009      	add	sp, #36	; 0x24
   d4f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d4f7c:	4631      	mov	r1, r6
   d4f7e:	a802      	add	r0, sp, #8
   d4f80:	f7ff ffb0 	bl	d4ee4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d4f84:	68e0      	ldr	r0, [r4, #12]
   d4f86:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d4f8a:	b108      	cbz	r0, d4f90 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d4f8c:	f000 fdca 	bl	d5b24 <strdup>
        type_(type) {
   d4f90:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d4f92:	2010      	movs	r0, #16
   d4f94:	f8ad 501c 	strh.w	r5, [sp, #28]
   d4f98:	f7ff f87b 	bl	d4092 <_Znwj>
   d4f9c:	4605      	mov	r5, r0
   d4f9e:	b1e8      	cbz	r0, d4fdc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d4fa0:	2700      	movs	r7, #0
   d4fa2:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4fa4:	2018      	movs	r0, #24
   d4fa6:	f7ff f874 	bl	d4092 <_Znwj>
   d4faa:	4604      	mov	r4, r0
   d4fac:	b188      	cbz	r0, d4fd2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d4fae:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d4fb0:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d4fb2:	a802      	add	r0, sp, #8
   d4fb4:	f7ff fe20 	bl	d4bf8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4fb8:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d4fba:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4fbc:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4fbe:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d4fc0:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d4fc2:	a906      	add	r1, sp, #24
   d4fc4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4fc6:	60e3      	str	r3, [r4, #12]
   d4fc8:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d4fcc:	9205      	str	r2, [sp, #20]
   d4fce:	f7ff fed3 	bl	d4d78 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d4fd2:	4b08      	ldr	r3, [pc, #32]	; (d4ff4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d4fd4:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d4fd6:	4b08      	ldr	r3, [pc, #32]	; (d4ff8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4fd8:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d4fda:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d4fdc:	a806      	add	r0, sp, #24
   d4fde:	f7ff fed8 	bl	d4d92 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d4fe2:	a802      	add	r0, sp, #8
   d4fe4:	f7ff f8ea 	bl	d41bc <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d4fe8:	2200      	movs	r2, #0
   d4fea:	4629      	mov	r1, r5
   d4fec:	4803      	ldr	r0, [pc, #12]	; (d4ffc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d4fee:	f7ff fbb9 	bl	d4764 <application_thread_invoke>
   d4ff2:	e7b7      	b.n	d4f64 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d4ff4:	000d4e8d 	.word	0x000d4e8d
   d4ff8:	000d5125 	.word	0x000d5125
   d4ffc:	000d5691 	.word	0x000d5691

000d5000 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5004:	b08a      	sub	sp, #40	; 0x28
   d5006:	4605      	mov	r5, r0
   d5008:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d500c:	460c      	mov	r4, r1
   d500e:	4617      	mov	r7, r2
   d5010:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5012:	f7ff fc1b 	bl	d484c <spark_cloud_flag_connected>
   d5016:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d5018:	4682      	mov	sl, r0
   d501a:	bb38      	cbnz	r0, d506c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d501c:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d5020:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d5022:	a905      	add	r1, sp, #20
   d5024:	4630      	mov	r0, r6
   d5026:	f8ad 3018 	strh.w	r3, [sp, #24]
   d502a:	f7ff fea5 	bl	d4d78 <_ZN8particle5ErrorC1EOS0_>
   d502e:	2014      	movs	r0, #20
   d5030:	f7ff f82f 	bl	d4092 <_Znwj>
   d5034:	4604      	mov	r4, r0
   d5036:	b148      	cbz	r0, d504c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d5038:	2302      	movs	r3, #2
   d503a:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d503c:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d503e:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5042:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d5044:	4631      	mov	r1, r6
   d5046:	300c      	adds	r0, #12
   d5048:	f7ff fe96 	bl	d4d78 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d504c:	4628      	mov	r0, r5
	: __shared_count(__p)
   d504e:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d5050:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d5054:	f7ff ff32 	bl	d4ebc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d5058:	4630      	mov	r0, r6
   d505a:	f7ff fe9a 	bl	d4d92 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d505e:	a805      	add	r0, sp, #20
   d5060:	f7ff fe97 	bl	d4d92 <_ZN8particle5ErrorD1Ev>
}
   d5064:	4628      	mov	r0, r5
   d5066:	b00a      	add	sp, #40	; 0x28
   d5068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d506c:	230c      	movs	r3, #12
   d506e:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d5072:	2014      	movs	r0, #20
   d5074:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d5078:	9307      	str	r3, [sp, #28]
   d507a:	f7ff f80a 	bl	d4092 <_Znwj>
   d507e:	4601      	mov	r1, r0
   d5080:	b128      	cbz	r0, d508e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5082:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d5086:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d508a:	f880 a001 	strb.w	sl, [r0, #1]
   d508e:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d5090:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d5092:	f7ff ff13 	bl	d4ebc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d5096:	4b22      	ldr	r3, [pc, #136]	; (d5120 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d5098:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d509a:	2008      	movs	r0, #8
   d509c:	f7fe fff9 	bl	d4092 <_Znwj>
   d50a0:	4682      	mov	sl, r0
   d50a2:	b128      	cbz	r0, d50b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d50a4:	9b03      	ldr	r3, [sp, #12]
   d50a6:	f840 3b04 	str.w	r3, [r0], #4
   d50aa:	a904      	add	r1, sp, #16
   d50ac:	f7ff fd27 	bl	d4afe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d50b0:	9600      	str	r6, [sp, #0]
   d50b2:	fa5f f389 	uxtb.w	r3, r9
   d50b6:	4642      	mov	r2, r8
   d50b8:	4639      	mov	r1, r7
   d50ba:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d50bc:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d50c0:	f7ff fbcc 	bl	d485c <spark_send_event>
   d50c4:	b9b8      	cbnz	r0, d50f6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d50c6:	9b03      	ldr	r3, [sp, #12]
   d50c8:	785b      	ldrb	r3, [r3, #1]
   d50ca:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d50ce:	b993      	cbnz	r3, d50f6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d50d0:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d50d4:	a905      	add	r1, sp, #20
   d50d6:	a803      	add	r0, sp, #12
   d50d8:	9205      	str	r2, [sp, #20]
   d50da:	f8ad 3018 	strh.w	r3, [sp, #24]
   d50de:	f7ff ff11 	bl	d4f04 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d50e2:	a805      	add	r0, sp, #20
   d50e4:	f7ff fe55 	bl	d4d92 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d50e8:	a805      	add	r0, sp, #20
   d50ea:	9909      	ldr	r1, [sp, #36]	; 0x24
   d50ec:	f7ff fea6 	bl	d4e3c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d50f0:	a806      	add	r0, sp, #24
   d50f2:	f7ff f8e5 	bl	d42c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d50f6:	9b03      	ldr	r3, [sp, #12]
   d50f8:	9305      	str	r3, [sp, #20]
   d50fa:	a904      	add	r1, sp, #16
   d50fc:	a806      	add	r0, sp, #24
   d50fe:	f7ff fcfe 	bl	d4afe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5102:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5104:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5106:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d5108:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d510a:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d510c:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d510e:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d5110:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d5112:	f7ff f8d5 	bl	d42c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5116:	a804      	add	r0, sp, #16
   d5118:	f7ff f8d2 	bl	d42c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d511c:	e7a2      	b.n	d5064 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d511e:	bf00      	nop
   d5120:	000d51e9 	.word	0x000d51e9

000d5124 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d5124:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5126:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5128:	4605      	mov	r5, r0
	  switch (__op)
   d512a:	d007      	beq.n	d513c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d512c:	2a03      	cmp	r2, #3
   d512e:	d018      	beq.n	d5162 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d5130:	2a01      	cmp	r2, #1
   d5132:	d101      	bne.n	d5138 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d5134:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5136:	6003      	str	r3, [r0, #0]
	}
   d5138:	2000      	movs	r0, #0
   d513a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d513c:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d513e:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d5140:	f7fe ffa7 	bl	d4092 <_Znwj>
   d5144:	4604      	mov	r4, r0
   d5146:	b150      	cbz	r0, d515e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5148:	4631      	mov	r1, r6
   d514a:	f7ff fecb 	bl	d4ee4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d514e:	6930      	ldr	r0, [r6, #16]
   d5150:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d5154:	b108      	cbz	r0, d515a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d5156:	f000 fce5 	bl	d5b24 <strdup>
        type_(type) {
   d515a:	6120      	str	r0, [r4, #16]
   d515c:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d515e:	602c      	str	r4, [r5, #0]
	}
   d5160:	e7ea      	b.n	d5138 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d5162:	6804      	ldr	r4, [r0, #0]
   d5164:	2c00      	cmp	r4, #0
   d5166:	d0e7      	beq.n	d5138 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d5168:	f104 0010 	add.w	r0, r4, #16
   d516c:	f7ff fe11 	bl	d4d92 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d5170:	4620      	mov	r0, r4
   d5172:	f7ff f823 	bl	d41bc <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d5176:	2118      	movs	r1, #24
   d5178:	4620      	mov	r0, r4
   d517a:	f000 fc6e 	bl	d5a5a <_ZdlPvj>
   d517e:	e7db      	b.n	d5138 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d5180 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d5180:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d5182:	2300      	movs	r3, #0
   d5184:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d5186:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d5188:	4604      	mov	r4, r0
   d518a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d518c:	b12b      	cbz	r3, d519a <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d518e:	2202      	movs	r2, #2
   d5190:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5192:	68eb      	ldr	r3, [r5, #12]
   d5194:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5196:	68ab      	ldr	r3, [r5, #8]
   d5198:	60a3      	str	r3, [r4, #8]
    }
   d519a:	4620      	mov	r0, r4
   d519c:	bd38      	pop	{r3, r4, r5, pc}

000d519e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d519e:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d51a0:	b570      	push	{r4, r5, r6, lr}
   d51a2:	4604      	mov	r4, r0
	  switch (__op)
   d51a4:	d007      	beq.n	d51b6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d51a6:	2a03      	cmp	r2, #3
   d51a8:	d012      	beq.n	d51d0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d51aa:	2a01      	cmp	r2, #1
   d51ac:	d101      	bne.n	d51b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d51ae:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d51b0:	6003      	str	r3, [r0, #0]
	}
   d51b2:	2000      	movs	r0, #0
   d51b4:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d51b6:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d51b8:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d51ba:	f7fe ff6a 	bl	d4092 <_Znwj>
   d51be:	4605      	mov	r5, r0
   d51c0:	b120      	cbz	r0, d51cc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d51c2:	4631      	mov	r1, r6
   d51c4:	f7ff ffdc 	bl	d5180 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d51c8:	7c33      	ldrb	r3, [r6, #16]
   d51ca:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d51cc:	6025      	str	r5, [r4, #0]
	}
   d51ce:	e7f0      	b.n	d51b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d51d0:	6804      	ldr	r4, [r0, #0]
   d51d2:	2c00      	cmp	r4, #0
   d51d4:	d0ed      	beq.n	d51b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d51d6:	4620      	mov	r0, r4
   d51d8:	f7fe fff0 	bl	d41bc <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d51dc:	2114      	movs	r1, #20
   d51de:	4620      	mov	r0, r4
   d51e0:	f000 fc3b 	bl	d5a5a <_ZdlPvj>
   d51e4:	e7e5      	b.n	d51b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d51e8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d51e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d51ea:	b089      	sub	sp, #36	; 0x24
   d51ec:	4604      	mov	r4, r0
   d51ee:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d51f0:	a801      	add	r0, sp, #4
   d51f2:	4611      	mov	r1, r2
   d51f4:	f7ff fe22 	bl	d4e3c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d51f8:	b1a4      	cbz	r4, d5224 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d51fa:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d51fc:	b11d      	cbz	r5, d5206 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d51fe:	4628      	mov	r0, r5
   d5200:	f000 fc90 	bl	d5b24 <strdup>
   d5204:	4605      	mov	r5, r0
   d5206:	a801      	add	r0, sp, #4
   d5208:	a903      	add	r1, sp, #12
        type_(type) {
   d520a:	9503      	str	r5, [sp, #12]
   d520c:	f8ad 4010 	strh.w	r4, [sp, #16]
   d5210:	f7ff fe78 	bl	d4f04 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d5214:	a803      	add	r0, sp, #12
   d5216:	f7ff fdbc 	bl	d4d92 <_ZN8particle5ErrorD1Ev>
   d521a:	a802      	add	r0, sp, #8
   d521c:	f7ff f850 	bl	d42c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5220:	b009      	add	sp, #36	; 0x24
   d5222:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d5224:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d5226:	2301      	movs	r3, #1
   d5228:	e8d5 2f4f 	ldrexb	r2, [r5]
   d522c:	2a00      	cmp	r2, #0
   d522e:	d103      	bne.n	d5238 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d5230:	e8c5 3f41 	strexb	r1, r3, [r5]
   d5234:	2900      	cmp	r1, #0
   d5236:	d1f7      	bne.n	d5228 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d5238:	d1ef      	bne.n	d521a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d523a:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d523c:	f3bf 8f5b 	dmb	ish
   d5240:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d5242:	1d2b      	adds	r3, r5, #4
   d5244:	f3bf 8f5b 	dmb	ish
   d5248:	e853 6f00 	ldrex	r6, [r3]
   d524c:	e843 4200 	strex	r2, r4, [r3]
   d5250:	2a00      	cmp	r2, #0
   d5252:	d1f9      	bne.n	d5248 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d5254:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d5258:	2e00      	cmp	r6, #0
   d525a:	d0de      	beq.n	d521a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d525c:	4620      	mov	r0, r4
   d525e:	f7ff fa79 	bl	d4754 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d5262:	4607      	mov	r7, r0
   d5264:	b160      	cbz	r0, d5280 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5266:	f105 010c 	add.w	r1, r5, #12
   d526a:	4630      	mov	r0, r6
   d526c:	f7ff fe15 	bl	d4e9a <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d5270:	4630      	mov	r0, r6
   d5272:	f7fe ffa3 	bl	d41bc <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d5276:	2110      	movs	r1, #16
   d5278:	4630      	mov	r0, r6
   d527a:	f000 fbee 	bl	d5a5a <_ZdlPvj>
   d527e:	e7cc      	b.n	d521a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5280:	4631      	mov	r1, r6
   d5282:	a803      	add	r0, sp, #12
   d5284:	f7ff ff7c 	bl	d5180 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5288:	7b2b      	ldrb	r3, [r5, #12]
   d528a:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d528e:	2010      	movs	r0, #16
   d5290:	f7fe feff 	bl	d4092 <_Znwj>
   d5294:	4605      	mov	r5, r0
   d5296:	b1d0      	cbz	r0, d52ce <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d5298:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d529a:	2014      	movs	r0, #20
   d529c:	f7fe fef9 	bl	d4092 <_Znwj>
   d52a0:	4604      	mov	r4, r0
   d52a2:	b178      	cbz	r0, d52c4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d52a4:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d52a6:	4601      	mov	r1, r0
   d52a8:	a803      	add	r0, sp, #12
   d52aa:	f7ff fca5 	bl	d4bf8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d52ae:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d52b0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d52b2:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d52b4:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d52b6:	9205      	str	r2, [sp, #20]
   d52b8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d52ba:	60e3      	str	r3, [r4, #12]
   d52bc:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d52c0:	9206      	str	r2, [sp, #24]
   d52c2:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d52c4:	4b06      	ldr	r3, [pc, #24]	; (d52e0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d52c6:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d52c8:	4b06      	ldr	r3, [pc, #24]	; (d52e4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d52ca:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d52cc:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d52ce:	a803      	add	r0, sp, #12
   d52d0:	f7fe ff74 	bl	d41bc <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d52d4:	2200      	movs	r2, #0
   d52d6:	4629      	mov	r1, r5
   d52d8:	4803      	ldr	r0, [pc, #12]	; (d52e8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d52da:	f7ff fa43 	bl	d4764 <application_thread_invoke>
   d52de:	e7c7      	b.n	d5270 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d52e0:	000d4ead 	.word	0x000d4ead
   d52e4:	000d519f 	.word	0x000d519f
   d52e8:	000d5691 	.word	0x000d5691

000d52ec <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d52ec:	4770      	bx	lr

000d52ee <_ZN9IPAddressD0Ev>:
   d52ee:	b510      	push	{r4, lr}
   d52f0:	2118      	movs	r1, #24
   d52f2:	4604      	mov	r4, r0
   d52f4:	f000 fbb1 	bl	d5a5a <_ZdlPvj>
   d52f8:	4620      	mov	r0, r4
   d52fa:	bd10      	pop	{r4, pc}

000d52fc <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d52fc:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d52fe:	7d03      	ldrb	r3, [r0, #20]
   d5300:	2b06      	cmp	r3, #6
{
   d5302:	b08d      	sub	sp, #52	; 0x34
   d5304:	460e      	mov	r6, r1
   d5306:	f100 0704 	add.w	r7, r0, #4
   d530a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d530e:	d012      	beq.n	d5336 <_ZNK9IPAddress7printToER5Print+0x3a>
   d5310:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d5314:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5318:	220a      	movs	r2, #10
   d531a:	4630      	mov	r0, r6
   d531c:	f7ff fc35 	bl	d4b8a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5320:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5322:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d5324:	d019      	beq.n	d535a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d5326:	2c00      	cmp	r4, #0
   d5328:	d0f4      	beq.n	d5314 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d532a:	212e      	movs	r1, #46	; 0x2e
   d532c:	4630      	mov	r0, r6
   d532e:	f7ff fc29 	bl	d4b84 <_ZN5Print5printEc>
   d5332:	4404      	add	r4, r0
   d5334:	e7ee      	b.n	d5314 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5336:	232f      	movs	r3, #47	; 0x2f
   d5338:	466a      	mov	r2, sp
   d533a:	4639      	mov	r1, r7
   d533c:	200a      	movs	r0, #10
		buf[0] = 0;
   d533e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5342:	f7ff f93f 	bl	d45c4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d5346:	4668      	mov	r0, sp
   d5348:	f000 fc09 	bl	d5b5e <strlen>
   d534c:	6833      	ldr	r3, [r6, #0]
   d534e:	4602      	mov	r2, r0
   d5350:	68db      	ldr	r3, [r3, #12]
   d5352:	4669      	mov	r1, sp
   d5354:	4630      	mov	r0, r6
   d5356:	4798      	blx	r3
   d5358:	4604      	mov	r4, r0
    }
    return n;
}
   d535a:	4620      	mov	r0, r4
   d535c:	b00d      	add	sp, #52	; 0x34
   d535e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5360 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d5360:	b510      	push	{r4, lr}
   d5362:	4b05      	ldr	r3, [pc, #20]	; (d5378 <_ZN9IPAddressC1Ev+0x18>)
   d5364:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5366:	2211      	movs	r2, #17
   d5368:	f840 3b04 	str.w	r3, [r0], #4
   d536c:	2100      	movs	r1, #0
   d536e:	f000 fb9b 	bl	d5aa8 <memset>
}
   d5372:	4620      	mov	r0, r4
   d5374:	bd10      	pop	{r4, pc}
   d5376:	bf00      	nop
   d5378:	000d5dac 	.word	0x000d5dac

000d537c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d537c:	4603      	mov	r3, r0
   d537e:	4a07      	ldr	r2, [pc, #28]	; (d539c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5380:	b510      	push	{r4, lr}
   d5382:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d5386:	f101 0210 	add.w	r2, r1, #16
   d538a:	f851 4b04 	ldr.w	r4, [r1], #4
   d538e:	f843 4b04 	str.w	r4, [r3], #4
   d5392:	4291      	cmp	r1, r2
   d5394:	d1f9      	bne.n	d538a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5396:	780a      	ldrb	r2, [r1, #0]
   d5398:	701a      	strb	r2, [r3, #0]
}
   d539a:	bd10      	pop	{r4, pc}
   d539c:	000d5dac 	.word	0x000d5dac

000d53a0 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d53a0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d53a2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d53a6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d53aa:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d53ae:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d53b2:	2304      	movs	r3, #4
   d53b4:	6041      	str	r1, [r0, #4]
   d53b6:	7503      	strb	r3, [r0, #20]
}
   d53b8:	bd10      	pop	{r4, pc}

000d53ba <_ZN9IPAddressaSEPKh>:
{
   d53ba:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d53bc:	78cb      	ldrb	r3, [r1, #3]
   d53be:	9300      	str	r3, [sp, #0]
   d53c0:	788b      	ldrb	r3, [r1, #2]
   d53c2:	784a      	ldrb	r2, [r1, #1]
   d53c4:	7809      	ldrb	r1, [r1, #0]
   d53c6:	f7ff ffeb 	bl	d53a0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d53ca:	b002      	add	sp, #8
   d53cc:	bd10      	pop	{r4, pc}

000d53ce <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d53ce:	7441      	strb	r1, [r0, #17]
}
   d53d0:	4770      	bx	lr

000d53d2 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d53d2:	4770      	bx	lr

000d53d4 <_ZN9USBSerial4readEv>:
{
   d53d4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d53d6:	2100      	movs	r1, #0
   d53d8:	7c00      	ldrb	r0, [r0, #16]
   d53da:	f7ff f99b 	bl	d4714 <HAL_USB_USART_Receive_Data>
}
   d53de:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d53e2:	bd08      	pop	{r3, pc}

000d53e4 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d53e4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d53e6:	2101      	movs	r1, #1
   d53e8:	7c00      	ldrb	r0, [r0, #16]
   d53ea:	f7ff f993 	bl	d4714 <HAL_USB_USART_Receive_Data>
}
   d53ee:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d53f2:	bd08      	pop	{r3, pc}

000d53f4 <_ZN9USBSerial17availableForWriteEv>:
{
   d53f4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d53f6:	7c00      	ldrb	r0, [r0, #16]
   d53f8:	f7ff f984 	bl	d4704 <HAL_USB_USART_Available_Data_For_Write>
}
   d53fc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5400:	bd08      	pop	{r3, pc}

000d5402 <_ZN9USBSerial9availableEv>:
{
   d5402:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5404:	7c00      	ldrb	r0, [r0, #16]
   d5406:	f7ff f975 	bl	d46f4 <HAL_USB_USART_Available_Data>
}
   d540a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d540e:	bd08      	pop	{r3, pc}

000d5410 <_ZN9USBSerial5writeEh>:
{
   d5410:	b513      	push	{r0, r1, r4, lr}
   d5412:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5414:	7c00      	ldrb	r0, [r0, #16]
{
   d5416:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5418:	f7ff f974 	bl	d4704 <HAL_USB_USART_Available_Data_For_Write>
   d541c:	2800      	cmp	r0, #0
   d541e:	9901      	ldr	r1, [sp, #4]
   d5420:	dc01      	bgt.n	d5426 <_ZN9USBSerial5writeEh+0x16>
   d5422:	7c60      	ldrb	r0, [r4, #17]
   d5424:	b120      	cbz	r0, d5430 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5426:	7c20      	ldrb	r0, [r4, #16]
   d5428:	f7ff f97c 	bl	d4724 <HAL_USB_USART_Send_Data>
   d542c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d5430:	b002      	add	sp, #8
   d5432:	bd10      	pop	{r4, pc}

000d5434 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d5434:	7c00      	ldrb	r0, [r0, #16]
   d5436:	f7ff b97d 	b.w	d4734 <HAL_USB_USART_Flush_Data>

000d543a <_ZN9USBSerialD0Ev>:
   d543a:	b510      	push	{r4, lr}
   d543c:	2114      	movs	r1, #20
   d543e:	4604      	mov	r4, r0
   d5440:	f000 fb0b 	bl	d5a5a <_ZdlPvj>
   d5444:	4620      	mov	r0, r4
   d5446:	bd10      	pop	{r4, pc}

000d5448 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5448:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d544a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d544e:	4604      	mov	r4, r0
   d5450:	4608      	mov	r0, r1
   d5452:	2100      	movs	r1, #0
   d5454:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5458:	4b04      	ldr	r3, [pc, #16]	; (d546c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d545a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d545c:	2301      	movs	r3, #1
  _serial = serial;
   d545e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d5460:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d5462:	4611      	mov	r1, r2
   d5464:	f7ff f93e 	bl	d46e4 <HAL_USB_USART_Init>
}
   d5468:	4620      	mov	r0, r4
   d546a:	bd10      	pop	{r4, pc}
   d546c:	000d5dc0 	.word	0x000d5dc0

000d5470 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5470:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5472:	2214      	movs	r2, #20
{
   d5474:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5476:	2100      	movs	r1, #0
   d5478:	f000 fb16 	bl	d5aa8 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d547c:	4620      	mov	r0, r4
   d547e:	bd10      	pop	{r4, pc}

000d5480 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5480:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5482:	4c10      	ldr	r4, [pc, #64]	; (d54c4 <_Z16_fetch_usbserialv+0x44>)
{
   d5484:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5486:	a803      	add	r0, sp, #12
   d5488:	f7ff fff2 	bl	d5470 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d548c:	7821      	ldrb	r1, [r4, #0]
   d548e:	f3bf 8f5b 	dmb	ish
   d5492:	f011 0101 	ands.w	r1, r1, #1
   d5496:	d111      	bne.n	d54bc <_Z16_fetch_usbserialv+0x3c>
   d5498:	4620      	mov	r0, r4
   d549a:	9101      	str	r1, [sp, #4]
   d549c:	f7fe fdff 	bl	d409e <__cxa_guard_acquire>
   d54a0:	9901      	ldr	r1, [sp, #4]
   d54a2:	b158      	cbz	r0, d54bc <_Z16_fetch_usbserialv+0x3c>
   d54a4:	aa03      	add	r2, sp, #12
   d54a6:	4808      	ldr	r0, [pc, #32]	; (d54c8 <_Z16_fetch_usbserialv+0x48>)
   d54a8:	f7ff ffce 	bl	d5448 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d54ac:	4620      	mov	r0, r4
   d54ae:	f7fe fdfb 	bl	d40a8 <__cxa_guard_release>
   d54b2:	4a06      	ldr	r2, [pc, #24]	; (d54cc <_Z16_fetch_usbserialv+0x4c>)
   d54b4:	4906      	ldr	r1, [pc, #24]	; (d54d0 <_Z16_fetch_usbserialv+0x50>)
   d54b6:	4804      	ldr	r0, [pc, #16]	; (d54c8 <_Z16_fetch_usbserialv+0x48>)
   d54b8:	f000 faca 	bl	d5a50 <__aeabi_atexit>
	return _usbserial;
}
   d54bc:	4802      	ldr	r0, [pc, #8]	; (d54c8 <_Z16_fetch_usbserialv+0x48>)
   d54be:	b008      	add	sp, #32
   d54c0:	bd10      	pop	{r4, pc}
   d54c2:	bf00      	nop
   d54c4:	2003e6ec 	.word	0x2003e6ec
   d54c8:	2003e6f0 	.word	0x2003e6f0
   d54cc:	2003e688 	.word	0x2003e688
   d54d0:	000d53d3 	.word	0x000d53d3

000d54d4 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d54d4:	4700      	bx	r0
	...

000d54d8 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d54d8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d54dc:	2400      	movs	r4, #0
{
   d54de:	461d      	mov	r5, r3
   d54e0:	460f      	mov	r7, r1
   d54e2:	4690      	mov	r8, r2
   d54e4:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   d54e6:	f7ff f80d 	bl	d4504 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   d54ea:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d54ec:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {0};
   d54f0:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d54f4:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {0};
   d54f8:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   d54fc:	bfa2      	ittt	ge
   d54fe:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d5502:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   d5506:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d5508:	4907      	ldr	r1, [pc, #28]	; (d5528 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   d550a:	9400      	str	r4, [sp, #0]
   d550c:	4643      	mov	r3, r8
   d550e:	463a      	mov	r2, r7
   d5510:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d5512:	bfa8      	it	ge
   d5514:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d5518:	f7fe ffec 	bl	d44f4 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d551c:	fab0 f080 	clz	r0, r0
   d5520:	0940      	lsrs	r0, r0, #5
   d5522:	b004      	add	sp, #16
   d5524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5528:	000d54d5 	.word	0x000d54d5

000d552c <_Z15detachInterruptt>:
 * Input          : pin number to which the interrupt was attached
 * Output         : None.
 * Return         : true or false
 *******************************************************************************/
bool detachInterrupt(uint16_t pin)
{
   d552c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d552e:	4604      	mov	r4, r0
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Detach(pin)) {
   d5530:	f7fe ffe8 	bl	d4504 <HAL_Interrupts_Detach>
   d5534:	4605      	mov	r5, r0
   d5536:	b970      	cbnz	r0, d5556 <_Z15detachInterruptt+0x2a>
        return false;
    }
    if (handlers[pin]) {
   d5538:	4f08      	ldr	r7, [pc, #32]	; (d555c <_Z15detachInterruptt+0x30>)
   d553a:	f857 6024 	ldr.w	r6, [r7, r4, lsl #2]
   d553e:	b146      	cbz	r6, d5552 <_Z15detachInterruptt+0x26>
   d5540:	4630      	mov	r0, r6
   d5542:	f7fe fe3b 	bl	d41bc <_ZNSt14_Function_baseD1Ev>
        delete handlers[pin];
   d5546:	2110      	movs	r1, #16
   d5548:	4630      	mov	r0, r6
   d554a:	f000 fa86 	bl	d5a5a <_ZdlPvj>
        handlers[pin] = nullptr;
   d554e:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
    }
    return true;
   d5552:	2001      	movs	r0, #1
   d5554:	e000      	b.n	d5558 <_Z15detachInterruptt+0x2c>
        return false;
   d5556:	2000      	movs	r0, #0
}
   d5558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d555a:	bf00      	nop
   d555c:	2003e704 	.word	0x2003e704

000d5560 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d5560:	4770      	bx	lr

000d5562 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5562:	7441      	strb	r1, [r0, #17]
}
   d5564:	4770      	bx	lr

000d5566 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d5566:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d5568:	7c00      	ldrb	r0, [r0, #16]
   d556a:	f7ff f86b 	bl	d4644 <hal_usart_available_data_for_write>
}
   d556e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5572:	bd08      	pop	{r3, pc}

000d5574 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5574:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d5576:	7c00      	ldrb	r0, [r0, #16]
   d5578:	f7ff f83c 	bl	d45f4 <hal_usart_available>
}
   d557c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5580:	bd08      	pop	{r3, pc}

000d5582 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5582:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d5584:	7c00      	ldrb	r0, [r0, #16]
   d5586:	f7ff f845 	bl	d4614 <hal_usart_peek>
}
   d558a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d558e:	bd08      	pop	{r3, pc}

000d5590 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5590:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d5592:	7c00      	ldrb	r0, [r0, #16]
   d5594:	f7ff f836 	bl	d4604 <hal_usart_read>
}
   d5598:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d559c:	bd08      	pop	{r3, pc}

000d559e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d559e:	7c00      	ldrb	r0, [r0, #16]
   d55a0:	f7ff b840 	b.w	d4624 <hal_usart_flush>

000d55a4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d55a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d55a6:	7c45      	ldrb	r5, [r0, #17]
{
   d55a8:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d55aa:	b12d      	cbz	r5, d55b8 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d55ac:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d55ae:	b003      	add	sp, #12
   d55b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d55b4:	f7ff b816 	b.w	d45e4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d55b8:	7c00      	ldrb	r0, [r0, #16]
   d55ba:	9101      	str	r1, [sp, #4]
   d55bc:	f7ff f842 	bl	d4644 <hal_usart_available_data_for_write>
   d55c0:	2800      	cmp	r0, #0
   d55c2:	9901      	ldr	r1, [sp, #4]
   d55c4:	dcf2      	bgt.n	d55ac <_ZN11USARTSerial5writeEh+0x8>
}
   d55c6:	4628      	mov	r0, r5
   d55c8:	b003      	add	sp, #12
   d55ca:	bd30      	pop	{r4, r5, pc}

000d55cc <_ZN11USARTSerialD0Ev>:
   d55cc:	b510      	push	{r4, lr}
   d55ce:	2114      	movs	r1, #20
   d55d0:	4604      	mov	r4, r0
   d55d2:	f000 fa42 	bl	d5a5a <_ZdlPvj>
   d55d6:	4620      	mov	r0, r4
   d55d8:	bd10      	pop	{r4, pc}
	...

000d55dc <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d55dc:	b510      	push	{r4, lr}
   d55de:	f04f 0c00 	mov.w	ip, #0
   d55e2:	4604      	mov	r4, r0
   d55e4:	4608      	mov	r0, r1
   d55e6:	4611      	mov	r1, r2
   d55e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d55ec:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d55f0:	4a04      	ldr	r2, [pc, #16]	; (d5604 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d55f2:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d55f4:	2201      	movs	r2, #1
  _serial = serial;
   d55f6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d55f8:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d55fa:	461a      	mov	r2, r3
   d55fc:	f7fe ffea 	bl	d45d4 <hal_usart_init>
}
   d5600:	4620      	mov	r0, r4
   d5602:	bd10      	pop	{r4, pc}
   d5604:	000d5df0 	.word	0x000d5df0

000d5608 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5608:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
   d560a:	4c1b      	ldr	r4, [pc, #108]	; (d5678 <_Z22__fetch_global_Serial1v+0x70>)
   d560c:	6826      	ldr	r6, [r4, #0]
   d560e:	b94e      	cbnz	r6, d5624 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new hal_usart_ring_buffer_t();
   d5610:	2084      	movs	r0, #132	; 0x84
   d5612:	f7fe fd3e 	bl	d4092 <_Znwj>
   d5616:	4605      	mov	r5, r0
   d5618:	b118      	cbz	r0, d5622 <_Z22__fetch_global_Serial1v+0x1a>
   d561a:	2284      	movs	r2, #132	; 0x84
   d561c:	4631      	mov	r1, r6
   d561e:	f000 fa43 	bl	d5aa8 <memset>
   d5622:	6025      	str	r5, [r4, #0]
  }
  if (!serial1_tx_buffer) {
   d5624:	4d15      	ldr	r5, [pc, #84]	; (d567c <_Z22__fetch_global_Serial1v+0x74>)
   d5626:	682f      	ldr	r7, [r5, #0]
   d5628:	b94f      	cbnz	r7, d563e <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
   d562a:	2084      	movs	r0, #132	; 0x84
   d562c:	f7fe fd31 	bl	d4092 <_Znwj>
   d5630:	4606      	mov	r6, r0
   d5632:	b118      	cbz	r0, d563c <_Z22__fetch_global_Serial1v+0x34>
   d5634:	2284      	movs	r2, #132	; 0x84
   d5636:	4639      	mov	r1, r7
   d5638:	f000 fa36 	bl	d5aa8 <memset>
   d563c:	602e      	str	r6, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   d563e:	4e10      	ldr	r6, [pc, #64]	; (d5680 <_Z22__fetch_global_Serial1v+0x78>)
   d5640:	7831      	ldrb	r1, [r6, #0]
   d5642:	f3bf 8f5b 	dmb	ish
   d5646:	f011 0101 	ands.w	r1, r1, #1
   d564a:	d112      	bne.n	d5672 <_Z22__fetch_global_Serial1v+0x6a>
   d564c:	4630      	mov	r0, r6
   d564e:	9101      	str	r1, [sp, #4]
   d5650:	f7fe fd25 	bl	d409e <__cxa_guard_acquire>
   d5654:	9901      	ldr	r1, [sp, #4]
   d5656:	b160      	cbz	r0, d5672 <_Z22__fetch_global_Serial1v+0x6a>
   d5658:	6822      	ldr	r2, [r4, #0]
   d565a:	682b      	ldr	r3, [r5, #0]
   d565c:	4809      	ldr	r0, [pc, #36]	; (d5684 <_Z22__fetch_global_Serial1v+0x7c>)
   d565e:	f7ff ffbd 	bl	d55dc <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d5662:	4630      	mov	r0, r6
   d5664:	f7fe fd20 	bl	d40a8 <__cxa_guard_release>
   d5668:	4a07      	ldr	r2, [pc, #28]	; (d5688 <_Z22__fetch_global_Serial1v+0x80>)
   d566a:	4908      	ldr	r1, [pc, #32]	; (d568c <_Z22__fetch_global_Serial1v+0x84>)
   d566c:	4805      	ldr	r0, [pc, #20]	; (d5684 <_Z22__fetch_global_Serial1v+0x7c>)
   d566e:	f000 f9ef 	bl	d5a50 <__aeabi_atexit>
#endif
	return serial1;
}
   d5672:	4804      	ldr	r0, [pc, #16]	; (d5684 <_Z22__fetch_global_Serial1v+0x7c>)
   d5674:	b003      	add	sp, #12
   d5676:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5678:	2003e798 	.word	0x2003e798
   d567c:	2003e79c 	.word	0x2003e79c
   d5680:	2003e794 	.word	0x2003e794
   d5684:	2003e7a0 	.word	0x2003e7a0
   d5688:	2003e688 	.word	0x2003e688
   d568c:	000d5561 	.word	0x000d5561

000d5690 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d5690:	b510      	push	{r4, lr}
      if (_M_empty())
   d5692:	6883      	ldr	r3, [r0, #8]
   d5694:	4604      	mov	r4, r0
   d5696:	b90b      	cbnz	r3, d569c <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d5698:	f000 f9e3 	bl	d5a62 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d569c:	68c3      	ldr	r3, [r0, #12]
   d569e:	4798      	blx	r3
      if (_M_manager)
   d56a0:	68a3      	ldr	r3, [r4, #8]
   d56a2:	b11b      	cbz	r3, d56ac <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d56a4:	2203      	movs	r2, #3
   d56a6:	4621      	mov	r1, r4
   d56a8:	4620      	mov	r0, r4
   d56aa:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d56ac:	4620      	mov	r0, r4
   d56ae:	2110      	movs	r1, #16
}
   d56b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d56b4:	f000 b9d1 	b.w	d5a5a <_ZdlPvj>

000d56b8 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d56b8:	4770      	bx	lr

000d56ba <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d56ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d56bc:	4606      	mov	r6, r0
   d56be:	4615      	mov	r5, r2
   d56c0:	460c      	mov	r4, r1
   d56c2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d56c4:	42bc      	cmp	r4, r7
   d56c6:	d006      	beq.n	d56d6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d56c8:	6833      	ldr	r3, [r6, #0]
   d56ca:	f814 1b01 	ldrb.w	r1, [r4], #1
   d56ce:	689b      	ldr	r3, [r3, #8]
   d56d0:	4630      	mov	r0, r6
   d56d2:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d56d4:	e7f6      	b.n	d56c4 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d56d6:	4628      	mov	r0, r5
   d56d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d56da <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d56da:	7c00      	ldrb	r0, [r0, #16]
   d56dc:	2200      	movs	r2, #0
   d56de:	f7fe bfb9 	b.w	d4654 <hal_i2c_write>

000d56e2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d56e2:	7c00      	ldrb	r0, [r0, #16]
   d56e4:	2100      	movs	r1, #0
   d56e6:	f7fe bfbd 	b.w	d4664 <hal_i2c_available>

000d56ea <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d56ea:	7c00      	ldrb	r0, [r0, #16]
   d56ec:	2100      	movs	r1, #0
   d56ee:	f7fe bfc1 	b.w	d4674 <hal_i2c_read>

000d56f2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d56f2:	7c00      	ldrb	r0, [r0, #16]
   d56f4:	2100      	movs	r1, #0
   d56f6:	f7fe bfc5 	b.w	d4684 <hal_i2c_peek>

000d56fa <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d56fa:	7c00      	ldrb	r0, [r0, #16]
   d56fc:	2100      	movs	r1, #0
   d56fe:	f7fe bfc9 	b.w	d4694 <hal_i2c_flush>

000d5702 <_ZN7TwoWireD0Ev>:
   d5702:	b510      	push	{r4, lr}
   d5704:	2114      	movs	r1, #20
   d5706:	4604      	mov	r4, r0
   d5708:	f000 f9a7 	bl	d5a5a <_ZdlPvj>
   d570c:	4620      	mov	r0, r4
   d570e:	bd10      	pop	{r4, pc}

000d5710 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d5710:	b510      	push	{r4, lr}
   d5712:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5716:	4604      	mov	r4, r0
   d5718:	4608      	mov	r0, r1
   d571a:	2100      	movs	r1, #0
   d571c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5720:	4b03      	ldr	r3, [pc, #12]	; (d5730 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d5722:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d5724:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d5726:	4611      	mov	r1, r2
   d5728:	f7fe ffc4 	bl	d46b4 <hal_i2c_init>
}
   d572c:	4620      	mov	r0, r4
   d572e:	bd10      	pop	{r4, pc}
   d5730:	000d5e20 	.word	0x000d5e20

000d5734 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d5734:	2200      	movs	r2, #0
   d5736:	6840      	ldr	r0, [r0, #4]
   d5738:	4611      	mov	r1, r2
   d573a:	f7ff b847 	b.w	d47cc <network_ready>

000d573e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d573e:	2200      	movs	r2, #0
   d5740:	6840      	ldr	r0, [r0, #4]
   d5742:	4611      	mov	r1, r2
   d5744:	f7ff b862 	b.w	d480c <network_listening>

000d5748 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d5748:	2200      	movs	r2, #0
   d574a:	6840      	ldr	r0, [r0, #4]
   d574c:	4611      	mov	r1, r2
   d574e:	f7ff b86d 	b.w	d482c <network_get_listen_timeout>

000d5752 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5752:	6840      	ldr	r0, [r0, #4]
   d5754:	2200      	movs	r2, #0
   d5756:	f7ff b861 	b.w	d481c <network_set_listen_timeout>

000d575a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d575a:	6840      	ldr	r0, [r0, #4]
   d575c:	2200      	movs	r2, #0
   d575e:	f081 0101 	eor.w	r1, r1, #1
   d5762:	f7ff b84b 	b.w	d47fc <network_listen>

000d5766 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d5766:	2300      	movs	r3, #0
   d5768:	6840      	ldr	r0, [r0, #4]
   d576a:	461a      	mov	r2, r3
   d576c:	4619      	mov	r1, r3
   d576e:	f7ff b83d 	b.w	d47ec <network_off>

000d5772 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d5772:	2300      	movs	r3, #0
   d5774:	6840      	ldr	r0, [r0, #4]
   d5776:	461a      	mov	r2, r3
   d5778:	4619      	mov	r1, r3
   d577a:	f7ff b82f 	b.w	d47dc <network_on>

000d577e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d577e:	2200      	movs	r2, #0
   d5780:	6840      	ldr	r0, [r0, #4]
   d5782:	4611      	mov	r1, r2
   d5784:	f7ff b812 	b.w	d47ac <network_connecting>

000d5788 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5788:	6840      	ldr	r0, [r0, #4]
   d578a:	2200      	movs	r2, #0
   d578c:	2102      	movs	r1, #2
   d578e:	f7ff b815 	b.w	d47bc <network_disconnect>

000d5792 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d5792:	2300      	movs	r3, #0
   d5794:	6840      	ldr	r0, [r0, #4]
   d5796:	461a      	mov	r2, r3
   d5798:	f7ff b800 	b.w	d479c <network_connect>

000d579c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d579c:	4b02      	ldr	r3, [pc, #8]	; (d57a8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d579e:	2204      	movs	r2, #4
   d57a0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d57a2:	4a02      	ldr	r2, [pc, #8]	; (d57ac <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d57a4:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d57a6:	4770      	bx	lr
   d57a8:	2003e7b4 	.word	0x2003e7b4
   d57ac:	000d5e48 	.word	0x000d5e48

000d57b0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d57b0:	2300      	movs	r3, #0
   d57b2:	6840      	ldr	r0, [r0, #4]
   d57b4:	461a      	mov	r2, r3
   d57b6:	f7fe bff1 	b.w	d479c <network_connect>

000d57ba <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d57ba:	6840      	ldr	r0, [r0, #4]
   d57bc:	2200      	movs	r2, #0
   d57be:	2102      	movs	r1, #2
   d57c0:	f7fe bffc 	b.w	d47bc <network_disconnect>

000d57c4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d57c4:	2200      	movs	r2, #0
   d57c6:	6840      	ldr	r0, [r0, #4]
   d57c8:	4611      	mov	r1, r2
   d57ca:	f7fe bfef 	b.w	d47ac <network_connecting>

000d57ce <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d57ce:	2200      	movs	r2, #0
   d57d0:	6840      	ldr	r0, [r0, #4]
   d57d2:	4611      	mov	r1, r2
   d57d4:	f7fe bffa 	b.w	d47cc <network_ready>

000d57d8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d57d8:	2300      	movs	r3, #0
   d57da:	6840      	ldr	r0, [r0, #4]
   d57dc:	461a      	mov	r2, r3
   d57de:	4619      	mov	r1, r3
   d57e0:	f7fe bffc 	b.w	d47dc <network_on>

000d57e4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d57e4:	2300      	movs	r3, #0
   d57e6:	6840      	ldr	r0, [r0, #4]
   d57e8:	461a      	mov	r2, r3
   d57ea:	4619      	mov	r1, r3
   d57ec:	f7fe bffe 	b.w	d47ec <network_off>

000d57f0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d57f0:	6840      	ldr	r0, [r0, #4]
   d57f2:	2200      	movs	r2, #0
   d57f4:	f081 0101 	eor.w	r1, r1, #1
   d57f8:	f7ff b800 	b.w	d47fc <network_listen>

000d57fc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d57fc:	6840      	ldr	r0, [r0, #4]
   d57fe:	2200      	movs	r2, #0
   d5800:	f7ff b80c 	b.w	d481c <network_set_listen_timeout>

000d5804 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5804:	2200      	movs	r2, #0
   d5806:	6840      	ldr	r0, [r0, #4]
   d5808:	4611      	mov	r1, r2
   d580a:	f7ff b80f 	b.w	d482c <network_get_listen_timeout>

000d580e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d580e:	2200      	movs	r2, #0
   d5810:	6840      	ldr	r0, [r0, #4]
   d5812:	4611      	mov	r1, r2
   d5814:	f7fe bffa 	b.w	d480c <network_listening>

000d5818 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5818:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d581c:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d581e:	b095      	sub	sp, #84	; 0x54
   d5820:	4616      	mov	r6, r2
   d5822:	460d      	mov	r5, r1
   d5824:	4607      	mov	r7, r0
    IPAddress addr;
   d5826:	f7ff fd9b 	bl	d5360 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d582a:	4621      	mov	r1, r4
   d582c:	2218      	movs	r2, #24
   d582e:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d5830:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5832:	f000 f939 	bl	d5aa8 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5836:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d5838:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d583c:	4621      	mov	r1, r4
   d583e:	466b      	mov	r3, sp
   d5840:	aa0c      	add	r2, sp, #48	; 0x30
   d5842:	4630      	mov	r0, r6
   d5844:	f7fe fe36 	bl	d44b4 <netdb_getaddrinfo>
    if (!r) {
   d5848:	4604      	mov	r4, r0
   d584a:	2800      	cmp	r0, #0
   d584c:	d146      	bne.n	d58dc <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d584e:	4602      	mov	r2, r0
   d5850:	2101      	movs	r1, #1
   d5852:	6868      	ldr	r0, [r5, #4]
   d5854:	f7fe ffba 	bl	d47cc <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5858:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d585a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d585c:	4622      	mov	r2, r4
   d585e:	6868      	ldr	r0, [r5, #4]
   d5860:	f7fe ffb4 	bl	d47cc <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5864:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5866:	4681      	mov	r9, r0
        bool ok = false;
   d5868:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d586a:	2e00      	cmp	r6, #0
   d586c:	d036      	beq.n	d58dc <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d586e:	2900      	cmp	r1, #0
   d5870:	d134      	bne.n	d58dc <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5872:	6873      	ldr	r3, [r6, #4]
   d5874:	2b02      	cmp	r3, #2
   d5876:	d003      	beq.n	d5880 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d5878:	2b0a      	cmp	r3, #10
   d587a:	d00b      	beq.n	d5894 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d587c:	69f6      	ldr	r6, [r6, #28]
   d587e:	e7f4      	b.n	d586a <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d5880:	f1b8 0f00 	cmp.w	r8, #0
   d5884:	d004      	beq.n	d5890 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5886:	6971      	ldr	r1, [r6, #20]
   d5888:	4638      	mov	r0, r7
   d588a:	3104      	adds	r1, #4
   d588c:	f7ff fd95 	bl	d53ba <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d5890:	4641      	mov	r1, r8
   d5892:	e7f3      	b.n	d587c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5894:	f1b9 0f00 	cmp.w	r9, #0
   d5898:	d101      	bne.n	d589e <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d589a:	4649      	mov	r1, r9
   d589c:	e7ee      	b.n	d587c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d589e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d58a0:	2210      	movs	r2, #16
   d58a2:	a801      	add	r0, sp, #4
   d58a4:	f000 f900 	bl	d5aa8 <memset>
                    a.v = 6;
   d58a8:	2306      	movs	r3, #6
   d58aa:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d58ae:	ad01      	add	r5, sp, #4
   d58b0:	f104 0308 	add.w	r3, r4, #8
   d58b4:	3418      	adds	r4, #24
   d58b6:	6818      	ldr	r0, [r3, #0]
   d58b8:	6859      	ldr	r1, [r3, #4]
   d58ba:	462a      	mov	r2, r5
   d58bc:	c203      	stmia	r2!, {r0, r1}
   d58be:	3308      	adds	r3, #8
   d58c0:	42a3      	cmp	r3, r4
   d58c2:	4615      	mov	r5, r2
   d58c4:	d1f7      	bne.n	d58b6 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d58c6:	a901      	add	r1, sp, #4
   d58c8:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d58ca:	ad07      	add	r5, sp, #28
   d58cc:	f7ff fd56 	bl	d537c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d58d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d58d2:	1d3c      	adds	r4, r7, #4
   d58d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d58d6:	682b      	ldr	r3, [r5, #0]
   d58d8:	7023      	strb	r3, [r4, #0]
   d58da:	e7de      	b.n	d589a <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d58dc:	9800      	ldr	r0, [sp, #0]
   d58de:	f7fe fde1 	bl	d44a4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d58e2:	4638      	mov	r0, r7
   d58e4:	b015      	add	sp, #84	; 0x54
   d58e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d58ec <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d58ec:	4b02      	ldr	r3, [pc, #8]	; (d58f8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d58ee:	4a03      	ldr	r2, [pc, #12]	; (d58fc <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d58f0:	601a      	str	r2, [r3, #0]
   d58f2:	2200      	movs	r2, #0
   d58f4:	605a      	str	r2, [r3, #4]

} // spark
   d58f6:	4770      	bx	lr
   d58f8:	2003e7bc 	.word	0x2003e7bc
   d58fc:	000d5e7c 	.word	0x000d5e7c

000d5900 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d5900:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d5902:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d5904:	d902      	bls.n	d590c <pinAvailable+0xc>
    return false;
   d5906:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d5908:	b002      	add	sp, #8
   d590a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d590c:	f1a0 030b 	sub.w	r3, r0, #11
   d5910:	2b02      	cmp	r3, #2
   d5912:	d81a      	bhi.n	d594a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d5914:	4c17      	ldr	r4, [pc, #92]	; (d5974 <pinAvailable+0x74>)
   d5916:	7821      	ldrb	r1, [r4, #0]
   d5918:	f3bf 8f5b 	dmb	ish
   d591c:	f011 0101 	ands.w	r1, r1, #1
   d5920:	d10b      	bne.n	d593a <pinAvailable+0x3a>
   d5922:	4620      	mov	r0, r4
   d5924:	9101      	str	r1, [sp, #4]
   d5926:	f7fe fbba 	bl	d409e <__cxa_guard_acquire>
   d592a:	9901      	ldr	r1, [sp, #4]
   d592c:	b128      	cbz	r0, d593a <pinAvailable+0x3a>
   d592e:	4812      	ldr	r0, [pc, #72]	; (d5978 <pinAvailable+0x78>)
   d5930:	f7ff f81a 	bl	d4968 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d5934:	4620      	mov	r0, r4
   d5936:	f7fe fbb7 	bl	d40a8 <__cxa_guard_release>
   d593a:	4b0f      	ldr	r3, [pc, #60]	; (d5978 <pinAvailable+0x78>)
   d593c:	7818      	ldrb	r0, [r3, #0]
   d593e:	f7fe fec9 	bl	d46d4 <hal_spi_is_enabled>
   d5942:	2800      	cmp	r0, #0
   d5944:	d1df      	bne.n	d5906 <pinAvailable+0x6>
  return true; // 'pin' is available
   d5946:	2001      	movs	r0, #1
   d5948:	e7de      	b.n	d5908 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d594a:	2801      	cmp	r0, #1
   d594c:	d809      	bhi.n	d5962 <pinAvailable+0x62>
   d594e:	f000 f857 	bl	d5a00 <_Z19__fetch_global_Wirev>
   d5952:	2100      	movs	r1, #0
   d5954:	7c00      	ldrb	r0, [r0, #16]
   d5956:	f7fe fea5 	bl	d46a4 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d595a:	f080 0001 	eor.w	r0, r0, #1
   d595e:	b2c0      	uxtb	r0, r0
   d5960:	e7d2      	b.n	d5908 <pinAvailable+0x8>
   d5962:	3809      	subs	r0, #9
   d5964:	2801      	cmp	r0, #1
   d5966:	d8ee      	bhi.n	d5946 <pinAvailable+0x46>
   d5968:	f7ff fe4e 	bl	d5608 <_Z22__fetch_global_Serial1v>
   d596c:	7c00      	ldrb	r0, [r0, #16]
   d596e:	f7fe fe61 	bl	d4634 <hal_usart_is_enabled>
   d5972:	e7f2      	b.n	d595a <pinAvailable+0x5a>
   d5974:	2003e7c4 	.word	0x2003e7c4
   d5978:	2003e7c8 	.word	0x2003e7c8

000d597c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d597c:	2823      	cmp	r0, #35	; 0x23
{
   d597e:	b538      	push	{r3, r4, r5, lr}
   d5980:	4604      	mov	r4, r0
   d5982:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5984:	d80a      	bhi.n	d599c <pinMode+0x20>
   d5986:	29ff      	cmp	r1, #255	; 0xff
   d5988:	d008      	beq.n	d599c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d598a:	f7ff ffb9 	bl	d5900 <pinAvailable>
   d598e:	b128      	cbz	r0, d599c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d5990:	4629      	mov	r1, r5
   d5992:	4620      	mov	r0, r4
}
   d5994:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d5998:	f7fe bd94 	b.w	d44c4 <HAL_Pin_Mode>
}
   d599c:	bd38      	pop	{r3, r4, r5, pc}

000d599e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d599e:	b538      	push	{r3, r4, r5, lr}
   d59a0:	4604      	mov	r4, r0
   d59a2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d59a4:	f7fe fd96 	bl	d44d4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d59a8:	28ff      	cmp	r0, #255	; 0xff
   d59aa:	d010      	beq.n	d59ce <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d59ac:	2806      	cmp	r0, #6
   d59ae:	d804      	bhi.n	d59ba <digitalWrite+0x1c>
   d59b0:	234d      	movs	r3, #77	; 0x4d
   d59b2:	fa23 f000 	lsr.w	r0, r3, r0
   d59b6:	07c3      	lsls	r3, r0, #31
   d59b8:	d409      	bmi.n	d59ce <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d59ba:	4620      	mov	r0, r4
   d59bc:	f7ff ffa0 	bl	d5900 <pinAvailable>
   d59c0:	b128      	cbz	r0, d59ce <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d59c2:	4629      	mov	r1, r5
   d59c4:	4620      	mov	r0, r4
}
   d59c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d59ca:	f7fe bd8b 	b.w	d44e4 <HAL_GPIO_Write>
}
   d59ce:	bd38      	pop	{r3, r4, r5, pc}

000d59d0 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d59d0:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d59d2:	2300      	movs	r3, #0
   d59d4:	2520      	movs	r5, #32
   d59d6:	8043      	strh	r3, [r0, #2]
   d59d8:	2314      	movs	r3, #20
{
   d59da:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d59dc:	8003      	strh	r3, [r0, #0]
   d59de:	6085      	str	r5, [r0, #8]
   d59e0:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d59e2:	4906      	ldr	r1, [pc, #24]	; (d59fc <_Z17acquireWireBufferv+0x2c>)
   d59e4:	4628      	mov	r0, r5
   d59e6:	f000 f83a 	bl	d5a5e <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d59ea:	4904      	ldr	r1, [pc, #16]	; (d59fc <_Z17acquireWireBufferv+0x2c>)
	};
   d59ec:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d59ee:	4628      	mov	r0, r5
   d59f0:	f000 f835 	bl	d5a5e <_ZnajRKSt9nothrow_t>
	};
   d59f4:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d59f6:	4620      	mov	r0, r4
   d59f8:	bd38      	pop	{r3, r4, r5, pc}
   d59fa:	bf00      	nop
   d59fc:	000d5ea8 	.word	0x000d5ea8

000d5a00 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5a00:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5a02:	4d0f      	ldr	r5, [pc, #60]	; (d5a40 <_Z19__fetch_global_Wirev+0x40>)
   d5a04:	7829      	ldrb	r1, [r5, #0]
   d5a06:	f3bf 8f5b 	dmb	ish
   d5a0a:	f011 0401 	ands.w	r4, r1, #1
{
   d5a0e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5a10:	d113      	bne.n	d5a3a <_Z19__fetch_global_Wirev+0x3a>
   d5a12:	4628      	mov	r0, r5
   d5a14:	f7fe fb43 	bl	d409e <__cxa_guard_acquire>
   d5a18:	b178      	cbz	r0, d5a3a <_Z19__fetch_global_Wirev+0x3a>
   d5a1a:	a801      	add	r0, sp, #4
   d5a1c:	f7ff ffd8 	bl	d59d0 <_Z17acquireWireBufferv>
   d5a20:	aa01      	add	r2, sp, #4
   d5a22:	4621      	mov	r1, r4
   d5a24:	4807      	ldr	r0, [pc, #28]	; (d5a44 <_Z19__fetch_global_Wirev+0x44>)
   d5a26:	f7ff fe73 	bl	d5710 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d5a2a:	4628      	mov	r0, r5
   d5a2c:	f7fe fb3c 	bl	d40a8 <__cxa_guard_release>
   d5a30:	4a05      	ldr	r2, [pc, #20]	; (d5a48 <_Z19__fetch_global_Wirev+0x48>)
   d5a32:	4906      	ldr	r1, [pc, #24]	; (d5a4c <_Z19__fetch_global_Wirev+0x4c>)
   d5a34:	4803      	ldr	r0, [pc, #12]	; (d5a44 <_Z19__fetch_global_Wirev+0x44>)
   d5a36:	f000 f80b 	bl	d5a50 <__aeabi_atexit>
	return wire;
}
   d5a3a:	4802      	ldr	r0, [pc, #8]	; (d5a44 <_Z19__fetch_global_Wirev+0x44>)
   d5a3c:	b007      	add	sp, #28
   d5a3e:	bd30      	pop	{r4, r5, pc}
   d5a40:	2003e7d8 	.word	0x2003e7d8
   d5a44:	2003e7dc 	.word	0x2003e7dc
   d5a48:	2003e688 	.word	0x2003e688
   d5a4c:	000d56b9 	.word	0x000d56b9

000d5a50 <__aeabi_atexit>:
   d5a50:	460b      	mov	r3, r1
   d5a52:	4601      	mov	r1, r0
   d5a54:	4618      	mov	r0, r3
   d5a56:	f000 b80b 	b.w	d5a70 <__cxa_atexit>

000d5a5a <_ZdlPvj>:
   d5a5a:	f7fe bb1e 	b.w	d409a <_ZdlPv>

000d5a5e <_ZnajRKSt9nothrow_t>:
   d5a5e:	f7fe bb1a 	b.w	d4096 <_Znaj>

000d5a62 <_ZSt25__throw_bad_function_callv>:
   d5a62:	b508      	push	{r3, lr}
   d5a64:	f7fe ff2a 	bl	d48bc <abort>

000d5a68 <atoi>:
   d5a68:	220a      	movs	r2, #10
   d5a6a:	2100      	movs	r1, #0
   d5a6c:	f000 b8fa 	b.w	d5c64 <strtol>

000d5a70 <__cxa_atexit>:
   d5a70:	b510      	push	{r4, lr}
   d5a72:	4c05      	ldr	r4, [pc, #20]	; (d5a88 <__cxa_atexit+0x18>)
   d5a74:	4613      	mov	r3, r2
   d5a76:	b12c      	cbz	r4, d5a84 <__cxa_atexit+0x14>
   d5a78:	460a      	mov	r2, r1
   d5a7a:	4601      	mov	r1, r0
   d5a7c:	2002      	movs	r0, #2
   d5a7e:	f3af 8000 	nop.w
   d5a82:	bd10      	pop	{r4, pc}
   d5a84:	4620      	mov	r0, r4
   d5a86:	e7fc      	b.n	d5a82 <__cxa_atexit+0x12>
   d5a88:	00000000 	.word	0x00000000

000d5a8c <memcpy>:
   d5a8c:	440a      	add	r2, r1
   d5a8e:	4291      	cmp	r1, r2
   d5a90:	f100 33ff 	add.w	r3, r0, #4294967295
   d5a94:	d100      	bne.n	d5a98 <memcpy+0xc>
   d5a96:	4770      	bx	lr
   d5a98:	b510      	push	{r4, lr}
   d5a9a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d5a9e:	f803 4f01 	strb.w	r4, [r3, #1]!
   d5aa2:	4291      	cmp	r1, r2
   d5aa4:	d1f9      	bne.n	d5a9a <memcpy+0xe>
   d5aa6:	bd10      	pop	{r4, pc}

000d5aa8 <memset>:
   d5aa8:	4402      	add	r2, r0
   d5aaa:	4603      	mov	r3, r0
   d5aac:	4293      	cmp	r3, r2
   d5aae:	d100      	bne.n	d5ab2 <memset+0xa>
   d5ab0:	4770      	bx	lr
   d5ab2:	f803 1b01 	strb.w	r1, [r3], #1
   d5ab6:	e7f9      	b.n	d5aac <memset+0x4>

000d5ab8 <srand>:
   d5ab8:	b538      	push	{r3, r4, r5, lr}
   d5aba:	4b0d      	ldr	r3, [pc, #52]	; (d5af0 <srand+0x38>)
   d5abc:	681d      	ldr	r5, [r3, #0]
   d5abe:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d5ac0:	4604      	mov	r4, r0
   d5ac2:	b97b      	cbnz	r3, d5ae4 <srand+0x2c>
   d5ac4:	2018      	movs	r0, #24
   d5ac6:	f7fe fee1 	bl	d488c <malloc>
   d5aca:	4a0a      	ldr	r2, [pc, #40]	; (d5af4 <srand+0x3c>)
   d5acc:	4b0a      	ldr	r3, [pc, #40]	; (d5af8 <srand+0x40>)
   d5ace:	63a8      	str	r0, [r5, #56]	; 0x38
   d5ad0:	e9c0 2300 	strd	r2, r3, [r0]
   d5ad4:	4b09      	ldr	r3, [pc, #36]	; (d5afc <srand+0x44>)
   d5ad6:	6083      	str	r3, [r0, #8]
   d5ad8:	230b      	movs	r3, #11
   d5ada:	8183      	strh	r3, [r0, #12]
   d5adc:	2201      	movs	r2, #1
   d5ade:	2300      	movs	r3, #0
   d5ae0:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d5ae4:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d5ae6:	2200      	movs	r2, #0
   d5ae8:	611c      	str	r4, [r3, #16]
   d5aea:	615a      	str	r2, [r3, #20]
   d5aec:	bd38      	pop	{r3, r4, r5, pc}
   d5aee:	bf00      	nop
   d5af0:	2003e624 	.word	0x2003e624
   d5af4:	abcd330e 	.word	0xabcd330e
   d5af8:	e66d1234 	.word	0xe66d1234
   d5afc:	0005deec 	.word	0x0005deec

000d5b00 <strcmp>:
   d5b00:	f810 2b01 	ldrb.w	r2, [r0], #1
   d5b04:	f811 3b01 	ldrb.w	r3, [r1], #1
   d5b08:	2a01      	cmp	r2, #1
   d5b0a:	bf28      	it	cs
   d5b0c:	429a      	cmpcs	r2, r3
   d5b0e:	d0f7      	beq.n	d5b00 <strcmp>
   d5b10:	1ad0      	subs	r0, r2, r3
   d5b12:	4770      	bx	lr

000d5b14 <strcpy>:
   d5b14:	4603      	mov	r3, r0
   d5b16:	f811 2b01 	ldrb.w	r2, [r1], #1
   d5b1a:	f803 2b01 	strb.w	r2, [r3], #1
   d5b1e:	2a00      	cmp	r2, #0
   d5b20:	d1f9      	bne.n	d5b16 <strcpy+0x2>
   d5b22:	4770      	bx	lr

000d5b24 <strdup>:
   d5b24:	4b02      	ldr	r3, [pc, #8]	; (d5b30 <strdup+0xc>)
   d5b26:	4601      	mov	r1, r0
   d5b28:	6818      	ldr	r0, [r3, #0]
   d5b2a:	f000 b803 	b.w	d5b34 <_strdup_r>
   d5b2e:	bf00      	nop
   d5b30:	2003e624 	.word	0x2003e624

000d5b34 <_strdup_r>:
   d5b34:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5b36:	4604      	mov	r4, r0
   d5b38:	4608      	mov	r0, r1
   d5b3a:	460d      	mov	r5, r1
   d5b3c:	f000 f80f 	bl	d5b5e <strlen>
   d5b40:	1c42      	adds	r2, r0, #1
   d5b42:	4611      	mov	r1, r2
   d5b44:	4620      	mov	r0, r4
   d5b46:	9201      	str	r2, [sp, #4]
   d5b48:	f7fe fec0 	bl	d48cc <_malloc_r>
   d5b4c:	4604      	mov	r4, r0
   d5b4e:	b118      	cbz	r0, d5b58 <_strdup_r+0x24>
   d5b50:	9a01      	ldr	r2, [sp, #4]
   d5b52:	4629      	mov	r1, r5
   d5b54:	f7ff ff9a 	bl	d5a8c <memcpy>
   d5b58:	4620      	mov	r0, r4
   d5b5a:	b003      	add	sp, #12
   d5b5c:	bd30      	pop	{r4, r5, pc}

000d5b5e <strlen>:
   d5b5e:	4603      	mov	r3, r0
   d5b60:	f813 2b01 	ldrb.w	r2, [r3], #1
   d5b64:	2a00      	cmp	r2, #0
   d5b66:	d1fb      	bne.n	d5b60 <strlen+0x2>
   d5b68:	1a18      	subs	r0, r3, r0
   d5b6a:	3801      	subs	r0, #1
   d5b6c:	4770      	bx	lr
	...

000d5b70 <_strtol_l.isra.0>:
   d5b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5b74:	4e3a      	ldr	r6, [pc, #232]	; (d5c60 <_strtol_l.isra.0+0xf0>)
   d5b76:	4686      	mov	lr, r0
   d5b78:	468c      	mov	ip, r1
   d5b7a:	4660      	mov	r0, ip
   d5b7c:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d5b80:	5da5      	ldrb	r5, [r4, r6]
   d5b82:	f015 0508 	ands.w	r5, r5, #8
   d5b86:	d1f8      	bne.n	d5b7a <_strtol_l.isra.0+0xa>
   d5b88:	2c2d      	cmp	r4, #45	; 0x2d
   d5b8a:	d133      	bne.n	d5bf4 <_strtol_l.isra.0+0x84>
   d5b8c:	f89c 4000 	ldrb.w	r4, [ip]
   d5b90:	f04f 0801 	mov.w	r8, #1
   d5b94:	f100 0c02 	add.w	ip, r0, #2
   d5b98:	2b00      	cmp	r3, #0
   d5b9a:	d05c      	beq.n	d5c56 <_strtol_l.isra.0+0xe6>
   d5b9c:	2b10      	cmp	r3, #16
   d5b9e:	d10c      	bne.n	d5bba <_strtol_l.isra.0+0x4a>
   d5ba0:	2c30      	cmp	r4, #48	; 0x30
   d5ba2:	d10a      	bne.n	d5bba <_strtol_l.isra.0+0x4a>
   d5ba4:	f89c 0000 	ldrb.w	r0, [ip]
   d5ba8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d5bac:	2858      	cmp	r0, #88	; 0x58
   d5bae:	d14d      	bne.n	d5c4c <_strtol_l.isra.0+0xdc>
   d5bb0:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d5bb4:	2310      	movs	r3, #16
   d5bb6:	f10c 0c02 	add.w	ip, ip, #2
   d5bba:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   d5bbe:	3f01      	subs	r7, #1
   d5bc0:	2600      	movs	r6, #0
   d5bc2:	fbb7 f9f3 	udiv	r9, r7, r3
   d5bc6:	4630      	mov	r0, r6
   d5bc8:	fb03 7a19 	mls	sl, r3, r9, r7
   d5bcc:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   d5bd0:	2d09      	cmp	r5, #9
   d5bd2:	d818      	bhi.n	d5c06 <_strtol_l.isra.0+0x96>
   d5bd4:	462c      	mov	r4, r5
   d5bd6:	42a3      	cmp	r3, r4
   d5bd8:	dd24      	ble.n	d5c24 <_strtol_l.isra.0+0xb4>
   d5bda:	1c75      	adds	r5, r6, #1
   d5bdc:	d007      	beq.n	d5bee <_strtol_l.isra.0+0x7e>
   d5bde:	4581      	cmp	r9, r0
   d5be0:	d31d      	bcc.n	d5c1e <_strtol_l.isra.0+0xae>
   d5be2:	d101      	bne.n	d5be8 <_strtol_l.isra.0+0x78>
   d5be4:	45a2      	cmp	sl, r4
   d5be6:	db1a      	blt.n	d5c1e <_strtol_l.isra.0+0xae>
   d5be8:	fb00 4003 	mla	r0, r0, r3, r4
   d5bec:	2601      	movs	r6, #1
   d5bee:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d5bf2:	e7eb      	b.n	d5bcc <_strtol_l.isra.0+0x5c>
   d5bf4:	2c2b      	cmp	r4, #43	; 0x2b
   d5bf6:	bf08      	it	eq
   d5bf8:	f89c 4000 	ldrbeq.w	r4, [ip]
   d5bfc:	46a8      	mov	r8, r5
   d5bfe:	bf08      	it	eq
   d5c00:	f100 0c02 	addeq.w	ip, r0, #2
   d5c04:	e7c8      	b.n	d5b98 <_strtol_l.isra.0+0x28>
   d5c06:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   d5c0a:	2d19      	cmp	r5, #25
   d5c0c:	d801      	bhi.n	d5c12 <_strtol_l.isra.0+0xa2>
   d5c0e:	3c37      	subs	r4, #55	; 0x37
   d5c10:	e7e1      	b.n	d5bd6 <_strtol_l.isra.0+0x66>
   d5c12:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   d5c16:	2d19      	cmp	r5, #25
   d5c18:	d804      	bhi.n	d5c24 <_strtol_l.isra.0+0xb4>
   d5c1a:	3c57      	subs	r4, #87	; 0x57
   d5c1c:	e7db      	b.n	d5bd6 <_strtol_l.isra.0+0x66>
   d5c1e:	f04f 36ff 	mov.w	r6, #4294967295
   d5c22:	e7e4      	b.n	d5bee <_strtol_l.isra.0+0x7e>
   d5c24:	1c73      	adds	r3, r6, #1
   d5c26:	d106      	bne.n	d5c36 <_strtol_l.isra.0+0xc6>
   d5c28:	2322      	movs	r3, #34	; 0x22
   d5c2a:	f8ce 3000 	str.w	r3, [lr]
   d5c2e:	4638      	mov	r0, r7
   d5c30:	b942      	cbnz	r2, d5c44 <_strtol_l.isra.0+0xd4>
   d5c32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d5c36:	f1b8 0f00 	cmp.w	r8, #0
   d5c3a:	d000      	beq.n	d5c3e <_strtol_l.isra.0+0xce>
   d5c3c:	4240      	negs	r0, r0
   d5c3e:	2a00      	cmp	r2, #0
   d5c40:	d0f7      	beq.n	d5c32 <_strtol_l.isra.0+0xc2>
   d5c42:	b10e      	cbz	r6, d5c48 <_strtol_l.isra.0+0xd8>
   d5c44:	f10c 31ff 	add.w	r1, ip, #4294967295
   d5c48:	6011      	str	r1, [r2, #0]
   d5c4a:	e7f2      	b.n	d5c32 <_strtol_l.isra.0+0xc2>
   d5c4c:	2430      	movs	r4, #48	; 0x30
   d5c4e:	2b00      	cmp	r3, #0
   d5c50:	d1b3      	bne.n	d5bba <_strtol_l.isra.0+0x4a>
   d5c52:	2308      	movs	r3, #8
   d5c54:	e7b1      	b.n	d5bba <_strtol_l.isra.0+0x4a>
   d5c56:	2c30      	cmp	r4, #48	; 0x30
   d5c58:	d0a4      	beq.n	d5ba4 <_strtol_l.isra.0+0x34>
   d5c5a:	230a      	movs	r3, #10
   d5c5c:	e7ad      	b.n	d5bba <_strtol_l.isra.0+0x4a>
   d5c5e:	bf00      	nop
   d5c60:	000d5eaa 	.word	0x000d5eaa

000d5c64 <strtol>:
   d5c64:	4613      	mov	r3, r2
   d5c66:	460a      	mov	r2, r1
   d5c68:	4601      	mov	r1, r0
   d5c6a:	4802      	ldr	r0, [pc, #8]	; (d5c74 <strtol+0x10>)
   d5c6c:	6800      	ldr	r0, [r0, #0]
   d5c6e:	f7ff bf7f 	b.w	d5b70 <_strtol_l.isra.0>
   d5c72:	bf00      	nop
   d5c74:	2003e624 	.word	0x2003e624

000d5c78 <dynalib_user>:
   d5c78:	000d401d 000d4059 000d4081 000d4085     .@..Y@...@...@..
   d5c88:	00000000 72617473 69540074 2072656d     ....start.Timer 
   d5c98:	676e654c 28206874 65746e69 20726567     Length (integer 
   d5ca8:	6d206e69 77002973 676e6f72 6d6f632d     in ms).wrong-com
   d5cb8:	646e616d 72697300 612d6e65 65726464     mand.siren-addre
   d5cc8:	64657373 63736500 74616c61 69732d65     ssed.escalate-si
   d5cd8:	006e6572 61637365 6574616c 616c6100     ren.escalate.ala
   d5ce8:	732d6d72 646e756f 70006465 7469736f     rm-sounded.posit
   d5cf8:	2d657669 65746e69 2d726567 61656c70     ive-integer-plea
   d5d08:	74006573 72656d69 6e656c2d 2d687467     se.timer-length-
   d5d18:	61647075 00646574                       updated.

000d5d20 <_ZTV5Timer>:
	...
   d5d28:	000d4219 000d4261 000d4155              .B..aB..UA..

000d5d34 <_ZTVN5spark13EthernetClassE>:
	...
   d5d3c:	000d494b 000d4941 000d4937 000d492d     KI..AI..7I..-I..
   d5d4c:	000d4921 000d4915 000d4909 000d4901     !I...I...I...I..
   d5d5c:	000d48f7 000d48ed 000d5819 00707061     .H...H...X..app.
   d5d6c:	252d5925 64252d6d 3a482554 253a4d25     %Y-%m-%dT%H:%M:%
   d5d7c:	007a2553 74637361 00656d69              S%z.asctime.

000d5d88 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d5d90:	000d4d5d 000d4d63 000d4da1 000d4d71     ]M..cM...M..qM..
   d5da0:	000d4d5f                                _M..

000d5da4 <_ZTV9IPAddress>:
	...
   d5dac:	000d52fd 000d52ed 000d52ef              .R...R...R..

000d5db8 <_ZTV9USBSerial>:
	...
   d5dc0:	000d53d3 000d543b 000d5411 000d4b35     .S..;T...T..5K..
   d5dd0:	000d5403 000d53d5 000d53e5 000d5435     .T...S...S..5T..
   d5de0:	000d53f5 000d53cf                       .S...S..

000d5de8 <_ZTV11USARTSerial>:
	...
   d5df0:	000d5561 000d55cd 000d55a5 000d4b35     aU...U...U..5K..
   d5e00:	000d5575 000d5591 000d5583 000d559f     uU...U...U...U..
   d5e10:	000d5563 000d5567                       cU..gU..

000d5e18 <_ZTV7TwoWire>:
	...
   d5e20:	000d56b9 000d5703 000d56db 000d56bb     .V...W...V...V..
   d5e30:	000d56e3 000d56eb 000d56f3 000d56fb     .V...V...V...V..

000d5e40 <_ZTVN5spark9WiFiClassE>:
	...
   d5e48:	000d5793 000d5789 000d577f 000d5735     .W...W...W..5W..
   d5e58:	000d5773 000d5767 000d575b 000d5753     sW..gW..[W..SW..
   d5e68:	000d5749 000d573f 000d5819              IW..?W...X..

000d5e74 <_ZTVN5spark12NetworkClassE>:
	...
   d5e7c:	000d57b1 000d57bb 000d57c5 000d57cf     .W...W...W...W..
   d5e8c:	000d57d9 000d57e5 000d57f1 000d57fd     .W...W...W...W..
   d5e9c:	000d5805 000d580f 000d5819              .X...X...X..

000d5ea8 <_ZSt7nothrow>:
	...

000d5ea9 <_ctype_>:
   d5ea9:	20202000 20202020 28282020 20282828     .         ((((( 
   d5eb9:	20202020 20202020 20202020 20202020                     
   d5ec9:	10108820 10101010 10101010 10101010      ...............
   d5ed9:	04040410 04040404 10040404 10101010     ................
   d5ee9:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d5ef9:	01010101 01010101 01010101 10101010     ................
   d5f09:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d5f19:	02020202 02020202 02020202 10101010     ................
   d5f29:	00000020 00000000 00000000 00000000      ...............
	...

000d5faa <link_const_variable_data_end>:
	...

000d5fac <link_constructors_location>:
   d5fac:	000d4409 	.word	0x000d4409
   d5fb0:	000d4955 	.word	0x000d4955
   d5fb4:	000d499d 	.word	0x000d499d
   d5fb8:	000d4b0d 	.word	0x000d4b0d
   d5fbc:	000d4bc9 	.word	0x000d4bc9
   d5fc0:	000d4bd9 	.word	0x000d4bd9
   d5fc4:	000d4c1d 	.word	0x000d4c1d
   d5fc8:	000d579d 	.word	0x000d579d
   d5fcc:	000d58ed 	.word	0x000d58ed
