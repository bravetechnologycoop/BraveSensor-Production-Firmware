
d:/Work/Kaipule-Button/kaipule-button/target/3.0.0-rc.2/argon/kaipule-button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000031b4  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d71d0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  2003e6e8  000d71d4  0001e6e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000000a0  2003e750  2003e750  0002e750  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d723c  000d723c  0002723c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d7264  000d7264  00027264  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0012f971  00000000  00000000  00027268  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000118f1  00000000  00000000  00156bd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000322bf  00000000  00000000  001684ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002768  00000000  00000000  0019a789  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00008da0  00000000  00000000  0019cef1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000327d1  00000000  00000000  001a5c91  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0003194e  00000000  00000000  001d8462  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00125c3f  00000000  00000000  00209db0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00006fbc  00000000  00000000  0032f9f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 fe2f 	bl	d6c90 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 fe51 	bl	d6ce0 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e6e8 	.word	0x2003e6e8
   d4048:	000d71d4 	.word	0x000d71d4
   d404c:	2003e750 	.word	0x2003e750
   d4050:	2003e750 	.word	0x2003e750
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f001 ff79 	bl	d5f54 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d71a4 	.word	0x000d71a4
   d407c:	000d71c8 	.word	0x000d71c8

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b838 	b.w	d40f4 <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f8e5 	bl	d4254 <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f001 bf23 	b.w	d5ed8 <_post_loop>

000d4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4092:	f000 ba99 	b.w	d45c8 <malloc>

000d4096 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d4096:	f000 ba9f 	b.w	d45d8 <free>

000d409a <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409a:	7800      	ldrb	r0, [r0, #0]
   d409c:	fab0 f080 	clz	r0, r0
   d40a0:	0940      	lsrs	r0, r0, #5
   d40a2:	4770      	bx	lr

000d40a4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a4:	2301      	movs	r3, #1
   d40a6:	7003      	strb	r3, [r0, #0]
   d40a8:	4770      	bx	lr

000d40aa <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d40aa:	b40e      	push	{r1, r2, r3}
   d40ac:	b503      	push	{r0, r1, lr}
   d40ae:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   d40b0:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d40b2:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d40b6:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d40b8:	f001 fe8f 	bl	d5dda <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d40bc:	b002      	add	sp, #8
   d40be:	f85d eb04 	ldr.w	lr, [sp], #4
   d40c2:	b003      	add	sp, #12
   d40c4:	4770      	bx	lr

000d40c6 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d40c6:	b40e      	push	{r1, r2, r3}
   d40c8:	b510      	push	{r4, lr}
   d40ca:	b08d      	sub	sp, #52	; 0x34
   d40cc:	aa0f      	add	r2, sp, #60	; 0x3c
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
   d40ce:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::info(const char *fmt, ...) const {
   d40d0:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d40d4:	9203      	str	r2, [sp, #12]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d40d6:	2300      	movs	r3, #0
   d40d8:	2020      	movs	r0, #32
   d40da:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d40de:	e9cd 4200 	strd	r4, r2, [sp]
   d40e2:	201e      	movs	r0, #30
   d40e4:	aa04      	add	r2, sp, #16
   d40e6:	f000 f9c3 	bl	d4470 <log_message_v>
}
   d40ea:	b00d      	add	sp, #52	; 0x34
   d40ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d40f0:	b003      	add	sp, #12
   d40f2:	4770      	bx	lr

000d40f4 <setup>:

//global button ble adress (found on label)
const BleAddress buttonAdress = BleAddress("B8:7C:6F:1A:E3:31");

// setup() runs once, when the device is first turned on.
void setup() {
   d40f4:	b508      	push	{r3, lr}
  Serial.begin(115200);
   d40f6:	f002 facf 	bl	d6698 <_Z16_fetch_usbserialv>
}
   d40fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Serial.begin(115200);
   d40fe:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d4102:	f002 babd 	b.w	d6680 <_ZN9USBSerial5beginEl>
	...

000d4108 <_Z17logAndPublishDataPh>:
    Serial.println("False");
  }

}

void logAndPublishData(unsigned char buttonData[]){
   d4108:	b530      	push	{r4, r5, lr}
   d410a:	b0a7      	sub	sp, #156	; 0x9c
  char publishData[128];
  sprintf(publishData, "{ \"deviceid\": \"%02X %02X %02X\", \"Type ID\": \"%02X\", \"Event Data\": \"%02X\", \"Control Data\": \"%02X\"}", buttonData[1], buttonData[2], buttonData[3], buttonData[4], buttonData[5], buttonData[6]);
   d410c:	7983      	ldrb	r3, [r0, #6]
   d410e:	9303      	str	r3, [sp, #12]
   d4110:	7943      	ldrb	r3, [r0, #5]
   d4112:	9302      	str	r3, [sp, #8]
   d4114:	7903      	ldrb	r3, [r0, #4]
   d4116:	9301      	str	r3, [sp, #4]
   d4118:	78c3      	ldrb	r3, [r0, #3]
   d411a:	9300      	str	r3, [sp, #0]
   d411c:	7883      	ldrb	r3, [r0, #2]
   d411e:	7842      	ldrb	r2, [r0, #1]
   d4120:	4913      	ldr	r1, [pc, #76]	; (d4170 <_Z17logAndPublishDataPh+0x68>)
void logAndPublishData(unsigned char buttonData[]){
   d4122:	4604      	mov	r4, r0
  sprintf(publishData, "{ \"deviceid\": \"%02X %02X %02X\", \"Type ID\": \"%02X\", \"Event Data\": \"%02X\", \"Control Data\": \"%02X\"}", buttonData[1], buttonData[2], buttonData[3], buttonData[4], buttonData[5], buttonData[6]);
   d4124:	a806      	add	r0, sp, #24
   d4126:	f000 fa67 	bl	d45f8 <sprintf>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d412a:	4b12      	ldr	r3, [pc, #72]	; (d4174 <_Z17logAndPublishDataPh+0x6c>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d412c:	4912      	ldr	r1, [pc, #72]	; (d4178 <_Z17logAndPublishDataPh+0x70>)
   d412e:	781b      	ldrb	r3, [r3, #0]
   d4130:	f88d 3000 	strb.w	r3, [sp]
   d4134:	aa06      	add	r2, sp, #24
   d4136:	233c      	movs	r3, #60	; 0x3c
   d4138:	a804      	add	r0, sp, #16
   d413a:	f002 f863 	bl	d6204 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d413e:	9d05      	ldr	r5, [sp, #20]
   d4140:	b17d      	cbz	r5, d4162 <_Z17logAndPublishDataPh+0x5a>
      if (--_M_use_count == 0)
   d4142:	686b      	ldr	r3, [r5, #4]
   d4144:	3b01      	subs	r3, #1
   d4146:	606b      	str	r3, [r5, #4]
   d4148:	b95b      	cbnz	r3, d4162 <_Z17logAndPublishDataPh+0x5a>
          _M_dispose();
   d414a:	682b      	ldr	r3, [r5, #0]
   d414c:	4628      	mov	r0, r5
   d414e:	689b      	ldr	r3, [r3, #8]
   d4150:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4152:	68ab      	ldr	r3, [r5, #8]
   d4154:	3b01      	subs	r3, #1
   d4156:	60ab      	str	r3, [r5, #8]
   d4158:	b91b      	cbnz	r3, d4162 <_Z17logAndPublishDataPh+0x5a>
            _M_destroy();
   d415a:	682b      	ldr	r3, [r5, #0]
   d415c:	4628      	mov	r0, r5
   d415e:	68db      	ldr	r3, [r3, #12]
   d4160:	4798      	blx	r3
  Particle.publish("RB50 Data", publishData, PRIVATE);
  Log.info("published, %02X", buttonData[6]);         
   d4162:	79a2      	ldrb	r2, [r4, #6]
   d4164:	4905      	ldr	r1, [pc, #20]	; (d417c <_Z17logAndPublishDataPh+0x74>)
   d4166:	4806      	ldr	r0, [pc, #24]	; (d4180 <_Z17logAndPublishDataPh+0x78>)
   d4168:	f7ff ffad 	bl	d40c6 <_ZNK5spark6Logger4infoEPKcz>
}
   d416c:	b027      	add	sp, #156	; 0x9c
   d416e:	bd30      	pop	{r4, r5, pc}
   d4170:	000d6dd4 	.word	0x000d6dd4
   d4174:	2003e75c 	.word	0x2003e75c
   d4178:	000d6e35 	.word	0x000d6e35
   d417c:	000d6e3f 	.word	0x000d6e3f
   d4180:	2003e784 	.word	0x2003e784

000d4184 <_Z7BLEScanv>:
void BLEScan(){
   d4184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4188:	f5ad 7d5d 	sub.w	sp, sp, #884	; 0x374
   d418c:	ae0a      	add	r6, sp, #40	; 0x28
   d418e:	4635      	mov	r5, r6
   d4190:	240a      	movs	r4, #10


class BleScanResult {
public:
    BleScanResult()
            : rssi_(BLE_RSSI_INVALID) {
   d4192:	277f      	movs	r7, #127	; 0x7f
   d4194:	4628      	mov	r0, r5
   d4196:	f000 fcfc 	bl	d4b92 <_ZN8particle10BleAddressC1Ev>
   d419a:	f105 0008 	add.w	r0, r5, #8
   d419e:	f000 fd73 	bl	d4c88 <_ZN8particle18BleAdvertisingDataC1Ev>
   d41a2:	f105 002c 	add.w	r0, r5, #44	; 0x2c
   d41a6:	f000 fd6f 	bl	d4c88 <_ZN8particle18BleAdvertisingDataC1Ev>
  BleScanResult scanResults[SCAN_RESULT_MAX];
   d41aa:	3c01      	subs	r4, #1
   d41ac:	f885 7050 	strb.w	r7, [r5, #80]	; 0x50
   d41b0:	f105 0554 	add.w	r5, r5, #84	; 0x54
   d41b4:	d1ee      	bne.n	d4194 <_Z7BLEScanv+0x10>
  int count = BLE.scan(scanResults, SCAN_RESULT_MAX);
   d41b6:	f000 fe75 	bl	d4ea4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d41ba:	220a      	movs	r2, #10
   d41bc:	4631      	mov	r1, r6
   d41be:	f000 ff5b 	bl	d5078 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>
    if (scanResults[i].address() == buttonAdress){
   d41c2:	f8df 9084 	ldr.w	r9, [pc, #132]	; d4248 <_Z7BLEScanv+0xc4>
        Serial.printf("%.2x",buttonAdvertisingData[j]);
   d41c6:	f8df a084 	ldr.w	sl, [pc, #132]	; d424c <_Z7BLEScanv+0xc8>
        Serial.print(" ");
   d41ca:	f8df b084 	ldr.w	fp, [pc, #132]	; d4250 <_Z7BLEScanv+0xcc>
  int count = BLE.scan(scanResults, SCAN_RESULT_MAX);
   d41ce:	4680      	mov	r8, r0
  bool condition = false;
   d41d0:	4627      	mov	r7, r4
  for(int i = 0; i < count; i++){
   d41d2:	4544      	cmp	r4, r8
   d41d4:	da26      	bge.n	d4224 <_Z7BLEScanv+0xa0>
    if (scanResults[i].address() == buttonAdress){
   d41d6:	4649      	mov	r1, r9
   d41d8:	4630      	mov	r0, r6
   d41da:	f000 fcc6 	bl	d4b6a <_ZNK8particle10BleAddresseqERKS0_>
   d41de:	4605      	mov	r5, r0
   d41e0:	b1e8      	cbz	r0, d421e <_Z7BLEScanv+0x9a>
      scanResults[i].advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buttonAdvertisingData, BLE_MAX_ADV_DATA_LEN);
   d41e2:	231f      	movs	r3, #31
   d41e4:	aa02      	add	r2, sp, #8
   d41e6:	21ff      	movs	r1, #255	; 0xff
   d41e8:	f106 0008 	add.w	r0, r6, #8
   d41ec:	f000 fd65 	bl	d4cba <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
      logAndPublishData(buttonAdvertisingData);
   d41f0:	a802      	add	r0, sp, #8
   d41f2:	f7ff ff89 	bl	d4108 <_Z17logAndPublishDataPh>
      for (int j = 0; j < sizeof buttonAdvertisingData; j++)
   d41f6:	af02      	add	r7, sp, #8
   d41f8:	2300      	movs	r3, #0
   d41fa:	9301      	str	r3, [sp, #4]
        Serial.printf("%.2x",buttonAdvertisingData[j]);
   d41fc:	f002 fa4c 	bl	d6698 <_Z16_fetch_usbserialv>
   d4200:	f817 2b01 	ldrb.w	r2, [r7], #1
   d4204:	4651      	mov	r1, sl
   d4206:	f7ff ff50 	bl	d40aa <_ZN5Print6printfEPKcz>
        Serial.print(" ");
   d420a:	f002 fa45 	bl	d6698 <_Z16_fetch_usbserialv>
   d420e:	4659      	mov	r1, fp
   d4210:	f001 fda8 	bl	d5d64 <_ZN5Print5printEPKc>
      for (int j = 0; j < sizeof buttonAdvertisingData; j++)
   d4214:	9b01      	ldr	r3, [sp, #4]
   d4216:	3301      	adds	r3, #1
   d4218:	2b1f      	cmp	r3, #31
   d421a:	d1ee      	bne.n	d41fa <_Z7BLEScanv+0x76>
      condition = true;
   d421c:	462f      	mov	r7, r5
  for(int i = 0; i < count; i++){
   d421e:	3401      	adds	r4, #1
   d4220:	3654      	adds	r6, #84	; 0x54
   d4222:	e7d6      	b.n	d41d2 <_Z7BLEScanv+0x4e>
  if (condition){
   d4224:	b147      	cbz	r7, d4238 <_Z7BLEScanv+0xb4>
    Serial.println("True");
   d4226:	f002 fa37 	bl	d6698 <_Z16_fetch_usbserialv>
   d422a:	4905      	ldr	r1, [pc, #20]	; (d4240 <_Z7BLEScanv+0xbc>)
    Serial.println("False");
   d422c:	f001 fdad 	bl	d5d8a <_ZN5Print7printlnEPKc>
}
   d4230:	f50d 7d5d 	add.w	sp, sp, #884	; 0x374
   d4234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Serial.println("False");
   d4238:	f002 fa2e 	bl	d6698 <_Z16_fetch_usbserialv>
   d423c:	4901      	ldr	r1, [pc, #4]	; (d4244 <_Z7BLEScanv+0xc0>)
   d423e:	e7f5      	b.n	d422c <_Z7BLEScanv+0xa8>
   d4240:	000d6e56 	.word	0x000d6e56
   d4244:	000d6e5b 	.word	0x000d6e5b
   d4248:	2003e754 	.word	0x2003e754
   d424c:	000d6e4f 	.word	0x000d6e4f
   d4250:	000d6e54 	.word	0x000d6e54

000d4254 <loop>:
  BLEScan();
   d4254:	f7ff bf96 	b.w	d4184 <_Z7BLEScanv>

000d4258 <_GLOBAL__sub_I_setup>:
        val_(val) {
   d4258:	4b03      	ldr	r3, [pc, #12]	; (d4268 <_GLOBAL__sub_I_setup+0x10>)
const BleAddress buttonAdress = BleAddress("B8:7C:6F:1A:E3:31");
   d425a:	4904      	ldr	r1, [pc, #16]	; (d426c <_GLOBAL__sub_I_setup+0x14>)
   d425c:	4804      	ldr	r0, [pc, #16]	; (d4270 <_GLOBAL__sub_I_setup+0x18>)
   d425e:	2201      	movs	r2, #1
   d4260:	701a      	strb	r2, [r3, #0]
   d4262:	2200      	movs	r2, #0
   d4264:	f000 bc6e 	b.w	d4b44 <_ZN8particle10BleAddressC1EPKcNS_14BleAddressTypeE>
   d4268:	2003e75c 	.word	0x2003e75c
   d426c:	000d6e61 	.word	0x000d6e61
   d4270:	2003e754 	.word	0x2003e754

000d4274 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4274:	b508      	push	{r3, lr}
   d4276:	4b02      	ldr	r3, [pc, #8]	; (d4280 <netdb_freeaddrinfo+0xc>)
   d4278:	681b      	ldr	r3, [r3, #0]
   d427a:	689b      	ldr	r3, [r3, #8]
   d427c:	9301      	str	r3, [sp, #4]
   d427e:	bd08      	pop	{r3, pc}
   d4280:	00030268 	.word	0x00030268

000d4284 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4284:	b508      	push	{r3, lr}
   d4286:	4b02      	ldr	r3, [pc, #8]	; (d4290 <netdb_getaddrinfo+0xc>)
   d4288:	681b      	ldr	r3, [r3, #0]
   d428a:	68db      	ldr	r3, [r3, #12]
   d428c:	9301      	str	r3, [sp, #4]
   d428e:	bd08      	pop	{r3, pc}
   d4290:	00030268 	.word	0x00030268

000d4294 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4294:	b508      	push	{r3, lr}
   d4296:	4b02      	ldr	r3, [pc, #8]	; (d42a0 <HAL_RNG_GetRandomNumber+0xc>)
   d4298:	681b      	ldr	r3, [r3, #0]
   d429a:	685b      	ldr	r3, [r3, #4]
   d429c:	9301      	str	r3, [sp, #4]
   d429e:	bd08      	pop	{r3, pc}
   d42a0:	00030218 	.word	0x00030218

000d42a4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d42a4:	b508      	push	{r3, lr}
   d42a6:	4b02      	ldr	r3, [pc, #8]	; (d42b0 <HAL_Delay_Microseconds+0xc>)
   d42a8:	681b      	ldr	r3, [r3, #0]
   d42aa:	68db      	ldr	r3, [r3, #12]
   d42ac:	9301      	str	r3, [sp, #4]
   d42ae:	bd08      	pop	{r3, pc}
   d42b0:	00030218 	.word	0x00030218

000d42b4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d42b4:	b508      	push	{r3, lr}
   d42b6:	4b02      	ldr	r3, [pc, #8]	; (d42c0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d42b8:	681b      	ldr	r3, [r3, #0]
   d42ba:	695b      	ldr	r3, [r3, #20]
   d42bc:	9301      	str	r3, [sp, #4]
   d42be:	bd08      	pop	{r3, pc}
   d42c0:	00030218 	.word	0x00030218

000d42c4 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d42c4:	b508      	push	{r3, lr}
   d42c6:	4b02      	ldr	r3, [pc, #8]	; (d42d0 <hal_ble_stack_init+0xc>)
   d42c8:	681b      	ldr	r3, [r3, #0]
   d42ca:	689b      	ldr	r3, [r3, #8]
   d42cc:	9301      	str	r3, [sp, #4]
   d42ce:	bd08      	pop	{r3, pc}
   d42d0:	00030278 	.word	0x00030278

000d42d4 <hal_ble_gap_start_scan>:
DYNALIB_FN(26, hal_ble, hal_ble_gap_get_auto_advertise, int(hal_ble_auto_adv_cfg_t*, void*))
DYNALIB_FN(27, hal_ble, hal_ble_gap_stop_advertising, int(void*))
DYNALIB_FN(28, hal_ble, hal_ble_gap_is_advertising, bool(void*))
DYNALIB_FN(29, hal_ble, hal_ble_gap_set_scan_parameters, int(const hal_ble_scan_params_t*, void*))
DYNALIB_FN(30, hal_ble, hal_ble_gap_get_scan_parameters, int(hal_ble_scan_params_t*, void*))
DYNALIB_FN(31, hal_ble, hal_ble_gap_start_scan, int(hal_ble_on_scan_result_cb_t, void*, void*))
   d42d4:	b508      	push	{r3, lr}
   d42d6:	4b02      	ldr	r3, [pc, #8]	; (d42e0 <hal_ble_gap_start_scan+0xc>)
   d42d8:	681b      	ldr	r3, [r3, #0]
   d42da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d42dc:	9301      	str	r3, [sp, #4]
   d42de:	bd08      	pop	{r3, pc}
   d42e0:	00030278 	.word	0x00030278

000d42e4 <hal_ble_gap_stop_scan>:
DYNALIB_FN(32, hal_ble, hal_ble_gap_is_scanning, bool(void*))
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
   d42e4:	b508      	push	{r3, lr}
   d42e6:	4b03      	ldr	r3, [pc, #12]	; (d42f4 <hal_ble_gap_stop_scan+0x10>)
   d42e8:	681b      	ldr	r3, [r3, #0]
   d42ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   d42ee:	9301      	str	r3, [sp, #4]
   d42f0:	bd08      	pop	{r3, pc}
   d42f2:	0000      	.short	0x0000
   d42f4:	00030278 	.word	0x00030278

000d42f8 <hal_ble_gap_disconnect>:
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   d42f8:	b508      	push	{r3, lr}
   d42fa:	4b03      	ldr	r3, [pc, #12]	; (d4308 <hal_ble_gap_disconnect+0x10>)
   d42fc:	681b      	ldr	r3, [r3, #0]
   d42fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d4302:	9301      	str	r3, [sp, #4]
   d4304:	bd08      	pop	{r3, pc}
   d4306:	0000      	.short	0x0000
   d4308:	00030278 	.word	0x00030278

000d430c <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   d430c:	b508      	push	{r3, lr}
   d430e:	4b03      	ldr	r3, [pc, #12]	; (d431c <hal_ble_set_callback_on_periph_link_events+0x10>)
   d4310:	681b      	ldr	r3, [r3, #0]
   d4312:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   d4316:	9301      	str	r3, [sp, #4]
   d4318:	bd08      	pop	{r3, pc}
   d431a:	0000      	.short	0x0000
   d431c:	00030278 	.word	0x00030278

000d4320 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4320:	b508      	push	{r3, lr}
   d4322:	4b02      	ldr	r3, [pc, #8]	; (d432c <os_mutex_recursive_create+0xc>)
   d4324:	681b      	ldr	r3, [r3, #0]
   d4326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4328:	9301      	str	r3, [sp, #4]
   d432a:	bd08      	pop	{r3, pc}
   d432c:	00030248 	.word	0x00030248

000d4330 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4330:	b508      	push	{r3, lr}
   d4332:	4b02      	ldr	r3, [pc, #8]	; (d433c <os_mutex_recursive_destroy+0xc>)
   d4334:	681b      	ldr	r3, [r3, #0]
   d4336:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4338:	9301      	str	r3, [sp, #4]
   d433a:	bd08      	pop	{r3, pc}
   d433c:	00030248 	.word	0x00030248

000d4340 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d4340:	b508      	push	{r3, lr}
   d4342:	4b02      	ldr	r3, [pc, #8]	; (d434c <os_mutex_recursive_lock+0xc>)
   d4344:	681b      	ldr	r3, [r3, #0]
   d4346:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4348:	9301      	str	r3, [sp, #4]
   d434a:	bd08      	pop	{r3, pc}
   d434c:	00030248 	.word	0x00030248

000d4350 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d4350:	b508      	push	{r3, lr}
   d4352:	4b02      	ldr	r3, [pc, #8]	; (d435c <os_mutex_recursive_unlock+0xc>)
   d4354:	681b      	ldr	r3, [r3, #0]
   d4356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4358:	9301      	str	r3, [sp, #4]
   d435a:	bd08      	pop	{r3, pc}
   d435c:	00030248 	.word	0x00030248

000d4360 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4360:	b508      	push	{r3, lr}
   d4362:	4b02      	ldr	r3, [pc, #8]	; (d436c <inet_inet_ntop+0xc>)
   d4364:	681b      	ldr	r3, [r3, #0]
   d4366:	695b      	ldr	r3, [r3, #20]
   d4368:	9301      	str	r3, [sp, #4]
   d436a:	bd08      	pop	{r3, pc}
   d436c:	00030264 	.word	0x00030264

000d4370 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d4370:	b508      	push	{r3, lr}
   d4372:	4b02      	ldr	r3, [pc, #8]	; (d437c <hal_usart_init+0xc>)
   d4374:	681b      	ldr	r3, [r3, #0]
   d4376:	681b      	ldr	r3, [r3, #0]
   d4378:	9301      	str	r3, [sp, #4]
   d437a:	bd08      	pop	{r3, pc}
   d437c:	0003023c 	.word	0x0003023c

000d4380 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d4380:	b508      	push	{r3, lr}
   d4382:	4b02      	ldr	r3, [pc, #8]	; (d438c <hal_usart_write+0xc>)
   d4384:	681b      	ldr	r3, [r3, #0]
   d4386:	68db      	ldr	r3, [r3, #12]
   d4388:	9301      	str	r3, [sp, #4]
   d438a:	bd08      	pop	{r3, pc}
   d438c:	0003023c 	.word	0x0003023c

000d4390 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d4390:	b508      	push	{r3, lr}
   d4392:	4b02      	ldr	r3, [pc, #8]	; (d439c <hal_usart_available+0xc>)
   d4394:	681b      	ldr	r3, [r3, #0]
   d4396:	691b      	ldr	r3, [r3, #16]
   d4398:	9301      	str	r3, [sp, #4]
   d439a:	bd08      	pop	{r3, pc}
   d439c:	0003023c 	.word	0x0003023c

000d43a0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d43a0:	b508      	push	{r3, lr}
   d43a2:	4b02      	ldr	r3, [pc, #8]	; (d43ac <hal_usart_read+0xc>)
   d43a4:	681b      	ldr	r3, [r3, #0]
   d43a6:	695b      	ldr	r3, [r3, #20]
   d43a8:	9301      	str	r3, [sp, #4]
   d43aa:	bd08      	pop	{r3, pc}
   d43ac:	0003023c 	.word	0x0003023c

000d43b0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d43b0:	b508      	push	{r3, lr}
   d43b2:	4b02      	ldr	r3, [pc, #8]	; (d43bc <hal_usart_peek+0xc>)
   d43b4:	681b      	ldr	r3, [r3, #0]
   d43b6:	699b      	ldr	r3, [r3, #24]
   d43b8:	9301      	str	r3, [sp, #4]
   d43ba:	bd08      	pop	{r3, pc}
   d43bc:	0003023c 	.word	0x0003023c

000d43c0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d43c0:	b508      	push	{r3, lr}
   d43c2:	4b02      	ldr	r3, [pc, #8]	; (d43cc <hal_usart_flush+0xc>)
   d43c4:	681b      	ldr	r3, [r3, #0]
   d43c6:	69db      	ldr	r3, [r3, #28]
   d43c8:	9301      	str	r3, [sp, #4]
   d43ca:	bd08      	pop	{r3, pc}
   d43cc:	0003023c 	.word	0x0003023c

000d43d0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d43d0:	b508      	push	{r3, lr}
   d43d2:	4b02      	ldr	r3, [pc, #8]	; (d43dc <hal_usart_available_data_for_write+0xc>)
   d43d4:	681b      	ldr	r3, [r3, #0]
   d43d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d43d8:	9301      	str	r3, [sp, #4]
   d43da:	bd08      	pop	{r3, pc}
   d43dc:	0003023c 	.word	0x0003023c

000d43e0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d43e0:	b508      	push	{r3, lr}
   d43e2:	4b02      	ldr	r3, [pc, #8]	; (d43ec <HAL_USB_USART_Init+0xc>)
   d43e4:	681b      	ldr	r3, [r3, #0]
   d43e6:	681b      	ldr	r3, [r3, #0]
   d43e8:	9301      	str	r3, [sp, #4]
   d43ea:	bd08      	pop	{r3, pc}
   d43ec:	0003024c 	.word	0x0003024c

000d43f0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d43f0:	b508      	push	{r3, lr}
   d43f2:	4b02      	ldr	r3, [pc, #8]	; (d43fc <HAL_USB_USART_Begin+0xc>)
   d43f4:	681b      	ldr	r3, [r3, #0]
   d43f6:	685b      	ldr	r3, [r3, #4]
   d43f8:	9301      	str	r3, [sp, #4]
   d43fa:	bd08      	pop	{r3, pc}
   d43fc:	0003024c 	.word	0x0003024c

000d4400 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4400:	b508      	push	{r3, lr}
   d4402:	4b02      	ldr	r3, [pc, #8]	; (d440c <HAL_USB_USART_Available_Data+0xc>)
   d4404:	681b      	ldr	r3, [r3, #0]
   d4406:	691b      	ldr	r3, [r3, #16]
   d4408:	9301      	str	r3, [sp, #4]
   d440a:	bd08      	pop	{r3, pc}
   d440c:	0003024c 	.word	0x0003024c

000d4410 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4410:	b508      	push	{r3, lr}
   d4412:	4b02      	ldr	r3, [pc, #8]	; (d441c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4414:	681b      	ldr	r3, [r3, #0]
   d4416:	695b      	ldr	r3, [r3, #20]
   d4418:	9301      	str	r3, [sp, #4]
   d441a:	bd08      	pop	{r3, pc}
   d441c:	0003024c 	.word	0x0003024c

000d4420 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4420:	b508      	push	{r3, lr}
   d4422:	4b02      	ldr	r3, [pc, #8]	; (d442c <HAL_USB_USART_Receive_Data+0xc>)
   d4424:	681b      	ldr	r3, [r3, #0]
   d4426:	699b      	ldr	r3, [r3, #24]
   d4428:	9301      	str	r3, [sp, #4]
   d442a:	bd08      	pop	{r3, pc}
   d442c:	0003024c 	.word	0x0003024c

000d4430 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4430:	b508      	push	{r3, lr}
   d4432:	4b02      	ldr	r3, [pc, #8]	; (d443c <HAL_USB_USART_Send_Data+0xc>)
   d4434:	681b      	ldr	r3, [r3, #0]
   d4436:	69db      	ldr	r3, [r3, #28]
   d4438:	9301      	str	r3, [sp, #4]
   d443a:	bd08      	pop	{r3, pc}
   d443c:	0003024c 	.word	0x0003024c

000d4440 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4440:	b508      	push	{r3, lr}
   d4442:	4b02      	ldr	r3, [pc, #8]	; (d444c <HAL_USB_USART_Flush_Data+0xc>)
   d4444:	681b      	ldr	r3, [r3, #0]
   d4446:	6a1b      	ldr	r3, [r3, #32]
   d4448:	9301      	str	r3, [sp, #4]
   d444a:	bd08      	pop	{r3, pc}
   d444c:	0003024c 	.word	0x0003024c

000d4450 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d4450:	b508      	push	{r3, lr}
   d4452:	4b02      	ldr	r3, [pc, #8]	; (d445c <panic_+0xc>)
   d4454:	681b      	ldr	r3, [r3, #0]
   d4456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4458:	9301      	str	r3, [sp, #4]
   d445a:	bd08      	pop	{r3, pc}
   d445c:	00030260 	.word	0x00030260

000d4460 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d4460:	b508      	push	{r3, lr}
   d4462:	4b02      	ldr	r3, [pc, #8]	; (d446c <log_message+0xc>)
   d4464:	681b      	ldr	r3, [r3, #0]
   d4466:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4468:	9301      	str	r3, [sp, #4]
   d446a:	bd08      	pop	{r3, pc}
   d446c:	00030260 	.word	0x00030260

000d4470 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d4470:	b508      	push	{r3, lr}
   d4472:	4b02      	ldr	r3, [pc, #8]	; (d447c <log_message_v+0xc>)
   d4474:	681b      	ldr	r3, [r3, #0]
   d4476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4478:	9301      	str	r3, [sp, #4]
   d447a:	bd08      	pop	{r3, pc}
   d447c:	00030260 	.word	0x00030260

000d4480 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4480:	b508      	push	{r3, lr}
   d4482:	4b02      	ldr	r3, [pc, #8]	; (d448c <set_system_mode+0xc>)
   d4484:	681b      	ldr	r3, [r3, #0]
   d4486:	685b      	ldr	r3, [r3, #4]
   d4488:	9301      	str	r3, [sp, #4]
   d448a:	bd08      	pop	{r3, pc}
   d448c:	00030220 	.word	0x00030220

000d4490 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d4490:	b508      	push	{r3, lr}
   d4492:	4b02      	ldr	r3, [pc, #8]	; (d449c <application_thread_current+0xc>)
   d4494:	681b      	ldr	r3, [r3, #0]
   d4496:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4498:	9301      	str	r3, [sp, #4]
   d449a:	bd08      	pop	{r3, pc}
   d449c:	00030220 	.word	0x00030220

000d44a0 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d44a0:	b508      	push	{r3, lr}
   d44a2:	4b02      	ldr	r3, [pc, #8]	; (d44ac <application_thread_invoke+0xc>)
   d44a4:	681b      	ldr	r3, [r3, #0]
   d44a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d44a8:	9301      	str	r3, [sp, #4]
   d44aa:	bd08      	pop	{r3, pc}
   d44ac:	00030220 	.word	0x00030220

000d44b0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d44b0:	b508      	push	{r3, lr}
   d44b2:	4b03      	ldr	r3, [pc, #12]	; (d44c0 <system_ctrl_set_app_request_handler+0x10>)
   d44b4:	681b      	ldr	r3, [r3, #0]
   d44b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d44ba:	9301      	str	r3, [sp, #4]
   d44bc:	bd08      	pop	{r3, pc}
   d44be:	0000      	.short	0x0000
   d44c0:	00030220 	.word	0x00030220

000d44c4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d44c4:	b508      	push	{r3, lr}
   d44c6:	4b03      	ldr	r3, [pc, #12]	; (d44d4 <system_ctrl_set_result+0x10>)
   d44c8:	681b      	ldr	r3, [r3, #0]
   d44ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d44ce:	9301      	str	r3, [sp, #4]
   d44d0:	bd08      	pop	{r3, pc}
   d44d2:	0000      	.short	0x0000
   d44d4:	00030220 	.word	0x00030220

000d44d8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d44d8:	b508      	push	{r3, lr}
   d44da:	4b02      	ldr	r3, [pc, #8]	; (d44e4 <network_connect+0xc>)
   d44dc:	681b      	ldr	r3, [r3, #0]
   d44de:	685b      	ldr	r3, [r3, #4]
   d44e0:	9301      	str	r3, [sp, #4]
   d44e2:	bd08      	pop	{r3, pc}
   d44e4:	00030240 	.word	0x00030240

000d44e8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d44e8:	b508      	push	{r3, lr}
   d44ea:	4b02      	ldr	r3, [pc, #8]	; (d44f4 <network_connecting+0xc>)
   d44ec:	681b      	ldr	r3, [r3, #0]
   d44ee:	689b      	ldr	r3, [r3, #8]
   d44f0:	9301      	str	r3, [sp, #4]
   d44f2:	bd08      	pop	{r3, pc}
   d44f4:	00030240 	.word	0x00030240

000d44f8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d44f8:	b508      	push	{r3, lr}
   d44fa:	4b02      	ldr	r3, [pc, #8]	; (d4504 <network_disconnect+0xc>)
   d44fc:	681b      	ldr	r3, [r3, #0]
   d44fe:	68db      	ldr	r3, [r3, #12]
   d4500:	9301      	str	r3, [sp, #4]
   d4502:	bd08      	pop	{r3, pc}
   d4504:	00030240 	.word	0x00030240

000d4508 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4508:	b508      	push	{r3, lr}
   d450a:	4b02      	ldr	r3, [pc, #8]	; (d4514 <network_ready+0xc>)
   d450c:	681b      	ldr	r3, [r3, #0]
   d450e:	691b      	ldr	r3, [r3, #16]
   d4510:	9301      	str	r3, [sp, #4]
   d4512:	bd08      	pop	{r3, pc}
   d4514:	00030240 	.word	0x00030240

000d4518 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4518:	b508      	push	{r3, lr}
   d451a:	4b02      	ldr	r3, [pc, #8]	; (d4524 <network_on+0xc>)
   d451c:	681b      	ldr	r3, [r3, #0]
   d451e:	695b      	ldr	r3, [r3, #20]
   d4520:	9301      	str	r3, [sp, #4]
   d4522:	bd08      	pop	{r3, pc}
   d4524:	00030240 	.word	0x00030240

000d4528 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4528:	b508      	push	{r3, lr}
   d452a:	4b02      	ldr	r3, [pc, #8]	; (d4534 <network_off+0xc>)
   d452c:	681b      	ldr	r3, [r3, #0]
   d452e:	699b      	ldr	r3, [r3, #24]
   d4530:	9301      	str	r3, [sp, #4]
   d4532:	bd08      	pop	{r3, pc}
   d4534:	00030240 	.word	0x00030240

000d4538 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4538:	b508      	push	{r3, lr}
   d453a:	4b02      	ldr	r3, [pc, #8]	; (d4544 <network_listen+0xc>)
   d453c:	681b      	ldr	r3, [r3, #0]
   d453e:	69db      	ldr	r3, [r3, #28]
   d4540:	9301      	str	r3, [sp, #4]
   d4542:	bd08      	pop	{r3, pc}
   d4544:	00030240 	.word	0x00030240

000d4548 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4548:	b508      	push	{r3, lr}
   d454a:	4b02      	ldr	r3, [pc, #8]	; (d4554 <network_listening+0xc>)
   d454c:	681b      	ldr	r3, [r3, #0]
   d454e:	6a1b      	ldr	r3, [r3, #32]
   d4550:	9301      	str	r3, [sp, #4]
   d4552:	bd08      	pop	{r3, pc}
   d4554:	00030240 	.word	0x00030240

000d4558 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4558:	b508      	push	{r3, lr}
   d455a:	4b02      	ldr	r3, [pc, #8]	; (d4564 <network_set_listen_timeout+0xc>)
   d455c:	681b      	ldr	r3, [r3, #0]
   d455e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4560:	9301      	str	r3, [sp, #4]
   d4562:	bd08      	pop	{r3, pc}
   d4564:	00030240 	.word	0x00030240

000d4568 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4568:	b508      	push	{r3, lr}
   d456a:	4b02      	ldr	r3, [pc, #8]	; (d4574 <network_get_listen_timeout+0xc>)
   d456c:	681b      	ldr	r3, [r3, #0]
   d456e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4570:	9301      	str	r3, [sp, #4]
   d4572:	bd08      	pop	{r3, pc}
   d4574:	00030240 	.word	0x00030240

000d4578 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d4578:	b508      	push	{r3, lr}
   d457a:	4b02      	ldr	r3, [pc, #8]	; (d4584 <network_is_on+0xc>)
   d457c:	681b      	ldr	r3, [r3, #0]
   d457e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4580:	9301      	str	r3, [sp, #4]
   d4582:	bd08      	pop	{r3, pc}
   d4584:	00030240 	.word	0x00030240

000d4588 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d4588:	b508      	push	{r3, lr}
   d458a:	4b02      	ldr	r3, [pc, #8]	; (d4594 <network_is_off+0xc>)
   d458c:	681b      	ldr	r3, [r3, #0]
   d458e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4590:	9301      	str	r3, [sp, #4]
   d4592:	bd08      	pop	{r3, pc}
   d4594:	00030240 	.word	0x00030240

000d4598 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d4598:	b508      	push	{r3, lr}
   d459a:	4b02      	ldr	r3, [pc, #8]	; (d45a4 <spark_cloud_flag_connected+0xc>)
   d459c:	681b      	ldr	r3, [r3, #0]
   d459e:	695b      	ldr	r3, [r3, #20]
   d45a0:	9301      	str	r3, [sp, #4]
   d45a2:	bd08      	pop	{r3, pc}
   d45a4:	00030244 	.word	0x00030244

000d45a8 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d45a8:	b508      	push	{r3, lr}
   d45aa:	4b02      	ldr	r3, [pc, #8]	; (d45b4 <spark_send_event+0xc>)
   d45ac:	681b      	ldr	r3, [r3, #0]
   d45ae:	6a1b      	ldr	r3, [r3, #32]
   d45b0:	9301      	str	r3, [sp, #4]
   d45b2:	bd08      	pop	{r3, pc}
   d45b4:	00030244 	.word	0x00030244

000d45b8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d45b8:	b508      	push	{r3, lr}
   d45ba:	4b02      	ldr	r3, [pc, #8]	; (d45c4 <spark_set_random_seed_from_cloud_handler+0xc>)
   d45bc:	681b      	ldr	r3, [r3, #0]
   d45be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d45c0:	9301      	str	r3, [sp, #4]
   d45c2:	bd08      	pop	{r3, pc}
   d45c4:	00030244 	.word	0x00030244

000d45c8 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d45c8:	b508      	push	{r3, lr}
   d45ca:	4b02      	ldr	r3, [pc, #8]	; (d45d4 <malloc+0xc>)
   d45cc:	681b      	ldr	r3, [r3, #0]
   d45ce:	681b      	ldr	r3, [r3, #0]
   d45d0:	9301      	str	r3, [sp, #4]
   d45d2:	bd08      	pop	{r3, pc}
   d45d4:	0003021c 	.word	0x0003021c

000d45d8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d45d8:	b508      	push	{r3, lr}
   d45da:	4b02      	ldr	r3, [pc, #8]	; (d45e4 <free+0xc>)
   d45dc:	681b      	ldr	r3, [r3, #0]
   d45de:	685b      	ldr	r3, [r3, #4]
   d45e0:	9301      	str	r3, [sp, #4]
   d45e2:	bd08      	pop	{r3, pc}
   d45e4:	0003021c 	.word	0x0003021c

000d45e8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d45e8:	b508      	push	{r3, lr}
   d45ea:	4b02      	ldr	r3, [pc, #8]	; (d45f4 <realloc+0xc>)
   d45ec:	681b      	ldr	r3, [r3, #0]
   d45ee:	689b      	ldr	r3, [r3, #8]
   d45f0:	9301      	str	r3, [sp, #4]
   d45f2:	bd08      	pop	{r3, pc}
   d45f4:	0003021c 	.word	0x0003021c

000d45f8 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d45f8:	b508      	push	{r3, lr}
   d45fa:	4b02      	ldr	r3, [pc, #8]	; (d4604 <sprintf+0xc>)
   d45fc:	681b      	ldr	r3, [r3, #0]
   d45fe:	68db      	ldr	r3, [r3, #12]
   d4600:	9301      	str	r3, [sp, #4]
   d4602:	bd08      	pop	{r3, pc}
   d4604:	0003021c 	.word	0x0003021c

000d4608 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4608:	b508      	push	{r3, lr}
   d460a:	4b02      	ldr	r3, [pc, #8]	; (d4614 <vsnprintf+0xc>)
   d460c:	681b      	ldr	r3, [r3, #0]
   d460e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4610:	9301      	str	r3, [sp, #4]
   d4612:	bd08      	pop	{r3, pc}
   d4614:	0003021c 	.word	0x0003021c

000d4618 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4618:	b508      	push	{r3, lr}
   d461a:	4b02      	ldr	r3, [pc, #8]	; (d4624 <abort+0xc>)
   d461c:	681b      	ldr	r3, [r3, #0]
   d461e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4620:	9301      	str	r3, [sp, #4]
   d4622:	bd08      	pop	{r3, pc}
   d4624:	0003021c 	.word	0x0003021c

000d4628 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d4628:	b508      	push	{r3, lr}
   d462a:	4b02      	ldr	r3, [pc, #8]	; (d4634 <_malloc_r+0xc>)
   d462c:	681b      	ldr	r3, [r3, #0]
   d462e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4630:	9301      	str	r3, [sp, #4]
   d4632:	bd08      	pop	{r3, pc}
   d4634:	0003021c 	.word	0x0003021c

000d4638 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d4638:	b508      	push	{r3, lr}
   d463a:	4b02      	ldr	r3, [pc, #8]	; (d4644 <newlib_impure_ptr_callback+0xc>)
   d463c:	681b      	ldr	r3, [r3, #0]
   d463e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4640:	9301      	str	r3, [sp, #4]
   d4642:	bd08      	pop	{r3, pc}
   d4644:	0003021c 	.word	0x0003021c

000d4648 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4648:	2200      	movs	r2, #0
   d464a:	6840      	ldr	r0, [r0, #4]
   d464c:	4611      	mov	r1, r2
   d464e:	f7ff bf7b 	b.w	d4548 <network_listening>

000d4652 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d4652:	2200      	movs	r2, #0
   d4654:	6840      	ldr	r0, [r0, #4]
   d4656:	4611      	mov	r1, r2
   d4658:	f7ff bf86 	b.w	d4568 <network_get_listen_timeout>

000d465c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d465c:	6840      	ldr	r0, [r0, #4]
   d465e:	2200      	movs	r2, #0
   d4660:	f7ff bf7a 	b.w	d4558 <network_set_listen_timeout>

000d4664 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d4664:	6840      	ldr	r0, [r0, #4]
   d4666:	2200      	movs	r2, #0
   d4668:	f081 0101 	eor.w	r1, r1, #1
   d466c:	f7ff bf64 	b.w	d4538 <network_listen>

000d4670 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d4670:	2300      	movs	r3, #0
   d4672:	6840      	ldr	r0, [r0, #4]
   d4674:	461a      	mov	r2, r3
   d4676:	4619      	mov	r1, r3
   d4678:	f7ff bf56 	b.w	d4528 <network_off>

000d467c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d467c:	2300      	movs	r3, #0
   d467e:	6840      	ldr	r0, [r0, #4]
   d4680:	461a      	mov	r2, r3
   d4682:	4619      	mov	r1, r3
   d4684:	f7ff bf48 	b.w	d4518 <network_on>

000d4688 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4688:	2200      	movs	r2, #0
   d468a:	6840      	ldr	r0, [r0, #4]
   d468c:	4611      	mov	r1, r2
   d468e:	f7ff bf3b 	b.w	d4508 <network_ready>

000d4692 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d4692:	2200      	movs	r2, #0
   d4694:	6840      	ldr	r0, [r0, #4]
   d4696:	4611      	mov	r1, r2
   d4698:	f7ff bf26 	b.w	d44e8 <network_connecting>

000d469c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d469c:	6840      	ldr	r0, [r0, #4]
   d469e:	2200      	movs	r2, #0
   d46a0:	2102      	movs	r1, #2
   d46a2:	f7ff bf29 	b.w	d44f8 <network_disconnect>

000d46a6 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d46a6:	2300      	movs	r3, #0
   d46a8:	6840      	ldr	r0, [r0, #4]
   d46aa:	461a      	mov	r2, r3
   d46ac:	f7ff bf14 	b.w	d44d8 <network_connect>

000d46b0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d46b0:	4b02      	ldr	r3, [pc, #8]	; (d46bc <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d46b2:	2203      	movs	r2, #3
   d46b4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d46b6:	4a02      	ldr	r2, [pc, #8]	; (d46c0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d46b8:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d46ba:	4770      	bx	lr
   d46bc:	2003e760 	.word	0x2003e760
   d46c0:	000d6e7c 	.word	0x000d6e7c

000d46c4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d46c4:	b510      	push	{r4, lr}
   d46c6:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d46c8:	6800      	ldr	r0, [r0, #0]
   d46ca:	b118      	cbz	r0, d46d4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d46cc:	f7ff ff84 	bl	d45d8 <free>
            wakeupSource_ = nullptr;
   d46d0:	2300      	movs	r3, #0
   d46d2:	6023      	str	r3, [r4, #0]
        }
    }
   d46d4:	bd10      	pop	{r4, pc}

000d46d6 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d46d6:	b510      	push	{r4, lr}
   d46d8:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d46da:	f7ff fff3 	bl	d46c4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d46de:	4620      	mov	r0, r4
   d46e0:	bd10      	pop	{r4, pc}
	...

000d46e4 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d46e4:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d46e6:	4b09      	ldr	r3, [pc, #36]	; (d470c <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d46e8:	4c09      	ldr	r4, [pc, #36]	; (d4710 <_GLOBAL__sub_I_System+0x2c>)
   d46ea:	2202      	movs	r2, #2
   d46ec:	2000      	movs	r0, #0
   d46ee:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d46f0:	4b08      	ldr	r3, [pc, #32]	; (d4714 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d46f2:	6020      	str	r0, [r4, #0]
   d46f4:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d46f6:	71a0      	strb	r0, [r4, #6]
   d46f8:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d46fa:	f7ff fec1 	bl	d4480 <set_system_mode>
SystemClass System;
   d46fe:	4620      	mov	r0, r4
   d4700:	4a05      	ldr	r2, [pc, #20]	; (d4718 <_GLOBAL__sub_I_System+0x34>)
   d4702:	4906      	ldr	r1, [pc, #24]	; (d471c <_GLOBAL__sub_I_System+0x38>)
   d4704:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d4708:	f002 b98a 	b.w	d6a20 <__aeabi_atexit>
   d470c:	2003e774 	.word	0x2003e774
   d4710:	2003e768 	.word	0x2003e768
   d4714:	ffff0000 	.word	0xffff0000
   d4718:	2003e750 	.word	0x2003e750
   d471c:	000d46d7 	.word	0x000d46d7

000d4720 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d4720:	b510      	push	{r4, lr}
   d4722:	4604      	mov	r4, r0
{
	free(buffer);
   d4724:	6800      	ldr	r0, [r0, #0]
   d4726:	f7ff ff57 	bl	d45d8 <free>
}
   d472a:	4620      	mov	r0, r4
   d472c:	bd10      	pop	{r4, pc}

000d472e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d472e:	b510      	push	{r4, lr}
   d4730:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d4732:	6800      	ldr	r0, [r0, #0]
   d4734:	b108      	cbz	r0, d473a <_ZN6String10invalidateEv+0xc>
   d4736:	f7ff ff4f 	bl	d45d8 <free>
	buffer = NULL;
   d473a:	2300      	movs	r3, #0
	capacity = len = 0;
   d473c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d4740:	6023      	str	r3, [r4, #0]
}
   d4742:	bd10      	pop	{r4, pc}

000d4744 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d4744:	b538      	push	{r3, r4, r5, lr}
   d4746:	4604      	mov	r4, r0
   d4748:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d474a:	6800      	ldr	r0, [r0, #0]
   d474c:	3101      	adds	r1, #1
   d474e:	f7ff ff4b 	bl	d45e8 <realloc>
	if (newbuffer) {
   d4752:	b110      	cbz	r0, d475a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d4754:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d4758:	2001      	movs	r0, #1
	}
	return 0;
}
   d475a:	bd38      	pop	{r3, r4, r5, pc}

000d475c <_ZN6String7reserveEj>:
{
   d475c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d475e:	6803      	ldr	r3, [r0, #0]
{
   d4760:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d4762:	b123      	cbz	r3, d476e <_ZN6String7reserveEj+0x12>
   d4764:	6843      	ldr	r3, [r0, #4]
   d4766:	428b      	cmp	r3, r1
   d4768:	d301      	bcc.n	d476e <_ZN6String7reserveEj+0x12>
   d476a:	2001      	movs	r0, #1
}
   d476c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d476e:	4620      	mov	r0, r4
   d4770:	f7ff ffe8 	bl	d4744 <_ZN6String12changeBufferEj>
   d4774:	2800      	cmp	r0, #0
   d4776:	d0f9      	beq.n	d476c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d4778:	68a3      	ldr	r3, [r4, #8]
   d477a:	2b00      	cmp	r3, #0
   d477c:	d1f5      	bne.n	d476a <_ZN6String7reserveEj+0xe>
   d477e:	6822      	ldr	r2, [r4, #0]
   d4780:	7013      	strb	r3, [r2, #0]
   d4782:	e7f2      	b.n	d476a <_ZN6String7reserveEj+0xe>

000d4784 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4784:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4786:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d4788:	4611      	mov	r1, r2
   d478a:	9201      	str	r2, [sp, #4]
{
   d478c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d478e:	f7ff ffe5 	bl	d475c <_ZN6String7reserveEj>
   d4792:	9a01      	ldr	r2, [sp, #4]
   d4794:	b928      	cbnz	r0, d47a2 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d4796:	4620      	mov	r0, r4
   d4798:	f7ff ffc9 	bl	d472e <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d479c:	4620      	mov	r0, r4
   d479e:	b003      	add	sp, #12
   d47a0:	bd30      	pop	{r4, r5, pc}
	len = length;
   d47a2:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d47a4:	4629      	mov	r1, r5
   d47a6:	6820      	ldr	r0, [r4, #0]
   d47a8:	f002 fa72 	bl	d6c90 <memcpy>
	buffer[len] = 0;
   d47ac:	6822      	ldr	r2, [r4, #0]
   d47ae:	68a3      	ldr	r3, [r4, #8]
   d47b0:	2100      	movs	r1, #0
   d47b2:	54d1      	strb	r1, [r2, r3]
	return *this;
   d47b4:	e7f2      	b.n	d479c <_ZN6String4copyEPKcj+0x18>

000d47b6 <_ZN6StringC1EPKc>:
	buffer = NULL;
   d47b6:	2300      	movs	r3, #0
String::String(const char *cstr)
   d47b8:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d47ba:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d47be:	4604      	mov	r4, r0
	len = 0;
   d47c0:	6083      	str	r3, [r0, #8]
	flags = 0;
   d47c2:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d47c4:	b141      	cbz	r1, d47d8 <_ZN6StringC1EPKc+0x22>
   d47c6:	4608      	mov	r0, r1
   d47c8:	9101      	str	r1, [sp, #4]
   d47ca:	f002 fae4 	bl	d6d96 <strlen>
   d47ce:	9901      	ldr	r1, [sp, #4]
   d47d0:	4602      	mov	r2, r0
   d47d2:	4620      	mov	r0, r4
   d47d4:	f7ff ffd6 	bl	d4784 <_ZN6String4copyEPKcj>
}
   d47d8:	4620      	mov	r0, r4
   d47da:	b002      	add	sp, #8
   d47dc:	bd10      	pop	{r4, pc}

000d47de <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d47de:	b538      	push	{r3, r4, r5, lr}
   d47e0:	4605      	mov	r5, r0
	if (buffer) {
   d47e2:	6800      	ldr	r0, [r0, #0]
{
   d47e4:	460c      	mov	r4, r1
	if (buffer) {
   d47e6:	b168      	cbz	r0, d4804 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   d47e8:	686a      	ldr	r2, [r5, #4]
   d47ea:	688b      	ldr	r3, [r1, #8]
   d47ec:	429a      	cmp	r2, r3
   d47ee:	d307      	bcc.n	d4800 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   d47f0:	6809      	ldr	r1, [r1, #0]
   d47f2:	f002 faab 	bl	d6d4c <strcpy>
			len = rhs.len;
   d47f6:	68a3      	ldr	r3, [r4, #8]
   d47f8:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d47fa:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   d47fc:	60a3      	str	r3, [r4, #8]
}
   d47fe:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   d4800:	f7ff feea 	bl	d45d8 <free>
	buffer = rhs.buffer;
   d4804:	6823      	ldr	r3, [r4, #0]
   d4806:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d4808:	6863      	ldr	r3, [r4, #4]
   d480a:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d480c:	68a3      	ldr	r3, [r4, #8]
   d480e:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d4810:	2300      	movs	r3, #0
	rhs.capacity = 0;
   d4812:	e9c4 3300 	strd	r3, r3, [r4]
   d4816:	e7f1      	b.n	d47fc <_ZN6String4moveERS_+0x1e>

000d4818 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   d4818:	b510      	push	{r4, lr}
	buffer = NULL;
   d481a:	2300      	movs	r3, #0
	capacity = 0;
   d481c:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   d4820:	4604      	mov	r4, r0
	len = 0;
   d4822:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4824:	7303      	strb	r3, [r0, #12]
	move(rval);
   d4826:	f7ff ffda 	bl	d47de <_ZN6String4moveERS_>
}
   d482a:	4620      	mov	r0, r4
   d482c:	bd10      	pop	{r4, pc}

000d482e <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d482e:	4288      	cmp	r0, r1
{
   d4830:	b510      	push	{r4, lr}
   d4832:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d4834:	d005      	beq.n	d4842 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d4836:	680b      	ldr	r3, [r1, #0]
   d4838:	b12b      	cbz	r3, d4846 <_ZN6StringaSERKS_+0x18>
   d483a:	688a      	ldr	r2, [r1, #8]
   d483c:	4619      	mov	r1, r3
   d483e:	f7ff ffa1 	bl	d4784 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d4842:	4620      	mov	r0, r4
   d4844:	bd10      	pop	{r4, pc}
	else invalidate();
   d4846:	f7ff ff72 	bl	d472e <_ZN6String10invalidateEv>
   d484a:	e7fa      	b.n	d4842 <_ZN6StringaSERKS_+0x14>

000d484c <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d484c:	b510      	push	{r4, lr}
	buffer = NULL;
   d484e:	2300      	movs	r3, #0
String::String(const String &value)
   d4850:	4604      	mov	r4, r0
	capacity = 0;
   d4852:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d4856:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4858:	7303      	strb	r3, [r0, #12]
	*this = value;
   d485a:	f7ff ffe8 	bl	d482e <_ZN6StringaSERKS_>
}
   d485e:	4620      	mov	r0, r4
   d4860:	bd10      	pop	{r4, pc}

000d4862 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d4862:	b570      	push	{r4, r5, r6, lr}
   d4864:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d4866:	460e      	mov	r6, r1
   d4868:	b909      	cbnz	r1, d486e <_ZN6String6concatEPKcj+0xc>
   d486a:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d486c:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d486e:	b16a      	cbz	r2, d488c <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d4870:	6884      	ldr	r4, [r0, #8]
   d4872:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d4874:	4621      	mov	r1, r4
   d4876:	f7ff ff71 	bl	d475c <_ZN6String7reserveEj>
   d487a:	2800      	cmp	r0, #0
   d487c:	d0f5      	beq.n	d486a <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d487e:	6828      	ldr	r0, [r5, #0]
   d4880:	68ab      	ldr	r3, [r5, #8]
   d4882:	4631      	mov	r1, r6
   d4884:	4418      	add	r0, r3
   d4886:	f002 fa61 	bl	d6d4c <strcpy>
	len = newlen;
   d488a:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d488c:	2001      	movs	r0, #1
   d488e:	e7ed      	b.n	d486c <_ZN6String6concatEPKcj+0xa>

000d4890 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   d4890:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d4892:	2300      	movs	r3, #0
	buf[0] = c;
   d4894:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   d4898:	2201      	movs	r2, #1
   d489a:	a901      	add	r1, sp, #4
	buf[1] = 0;
   d489c:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   d48a0:	f7ff ffdf 	bl	d4862 <_ZN6String6concatEPKcj>
}
   d48a4:	b003      	add	sp, #12
   d48a6:	f85d fb04 	ldr.w	pc, [sp], #4

000d48aa <_ZNK6String9compareToERKS_>:
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
   d48aa:	6802      	ldr	r2, [r0, #0]
{
   d48ac:	460b      	mov	r3, r1
   d48ae:	6809      	ldr	r1, [r1, #0]
	if (!buffer || !s.buffer) {
   d48b0:	b162      	cbz	r2, d48cc <_ZNK6String9compareToERKS_+0x22>
   d48b2:	b941      	cbnz	r1, d48c6 <_ZNK6String9compareToERKS_+0x1c>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
   d48b4:	6880      	ldr	r0, [r0, #8]
   d48b6:	b160      	cbz	r0, d48d2 <_ZNK6String9compareToERKS_+0x28>
   d48b8:	7810      	ldrb	r0, [r2, #0]
   d48ba:	4770      	bx	lr
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   d48bc:	6898      	ldr	r0, [r3, #8]
   d48be:	b140      	cbz	r0, d48d2 <_ZNK6String9compareToERKS_+0x28>
   d48c0:	7809      	ldrb	r1, [r1, #0]
   d48c2:	4248      	negs	r0, r1
   d48c4:	4770      	bx	lr
		return 0;
	}
	return strcmp(buffer, s.buffer);
   d48c6:	4610      	mov	r0, r2
   d48c8:	f002 ba36 	b.w	d6d38 <strcmp>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   d48cc:	2900      	cmp	r1, #0
   d48ce:	d1f5      	bne.n	d48bc <_ZNK6String9compareToERKS_+0x12>
		return 0;
   d48d0:	4608      	mov	r0, r1
}
   d48d2:	4770      	bx	lr

000d48d4 <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
   d48d4:	b508      	push	{r3, lr}
	return (len == s2.len && compareTo(s2) == 0);
   d48d6:	6882      	ldr	r2, [r0, #8]
   d48d8:	688b      	ldr	r3, [r1, #8]
   d48da:	429a      	cmp	r2, r3
   d48dc:	d105      	bne.n	d48ea <_ZNK6String6equalsERKS_+0x16>
   d48de:	f7ff ffe4 	bl	d48aa <_ZNK6String9compareToERKS_>
   d48e2:	fab0 f080 	clz	r0, r0
   d48e6:	0940      	lsrs	r0, r0, #5
}
   d48e8:	bd08      	pop	{r3, pc}
	return (len == s2.len && compareTo(s2) == 0);
   d48ea:	2000      	movs	r0, #0
   d48ec:	e7fc      	b.n	d48e8 <_ZNK6String6equalsERKS_+0x14>

000d48ee <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d48ee:	4770      	bx	lr

000d48f0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d48f0:	4b06      	ldr	r3, [pc, #24]	; (d490c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d48f2:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d48f4:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   d48f6:	f100 040c 	add.w	r4, r0, #12
	    ||
   d48fa:	d005      	beq.n	d4908 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d48fc:	4608      	mov	r0, r1
   d48fe:	f002 f899 	bl	d6a34 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d4902:	2800      	cmp	r0, #0
	return nullptr;
   d4904:	bf08      	it	eq
   d4906:	2400      	moveq	r4, #0
      }
   d4908:	4620      	mov	r0, r4
   d490a:	bd10      	pop	{r4, pc}
   d490c:	000d6f70 	.word	0x000d6f70

000d4910 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d4910:	b510      	push	{r4, lr}
   d4912:	2130      	movs	r1, #48	; 0x30
   d4914:	4604      	mov	r4, r0
   d4916:	f002 f888 	bl	d6a2a <_ZdlPvj>
   d491a:	4620      	mov	r0, r4
   d491c:	bd10      	pop	{r4, pc}

000d491e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d491e:	f7ff bbba 	b.w	d4096 <_ZdlPv>

000d4922 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4922:	b510      	push	{r4, lr}
          _M_dispose();
   d4924:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4926:	4604      	mov	r4, r0
          _M_dispose();
   d4928:	689b      	ldr	r3, [r3, #8]
   d492a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d492c:	68a3      	ldr	r3, [r4, #8]
   d492e:	3b01      	subs	r3, #1
   d4930:	60a3      	str	r3, [r4, #8]
   d4932:	b92b      	cbnz	r3, d4940 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d4934:	6823      	ldr	r3, [r4, #0]
   d4936:	4620      	mov	r0, r4
   d4938:	68db      	ldr	r3, [r3, #12]
    }
   d493a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d493e:	4718      	bx	r3
    }
   d4940:	bd10      	pop	{r4, pc}

000d4942 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4942:	b510      	push	{r4, lr}
   d4944:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4946:	6800      	ldr	r0, [r0, #0]
   d4948:	b108      	cbz	r0, d494e <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d494a:	f7ff fcf1 	bl	d4330 <os_mutex_recursive_destroy>
    }
   d494e:	4620      	mov	r0, r4
   d4950:	bd10      	pop	{r4, pc}
	...

000d4954 <_ZN8particle3ble13WiringBleLock4lockEv.isra.0>:
    WiringBleLock(WiringBleLock&& lock) :
            locked_(lock.locked_) {
        lock.locked_ = false;
    }

    void lock() {
   d4954:	b510      	push	{r4, lr}
        mutex_.lock();
   d4956:	4b04      	ldr	r3, [pc, #16]	; (d4968 <_ZN8particle3ble13WiringBleLock4lockEv.isra.0+0x14>)
    void lock() {
   d4958:	4604      	mov	r4, r0
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d495a:	6818      	ldr	r0, [r3, #0]
   d495c:	f7ff fcf0 	bl	d4340 <os_mutex_recursive_lock>
        locked_ = true;
   d4960:	2301      	movs	r3, #1
   d4962:	7023      	strb	r3, [r4, #0]
    }
   d4964:	bd10      	pop	{r4, pc}
   d4966:	bf00      	nop
   d4968:	2003e77c 	.word	0x2003e77c

000d496c <_ZN8particle3ble13WiringBleLock6unlockEv.isra.0>:

    void unlock() {
   d496c:	b510      	push	{r4, lr}
        mutex_.unlock();
   d496e:	4b04      	ldr	r3, [pc, #16]	; (d4980 <_ZN8particle3ble13WiringBleLock6unlockEv.isra.0+0x14>)
    void unlock() {
   d4970:	4604      	mov	r4, r0
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d4972:	6818      	ldr	r0, [r3, #0]
   d4974:	f7ff fcec 	bl	d4350 <os_mutex_recursive_unlock>
        locked_ = false;
   d4978:	2300      	movs	r3, #0
   d497a:	7023      	strb	r3, [r4, #0]
    }
   d497c:	bd10      	pop	{r4, pc}
   d497e:	bf00      	nop
   d4980:	2003e77c 	.word	0x2003e77c

000d4984 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   d4984:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d4986:	2500      	movs	r5, #0
   d4988:	1cec      	adds	r4, r5, #3
   d498a:	428c      	cmp	r4, r1
   d498c:	d80d      	bhi.n	d49aa <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   d498e:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   d4990:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   d4992:	5d87      	ldrb	r7, [r0, r6]
   d4994:	4297      	cmp	r7, r2
   d4996:	d105      	bne.n	d49a4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   d4998:	4426      	add	r6, r4
   d499a:	42b1      	cmp	r1, r6
   d499c:	d305      	bcc.n	d49aa <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   d499e:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   d49a0:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   d49a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   d49a4:	3401      	adds	r4, #1
   d49a6:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d49a8:	e7ee      	b.n	d4988 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   d49aa:	2000      	movs	r0, #0
   d49ac:	e7f9      	b.n	d49a2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>

000d49ae <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d49ae:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d49b2:	4604      	mov	r4, r0
   d49b4:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
   d49b8:	461e      	mov	r6, r3
   d49ba:	4689      	mov	r9, r1
   d49bc:	ab01      	add	r3, sp, #4
   d49be:	4690      	mov	r8, r2
   d49c0:	460a      	mov	r2, r1
   d49c2:	6a01      	ldr	r1, [r0, #32]
   d49c4:	f7ff ffde 	bl	d4984 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (!force && adsLen > 0) {
   d49c8:	6a25      	ldr	r5, [r4, #32]
   d49ca:	1cb3      	adds	r3, r6, #2
   d49cc:	bb17      	cbnz	r7, d4a14 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x66>
   d49ce:	b308      	cbz	r0, d4a14 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x66>
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d49d0:	195f      	adds	r7, r3, r5
   d49d2:	1a3f      	subs	r7, r7, r0
   d49d4:	2f1f      	cmp	r7, #31
   d49d6:	d819      	bhi.n	d4a0c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5e>
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d49d8:	f8dd 9004 	ldr.w	r9, [sp, #4]
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d49dc:	f109 0a02 	add.w	sl, r9, #2
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d49e0:	eba5 0209 	sub.w	r2, r5, r9
   d49e4:	1a12      	subs	r2, r2, r0
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d49e6:	eb00 0109 	add.w	r1, r0, r9
   d49ea:	eb06 000a 	add.w	r0, r6, sl
   d49ee:	b292      	uxth	r2, r2
   d49f0:	4421      	add	r1, r4
   d49f2:	4420      	add	r0, r4
   d49f4:	f002 f95a 	bl	d6cac <memmove>
            selfData_[offset] = len + 1;
   d49f8:	1c73      	adds	r3, r6, #1
   d49fa:	f804 3009 	strb.w	r3, [r4, r9]
            memcpy(&selfData_[offset + 2], buf, len);
   d49fe:	4632      	mov	r2, r6
   d4a00:	4641      	mov	r1, r8
   d4a02:	eb04 000a 	add.w	r0, r4, sl
   d4a06:	f002 f943 	bl	d6c90 <memcpy>
            selfLen_ = staLen + len + 2;
   d4a0a:	6227      	str	r7, [r4, #32]
}
   d4a0c:	6a20      	ldr	r0, [r4, #32]
   d4a0e:	b002      	add	sp, #8
   d4a10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d4a14:	442b      	add	r3, r5
   d4a16:	2b1f      	cmp	r3, #31
   d4a18:	d8f8      	bhi.n	d4a0c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5e>
        selfData_[selfLen_++] = len + 1;
   d4a1a:	1c73      	adds	r3, r6, #1
   d4a1c:	5563      	strb	r3, [r4, r5]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d4a1e:	1ca8      	adds	r0, r5, #2
   d4a20:	4425      	add	r5, r4
   d4a22:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   d4a24:	4632      	mov	r2, r6
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d4a26:	f885 9001 	strb.w	r9, [r5, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   d4a2a:	4641      	mov	r1, r8
   d4a2c:	4420      	add	r0, r4
   d4a2e:	f002 f92f 	bl	d6c90 <memcpy>
        selfLen_ += len;
   d4a32:	6a23      	ldr	r3, [r4, #32]
   d4a34:	4433      	add	r3, r6
   d4a36:	6223      	str	r3, [r4, #32]
   d4a38:	e7e8      	b.n	d4a0c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5e>

000d4a3a <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>:
       *  @returns @c *this
       *
       *  The target of @c *this is deallocated, leaving it empty.
       */
      function&
      operator=(nullptr_t) noexcept
   d4a3a:	b510      	push	{r4, lr}
      {
	if (_M_manager)
   d4a3c:	6883      	ldr	r3, [r0, #8]
      operator=(nullptr_t) noexcept
   d4a3e:	4604      	mov	r4, r0
	if (_M_manager)
   d4a40:	b12b      	cbz	r3, d4a4e <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0+0x14>
	  {
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   d4a42:	2203      	movs	r2, #3
   d4a44:	4601      	mov	r1, r0
   d4a46:	4798      	blx	r3
	    _M_manager = nullptr;
   d4a48:	2300      	movs	r3, #0
	    _M_invoker = nullptr;
   d4a4a:	e9c4 3302 	strd	r3, r3, [r4, #8]
	  }
	return *this;
      }
   d4a4e:	4620      	mov	r0, r4
   d4a50:	bd10      	pop	{r4, pc}

000d4a52 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0>:
      operator=(nullptr_t) noexcept
   d4a52:	b510      	push	{r4, lr}
	if (_M_manager)
   d4a54:	6883      	ldr	r3, [r0, #8]
      operator=(nullptr_t) noexcept
   d4a56:	4604      	mov	r4, r0
	if (_M_manager)
   d4a58:	b12b      	cbz	r3, d4a66 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0+0x14>
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   d4a5a:	2203      	movs	r2, #3
   d4a5c:	4601      	mov	r1, r0
   d4a5e:	4798      	blx	r3
	    _M_manager = nullptr;
   d4a60:	2300      	movs	r3, #0
	    _M_invoker = nullptr;
   d4a62:	e9c4 3302 	strd	r3, r3, [r4, #8]
      }
   d4a66:	4620      	mov	r0, r4
   d4a68:	bd10      	pop	{r4, pc}

000d4a6a <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d4a6a:	b510      	push	{r4, lr}
      if (_M_manager)
   d4a6c:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d4a6e:	4604      	mov	r4, r0
      if (_M_manager)
   d4a70:	b113      	cbz	r3, d4a78 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4a72:	2203      	movs	r2, #3
   d4a74:	4601      	mov	r1, r0
   d4a76:	4798      	blx	r3
    }
   d4a78:	4620      	mov	r0, r4
   d4a7a:	bd10      	pop	{r4, pc}

000d4a7c <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   d4a7c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d4a80:	b2da      	uxtb	r2, r3
   d4a82:	2a09      	cmp	r2, #9
   d4a84:	d801      	bhi.n	d4a8a <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   d4a86:	4618      	mov	r0, r3
   d4a88:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   d4a8a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d4a8e:	2b05      	cmp	r3, #5
   d4a90:	d801      	bhi.n	d4a96 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   d4a92:	3857      	subs	r0, #87	; 0x57
   d4a94:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   d4a96:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d4a9a:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   d4a9c:	bf94      	ite	ls
   d4a9e:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   d4aa0:	f04f 30ff 	movhi.w	r0, #4294967295
}
   d4aa4:	4770      	bx	lr

000d4aa6 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   d4aa6:	b510      	push	{r4, lr}
            locked_(false) {
   d4aa8:	2300      	movs	r3, #0
    WiringBleLock() :
   d4aaa:	4604      	mov	r4, r0
            locked_(false) {
   d4aac:	7003      	strb	r3, [r0, #0]
        lock();
   d4aae:	f7ff ff51 	bl	d4954 <_ZN8particle3ble13WiringBleLock4lockEv.isra.0>
    }
   d4ab2:	4620      	mov	r0, r4
   d4ab4:	bd10      	pop	{r4, pc}

000d4ab6 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   d4ab6:	b510      	push	{r4, lr}
        if (locked_) {
   d4ab8:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   d4aba:	4604      	mov	r4, r0
        if (locked_) {
   d4abc:	b10b      	cbz	r3, d4ac2 <_ZN8particle3ble13WiringBleLockD1Ev+0xc>
            unlock();
   d4abe:	f7ff ff55 	bl	d496c <_ZN8particle3ble13WiringBleLock6unlockEv.isra.0>
    }
   d4ac2:	4620      	mov	r0, r4
   d4ac4:	bd10      	pop	{r4, pc}
	...

000d4ac8 <_ZN8particle10BleAddress3setEPKcNS_14BleAddressTypeE>:
int BleAddress::set(const char* address, BleAddressType type) {
   d4ac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d4acc:	4606      	mov	r6, r0
   d4ace:	4690      	mov	r8, r2
    CHECK_TRUE(address, SYSTEM_ERROR_INVALID_ARGUMENT);
   d4ad0:	460f      	mov	r7, r1
   d4ad2:	b399      	cbz	r1, d4b3c <_ZN8particle10BleAddress3setEPKcNS_14BleAddressTypeE+0x74>
    for (size_t i = 0; i < strnlen(address, BLE_SIG_ADDR_LEN * 2 + 5) && len > 0; i++) {
   d4ad4:	f04f 0900 	mov.w	r9, #0
    size_t len = BLE_SIG_ADDR_LEN;
   d4ad8:	2406      	movs	r4, #6
    for (size_t i = 0; i < strnlen(address, BLE_SIG_ADDR_LEN * 2 + 5) && len > 0; i++) {
   d4ada:	2111      	movs	r1, #17
   d4adc:	4638      	mov	r0, r7
   d4ade:	f002 f962 	bl	d6da6 <strnlen>
   d4ae2:	4548      	cmp	r0, r9
   d4ae4:	d806      	bhi.n	d4af4 <_ZN8particle10BleAddress3setEPKcNS_14BleAddressTypeE+0x2c>
   d4ae6:	4434      	add	r4, r6
        address_.addr[len - 1] = 0x00;
   d4ae8:	2300      	movs	r3, #0
    while (len > 0) {
   d4aea:	42b4      	cmp	r4, r6
   d4aec:	d021      	beq.n	d4b32 <_ZN8particle10BleAddress3setEPKcNS_14BleAddressTypeE+0x6a>
        address_.addr[len - 1] = 0x00;
   d4aee:	f804 3d01 	strb.w	r3, [r4, #-1]!
    while (len > 0) {
   d4af2:	e7fa      	b.n	d4aea <_ZN8particle10BleAddress3setEPKcNS_14BleAddressTypeE+0x22>
    for (size_t i = 0; i < strnlen(address, BLE_SIG_ADDR_LEN * 2 + 5) && len > 0; i++) {
   d4af4:	b1ec      	cbz	r4, d4b32 <_ZN8particle10BleAddress3setEPKcNS_14BleAddressTypeE+0x6a>
        int8_t hi = hexToNibble(address[i]);
   d4af6:	f817 0009 	ldrb.w	r0, [r7, r9]
   d4afa:	f7ff ffbf 	bl	d4a7c <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   d4afe:	0603      	lsls	r3, r0, #24
   d4b00:	d414      	bmi.n	d4b2c <_ZN8particle10BleAddress3setEPKcNS_14BleAddressTypeE+0x64>
            address_.addr[len - 1] = hi << 4;
   d4b02:	0100      	lsls	r0, r0, #4
   d4b04:	3c01      	subs	r4, #1
   d4b06:	b2c5      	uxtb	r5, r0
   d4b08:	5535      	strb	r5, [r6, r4]
            if (++i < strnlen(address, BLE_SIG_ADDR_LEN * 2 + 5)) {
   d4b0a:	2111      	movs	r1, #17
   d4b0c:	4638      	mov	r0, r7
   d4b0e:	f002 f94a 	bl	d6da6 <strnlen>
   d4b12:	f109 0901 	add.w	r9, r9, #1
   d4b16:	4581      	cmp	r9, r0
   d4b18:	d208      	bcs.n	d4b2c <_ZN8particle10BleAddress3setEPKcNS_14BleAddressTypeE+0x64>
                int8_t lo = hexToNibble(address[i]);
   d4b1a:	f817 0009 	ldrb.w	r0, [r7, r9]
   d4b1e:	f7ff ffad 	bl	d4a7c <_ZN8particle11hexToNibbleEc>
   d4b22:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   d4b24:	2800      	cmp	r0, #0
                    address_.addr[len - 1] |= lo;
   d4b26:	bfa4      	itt	ge
   d4b28:	4328      	orrge	r0, r5
   d4b2a:	5530      	strbge	r0, [r6, r4]
    for (size_t i = 0; i < strnlen(address, BLE_SIG_ADDR_LEN * 2 + 5) && len > 0; i++) {
   d4b2c:	f109 0901 	add.w	r9, r9, #1
   d4b30:	e7d3      	b.n	d4ada <_ZN8particle10BleAddress3setEPKcNS_14BleAddressTypeE+0x12>
    address_.addr_type = static_cast<ble_sig_addr_type_t>(type);
   d4b32:	f886 8006 	strb.w	r8, [r6, #6]
   d4b36:	2000      	movs	r0, #0
}
   d4b38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    CHECK_TRUE(address, SYSTEM_ERROR_INVALID_ARGUMENT);
   d4b3c:	4800      	ldr	r0, [pc, #0]	; (d4b40 <_ZN8particle10BleAddress3setEPKcNS_14BleAddressTypeE+0x78>)
   d4b3e:	e7fb      	b.n	d4b38 <_ZN8particle10BleAddress3setEPKcNS_14BleAddressTypeE+0x70>
   d4b40:	fffffef2 	.word	0xfffffef2

000d4b44 <_ZN8particle10BleAddressC1EPKcNS_14BleAddressTypeE>:
BleAddress::BleAddress(const char* address, BleAddressType type) {
   d4b44:	b510      	push	{r4, lr}
   d4b46:	4604      	mov	r4, r0
    set(address, type);
   d4b48:	f7ff ffbe 	bl	d4ac8 <_ZN8particle10BleAddress3setEPKcNS_14BleAddressTypeE>
}
   d4b4c:	4620      	mov	r0, r4
   d4b4e:	bd10      	pop	{r4, pc}

000d4b50 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   d4b50:	b082      	sub	sp, #8
   d4b52:	4603      	mov	r3, r0
    address_ = addr;
   d4b54:	6808      	ldr	r0, [r1, #0]
   d4b56:	6849      	ldr	r1, [r1, #4]
   d4b58:	466a      	mov	r2, sp
   d4b5a:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   d4b5c:	466a      	mov	r2, sp
   d4b5e:	ca03      	ldmia	r2!, {r0, r1}
   d4b60:	6018      	str	r0, [r3, #0]
}
   d4b62:	4618      	mov	r0, r3
    address_ = addr.address_;
   d4b64:	6059      	str	r1, [r3, #4]
}
   d4b66:	b002      	add	sp, #8
   d4b68:	4770      	bx	lr

000d4b6a <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   d4b6a:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   d4b6c:	7982      	ldrb	r2, [r0, #6]
   d4b6e:	798b      	ldrb	r3, [r1, #6]
   d4b70:	429a      	cmp	r2, r3
   d4b72:	d106      	bne.n	d4b82 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d4b74:	2206      	movs	r2, #6
   d4b76:	f002 f87d 	bl	d6c74 <memcmp>
   d4b7a:	fab0 f080 	clz	r0, r0
   d4b7e:	0940      	lsrs	r0, r0, #5
}
   d4b80:	bd08      	pop	{r3, pc}
    return false;
   d4b82:	2000      	movs	r0, #0
   d4b84:	e7fc      	b.n	d4b80 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000d4b86 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   d4b86:	f04f 33ff 	mov.w	r3, #4294967295
   d4b8a:	6003      	str	r3, [r0, #0]
   d4b8c:	8083      	strh	r3, [r0, #4]
}
   d4b8e:	2000      	movs	r0, #0
   d4b90:	4770      	bx	lr

000d4b92 <_ZN8particle10BleAddressC1Ev>:
        : address_{} {
   d4b92:	2100      	movs	r1, #0
BleAddress::BleAddress()
   d4b94:	b508      	push	{r3, lr}
        : address_{} {
   d4b96:	6001      	str	r1, [r0, #0]
   d4b98:	6041      	str	r1, [r0, #4]
BleAddress::BleAddress()
   d4b9a:	4602      	mov	r2, r0
    clear();
   d4b9c:	f7ff fff3 	bl	d4b86 <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   d4ba0:	7191      	strb	r1, [r2, #6]
}
   d4ba2:	4610      	mov	r0, r2
   d4ba4:	bd08      	pop	{r3, pc}
	...

000d4ba8 <_ZN8particle7BleUuidC1Ev>:
        : type_(BleUuidType::LONG) {
   d4ba8:	2201      	movs	r2, #1
   d4baa:	6102      	str	r2, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d4bac:	4a06      	ldr	r2, [pc, #24]	; (d4bc8 <_ZN8particle7BleUuidC1Ev+0x20>)
   d4bae:	6811      	ldr	r1, [r2, #0]
   d4bb0:	6001      	str	r1, [r0, #0]
   d4bb2:	6851      	ldr	r1, [r2, #4]
   d4bb4:	6041      	str	r1, [r0, #4]
   d4bb6:	8911      	ldrh	r1, [r2, #8]
   d4bb8:	7a92      	ldrb	r2, [r2, #10]
   d4bba:	7282      	strb	r2, [r0, #10]
   d4bbc:	2200      	movs	r2, #0
   d4bbe:	8101      	strh	r1, [r0, #8]
   d4bc0:	f8c0 200b 	str.w	r2, [r0, #11]
   d4bc4:	73c2      	strb	r2, [r0, #15]
}
   d4bc6:	4770      	bx	lr
   d4bc8:	000d6f78 	.word	0x000d6f78

000d4bcc <_ZN8particle7BleUuidC1ERKS0_>:
BleUuid::BleUuid(const BleUuid& uuid)
   d4bcc:	b510      	push	{r4, lr}
        : type_(uuid.type_) {
   d4bce:	690b      	ldr	r3, [r1, #16]
   d4bd0:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d4bd2:	f101 0210 	add.w	r2, r1, #16
   d4bd6:	4603      	mov	r3, r0
   d4bd8:	f851 4b04 	ldr.w	r4, [r1], #4
   d4bdc:	f843 4b04 	str.w	r4, [r3], #4
   d4be0:	4291      	cmp	r1, r2
   d4be2:	d1f9      	bne.n	d4bd8 <_ZN8particle7BleUuidC1ERKS0_+0xc>
}
   d4be4:	bd10      	pop	{r4, pc}

000d4be6 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d4be6:	b510      	push	{r4, lr}
    if (uuid128) {
   d4be8:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d4bea:	4604      	mov	r4, r0
    if (uuid128) {
   d4bec:	b1b1      	cbz	r1, d4c1c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   d4bee:	2a01      	cmp	r2, #1
   d4bf0:	f101 0210 	add.w	r2, r1, #16
   d4bf4:	d10a      	bne.n	d4c0c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   d4bf6:	4601      	mov	r1, r0
   d4bf8:	f853 0b04 	ldr.w	r0, [r3], #4
   d4bfc:	f841 0b04 	str.w	r0, [r1], #4
   d4c00:	4293      	cmp	r3, r2
   d4c02:	d1f9      	bne.n	d4bf8 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   d4c04:	2301      	movs	r3, #1
   d4c06:	6123      	str	r3, [r4, #16]
}
   d4c08:	4620      	mov	r0, r4
   d4c0a:	bd10      	pop	{r4, pc}
   d4c0c:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   d4c0e:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   d4c12:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d4c16:	429a      	cmp	r2, r3
   d4c18:	d1f9      	bne.n	d4c0e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   d4c1a:	e7f3      	b.n	d4c04 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d4c1c:	2210      	movs	r2, #16
   d4c1e:	f002 f85f 	bl	d6ce0 <memset>
   d4c22:	e7f1      	b.n	d4c08 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000d4c24 <_ZN8particle7BleUuidC1Et>:
BleUuid::BleUuid(uint16_t uuid16)
   d4c24:	b510      	push	{r4, lr}
   d4c26:	4603      	mov	r3, r0
   d4c28:	460c      	mov	r4, r1
        : BleUuid() {
   d4c2a:	f7ff ffbd 	bl	d4ba8 <_ZN8particle7BleUuidC1Ev>
    type_ = BleUuidType::SHORT;
   d4c2e:	2200      	movs	r2, #0
   d4c30:	611a      	str	r2, [r3, #16]
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   d4c32:	819c      	strh	r4, [r3, #12]
}
   d4c34:	4618      	mov	r0, r3
   d4c36:	bd10      	pop	{r4, pc}

000d4c38 <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   d4c38:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   d4c3a:	6902      	ldr	r2, [r0, #16]
   d4c3c:	690b      	ldr	r3, [r1, #16]
   d4c3e:	429a      	cmp	r2, r3
   d4c40:	d106      	bne.n	d4c50 <_ZNK8particle7BleUuideqERKS0_+0x18>
   d4c42:	2210      	movs	r2, #16
   d4c44:	f002 f816 	bl	d6c74 <memcmp>
   d4c48:	fab0 f080 	clz	r0, r0
   d4c4c:	0940      	lsrs	r0, r0, #5
}
   d4c4e:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   d4c50:	2000      	movs	r0, #0
   d4c52:	e7fc      	b.n	d4c4e <_ZNK8particle7BleUuideqERKS0_+0x16>

000d4c54 <_ZN8particle18BleAdvertisingData3setEPKhj>:
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   d4c54:	b538      	push	{r3, r4, r5, lr}
   d4c56:	4605      	mov	r5, r0
    if (buf == nullptr || len == 0) {
   d4c58:	b101      	cbz	r1, d4c5c <_ZN8particle18BleAdvertisingData3setEPKhj+0x8>
   d4c5a:	b91a      	cbnz	r2, d4c64 <_ZN8particle18BleAdvertisingData3setEPKhj+0x10>
        selfLen_ = 0;
   d4c5c:	2400      	movs	r4, #0
    selfLen_ = len;
   d4c5e:	622c      	str	r4, [r5, #32]
}
   d4c60:	4620      	mov	r0, r4
   d4c62:	bd38      	pop	{r3, r4, r5, pc}
    len = std::min(len, (size_t)BLE_MAX_ADV_DATA_LEN);
   d4c64:	2a1f      	cmp	r2, #31
   d4c66:	bf28      	it	cs
   d4c68:	221f      	movcs	r2, #31
   d4c6a:	4614      	mov	r4, r2
    memcpy(selfData_, buf, len);
   d4c6c:	f002 f810 	bl	d6c90 <memcpy>
   d4c70:	e7f5      	b.n	d4c5e <_ZN8particle18BleAdvertisingData3setEPKhj+0xa>

000d4c72 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d4c72:	b430      	push	{r4, r5}
   d4c74:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   d4c78:	b912      	cbnz	r2, d4c80 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0xe>
        return selfLen_;
   d4c7a:	6a00      	ldr	r0, [r0, #32]
}
   d4c7c:	bc30      	pop	{r4, r5}
   d4c7e:	4770      	bx	lr
   d4c80:	9502      	str	r5, [sp, #8]
   d4c82:	bc30      	pop	{r4, r5}
   d4c84:	f7ff be93 	b.w	d49ae <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>

000d4c88 <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   d4c88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d4c8a:	4604      	mov	r4, r0
          selfLen_(0) {
   d4c8c:	4602      	mov	r2, r0
   d4c8e:	f100 011f 	add.w	r1, r0, #31
   d4c92:	2300      	movs	r3, #0
   d4c94:	f802 3b01 	strb.w	r3, [r2], #1
   d4c98:	4291      	cmp	r1, r2
   d4c9a:	d1fb      	bne.n	d4c94 <_ZN8particle18BleAdvertisingDataC1Ev+0xc>
   d4c9c:	6223      	str	r3, [r4, #32]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d4c9e:	9300      	str	r3, [sp, #0]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d4ca0:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d4ca2:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d4ca4:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d4ca8:	4619      	mov	r1, r3
   d4caa:	f10d 020f 	add.w	r2, sp, #15
   d4cae:	4620      	mov	r0, r4
   d4cb0:	f7ff ffdf 	bl	d4c72 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d4cb4:	4620      	mov	r0, r4
   d4cb6:	b004      	add	sp, #16
   d4cb8:	bd10      	pop	{r4, pc}

000d4cba <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>:
size_t BleAdvertisingData::get(BleAdvertisingDataType type, uint8_t* buf, size_t len) const {
   d4cba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d4cbc:	4615      	mov	r5, r2
   d4cbe:	461f      	mov	r7, r3
   d4cc0:	460a      	mov	r2, r1
   d4cc2:	ab01      	add	r3, sp, #4
   d4cc4:	6a01      	ldr	r1, [r0, #32]
   d4cc6:	4606      	mov	r6, r0
   d4cc8:	f7ff fe5c 	bl	d4984 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (adsLen > 0) {
   d4ccc:	f030 0402 	bics.w	r4, r0, #2
   d4cd0:	d00b      	beq.n	d4cea <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x30>
            adsLen -= 2;
   d4cd2:	1e84      	subs	r4, r0, #2
   d4cd4:	42bc      	cmp	r4, r7
   d4cd6:	bf28      	it	cs
   d4cd8:	463c      	movcs	r4, r7
            if (buf != nullptr) {
   d4cda:	b135      	cbz	r5, d4cea <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x30>
                memcpy(buf, &selfData_[offset + 2], len);
   d4cdc:	9901      	ldr	r1, [sp, #4]
   d4cde:	3102      	adds	r1, #2
   d4ce0:	4622      	mov	r2, r4
   d4ce2:	4431      	add	r1, r6
   d4ce4:	4628      	mov	r0, r5
   d4ce6:	f001 ffd3 	bl	d6c90 <memcpy>
}
   d4cea:	4620      	mov	r0, r4
   d4cec:	b003      	add	sp, #12
   d4cee:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4cf0 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>:
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
   d4cf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4cf2:	4613      	mov	r3, r2
   d4cf4:	460c      	mov	r4, r1
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   d4cf6:	9201      	str	r2, [sp, #4]
   d4cf8:	460a      	mov	r2, r1
   d4cfa:	2108      	movs	r1, #8
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
   d4cfc:	4605      	mov	r5, r0
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   d4cfe:	f7ff ffdc 	bl	d4cba <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (nameLen > 0) {
   d4d02:	b940      	cbnz	r0, d4d16 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj+0x26>
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   d4d04:	9b01      	ldr	r3, [sp, #4]
   d4d06:	4622      	mov	r2, r4
   d4d08:	2109      	movs	r1, #9
   d4d0a:	4628      	mov	r0, r5
}
   d4d0c:	b003      	add	sp, #12
   d4d0e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   d4d12:	f7ff bfd2 	b.w	d4cba <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
}
   d4d16:	b003      	add	sp, #12
   d4d18:	bd30      	pop	{r4, r5, pc}
	...

000d4d1c <_ZNK8particle18BleAdvertisingData10deviceNameEv>:
String BleAdvertisingData::deviceName() const {
   d4d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4d1e:	460c      	mov	r4, r1
   d4d20:	b089      	sub	sp, #36	; 0x24
    String name;
   d4d22:	490c      	ldr	r1, [pc, #48]	; (d4d54 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x38>)
String BleAdvertisingData::deviceName() const {
   d4d24:	4605      	mov	r5, r0
    String name;
   d4d26:	f7ff fd46 	bl	d47b6 <_ZN6StringC1EPKc>
    size_t len = deviceName(buf, sizeof(buf));
   d4d2a:	221f      	movs	r2, #31
   d4d2c:	4669      	mov	r1, sp
   d4d2e:	4620      	mov	r0, r4
   d4d30:	f7ff ffde 	bl	d4cf0 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>
    if (len > 0) {
   d4d34:	4606      	mov	r6, r0
   d4d36:	b150      	cbz	r0, d4d4e <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
   d4d38:	466c      	mov	r4, sp
        for (size_t i = 0; i < len; i++) {
   d4d3a:	2700      	movs	r7, #0
            if (!name.concat(buf[i])) {
   d4d3c:	f814 1b01 	ldrb.w	r1, [r4], #1
   d4d40:	4628      	mov	r0, r5
   d4d42:	f7ff fda5 	bl	d4890 <_ZN6String6concatEc>
   d4d46:	b110      	cbz	r0, d4d4e <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
        for (size_t i = 0; i < len; i++) {
   d4d48:	3701      	adds	r7, #1
   d4d4a:	42be      	cmp	r6, r7
   d4d4c:	d1f6      	bne.n	d4d3c <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x20>
}
   d4d4e:	4628      	mov	r0, r5
   d4d50:	b009      	add	sp, #36	; 0x24
   d4d52:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4d54:	000d6e55 	.word	0x000d6e55

000d4d58 <_ZNK8particle18BleAdvertisingData10appearanceEv>:
ble_sig_appearance_t BleAdvertisingData::appearance() const {
   d4d58:	b507      	push	{r0, r1, r2, lr}
    size_t len = get(BleAdvertisingDataType::APPEARANCE, buf, sizeof(buf));
   d4d5a:	2302      	movs	r3, #2
   d4d5c:	aa01      	add	r2, sp, #4
   d4d5e:	2119      	movs	r1, #25
   d4d60:	f7ff ffab 	bl	d4cba <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (len > 0) {
   d4d64:	b128      	cbz	r0, d4d72 <_ZNK8particle18BleAdvertisingData10appearanceEv+0x1a>
        uint16_t temp = (uint16_t)buf[1] << 8 | buf[0];
   d4d66:	f89d 3005 	ldrb.w	r3, [sp, #5]
   d4d6a:	f89d 0004 	ldrb.w	r0, [sp, #4]
   d4d6e:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
}
   d4d72:	b003      	add	sp, #12
   d4d74:	f85d fb04 	ldr.w	pc, [sp], #4

000d4d78 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:

    void onPairingEvent(const BleOnPairingEventStdFunction& callback) {
        pairingEventCallback_ = callback;
    }

    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   d4d78:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d4d7a:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   d4d7e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   d4d82:	4293      	cmp	r3, r2
   d4d84:	4618      	mov	r0, r3
   d4d86:	d006      	beq.n	d4d96 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   d4d88:	6804      	ldr	r4, [r0, #0]
   d4d8a:	8824      	ldrh	r4, [r4, #0]
   d4d8c:	428c      	cmp	r4, r1
   d4d8e:	f103 0308 	add.w	r3, r3, #8
   d4d92:	d1f6      	bne.n	d4d82 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
                return &peer;
            }
        }
        return nullptr;
    }
   d4d94:	bd10      	pop	{r4, pc}
        return nullptr;
   d4d96:	2000      	movs	r0, #0
   d4d98:	e7fc      	b.n	d4d94 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000d4d9c <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d4d9c:	b570      	push	{r4, r5, r6, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d4d9e:	2500      	movs	r5, #0
   d4da0:	6005      	str	r5, [r0, #0]
   d4da2:	4606      	mov	r6, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d4da4:	2030      	movs	r0, #48	; 0x30
   d4da6:	f7ff f974 	bl	d4092 <_Znwj>
	  auto __pi = ::new (__mem)
   d4daa:	4604      	mov	r4, r0
   d4dac:	b188      	cbz	r0, d4dd2 <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   d4dae:	2301      	movs	r3, #1
   d4db0:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   d4db4:	4b09      	ldr	r3, [pc, #36]	; (d4ddc <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   d4db6:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   d4db8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d4dbc:	8183      	strh	r3, [r0, #12]
   d4dbe:	300e      	adds	r0, #14
   d4dc0:	f7ff fee7 	bl	d4b92 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   d4dc4:	e9c4 5506 	strd	r5, r5, [r4, #24]
   d4dc8:	e9c4 5508 	strd	r5, r5, [r4, #32]
   d4dcc:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   d4dd0:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   d4dd2:	6074      	str	r4, [r6, #4]
   d4dd4:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   d4dd6:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   d4dd8:	4630      	mov	r0, r6
   d4dda:	bd70      	pop	{r4, r5, r6, pc}
   d4ddc:	000d6f5c 	.word	0x000d6f5c

000d4de0 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   d4de0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4de2:	460d      	mov	r5, r1
   d4de4:	4604      	mov	r4, r0
    WiringBleLock lk;
   d4de6:	a801      	add	r0, sp, #4
   d4de8:	f7ff fe5d 	bl	d4aa6 <_ZN8particle3ble13WiringBleLockC1Ev>
    address_ = addr.address_;
   d4dec:	682a      	ldr	r2, [r5, #0]
   d4dee:	f852 3f02 	ldr.w	r3, [r2, #2]!
   d4df2:	6023      	str	r3, [r4, #0]
   d4df4:	6853      	ldr	r3, [r2, #4]
   d4df6:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   d4df8:	a801      	add	r0, sp, #4
   d4dfa:	f7ff fe5c 	bl	d4ab6 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   d4dfe:	4620      	mov	r0, r4
   d4e00:	b003      	add	sp, #12
   d4e02:	bd30      	pop	{r4, r5, pc}

000d4e04 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d4e04:	b530      	push	{r4, r5, lr}
   d4e06:	4605      	mov	r5, r0
   d4e08:	b087      	sub	sp, #28
   d4e0a:	460c      	mov	r4, r1
    WiringBleLock lk;
   d4e0c:	a801      	add	r0, sp, #4
   d4e0e:	f7ff fe4a 	bl	d4aa6 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d4e12:	682a      	ldr	r2, [r5, #0]
   d4e14:	6823      	ldr	r3, [r4, #0]
   d4e16:	8812      	ldrh	r2, [r2, #0]
   d4e18:	881b      	ldrh	r3, [r3, #0]
   d4e1a:	429a      	cmp	r2, r3
   d4e1c:	d10d      	bne.n	d4e3a <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   d4e1e:	4629      	mov	r1, r5
   d4e20:	a802      	add	r0, sp, #8
   d4e22:	f7ff ffdd 	bl	d4de0 <_ZNK8particle13BlePeerDevice7addressEv>
   d4e26:	4621      	mov	r1, r4
   d4e28:	a804      	add	r0, sp, #16
   d4e2a:	f7ff ffd9 	bl	d4de0 <_ZNK8particle13BlePeerDevice7addressEv>
   d4e2e:	a904      	add	r1, sp, #16
   d4e30:	a802      	add	r0, sp, #8
   d4e32:	f7ff fe9a 	bl	d4b6a <_ZNK8particle10BleAddresseqERKS0_>
   d4e36:	4604      	mov	r4, r0
   d4e38:	b900      	cbnz	r0, d4e3c <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   d4e3a:	2400      	movs	r4, #0
    WiringBleLock lk;
   d4e3c:	a801      	add	r0, sp, #4
   d4e3e:	f7ff fe3a 	bl	d4ab6 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   d4e42:	4620      	mov	r0, r4
   d4e44:	b007      	add	sp, #28
   d4e46:	bd30      	pop	{r4, r5, pc}

000d4e48 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d4e48:	b510      	push	{r4, lr}
   d4e4a:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d4e4c:	2054      	movs	r0, #84	; 0x54
   d4e4e:	f7ff f920 	bl	d4092 <_Znwj>
   d4e52:	4601      	mov	r1, r0
   d4e54:	b160      	cbz	r0, d4e70 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   d4e56:	2300      	movs	r3, #0
   d4e58:	e9c0 3300 	strd	r3, r3, [r0]
   d4e5c:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d4e60:	e9c0 3304 	strd	r3, r3, [r0, #16]
   d4e64:	e9c0 3306 	strd	r3, r3, [r0, #24]
   d4e68:	6203      	str	r3, [r0, #32]
    _Function_base() : _M_manager(nullptr) { }
   d4e6a:	62c3      	str	r3, [r0, #44]	; 0x2c
   d4e6c:	63c3      	str	r3, [r0, #60]	; 0x3c
   d4e6e:	64c3      	str	r3, [r0, #76]	; 0x4c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   d4e70:	6021      	str	r1, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   d4e72:	b919      	cbnz	r1, d4e7c <_ZN8particle14BleLocalDeviceC1Ev+0x34>
        SPARK_ASSERT(false);
   d4e74:	4a09      	ldr	r2, [pc, #36]	; (d4e9c <_ZN8particle14BleLocalDeviceC1Ev+0x54>)
   d4e76:	200a      	movs	r0, #10
   d4e78:	f7ff faea 	bl	d4450 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d4e7c:	2000      	movs	r0, #0
   d4e7e:	f7ff fa21 	bl	d42c4 <hal_ble_stack_init>
   d4e82:	b120      	cbz	r0, d4e8e <_ZN8particle14BleLocalDeviceC1Ev+0x46>
   d4e84:	4a05      	ldr	r2, [pc, #20]	; (d4e9c <_ZN8particle14BleLocalDeviceC1Ev+0x54>)
   d4e86:	2100      	movs	r1, #0
   d4e88:	200a      	movs	r0, #10
   d4e8a:	f7ff fae1 	bl	d4450 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   d4e8e:	6821      	ldr	r1, [r4, #0]
   d4e90:	4803      	ldr	r0, [pc, #12]	; (d4ea0 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d4e92:	2200      	movs	r2, #0
   d4e94:	f7ff fa3a 	bl	d430c <hal_ble_set_callback_on_periph_link_events>
}
   d4e98:	4620      	mov	r0, r4
   d4e9a:	bd10      	pop	{r4, pc}
   d4e9c:	000d42a5 	.word	0x000d42a5
   d4ea0:	000d54f5 	.word	0x000d54f5

000d4ea4 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d4ea4:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d4ea6:	4c0b      	ldr	r4, [pc, #44]	; (d4ed4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d4ea8:	7823      	ldrb	r3, [r4, #0]
   d4eaa:	f3bf 8f5b 	dmb	ish
   d4eae:	07db      	lsls	r3, r3, #31
   d4eb0:	d40e      	bmi.n	d4ed0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>
   d4eb2:	4620      	mov	r0, r4
   d4eb4:	f7ff f8f1 	bl	d409a <__cxa_guard_acquire>
   d4eb8:	b150      	cbz	r0, d4ed0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>
   d4eba:	4807      	ldr	r0, [pc, #28]	; (d4ed8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d4ebc:	f7ff ffc4 	bl	d4e48 <_ZN8particle14BleLocalDeviceC1Ev>
   d4ec0:	4620      	mov	r0, r4
   d4ec2:	f7ff f8ef 	bl	d40a4 <__cxa_guard_release>
   d4ec6:	4a05      	ldr	r2, [pc, #20]	; (d4edc <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d4ec8:	4905      	ldr	r1, [pc, #20]	; (d4ee0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x3c>)
   d4eca:	4803      	ldr	r0, [pc, #12]	; (d4ed8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d4ecc:	f001 fda8 	bl	d6a20 <__aeabi_atexit>
    return instance;
}
   d4ed0:	4801      	ldr	r0, [pc, #4]	; (d4ed8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d4ed2:	bd10      	pop	{r4, pc}
   d4ed4:	2003e778 	.word	0x2003e778
   d4ed8:	2003e780 	.word	0x2003e780
   d4edc:	2003e750 	.word	0x2003e750
   d4ee0:	000d5143 	.word	0x000d5143

000d4ee4 <_ZN8particle16BleScanDelegatorC1Ev>:
   d4ee4:	2200      	movs	r2, #0
public:
    BleScanFilter()
            : minRssi_(BLE_RSSI_INVALID),
              maxRssi_(BLE_RSSI_INVALID),
              customData_(nullptr),
              customDataLen_(0) {
   d4ee6:	f647 717f 	movw	r1, #32639	; 0x7f7f
   d4eea:	e9c0 2200 	strd	r2, r2, [r0]
    BleScanDelegator()
            : resultsPtr_(nullptr),
              targetCount_(0),
              foundCount_(0),
              scanResultCallback_(nullptr),
              scanResultCallbackRef_(nullptr) {
   d4eee:	e9c0 2202 	strd	r2, r2, [r0, #8]
   d4ef2:	e9c0 2204 	strd	r2, r2, [r0, #16]
   d4ef6:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
   d4efa:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
   d4efe:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
   d4f02:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
   d4f06:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
   d4f0a:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
   d4f0e:	e9c0 221b 	strd	r2, r2, [r0, #108]	; 0x6c
   d4f12:	6202      	str	r2, [r0, #32]
   d4f14:	6302      	str	r2, [r0, #48]	; 0x30
   d4f16:	f8a0 1068 	strh.w	r1, [r0, #104]	; 0x68
        resultsVector_.clear();
    }
   d4f1a:	4770      	bx	lr

000d4f1c <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj>:
        scanResultCallbackRef_ = callback ? std::bind(callback, _1, context) : (BleOnScanResultStdFunction)nullptr;
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
        return foundCount_;
    }

    int start(BleScanResult* results, size_t resultCount) {
   d4f1c:	b570      	push	{r4, r5, r6, lr}
   d4f1e:	4604      	mov	r4, r0
        scanResultCallback_ = nullptr;
   d4f20:	3018      	adds	r0, #24
    int start(BleScanResult* results, size_t resultCount) {
   d4f22:	460e      	mov	r6, r1
   d4f24:	4615      	mov	r5, r2
        scanResultCallback_ = nullptr;
   d4f26:	f7ff fd94 	bl	d4a52 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0>
        scanResultCallbackRef_ = nullptr;
   d4f2a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d4f2e:	f7ff fd84 	bl	d4a3a <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>
        resultsPtr_ = results;
        targetCount_ = resultCount;
   d4f32:	e9c4 6503 	strd	r6, r5, [r4, #12]
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
   d4f36:	2200      	movs	r2, #0
   d4f38:	4621      	mov	r1, r4
   d4f3a:	4803      	ldr	r0, [pc, #12]	; (d4f48 <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj+0x2c>)
   d4f3c:	f7ff f9ca 	bl	d42d4 <hal_ble_gap_start_scan>
   d4f40:	2800      	cmp	r0, #0
        return foundCount_;
   d4f42:	bfa8      	it	ge
   d4f44:	6960      	ldrge	r0, [r4, #20]
    }
   d4f46:	bd70      	pop	{r4, r5, r6, pc}
   d4f48:	000d5b15 	.word	0x000d5b15

000d4f4c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>:
            return false;
        }
        return true;
    }

    bool filterByCustomData(const BleScanResult& result) {
   d4f4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        customDataLen_ = len;
        return *this;
    }
    const uint8_t* const customData(size_t* len) const {
        *len = customDataLen_;
        return customData_;
   d4f50:	f8d0 806c 	ldr.w	r8, [r0, #108]	; 0x6c
   d4f54:	b08b      	sub	sp, #44	; 0x2c
   d4f56:	460e      	mov	r6, r1
        size_t filterCustomDatalen;
        const uint8_t* filterCustomData = filter_.customData(&filterCustomDatalen);
        if (filterCustomData != nullptr && filterCustomDatalen > 0) {
   d4f58:	f1b8 0f00 	cmp.w	r8, #0
   d4f5c:	d103      	bne.n	d4f66 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x1a>
                }
            }
            LOG_DEBUG(TRACE, "Custom data mismatched.");
            return false;
        }
        return true;
   d4f5e:	2001      	movs	r0, #1
    }
   d4f60:	b00b      	add	sp, #44	; 0x2c
   d4f62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        *len = customDataLen_;
   d4f66:	6f05      	ldr	r5, [r0, #112]	; 0x70
        if (filterCustomData != nullptr && filterCustomDatalen > 0) {
   d4f68:	2d00      	cmp	r5, #0
   d4f6a:	d0f8      	beq.n	d4f5e <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x12>
        return scanResponse_;
   d4f6c:	f101 092c 	add.w	r9, r1, #44	; 0x2c
            size_t srLen = result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, sizeof(size_t));
   d4f70:	2304      	movs	r3, #4
   d4f72:	2200      	movs	r2, #0
   d4f74:	21ff      	movs	r1, #255	; 0xff
   d4f76:	4648      	mov	r0, r9
   d4f78:	f7ff fe9f 	bl	d4cba <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
        return advertisingData_;
   d4f7c:	3608      	adds	r6, #8
   d4f7e:	4604      	mov	r4, r0
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, sizeof(size_t));
   d4f80:	2304      	movs	r3, #4
   d4f82:	2200      	movs	r2, #0
   d4f84:	21ff      	movs	r1, #255	; 0xff
   d4f86:	4630      	mov	r0, r6
   d4f88:	f7ff fe97 	bl	d4cba <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
   d4f8c:	42ac      	cmp	r4, r5
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, sizeof(size_t));
   d4f8e:	4607      	mov	r7, r0
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
   d4f90:	d013      	beq.n	d4fba <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x6e>
   d4f92:	42af      	cmp	r7, r5
   d4f94:	d10f      	bne.n	d4fb6 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x6a>
                uint8_t* buf = (uint8_t*)malloc(advLen);
   d4f96:	4628      	mov	r0, r5
   d4f98:	f7ff fb16 	bl	d45c8 <malloc>
                if (!buf) {
   d4f9c:	4604      	mov	r4, r0
   d4f9e:	bb00      	cbnz	r0, d4fe2 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x96>
                    LOG(ERROR, "Failed to allocate memory!");
   d4fa0:	2320      	movs	r3, #32
   d4fa2:	e9cd 3402 	strd	r3, r4, [sp, #8]
   d4fa6:	4b16      	ldr	r3, [pc, #88]	; (d5000 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xb4>)
   d4fa8:	9300      	str	r3, [sp, #0]
   d4faa:	4916      	ldr	r1, [pc, #88]	; (d5004 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xb8>)
   d4fac:	4623      	mov	r3, r4
   d4fae:	aa02      	add	r2, sp, #8
   d4fb0:	2032      	movs	r0, #50	; 0x32
   d4fb2:	f7ff fa55 	bl	d4460 <log_message>
                return false;
   d4fb6:	2000      	movs	r0, #0
   d4fb8:	e7d2      	b.n	d4f60 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x14>
                uint8_t* buf = (uint8_t*)malloc(srLen);
   d4fba:	4620      	mov	r0, r4
   d4fbc:	f7ff fb04 	bl	d45c8 <malloc>
                if (!buf) {
   d4fc0:	4604      	mov	r4, r0
   d4fc2:	2800      	cmp	r0, #0
   d4fc4:	d0ec      	beq.n	d4fa0 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x54>
                result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, srLen);
   d4fc6:	4602      	mov	r2, r0
   d4fc8:	21ff      	movs	r1, #255	; 0xff
   d4fca:	462b      	mov	r3, r5
   d4fcc:	4648      	mov	r0, r9
   d4fce:	f7ff fe74 	bl	d4cba <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, srLen)) {
   d4fd2:	462a      	mov	r2, r5
   d4fd4:	4641      	mov	r1, r8
   d4fd6:	4620      	mov	r0, r4
   d4fd8:	f001 fe4c 	bl	d6c74 <memcmp>
   d4fdc:	2800      	cmp	r0, #0
   d4fde:	d1d8      	bne.n	d4f92 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x46>
   d4fe0:	e7bd      	b.n	d4f5e <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x12>
                result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, advLen);
   d4fe2:	4602      	mov	r2, r0
   d4fe4:	462b      	mov	r3, r5
   d4fe6:	21ff      	movs	r1, #255	; 0xff
   d4fe8:	4630      	mov	r0, r6
   d4fea:	f7ff fe66 	bl	d4cba <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, advLen)) {
   d4fee:	462a      	mov	r2, r5
   d4ff0:	4641      	mov	r1, r8
   d4ff2:	4620      	mov	r0, r4
   d4ff4:	f001 fe3e 	bl	d6c74 <memcmp>
   d4ff8:	fab0 f080 	clz	r0, r0
   d4ffc:	0940      	lsrs	r0, r0, #5
   d4ffe:	e7af      	b.n	d4f60 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x14>
   d5000:	000d6ed7 	.word	0x000d6ed7
   d5004:	000d6eb0 	.word	0x000d6eb0

000d5008 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5008:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d500a:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d500e:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d5010:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   d5014:	42ae      	cmp	r6, r5
   d5016:	d004      	beq.n	d5022 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   d5018:	4628      	mov	r0, r5
   d501a:	f7ff fb81 	bl	d4720 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   d501e:	3510      	adds	r5, #16
   d5020:	e7f8      	b.n	d5014 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d5022:	6820      	ldr	r0, [r4, #0]
   d5024:	f7ff fad8 	bl	d45d8 <free>
}
   d5028:	4620      	mov	r0, r4
   d502a:	bd70      	pop	{r4, r5, r6, pc}

000d502c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d502c:	b510      	push	{r4, lr}
   d502e:	4604      	mov	r4, r0
    ::free(ptr);
   d5030:	6800      	ldr	r0, [r0, #0]
   d5032:	f7ff fad1 	bl	d45d8 <free>
}
   d5036:	4620      	mov	r0, r4
   d5038:	bd10      	pop	{r4, pc}

000d503a <_ZN8particle16BleScanDelegatorD1Ev>:
    ~BleScanDelegator() = default;
   d503a:	b538      	push	{r3, r4, r5, lr}
   d503c:	4604      	mov	r4, r0
    ::free(ptr);
   d503e:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   d5040:	f7ff faca 	bl	d45d8 <free>
   d5044:	6d20      	ldr	r0, [r4, #80]	; 0x50
   d5046:	f7ff fac7 	bl	d45d8 <free>
    ~BleScanFilter() = default;
   d504a:	f104 0538 	add.w	r5, r4, #56	; 0x38
   d504e:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d5052:	f7ff ffeb 	bl	d502c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
   d5056:	4628      	mov	r0, r5
   d5058:	f7ff ffd6 	bl	d5008 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    class function<_Res(_ArgTypes...)>
   d505c:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d5060:	f7ff fd03 	bl	d4a6a <_ZNSt14_Function_baseD1Ev>
   d5064:	f104 0018 	add.w	r0, r4, #24
   d5068:	f7ff fcff 	bl	d4a6a <_ZNSt14_Function_baseD1Ev>
   d506c:	6820      	ldr	r0, [r4, #0]
   d506e:	f7ff fab3 	bl	d45d8 <free>
   d5072:	4620      	mov	r0, r4
   d5074:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5078 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>:
int BleLocalDevice::scan(BleOnScanResultCallbackRef callback, void* context) const {
    BleScanDelegator scanner;
    return scanner.start(callback, context);
}

int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
   d5078:	b530      	push	{r4, r5, lr}
   d507a:	4615      	mov	r5, r2
   d507c:	b09f      	sub	sp, #124	; 0x7c
    if (results == nullptr || resultCount == 0) {
   d507e:	460c      	mov	r4, r1
   d5080:	b179      	cbz	r1, d50a2 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x2a>
   d5082:	b172      	cbz	r2, d50a2 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x2a>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    BleScanDelegator scanner;
   d5084:	a801      	add	r0, sp, #4
   d5086:	f7ff ff2d 	bl	d4ee4 <_ZN8particle16BleScanDelegatorC1Ev>
    return scanner.start(results, resultCount);
   d508a:	4621      	mov	r1, r4
   d508c:	462a      	mov	r2, r5
   d508e:	a801      	add	r0, sp, #4
   d5090:	f7ff ff44 	bl	d4f1c <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj>
   d5094:	4604      	mov	r4, r0
    BleScanDelegator scanner;
   d5096:	a801      	add	r0, sp, #4
   d5098:	f7ff ffcf 	bl	d503a <_ZN8particle16BleScanDelegatorD1Ev>
}
   d509c:	4620      	mov	r0, r4
   d509e:	b01f      	add	sp, #124	; 0x7c
   d50a0:	bd30      	pop	{r4, r5, pc}
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   d50a2:	4c01      	ldr	r4, [pc, #4]	; (d50a8 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x30>)
   d50a4:	e7fa      	b.n	d509c <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x24>
   d50a6:	bf00      	nop
   d50a8:	fffffef2 	.word	0xfffffef2

000d50ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d50ac:	680b      	ldr	r3, [r1, #0]
   d50ae:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d50b0:	b113      	cbz	r3, d50b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d50b2:	685a      	ldr	r2, [r3, #4]
   d50b4:	3201      	adds	r2, #1
   d50b6:	605a      	str	r2, [r3, #4]
      }
   d50b8:	4770      	bx	lr

000d50ba <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d50ba:	b510      	push	{r4, lr}
   d50bc:	f851 3b04 	ldr.w	r3, [r1], #4
   d50c0:	4604      	mov	r4, r0
   d50c2:	f840 3b04 	str.w	r3, [r0], #4
   d50c6:	f7ff fff1 	bl	d50ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d50ca:	4620      	mov	r0, r4
   d50cc:	bd10      	pop	{r4, pc}

000d50ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d50ce:	b510      	push	{r4, lr}
   d50d0:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d50d2:	6800      	ldr	r0, [r0, #0]
   d50d4:	b128      	cbz	r0, d50e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d50d6:	6843      	ldr	r3, [r0, #4]
   d50d8:	3b01      	subs	r3, #1
   d50da:	6043      	str	r3, [r0, #4]
   d50dc:	b90b      	cbnz	r3, d50e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d50de:	f7ff fc20 	bl	d4922 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d50e2:	4620      	mov	r0, r4
   d50e4:	bd10      	pop	{r4, pc}

000d50e6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d50e6:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d50e8:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d50ec:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d50ee:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   d50f2:	42ae      	cmp	r6, r5
   d50f4:	d004      	beq.n	d5100 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
      ~__shared_ptr() = default;
   d50f6:	1d28      	adds	r0, r5, #4
   d50f8:	f7ff ffe9 	bl	d50ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d50fc:	3508      	adds	r5, #8
   d50fe:	e7f8      	b.n	d50f2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d5100:	6820      	ldr	r0, [r4, #0]
   d5102:	f7ff fa69 	bl	d45d8 <free>
}
   d5106:	4620      	mov	r0, r4
   d5108:	bd70      	pop	{r4, r5, r6, pc}

000d510a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d510a:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d510c:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5110:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d5112:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   d5116:	42ae      	cmp	r6, r5
   d5118:	d004      	beq.n	d5124 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   d511a:	1d28      	adds	r0, r5, #4
   d511c:	f7ff ffd7 	bl	d50ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5120:	3508      	adds	r5, #8
   d5122:	e7f8      	b.n	d5116 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d5124:	6820      	ldr	r0, [r4, #0]
   d5126:	f7ff fa57 	bl	d45d8 <free>
}
   d512a:	4620      	mov	r0, r4
   d512c:	bd70      	pop	{r4, r5, r6, pc}

000d512e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d512e:	b510      	push	{r4, lr}
   d5130:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   d5132:	3024      	adds	r0, #36	; 0x24
   d5134:	f7ff ffe9 	bl	d510a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d5138:	f104 0018 	add.w	r0, r4, #24
   d513c:	f7ff ffd3 	bl	d50e6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   d5140:	bd10      	pop	{r4, pc}

000d5142 <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   d5142:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (__ptr != nullptr)
   d5144:	6804      	ldr	r4, [r0, #0]
   d5146:	4606      	mov	r6, r0
   d5148:	b324      	cbz	r4, d5194 <_ZN8particle14BleLocalDeviceD1Ev+0x52>
   d514a:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d514e:	f7ff fc8c 	bl	d4a6a <_ZNSt14_Function_baseD1Ev>
   d5152:	f104 0034 	add.w	r0, r4, #52	; 0x34
   d5156:	f7ff fc88 	bl	d4a6a <_ZNSt14_Function_baseD1Ev>
   d515a:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d515e:	f7ff fc84 	bl	d4a6a <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   d5162:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   d5166:	eb05 07c3 	add.w	r7, r5, r3, lsl #3
        for (; p != end; ++p) {
   d516a:	42af      	cmp	r7, r5
   d516c:	d004      	beq.n	d5178 <_ZN8particle14BleLocalDeviceD1Ev+0x36>
      ~__shared_ptr() = default;
   d516e:	1d28      	adds	r0, r5, #4
   d5170:	f7ff ffad 	bl	d50ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5174:	3508      	adds	r5, #8
   d5176:	e7f8      	b.n	d516a <_ZN8particle14BleLocalDeviceD1Ev+0x28>
    ::free(ptr);
   d5178:	69a0      	ldr	r0, [r4, #24]
   d517a:	f7ff fa2d 	bl	d45d8 <free>
    ~BleLocalDeviceImpl() = default;
   d517e:	f104 000c 	add.w	r0, r4, #12
   d5182:	f7ff ffc2 	bl	d510a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d5186:	4620      	mov	r0, r4
   d5188:	f7ff ffad 	bl	d50e6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   d518c:	2154      	movs	r1, #84	; 0x54
   d518e:	4620      	mov	r0, r4
   d5190:	f001 fc4b 	bl	d6a2a <_ZdlPvj>
   d5194:	4630      	mov	r0, r6
   d5196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5198 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5198:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d519a:	b510      	push	{r4, lr}
      if (_M_empty())
   d519c:	b90a      	cbnz	r2, d51a2 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   d519e:	f001 fc46 	bl	d6a2e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }
   d51a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d51a6:	68c3      	ldr	r3, [r0, #12]
   d51a8:	4718      	bx	r3

000d51aa <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d51aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        capacity_(0) {
   d51ae:	2300      	movs	r3, #0
   d51b0:	e9c0 3300 	strd	r3, r3, [r0]
   d51b4:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d51b6:	f8d1 8004 	ldr.w	r8, [r1, #4]
   d51ba:	4598      	cmp	r8, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d51bc:	4605      	mov	r5, r0
   d51be:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d51c0:	dd47      	ble.n	d5252 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xa8>
    return ::malloc(size);
   d51c2:	ea4f 1008 	mov.w	r0, r8, lsl #4
   d51c6:	f7ff f9ff 	bl	d45c8 <malloc>
            if (!d) {
   d51ca:	4606      	mov	r6, r0
   d51cc:	2800      	cmp	r0, #0
   d51ce:	d040      	beq.n	d5252 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xa8>
            move(d, data_, data_ + size_);
   d51d0:	e9d5 4100 	ldrd	r4, r1, [r5]
        if (dest > p && dest < end) {
   d51d4:	42a0      	cmp	r0, r4
            move(d, data_, data_ + size_);
   d51d6:	eb04 1a01 	add.w	sl, r4, r1, lsl #4
        if (dest > p && dest < end) {
   d51da:	d916      	bls.n	d520a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x60>
   d51dc:	4550      	cmp	r0, sl
   d51de:	d215      	bcs.n	d520c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x62>
            --end;
   d51e0:	f1aa 0a10 	sub.w	sl, sl, #16
            dest += end - p - 1;
   d51e4:	f1a4 0910 	sub.w	r9, r4, #16
   d51e8:	ebaa 0404 	sub.w	r4, sl, r4
   d51ec:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d51ee:	45d1      	cmp	r9, sl
   d51f0:	d01a      	beq.n	d5228 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x7e>
                new(dest) T(std::move(*end));
   d51f2:	b11c      	cbz	r4, d51fc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x52>
   d51f4:	4651      	mov	r1, sl
   d51f6:	4620      	mov	r0, r4
   d51f8:	f7ff fb0e 	bl	d4818 <_ZN6StringC1EOS_>
                end->~T();
   d51fc:	4650      	mov	r0, sl
   d51fe:	f7ff fa8f 	bl	d4720 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d5202:	f1aa 0a10 	sub.w	sl, sl, #16
   d5206:	3c10      	subs	r4, #16
   d5208:	e7f1      	b.n	d51ee <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x44>
        } else if (dest != p) {
   d520a:	d00d      	beq.n	d5228 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x7e>
   d520c:	46b1      	mov	r9, r6
            for (; p != end; ++p, ++dest) {
   d520e:	45a2      	cmp	sl, r4
   d5210:	d00a      	beq.n	d5228 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x7e>
                new(dest) T(std::move(*p));
   d5212:	4621      	mov	r1, r4
   d5214:	4648      	mov	r0, r9
   d5216:	f7ff faff 	bl	d4818 <_ZN6StringC1EOS_>
                p->~T();
   d521a:	4620      	mov	r0, r4
   d521c:	f7ff fa80 	bl	d4720 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d5220:	3410      	adds	r4, #16
   d5222:	f109 0910 	add.w	r9, r9, #16
   d5226:	e7f2      	b.n	d520e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x64>
    ::free(ptr);
   d5228:	6828      	ldr	r0, [r5, #0]
   d522a:	f7ff f9d5 	bl	d45d8 <free>
        capacity_ = n;
   d522e:	f8c5 8008 	str.w	r8, [r5, #8]
        data_ = d;
   d5232:	602e      	str	r6, [r5, #0]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d5234:	e9d7 4300 	ldrd	r4, r3, [r7]
   d5238:	eb04 1803 	add.w	r8, r4, r3, lsl #4
        for (; it != end; ++it, ++dest) {
   d523c:	45a0      	cmp	r8, r4
   d523e:	d006      	beq.n	d524e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xa4>
            new(dest) T(*it);
   d5240:	4621      	mov	r1, r4
   d5242:	4630      	mov	r0, r6
   d5244:	f7ff fb02 	bl	d484c <_ZN6StringC1ERKS_>
        for (; it != end; ++it, ++dest) {
   d5248:	3410      	adds	r4, #16
   d524a:	3610      	adds	r6, #16
   d524c:	e7f6      	b.n	d523c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x92>
        size_ = vector.size_;
   d524e:	687b      	ldr	r3, [r7, #4]
   d5250:	606b      	str	r3, [r5, #4]
}
   d5252:	4628      	mov	r0, r5
   d5254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d5258 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>:
    bool filterByDeviceName(const BleScanResult& result) {
   d5258:	b530      	push	{r4, r5, lr}
   d525a:	b08d      	sub	sp, #52	; 0x34
   d525c:	460c      	mov	r4, r1
        auto filterDeviceNames = filter_.deviceNames();
   d525e:	f100 0138 	add.w	r1, r0, #56	; 0x38
   d5262:	a801      	add	r0, sp, #4
   d5264:	f7ff ffa1 	bl	d51aa <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterDeviceNames.size() > 0) {
   d5268:	9b02      	ldr	r3, [sp, #8]
   d526a:	2b00      	cmp	r3, #0
   d526c:	dd2f      	ble.n	d52ce <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x76>
            String srName = result.scanResponse().deviceName();
   d526e:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   d5272:	a804      	add	r0, sp, #16
   d5274:	f7ff fd52 	bl	d4d1c <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            String advName = result.advertisingData().deviceName();
   d5278:	f104 0108 	add.w	r1, r4, #8
   d527c:	a808      	add	r0, sp, #32
   d527e:	f7ff fd4d 	bl	d4d1c <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            if (srName.length() == 0 && advName.length() == 0) {
   d5282:	9a06      	ldr	r2, [sp, #24]
   d5284:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d5286:	4313      	orrs	r3, r2
   d5288:	d01f      	beq.n	d52ca <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
    return data_ + size_;
   d528a:	e9dd 4501 	ldrd	r4, r5, [sp, #4]
   d528e:	eb04 1505 	add.w	r5, r4, r5, lsl #4
            for (const auto& name : filterDeviceNames) {
   d5292:	42ac      	cmp	r4, r5
   d5294:	d019      	beq.n	d52ca <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
	// comparison (only works w/ Strings and "strings")
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
   d5296:	a904      	add	r1, sp, #16
   d5298:	4620      	mov	r0, r4
   d529a:	f7ff fb1b 	bl	d48d4 <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
   d529e:	b160      	cbz	r0, d52ba <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x62>
                    return true;
   d52a0:	2401      	movs	r4, #1
            String advName = result.advertisingData().deviceName();
   d52a2:	a808      	add	r0, sp, #32
   d52a4:	f7ff fa3c 	bl	d4720 <_ZN6StringD1Ev>
            String srName = result.scanResponse().deviceName();
   d52a8:	a804      	add	r0, sp, #16
   d52aa:	f7ff fa39 	bl	d4720 <_ZN6StringD1Ev>
        auto filterDeviceNames = filter_.deviceNames();
   d52ae:	a801      	add	r0, sp, #4
   d52b0:	f7ff feaa 	bl	d5008 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    }
   d52b4:	4620      	mov	r0, r4
   d52b6:	b00d      	add	sp, #52	; 0x34
   d52b8:	bd30      	pop	{r4, r5, pc}
   d52ba:	4620      	mov	r0, r4
   d52bc:	a908      	add	r1, sp, #32
   d52be:	f7ff fb09 	bl	d48d4 <_ZNK6String6equalsERKS_>
   d52c2:	3410      	adds	r4, #16
                if (name == srName || name == advName) {
   d52c4:	2800      	cmp	r0, #0
   d52c6:	d0e4      	beq.n	d5292 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x3a>
   d52c8:	e7ea      	b.n	d52a0 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x48>
                return false;
   d52ca:	2400      	movs	r4, #0
   d52cc:	e7e9      	b.n	d52a2 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x4a>
        return true;
   d52ce:	2401      	movs	r4, #1
   d52d0:	e7ed      	b.n	d52ae <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x56>

000d52d2 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d52d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        capacity_(0) {
   d52d4:	2300      	movs	r3, #0
   d52d6:	e9c0 3300 	strd	r3, r3, [r0]
   d52da:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d52dc:	684f      	ldr	r7, [r1, #4]
   d52de:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d52e0:	4605      	mov	r5, r0
   d52e2:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d52e4:	dd39      	ble.n	d535a <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x88>
    return ::malloc(size);
   d52e6:	00f8      	lsls	r0, r7, #3
   d52e8:	f7ff f96e 	bl	d45c8 <malloc>
            if (!d) {
   d52ec:	4604      	mov	r4, r0
   d52ee:	b3a0      	cbz	r0, d535a <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x88>
            move(d, data_, data_ + size_);
   d52f0:	e9d5 3200 	ldrd	r3, r2, [r5]
        if (dest > p && dest < end) {
   d52f4:	4298      	cmp	r0, r3
            move(d, data_, data_ + size_);
   d52f6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        if (dest > p && dest < end) {
   d52fa:	d910      	bls.n	d531e <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
   d52fc:	4290      	cmp	r0, r2
   d52fe:	d20f      	bcs.n	d5320 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4e>
            --end;
   d5300:	3a08      	subs	r2, #8
            dest += end - p - 1;
   d5302:	f1a3 0008 	sub.w	r0, r3, #8
   d5306:	1ad3      	subs	r3, r2, r3
   d5308:	4423      	add	r3, r4
            for (; end != p; --end, --dest) {
   d530a:	4290      	cmp	r0, r2
   d530c:	d012      	beq.n	d5334 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x62>
                new(dest) T(std::move(*end));
   d530e:	b11b      	cbz	r3, d5318 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x46>
    address_ = addr.address_;
   d5310:	6811      	ldr	r1, [r2, #0]
   d5312:	6019      	str	r1, [r3, #0]
   d5314:	6851      	ldr	r1, [r2, #4]
   d5316:	6059      	str	r1, [r3, #4]
            for (; end != p; --end, --dest) {
   d5318:	3a08      	subs	r2, #8
   d531a:	3b08      	subs	r3, #8
   d531c:	e7f5      	b.n	d530a <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x38>
        } else if (dest != p) {
   d531e:	d009      	beq.n	d5334 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x62>
   d5320:	4621      	mov	r1, r4
            for (; p != end; ++p, ++dest) {
   d5322:	429a      	cmp	r2, r3
   d5324:	d006      	beq.n	d5334 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x62>
   d5326:	6818      	ldr	r0, [r3, #0]
   d5328:	6008      	str	r0, [r1, #0]
   d532a:	6858      	ldr	r0, [r3, #4]
   d532c:	6048      	str	r0, [r1, #4]
   d532e:	3308      	adds	r3, #8
   d5330:	3108      	adds	r1, #8
   d5332:	e7f6      	b.n	d5322 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x50>
    ::free(ptr);
   d5334:	6828      	ldr	r0, [r5, #0]
   d5336:	f7ff f94f 	bl	d45d8 <free>
        data_ = d;
   d533a:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d533c:	60af      	str	r7, [r5, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d533e:	e9d6 3100 	ldrd	r3, r1, [r6]
   d5342:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
        for (; it != end; ++it, ++dest) {
   d5346:	4298      	cmp	r0, r3
   d5348:	d006      	beq.n	d5358 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x86>
   d534a:	681a      	ldr	r2, [r3, #0]
   d534c:	6022      	str	r2, [r4, #0]
   d534e:	685a      	ldr	r2, [r3, #4]
   d5350:	6062      	str	r2, [r4, #4]
   d5352:	3308      	adds	r3, #8
   d5354:	3408      	adds	r4, #8
   d5356:	e7f6      	b.n	d5346 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x74>
        size_ = vector.size_;
   d5358:	6069      	str	r1, [r5, #4]
}
   d535a:	4628      	mov	r0, r5
   d535c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d535e <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d535e:	b570      	push	{r4, r5, r6, lr}
   d5360:	4604      	mov	r4, r0
        capacity_(0) {
   d5362:	2000      	movs	r0, #0
   d5364:	e9c4 0000 	strd	r0, r0, [r4]
   d5368:	60a0      	str	r0, [r4, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d536a:	684e      	ldr	r6, [r1, #4]
   d536c:	4286      	cmp	r6, r0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d536e:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d5370:	dd12      	ble.n	d5398 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
    return ::realloc(ptr, size);
   d5372:	0071      	lsls	r1, r6, #1
   d5374:	f7ff f938 	bl	d45e8 <realloc>
            if (!d) {
   d5378:	b170      	cbz	r0, d5398 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
        data_ = d;
   d537a:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d537c:	60a6      	str	r6, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d537e:	e9d5 3200 	ldrd	r3, r2, [r5]
   d5382:	eb03 0242 	add.w	r2, r3, r2, lsl #1
        for (; it != end; ++it, ++dest) {
   d5386:	429a      	cmp	r2, r3
   d5388:	d004      	beq.n	d5394 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x36>
            new(dest) T(*it);
   d538a:	f833 1b02 	ldrh.w	r1, [r3], #2
   d538e:	f820 1b02 	strh.w	r1, [r0], #2
        for (; it != end; ++it, ++dest) {
   d5392:	e7f8      	b.n	d5386 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x28>
        size_ = vector.size_;
   d5394:	686b      	ldr	r3, [r5, #4]
   d5396:	6063      	str	r3, [r4, #4]
}
   d5398:	4620      	mov	r0, r4
   d539a:	bd70      	pop	{r4, r5, r6, pc}

000d539c <_ZN8particle13BleScanResultC1EOS0_>:
class BleScanResult {
   d539c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d539e:	680b      	ldr	r3, [r1, #0]
   d53a0:	6003      	str	r3, [r0, #0]
   d53a2:	684b      	ldr	r3, [r1, #4]
   d53a4:	6043      	str	r3, [r0, #4]
   d53a6:	f101 0508 	add.w	r5, r1, #8
   d53aa:	4606      	mov	r6, r0
   d53ac:	460f      	mov	r7, r1
   d53ae:	f100 0408 	add.w	r4, r0, #8
   d53b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d53b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d53b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d53b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d53ba:	682b      	ldr	r3, [r5, #0]
   d53bc:	6023      	str	r3, [r4, #0]
   d53be:	f107 052c 	add.w	r5, r7, #44	; 0x2c
   d53c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d53c4:	f106 042c 	add.w	r4, r6, #44	; 0x2c
   d53c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d53ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d53cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d53ce:	682b      	ldr	r3, [r5, #0]
   d53d0:	6023      	str	r3, [r4, #0]
   d53d2:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
   d53d6:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
   d53da:	4630      	mov	r0, r6
   d53dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d53de <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   d53de:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d53e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d53e2:	4604      	mov	r4, r0
   d53e4:	460d      	mov	r5, r1
   d53e6:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d53e8:	d914      	bls.n	d5414 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d53ea:	4290      	cmp	r0, r2
   d53ec:	d213      	bcs.n	d5416 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   d53ee:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   d53f2:	1a75      	subs	r5, r6, r1
   d53f4:	f1a1 0708 	sub.w	r7, r1, #8
   d53f8:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d53fa:	42b7      	cmp	r7, r6
   d53fc:	d018      	beq.n	d5430 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d53fe:	b11c      	cbz	r4, d5408 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d5400:	4631      	mov	r1, r6
   d5402:	4620      	mov	r0, r4
   d5404:	f7ff fe59 	bl	d50ba <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d5408:	1d30      	adds	r0, r6, #4
   d540a:	f7ff fe60 	bl	d50ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   d540e:	3e08      	subs	r6, #8
   d5410:	3c08      	subs	r4, #8
   d5412:	e7f2      	b.n	d53fa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   d5414:	d00c      	beq.n	d5430 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d5416:	42b5      	cmp	r5, r6
   d5418:	d00a      	beq.n	d5430 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d541a:	b11c      	cbz	r4, d5424 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d541c:	4629      	mov	r1, r5
   d541e:	4620      	mov	r0, r4
   d5420:	f7ff fe4b 	bl	d50ba <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d5424:	1d28      	adds	r0, r5, #4
   d5426:	f7ff fe52 	bl	d50ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   d542a:	3508      	adds	r5, #8
   d542c:	3408      	adds	r4, #8
   d542e:	e7f2      	b.n	d5416 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   d5430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5432 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d5432:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    T* const p = find(data_, data_ + size_, value);
   d5436:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d543a:	4605      	mov	r5, r0
   d543c:	4688      	mov	r8, r1
    T* const p = find(data_, data_ + size_, value);
   d543e:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
        for (; p != end; ++p) {
   d5442:	42a7      	cmp	r7, r4
   d5444:	d103      	bne.n	d544e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x1c>
        return false;
   d5446:	2600      	movs	r6, #0
}
   d5448:	4630      	mov	r0, r6
   d544a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if (*p == value) {
   d544e:	4641      	mov	r1, r8
   d5450:	4620      	mov	r0, r4
   d5452:	f7ff fcd7 	bl	d4e04 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   d5456:	4606      	mov	r6, r0
   d5458:	b908      	cbnz	r0, d545e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>
        for (; p != end; ++p) {
   d545a:	3408      	adds	r4, #8
   d545c:	e7f1      	b.n	d5442 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x10>
    if (!p) {
   d545e:	2c00      	cmp	r4, #0
   d5460:	d0f1      	beq.n	d5446 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x14>
   d5462:	1d20      	adds	r0, r4, #4
   d5464:	f7ff fe33 	bl	d50ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   d5468:	e9d5 3200 	ldrd	r3, r2, [r5]
   d546c:	f104 0108 	add.w	r1, r4, #8
   d5470:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d5474:	4620      	mov	r0, r4
   d5476:	f7ff ffb2 	bl	d53de <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   d547a:	686b      	ldr	r3, [r5, #4]
   d547c:	3b01      	subs	r3, #1
   d547e:	606b      	str	r3, [r5, #4]
    return true;
   d5480:	e7e2      	b.n	d5448 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x16>

000d5482 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d5482:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d5484:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d5486:	6846      	ldr	r6, [r0, #4]
   d5488:	4668      	mov	r0, sp
   d548a:	f7ff fe16 	bl	d50ba <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d548e:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   d5492:	429f      	cmp	r7, r3
   d5494:	db12      	blt.n	d54bc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   d5496:	3701      	adds	r7, #1
        if (n > 0) {
   d5498:	2f00      	cmp	r7, #0
   d549a:	dd29      	ble.n	d54f0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   d549c:	00f8      	lsls	r0, r7, #3
   d549e:	f7ff f893 	bl	d45c8 <malloc>
            if (!d) {
   d54a2:	4605      	mov	r5, r0
   d54a4:	b1f0      	cbz	r0, d54e4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   d54a6:	e9d4 1200 	ldrd	r1, r2, [r4]
   d54aa:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d54ae:	f7ff ff96 	bl	d53de <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   d54b2:	6820      	ldr	r0, [r4, #0]
   d54b4:	f7ff f890 	bl	d45d8 <free>
        data_ = d;
   d54b8:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d54ba:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   d54bc:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d54be:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d54c0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   d54c4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d54c8:	4631      	mov	r1, r6
   d54ca:	f106 0008 	add.w	r0, r6, #8
   d54ce:	f7ff ff86 	bl	d53de <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d54d2:	b11e      	cbz	r6, d54dc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   d54d4:	4669      	mov	r1, sp
   d54d6:	4630      	mov	r0, r6
   d54d8:	f7ff fdef 	bl	d50ba <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   d54dc:	6863      	ldr	r3, [r4, #4]
   d54de:	3301      	adds	r3, #1
   d54e0:	6063      	str	r3, [r4, #4]
    return true;
   d54e2:	2501      	movs	r5, #1
   d54e4:	a801      	add	r0, sp, #4
   d54e6:	f7ff fdf2 	bl	d50ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d54ea:	4628      	mov	r0, r5
   d54ec:	b003      	add	sp, #12
   d54ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   d54f0:	2500      	movs	r5, #0
   d54f2:	e7de      	b.n	d54b2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000d54f4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d54f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d54f8:	4605      	mov	r5, r0
   d54fa:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   d54fc:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d54fe:	460c      	mov	r4, r1
        WiringBleLock lk;
   d5500:	f7ff fad1 	bl	d4aa6 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   d5504:	682e      	ldr	r6, [r5, #0]
   d5506:	2e04      	cmp	r6, #4
   d5508:	d06b      	beq.n	d55e2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
   d550a:	d807      	bhi.n	d551c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x28>
   d550c:	2e03      	cmp	r6, #3
   d550e:	d028      	beq.n	d5562 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x6e>
        WiringBleLock lk;
   d5510:	a803      	add	r0, sp, #12
   d5512:	f7ff fad0 	bl	d4ab6 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   d5516:	b00e      	add	sp, #56	; 0x38
   d5518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        switch (event->type) {
   d551c:	f1a6 030c 	sub.w	r3, r6, #12
   d5520:	2b03      	cmp	r3, #3
   d5522:	d8f5      	bhi.n	d5510 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d5524:	89a9      	ldrh	r1, [r5, #12]
   d5526:	4620      	mov	r0, r4
   d5528:	f7ff fc26 	bl	d4d78 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d552c:	4607      	mov	r7, r0
   d552e:	2800      	cmp	r0, #0
   d5530:	d0ee      	beq.n	d5510 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                    if (impl->pairingEventCallback_) {
   d5532:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   d5534:	2b00      	cmp	r3, #0
   d5536:	d0eb      	beq.n	d5510 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                        BlePairingEvent pairingEvent = {
   d5538:	2210      	movs	r2, #16
   d553a:	2100      	movs	r1, #0
   d553c:	a807      	add	r0, sp, #28
   d553e:	f001 fbcf 	bl	d6ce0 <memset>
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY) {
   d5542:	2e0d      	cmp	r6, #13
                        };
   d5544:	9706      	str	r7, [sp, #24]
                            .type = static_cast<BlePairingEventType>(event->type)
   d5546:	f88d 601c 	strb.w	r6, [sp, #28]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY) {
   d554a:	f040 8092 	bne.w	d5672 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17e>
                            pairingEvent.payload.passkey = event->params.passkey_display.passkey;
   d554e:	686b      	ldr	r3, [r5, #4]
   d5550:	9309      	str	r3, [sp, #36]	; 0x24
                            pairingEvent.payloadLen = BLE_PAIRING_PASSKEY_LEN;
   d5552:	2306      	movs	r3, #6
                            pairingEvent.payloadLen = sizeof(BlePairingStatus);
   d5554:	9308      	str	r3, [sp, #32]
   d5556:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d5558:	a906      	add	r1, sp, #24
   d555a:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d555e:	4798      	blx	r3
   d5560:	e7d6      	b.n	d5510 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                BlePeerDevice peer;
   d5562:	a804      	add	r0, sp, #16
   d5564:	f7ff fc1a 	bl	d4d9c <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   d5568:	9b04      	ldr	r3, [sp, #16]
   d556a:	89aa      	ldrh	r2, [r5, #12]
   d556c:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   d556e:	6869      	ldr	r1, [r5, #4]
   d5570:	9804      	ldr	r0, [sp, #16]
   d5572:	3108      	adds	r1, #8
   d5574:	3002      	adds	r0, #2
   d5576:	f7ff faeb 	bl	d4b50 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   d557a:	a904      	add	r1, sp, #16
   d557c:	a806      	add	r0, sp, #24
   d557e:	f7ff fd9c 	bl	d50ba <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   d5582:	a906      	add	r1, sp, #24
   d5584:	f104 0018 	add.w	r0, r4, #24
   d5588:	f7ff ff7b 	bl	d5482 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d558c:	4605      	mov	r5, r0
   d558e:	a807      	add	r0, sp, #28
   d5590:	f7ff fd9d 	bl	d50ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5594:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   d5596:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   d5598:	b98d      	cbnz	r5, d55be <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xca>
                    LOG(ERROR, "Failed to append peer Central device.");
   d559a:	4b3e      	ldr	r3, [pc, #248]	; (d5694 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a0>)
   d559c:	493e      	ldr	r1, [pc, #248]	; (d5698 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a4>)
   d559e:	9300      	str	r3, [sp, #0]
   d55a0:	2032      	movs	r0, #50	; 0x32
   d55a2:	462b      	mov	r3, r5
   d55a4:	aa06      	add	r2, sp, #24
   d55a6:	9507      	str	r5, [sp, #28]
   d55a8:	f7fe ff5a 	bl	d4460 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   d55ac:	9b04      	ldr	r3, [sp, #16]
   d55ae:	4629      	mov	r1, r5
   d55b0:	8818      	ldrh	r0, [r3, #0]
   d55b2:	f7fe fea1 	bl	d42f8 <hal_ble_gap_disconnect>
   d55b6:	a805      	add	r0, sp, #20
   d55b8:	f7ff fd89 	bl	d50ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d55bc:	e7a8      	b.n	d5510 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                LOG(TRACE, "Connected by Central device.");
   d55be:	4a37      	ldr	r2, [pc, #220]	; (d569c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a8>)
   d55c0:	9200      	str	r2, [sp, #0]
   d55c2:	2300      	movs	r3, #0
   d55c4:	4934      	ldr	r1, [pc, #208]	; (d5698 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a4>)
   d55c6:	9307      	str	r3, [sp, #28]
   d55c8:	aa06      	add	r2, sp, #24
   d55ca:	2001      	movs	r0, #1
   d55cc:	f7fe ff48 	bl	d4460 <log_message>
                if (impl->connectedCallback_) {
   d55d0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d55d2:	2b00      	cmp	r3, #0
   d55d4:	d0ef      	beq.n	d55b6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xc2>
                    impl->connectedCallback_(peer);
   d55d6:	a904      	add	r1, sp, #16
   d55d8:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d55dc:	f7ff fddc 	bl	d5198 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   d55e0:	e7e9      	b.n	d55b6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xc2>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d55e2:	89a9      	ldrh	r1, [r5, #12]
   d55e4:	4620      	mov	r0, r4
   d55e6:	f7ff fbc7 	bl	d4d78 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d55ea:	4606      	mov	r6, r0
   d55ec:	2800      	cmp	r0, #0
   d55ee:	d08f      	beq.n	d5510 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
        return impl_.get();
   d55f0:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   d55f2:	e9d5 3106 	ldrd	r3, r1, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   d55f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d55fa:	802a      	strh	r2, [r5, #0]
   d55fc:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
        for (auto& characteristic : characteristics()) {
   d5600:	4299      	cmp	r1, r3
   d5602:	d003      	beq.n	d560c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x118>
        return impl_.get();
   d5604:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d5608:	8042      	strh	r2, [r0, #2]
        for (auto& characteristic : characteristics()) {
   d560a:	e7f9      	b.n	d5600 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10c>
    destruct(data_, data_ + size_);
   d560c:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   d5610:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   d5614:	45b8      	cmp	r8, r7
   d5616:	d004      	beq.n	d5622 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12e>
   d5618:	1d38      	adds	r0, r7, #4
   d561a:	f7ff fd58 	bl	d50ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d561e:	3708      	adds	r7, #8
   d5620:	e7f8      	b.n	d5614 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x120>
    size_ = 0;
   d5622:	2300      	movs	r3, #0
   d5624:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   d5626:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   d562a:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   d562e:	45b8      	cmp	r8, r7
   d5630:	d004      	beq.n	d563c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x148>
   d5632:	1d38      	adds	r0, r7, #4
   d5634:	f7ff fd4b 	bl	d50ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5638:	3708      	adds	r7, #8
   d563a:	e7f8      	b.n	d562e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13a>
    size_ = 0;
   d563c:	2300      	movs	r3, #0
   d563e:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   d5640:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   d5642:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d5644:	b123      	cbz	r3, d5650 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x15c>
                        impl->disconnectedCallback_(*peer);
   d5646:	4631      	mov	r1, r6
   d5648:	f104 0034 	add.w	r0, r4, #52	; 0x34
   d564c:	f7ff fda4 	bl	d5198 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   d5650:	2300      	movs	r3, #0
   d5652:	2220      	movs	r2, #32
   d5654:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d5658:	4a11      	ldr	r2, [pc, #68]	; (d56a0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ac>)
   d565a:	9200      	str	r2, [sp, #0]
   d565c:	490e      	ldr	r1, [pc, #56]	; (d5698 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a4>)
   d565e:	aa06      	add	r2, sp, #24
   d5660:	2001      	movs	r0, #1
   d5662:	f7fe fefd 	bl	d4460 <log_message>
                    impl->peers_.removeOne(*peer);
   d5666:	4631      	mov	r1, r6
   d5668:	f104 0018 	add.w	r0, r4, #24
   d566c:	f7ff fee1 	bl	d5432 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
   d5670:	e74e      	b.n	d5510 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   d5672:	2e0f      	cmp	r6, #15
   d5674:	f47f af6f 	bne.w	d5556 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x62>
                            pairingEvent.payload.status.status = event->params.pairing_status.status;
   d5678:	686b      	ldr	r3, [r5, #4]
   d567a:	9309      	str	r3, [sp, #36]	; 0x24
                            pairingEvent.payload.status.bonded = event->params.pairing_status.bonded;
   d567c:	7a2b      	ldrb	r3, [r5, #8]
   d567e:	f003 0201 	and.w	r2, r3, #1
                            pairingEvent.payload.status.lesc = event->params.pairing_status.lesc;
   d5682:	f3c3 0340 	ubfx	r3, r3, #1, #1
   d5686:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
                            pairingEvent.payload.status.bonded = event->params.pairing_status.bonded;
   d568a:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
                            pairingEvent.payloadLen = sizeof(BlePairingStatus);
   d568e:	2308      	movs	r3, #8
   d5690:	e760      	b.n	d5554 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x60>
   d5692:	bf00      	nop
   d5694:	000d6ef2 	.word	0x000d6ef2
   d5698:	000d6eb0 	.word	0x000d6eb0
   d569c:	000d6f18 	.word	0x000d6f18
   d56a0:	000d6f35 	.word	0x000d6f35

000d56a4 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
   d56a4:	b513      	push	{r0, r1, r4, lr}
   d56a6:	460b      	mov	r3, r1
   d56a8:	4602      	mov	r2, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d56aa:	e9d0 0100 	ldrd	r0, r1, [r0]
   d56ae:	466c      	mov	r4, sp
   d56b0:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d56b4:	e893 0003 	ldmia.w	r3, {r0, r1}
   d56b8:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d56bc:	e894 0003 	ldmia.w	r4, {r0, r1}
   d56c0:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d56c4:	b002      	add	sp, #8
   d56c6:	bd10      	pop	{r4, pc}

000d56c8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   d56c8:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d56ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d56cc:	4604      	mov	r4, r0
   d56ce:	460d      	mov	r5, r1
   d56d0:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d56d2:	d911      	bls.n	d56f8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x30>
   d56d4:	4290      	cmp	r0, r2
   d56d6:	d210      	bcs.n	d56fa <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x32>
            --end;
   d56d8:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   d56dc:	1a75      	subs	r5, r6, r1
   d56de:	f1a1 0714 	sub.w	r7, r1, #20
   d56e2:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d56e4:	42b7      	cmp	r7, r6
   d56e6:	d012      	beq.n	d570e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
                new(dest) T(std::move(*end));
   d56e8:	b11c      	cbz	r4, d56f2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   d56ea:	4631      	mov	r1, r6
   d56ec:	4620      	mov	r0, r4
   d56ee:	f7ff fa6d 	bl	d4bcc <_ZN8particle7BleUuidC1ERKS0_>
            for (; end != p; --end, --dest) {
   d56f2:	3e14      	subs	r6, #20
   d56f4:	3c14      	subs	r4, #20
   d56f6:	e7f5      	b.n	d56e4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   d56f8:	d009      	beq.n	d570e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
            for (; p != end; ++p, ++dest) {
   d56fa:	42b5      	cmp	r5, r6
   d56fc:	d007      	beq.n	d570e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
                new(dest) T(std::move(*p));
   d56fe:	b11c      	cbz	r4, d5708 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x40>
   d5700:	4629      	mov	r1, r5
   d5702:	4620      	mov	r0, r4
   d5704:	f7ff fa62 	bl	d4bcc <_ZN8particle7BleUuidC1ERKS0_>
            for (; p != end; ++p, ++dest) {
   d5708:	3514      	adds	r5, #20
   d570a:	3414      	adds	r4, #20
   d570c:	e7f5      	b.n	d56fa <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x32>
    }
   d570e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5710 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   d5710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (n > 0) {
   d5712:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d5714:	4605      	mov	r5, r0
        if (n > 0) {
   d5716:	dd13      	ble.n	d5740 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   d5718:	2714      	movs	r7, #20
    return ::malloc(size);
   d571a:	fb07 f006 	mul.w	r0, r7, r6
   d571e:	f7fe ff53 	bl	d45c8 <malloc>
            if (!d) {
   d5722:	4604      	mov	r4, r0
   d5724:	b158      	cbz	r0, d573e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2e>
            move(d, data_, data_ + size_);
   d5726:	e9d5 1200 	ldrd	r1, r2, [r5]
   d572a:	fb07 1202 	mla	r2, r7, r2, r1
   d572e:	f7ff ffcb 	bl	d56c8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   d5732:	6828      	ldr	r0, [r5, #0]
   d5734:	f7fe ff50 	bl	d45d8 <free>
        data_ = d;
   d5738:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d573a:	60ae      	str	r6, [r5, #8]
        return true;
   d573c:	2001      	movs	r0, #1
    }
   d573e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        T* d = nullptr;
   d5740:	2400      	movs	r4, #0
   d5742:	e7f6      	b.n	d5732 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>

000d5744 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d5744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   d5748:	2300      	movs	r3, #0
   d574a:	e9c0 3300 	strd	r3, r3, [r0]
   d574e:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d5750:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d5752:	6849      	ldr	r1, [r1, #4]
   d5754:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d5756:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d5758:	dd15      	ble.n	d5786 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x42>
   d575a:	f7ff ffd9 	bl	d5710 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d575e:	b190      	cbz	r0, d5786 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x42>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d5760:	e9d5 6300 	ldrd	r6, r3, [r5]
   d5764:	f04f 0814 	mov.w	r8, #20
   d5768:	6827      	ldr	r7, [r4, #0]
   d576a:	fb08 6803 	mla	r8, r8, r3, r6
        for (; it != end; ++it, ++dest) {
   d576e:	45b0      	cmp	r8, r6
   d5770:	d007      	beq.n	d5782 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
            new(dest) T(*it);
   d5772:	b11f      	cbz	r7, d577c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x38>
   d5774:	4631      	mov	r1, r6
   d5776:	4638      	mov	r0, r7
   d5778:	f7ff fa28 	bl	d4bcc <_ZN8particle7BleUuidC1ERKS0_>
        for (; it != end; ++it, ++dest) {
   d577c:	3614      	adds	r6, #20
   d577e:	3714      	adds	r7, #20
   d5780:	e7f5      	b.n	d576e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x2a>
        size_ = vector.size_;
   d5782:	686b      	ldr	r3, [r5, #4]
   d5784:	6063      	str	r3, [r4, #4]
}
   d5786:	4620      	mov	r0, r4
   d5788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d578c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d578c:	b530      	push	{r4, r5, lr}
   d578e:	b087      	sub	sp, #28
    return insert(size_, std::move(value));
   d5790:	6845      	ldr	r5, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d5792:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d5794:	a801      	add	r0, sp, #4
   d5796:	f7ff fa19 	bl	d4bcc <_ZN8particle7BleUuidC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d579a:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   d579e:	4299      	cmp	r1, r3
   d57a0:	da11      	bge.n	d57c6 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendES2_+0x3a>
    T* const p = data_ + i;
   d57a2:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d57a4:	6861      	ldr	r1, [r4, #4]
    T* const p = data_ + i;
   d57a6:	2214      	movs	r2, #20
   d57a8:	fb02 3505 	mla	r5, r2, r5, r3
    move(p + 1, p, data_ + size_);
   d57ac:	f105 0014 	add.w	r0, r5, #20
   d57b0:	fb02 3201 	mla	r2, r2, r1, r3
   d57b4:	4629      	mov	r1, r5
   d57b6:	f7ff ff87 	bl	d56c8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d57ba:	b965      	cbnz	r5, d57d6 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendES2_+0x4a>
    ++size_;
   d57bc:	6863      	ldr	r3, [r4, #4]
   d57be:	3301      	adds	r3, #1
   d57c0:	6063      	str	r3, [r4, #4]
    return true;
   d57c2:	2001      	movs	r0, #1
   d57c4:	e005      	b.n	d57d2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendES2_+0x46>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d57c6:	3101      	adds	r1, #1
   d57c8:	4620      	mov	r0, r4
   d57ca:	f7ff ffa1 	bl	d5710 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d57ce:	2800      	cmp	r0, #0
   d57d0:	d1e7      	bne.n	d57a2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendES2_+0x16>
}
   d57d2:	b007      	add	sp, #28
   d57d4:	bd30      	pop	{r4, r5, pc}
    new(p) T(std::move(value));
   d57d6:	a901      	add	r1, sp, #4
   d57d8:	4628      	mov	r0, r5
   d57da:	f7ff f9f7 	bl	d4bcc <_ZN8particle7BleUuidC1ERKS0_>
   d57de:	e7ed      	b.n	d57bc <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendES2_+0x30>

000d57e0 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>:
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
   d57e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        capacity_(0) {
   d57e4:	2400      	movs	r4, #0
   d57e6:	e9c0 4400 	strd	r4, r4, [r0]
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   d57ea:	f1a2 0902 	sub.w	r9, r2, #2
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
   d57ee:	b08d      	sub	sp, #52	; 0x34
   d57f0:	4605      	mov	r5, r0
   d57f2:	460f      	mov	r7, r1
   d57f4:	4690      	mov	r8, r2
   d57f6:	6084      	str	r4, [r0, #8]
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   d57f8:	fa5f f989 	uxtb.w	r9, r9
    for (size_t i = 0; i < selfLen_; i += (offset + adsLen)) {
   d57fc:	6a39      	ldr	r1, [r7, #32]
   d57fe:	42a1      	cmp	r1, r4
   d5800:	d94f      	bls.n	d58a2 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xc2>
    if (offset == nullptr) {
   d5802:	ab01      	add	r3, sp, #4
   d5804:	4642      	mov	r2, r8
   d5806:	1b09      	subs	r1, r1, r4
   d5808:	1938      	adds	r0, r7, r4
   d580a:	f7ff f8bb 	bl	d4984 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
        if (adsLen > 0) {
   d580e:	4606      	mov	r6, r0
   d5810:	2800      	cmp	r0, #0
   d5812:	d046      	beq.n	d58a2 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xc2>
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   d5814:	f1b9 0f01 	cmp.w	r9, #1
   d5818:	d81e      	bhi.n	d5858 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x78>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   d581a:	f1a0 0b02 	sub.w	fp, r0, #2
   d581e:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
   d5822:	f04f 0a00 	mov.w	sl, #0
   d5826:	45d3      	cmp	fp, sl
   d5828:	9b01      	ldr	r3, [sp, #4]
   d582a:	d036      	beq.n	d589a <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xba>
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   d582c:	4423      	add	r3, r4
   d582e:	eb03 034a 	add.w	r3, r3, sl, lsl #1
   d5832:	443b      	add	r3, r7
   d5834:	a802      	add	r0, sp, #8
   d5836:	78d9      	ldrb	r1, [r3, #3]
   d5838:	789b      	ldrb	r3, [r3, #2]
   d583a:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
   d583e:	f7ff f9f1 	bl	d4c24 <_ZN8particle7BleUuidC1Et>
                    uuids.append(uuid);
   d5842:	a902      	add	r1, sp, #8
   d5844:	a807      	add	r0, sp, #28
   d5846:	f7ff f9c1 	bl	d4bcc <_ZN8particle7BleUuidC1ERKS0_>
   d584a:	a907      	add	r1, sp, #28
   d584c:	4628      	mov	r0, r5
   d584e:	f7ff ff9d 	bl	d578c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendES2_>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   d5852:	f10a 0a01 	add.w	sl, sl, #1
   d5856:	e7e6      	b.n	d5826 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x46>
            } else if (type == BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE) {
   d5858:	f1a8 0306 	sub.w	r3, r8, #6
   d585c:	2b01      	cmp	r3, #1
   d585e:	d81c      	bhi.n	d589a <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xba>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   d5860:	f1a0 0b02 	sub.w	fp, r0, #2
   d5864:	ea4f 1b1b 	mov.w	fp, fp, lsr #4
   d5868:	f04f 0a00 	mov.w	sl, #0
   d586c:	45d3      	cmp	fp, sl
   d586e:	9901      	ldr	r1, [sp, #4]
   d5870:	d013      	beq.n	d589a <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xba>
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
   d5872:	3102      	adds	r1, #2
   d5874:	4421      	add	r1, r4
   d5876:	eb01 110a 	add.w	r1, r1, sl, lsl #4
   d587a:	2201      	movs	r2, #1
   d587c:	4439      	add	r1, r7
   d587e:	a802      	add	r0, sp, #8
   d5880:	f7ff f9b1 	bl	d4be6 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
                    uuids.append(uuid);
   d5884:	a902      	add	r1, sp, #8
   d5886:	a807      	add	r0, sp, #28
   d5888:	f7ff f9a0 	bl	d4bcc <_ZN8particle7BleUuidC1ERKS0_>
   d588c:	a907      	add	r1, sp, #28
   d588e:	4628      	mov	r0, r5
   d5890:	f7ff ff7c 	bl	d578c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendES2_>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   d5894:	f10a 0a01 	add.w	sl, sl, #1
   d5898:	e7e8      	b.n	d586c <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x8c>
    for (size_t i = 0; i < selfLen_; i += (offset + adsLen)) {
   d589a:	9801      	ldr	r0, [sp, #4]
   d589c:	4406      	add	r6, r0
   d589e:	4434      	add	r4, r6
   d58a0:	e7ac      	b.n	d57fc <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x1c>
}
   d58a2:	4628      	mov	r0, r5
   d58a4:	b00d      	add	sp, #52	; 0x34
   d58a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d58aa <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_>:
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
   d58aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return insert(i, vector.data_, vector.size_);
   d58ae:	e9d1 6800 	ldrd	r6, r8, [r1]
    return insert(size_, vector);
   d58b2:	6844      	ldr	r4, [r0, #4]
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   d58b4:	6883      	ldr	r3, [r0, #8]
   d58b6:	eb04 0108 	add.w	r1, r4, r8
   d58ba:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
   d58bc:	4605      	mov	r5, r0
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   d58be:	dc17      	bgt.n	d58f0 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_+0x46>
    T* const p = data_ + i;
   d58c0:	682a      	ldr	r2, [r5, #0]
    move(p + n, p, data_ + size_);
   d58c2:	6869      	ldr	r1, [r5, #4]
    T* const p = data_ + i;
   d58c4:	2314      	movs	r3, #20
   d58c6:	fb03 2404 	mla	r4, r3, r4, r2
    move(p + n, p, data_ + size_);
   d58ca:	fb03 f708 	mul.w	r7, r3, r8
   d58ce:	fb03 2201 	mla	r2, r3, r1, r2
   d58d2:	19e0      	adds	r0, r4, r7
   d58d4:	4621      	mov	r1, r4
   d58d6:	f7ff fef7 	bl	d56c8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    copy(p, values, values + n);
   d58da:	4437      	add	r7, r6
        for (; p != end; ++p, ++dest) {
   d58dc:	42b7      	cmp	r7, r6
   d58de:	d00d      	beq.n	d58fc <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_+0x52>
            new(dest) T(*p);
   d58e0:	b11c      	cbz	r4, d58ea <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_+0x40>
   d58e2:	4631      	mov	r1, r6
   d58e4:	4620      	mov	r0, r4
   d58e6:	f7ff f971 	bl	d4bcc <_ZN8particle7BleUuidC1ERKS0_>
        for (; p != end; ++p, ++dest) {
   d58ea:	3614      	adds	r6, #20
   d58ec:	3414      	adds	r4, #20
   d58ee:	e7f5      	b.n	d58dc <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_+0x32>
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   d58f0:	f7ff ff0e 	bl	d5710 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d58f4:	2800      	cmp	r0, #0
   d58f6:	d1e3      	bne.n	d58c0 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_+0x16>
}
   d58f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_ += n;
   d58fc:	686b      	ldr	r3, [r5, #4]
   d58fe:	4443      	add	r3, r8
   d5900:	606b      	str	r3, [r5, #4]
    return true;
   d5902:	2001      	movs	r0, #1
   d5904:	e7f8      	b.n	d58f8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_+0x4e>

000d5906 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>:
Vector<BleUuid> BleAdvertisingData::serviceUUID() const {
   d5906:	b530      	push	{r4, r5, lr}
        capacity_(0) {
   d5908:	2300      	movs	r3, #0
   d590a:	b085      	sub	sp, #20
   d590c:	e9c0 3300 	strd	r3, r3, [r0]
   d5910:	6083      	str	r3, [r0, #8]
   d5912:	4604      	mov	r4, r0
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   d5914:	2202      	movs	r2, #2
   d5916:	a801      	add	r0, sp, #4
Vector<BleUuid> BleAdvertisingData::serviceUUID() const {
   d5918:	460d      	mov	r5, r1
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   d591a:	f7ff ff61 	bl	d57e0 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   d591e:	a901      	add	r1, sp, #4
   d5920:	4620      	mov	r0, r4
   d5922:	f7ff ffc2 	bl	d58aa <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_>
   d5926:	a801      	add	r0, sp, #4
   d5928:	f7ff fb80 	bl	d502c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   d592c:	2202      	movs	r2, #2
   d592e:	4629      	mov	r1, r5
   d5930:	a801      	add	r0, sp, #4
   d5932:	f7ff ff55 	bl	d57e0 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   d5936:	a901      	add	r1, sp, #4
   d5938:	4620      	mov	r0, r4
   d593a:	f7ff ffb6 	bl	d58aa <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_>
   d593e:	a801      	add	r0, sp, #4
   d5940:	f7ff fb74 	bl	d502c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE));
   d5944:	2203      	movs	r2, #3
   d5946:	4629      	mov	r1, r5
   d5948:	a801      	add	r0, sp, #4
   d594a:	f7ff ff49 	bl	d57e0 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   d594e:	a901      	add	r1, sp, #4
   d5950:	4620      	mov	r0, r4
   d5952:	f7ff ffaa 	bl	d58aa <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_>
   d5956:	a801      	add	r0, sp, #4
   d5958:	f7ff fb68 	bl	d502c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE));
   d595c:	2206      	movs	r2, #6
   d595e:	4629      	mov	r1, r5
   d5960:	a801      	add	r0, sp, #4
   d5962:	f7ff ff3d 	bl	d57e0 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   d5966:	a901      	add	r1, sp, #4
   d5968:	4620      	mov	r0, r4
   d596a:	f7ff ff9e 	bl	d58aa <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_>
   d596e:	a801      	add	r0, sp, #4
   d5970:	f7ff fb5c 	bl	d502c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE));
   d5974:	2207      	movs	r2, #7
   d5976:	4629      	mov	r1, r5
   d5978:	a801      	add	r0, sp, #4
   d597a:	f7ff ff31 	bl	d57e0 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   d597e:	a901      	add	r1, sp, #4
   d5980:	4620      	mov	r0, r4
   d5982:	f7ff ff92 	bl	d58aa <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_>
   d5986:	a801      	add	r0, sp, #4
   d5988:	f7ff fb50 	bl	d502c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
}
   d598c:	4620      	mov	r0, r4
   d598e:	b005      	add	sp, #20
   d5990:	bd30      	pop	{r4, r5, pc}

000d5992 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>:
    bool filterByServiceUUID(const BleScanResult& result) {
   d5992:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5996:	b08b      	sub	sp, #44	; 0x2c
   d5998:	460c      	mov	r4, r1
        auto filterServiceUuids = filter_.serviceUUIDs();
   d599a:	f100 0144 	add.w	r1, r0, #68	; 0x44
   d599e:	a801      	add	r0, sp, #4
   d59a0:	f7ff fed0 	bl	d5744 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>
        if (filterServiceUuids.size() > 0) {
   d59a4:	9b02      	ldr	r3, [sp, #8]
   d59a6:	2b00      	cmp	r3, #0
   d59a8:	dd4a      	ble.n	d5a40 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xae>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
   d59aa:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   d59ae:	a804      	add	r0, sp, #16
   d59b0:	f7ff ffa9 	bl	d5906 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
   d59b4:	f104 0108 	add.w	r1, r4, #8
   d59b8:	a807      	add	r0, sp, #28
   d59ba:	f7ff ffa4 	bl	d5906 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
            if (srUuids.size() <= 0 && advUuids.size() <= 0) {
   d59be:	9d05      	ldr	r5, [sp, #20]
   d59c0:	2d00      	cmp	r5, #0
   d59c2:	dc02      	bgt.n	d59ca <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x38>
   d59c4:	9b08      	ldr	r3, [sp, #32]
   d59c6:	2b00      	cmp	r3, #0
   d59c8:	dd38      	ble.n	d5a3c <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   d59ca:	e9dd 9707 	ldrd	r9, r7, [sp, #28]
            for (const auto& uuid : filterServiceUuids) {
   d59ce:	9a01      	ldr	r2, [sp, #4]
    return data_ + size_;
   d59d0:	9e02      	ldr	r6, [sp, #8]
                for (const auto& found : srUuids) {
   d59d2:	f8dd 8010 	ldr.w	r8, [sp, #16]
   d59d6:	2314      	movs	r3, #20
   d59d8:	fb03 2606 	mla	r6, r3, r6, r2
    return data_ + size_;
   d59dc:	fb03 8505 	mla	r5, r3, r5, r8
   d59e0:	fb03 9707 	mla	r7, r3, r7, r9
   d59e4:	4692      	mov	sl, r2
            for (const auto& uuid : filterServiceUuids) {
   d59e6:	45b2      	cmp	sl, r6
   d59e8:	d028      	beq.n	d5a3c <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
const T* spark::Vector<T, AllocatorT>::end() const {
   d59ea:	46c3      	mov	fp, r8
                for (const auto& found : srUuids) {
   d59ec:	45ab      	cmp	fp, r5
   d59ee:	d015      	beq.n	d5a1c <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8a>
                    if (uuid == found) {
   d59f0:	4659      	mov	r1, fp
   d59f2:	4650      	mov	r0, sl
   d59f4:	f7ff f920 	bl	d4c38 <_ZNK8particle7BleUuideqERKS0_>
   d59f8:	f10b 0b14 	add.w	fp, fp, #20
   d59fc:	4604      	mov	r4, r0
   d59fe:	2800      	cmp	r0, #0
   d5a00:	d0f4      	beq.n	d59ec <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x5a>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
   d5a02:	a807      	add	r0, sp, #28
   d5a04:	f7ff fb12 	bl	d502c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
   d5a08:	a804      	add	r0, sp, #16
   d5a0a:	f7ff fb0f 	bl	d502c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
        auto filterServiceUuids = filter_.serviceUUIDs();
   d5a0e:	a801      	add	r0, sp, #4
   d5a10:	f7ff fb0c 	bl	d502c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    }
   d5a14:	4620      	mov	r0, r4
   d5a16:	b00b      	add	sp, #44	; 0x2c
   d5a18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5a1c:	46cb      	mov	fp, r9
                for (const auto& found : advUuids) {
   d5a1e:	45bb      	cmp	fp, r7
   d5a20:	d009      	beq.n	d5a36 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xa4>
                    if (uuid == found) {
   d5a22:	4659      	mov	r1, fp
   d5a24:	4650      	mov	r0, sl
   d5a26:	f7ff f907 	bl	d4c38 <_ZNK8particle7BleUuideqERKS0_>
   d5a2a:	f10b 0b14 	add.w	fp, fp, #20
   d5a2e:	4604      	mov	r4, r0
   d5a30:	2800      	cmp	r0, #0
   d5a32:	d0f4      	beq.n	d5a1e <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8c>
   d5a34:	e7e5      	b.n	d5a02 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
            for (const auto& uuid : filterServiceUuids) {
   d5a36:	f10a 0a14 	add.w	sl, sl, #20
   d5a3a:	e7d4      	b.n	d59e6 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x54>
                return false;
   d5a3c:	2400      	movs	r4, #0
   d5a3e:	e7e0      	b.n	d5a02 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
        return true;
   d5a40:	2401      	movs	r4, #1
   d5a42:	e7e4      	b.n	d5a0e <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x7c>

000d5a44 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   d5a44:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d5a46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5a48:	4604      	mov	r4, r0
   d5a4a:	460d      	mov	r5, r1
   d5a4c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d5a4e:	d911      	bls.n	d5a74 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x30>
   d5a50:	4290      	cmp	r0, r2
   d5a52:	d210      	bcs.n	d5a76 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x32>
            --end;
   d5a54:	f1a2 0654 	sub.w	r6, r2, #84	; 0x54
            dest += end - p - 1;
   d5a58:	1a75      	subs	r5, r6, r1
   d5a5a:	f1a1 0754 	sub.w	r7, r1, #84	; 0x54
   d5a5e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d5a60:	42b7      	cmp	r7, r6
   d5a62:	d012      	beq.n	d5a8a <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
                new(dest) T(std::move(*end));
   d5a64:	b11c      	cbz	r4, d5a6e <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   d5a66:	4631      	mov	r1, r6
   d5a68:	4620      	mov	r0, r4
   d5a6a:	f7ff fc97 	bl	d539c <_ZN8particle13BleScanResultC1EOS0_>
            for (; end != p; --end, --dest) {
   d5a6e:	3e54      	subs	r6, #84	; 0x54
   d5a70:	3c54      	subs	r4, #84	; 0x54
   d5a72:	e7f5      	b.n	d5a60 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   d5a74:	d009      	beq.n	d5a8a <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
            for (; p != end; ++p, ++dest) {
   d5a76:	42b5      	cmp	r5, r6
   d5a78:	d007      	beq.n	d5a8a <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
                new(dest) T(std::move(*p));
   d5a7a:	b11c      	cbz	r4, d5a84 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x40>
   d5a7c:	4629      	mov	r1, r5
   d5a7e:	4620      	mov	r0, r4
   d5a80:	f7ff fc8c 	bl	d539c <_ZN8particle13BleScanResultC1EOS0_>
            for (; p != end; ++p, ++dest) {
   d5a84:	3554      	adds	r5, #84	; 0x54
   d5a86:	3454      	adds	r4, #84	; 0x54
   d5a88:	e7f5      	b.n	d5a76 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x32>
    }
   d5a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5a8c <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   d5a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (n > 0) {
   d5a8e:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d5a90:	4605      	mov	r5, r0
        if (n > 0) {
   d5a92:	dd13      	ble.n	d5abc <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   d5a94:	2754      	movs	r7, #84	; 0x54
    return ::malloc(size);
   d5a96:	fb07 f006 	mul.w	r0, r7, r6
   d5a9a:	f7fe fd95 	bl	d45c8 <malloc>
            if (!d) {
   d5a9e:	4604      	mov	r4, r0
   d5aa0:	b158      	cbz	r0, d5aba <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2e>
            move(d, data_, data_ + size_);
   d5aa2:	e9d5 1200 	ldrd	r1, r2, [r5]
   d5aa6:	fb07 1202 	mla	r2, r7, r2, r1
   d5aaa:	f7ff ffcb 	bl	d5a44 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   d5aae:	6828      	ldr	r0, [r5, #0]
   d5ab0:	f7fe fd92 	bl	d45d8 <free>
        data_ = d;
   d5ab4:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d5ab6:	60ae      	str	r6, [r5, #8]
        return true;
   d5ab8:	2001      	movs	r0, #1
    }
   d5aba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        T* d = nullptr;
   d5abc:	2400      	movs	r4, #0
   d5abe:	e7f6      	b.n	d5aae <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>

000d5ac0 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d5ac0:	b530      	push	{r4, r5, lr}
   d5ac2:	b097      	sub	sp, #92	; 0x5c
    return insert(size_, std::move(value));
   d5ac4:	6845      	ldr	r5, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d5ac6:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d5ac8:	a801      	add	r0, sp, #4
   d5aca:	f7ff fc67 	bl	d539c <_ZN8particle13BleScanResultC1EOS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5ace:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   d5ad2:	4299      	cmp	r1, r3
   d5ad4:	da11      	bge.n	d5afa <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE6appendES2_+0x3a>
    T* const p = data_ + i;
   d5ad6:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d5ad8:	6861      	ldr	r1, [r4, #4]
    T* const p = data_ + i;
   d5ada:	2254      	movs	r2, #84	; 0x54
   d5adc:	fb02 3505 	mla	r5, r2, r5, r3
    move(p + 1, p, data_ + size_);
   d5ae0:	f105 0054 	add.w	r0, r5, #84	; 0x54
   d5ae4:	fb02 3201 	mla	r2, r2, r1, r3
   d5ae8:	4629      	mov	r1, r5
   d5aea:	f7ff ffab 	bl	d5a44 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d5aee:	b965      	cbnz	r5, d5b0a <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE6appendES2_+0x4a>
    ++size_;
   d5af0:	6863      	ldr	r3, [r4, #4]
   d5af2:	3301      	adds	r3, #1
   d5af4:	6063      	str	r3, [r4, #4]
    return true;
   d5af6:	2001      	movs	r0, #1
   d5af8:	e005      	b.n	d5b06 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE6appendES2_+0x46>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5afa:	3101      	adds	r1, #1
   d5afc:	4620      	mov	r0, r4
   d5afe:	f7ff ffc5 	bl	d5a8c <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d5b02:	2800      	cmp	r0, #0
   d5b04:	d1e7      	bne.n	d5ad6 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE6appendES2_+0x16>
}
   d5b06:	b017      	add	sp, #92	; 0x5c
   d5b08:	bd30      	pop	{r4, r5, pc}
    new(p) T(std::move(value));
   d5b0a:	a901      	add	r1, sp, #4
   d5b0c:	4628      	mov	r0, r5
   d5b0e:	f7ff fc45 	bl	d539c <_ZN8particle13BleScanResultC1EOS0_>
   d5b12:	e7ed      	b.n	d5af0 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE6appendES2_+0x30>

000d5b14 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv>:
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   d5b14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5b18:	b0ab      	sub	sp, #172	; 0xac
            : rssi_(BLE_RSSI_INVALID) {
   d5b1a:	466d      	mov	r5, sp
   d5b1c:	4606      	mov	r6, r0
   d5b1e:	4628      	mov	r0, r5
   d5b20:	460c      	mov	r4, r1
   d5b22:	f7ff f836 	bl	d4b92 <_ZN8particle10BleAddressC1Ev>
   d5b26:	a802      	add	r0, sp, #8
   d5b28:	f7ff f8ae 	bl	d4c88 <_ZN8particle18BleAdvertisingDataC1Ev>
   d5b2c:	a80b      	add	r0, sp, #44	; 0x2c
   d5b2e:	f7ff f8ab 	bl	d4c88 <_ZN8particle18BleAdvertisingDataC1Ev>
    address_ = addr;
   d5b32:	4632      	mov	r2, r6
   d5b34:	ab15      	add	r3, sp, #84	; 0x54
   d5b36:	f852 0f10 	ldr.w	r0, [r2, #16]!
   d5b3a:	6851      	ldr	r1, [r2, #4]
        scanResponse_.set(buf, len);
   d5b3c:	89f2      	ldrh	r2, [r6, #14]
   d5b3e:	c303      	stmia	r3!, {r0, r1}
    address_ = addr.address_;
   d5b40:	e885 0003 	stmia.w	r5, {r0, r1}
        rssi_ = value;
   d5b44:	7833      	ldrb	r3, [r6, #0]
        scanResponse_.set(buf, len);
   d5b46:	68b1      	ldr	r1, [r6, #8]
        rssi_ = value;
   d5b48:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
        scanResponse_.set(buf, len);
   d5b4c:	a80b      	add	r0, sp, #44	; 0x2c
   d5b4e:	f7ff f881 	bl	d4c54 <_ZN8particle18BleAdvertisingData3setEPKhj>
        advertisingData_.set(buf, len);
   d5b52:	89b2      	ldrh	r2, [r6, #12]
   d5b54:	6871      	ldr	r1, [r6, #4]
   d5b56:	a802      	add	r0, sp, #8
   d5b58:	f7ff f87c 	bl	d4c54 <_ZN8particle18BleAdvertisingData3setEPKhj>
        int8_t filterRssi = filter_.minRssi();
   d5b5c:	f994 3068 	ldrsb.w	r3, [r4, #104]	; 0x68
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() < filterRssi) {
   d5b60:	2b7f      	cmp	r3, #127	; 0x7f
    address_ = addr.address_;
   d5b62:	af15      	add	r7, sp, #84	; 0x54
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() < filterRssi) {
   d5b64:	d003      	beq.n	d5b6e <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x5a>
   d5b66:	f99d 2050 	ldrsb.w	r2, [sp, #80]	; 0x50
   d5b6a:	429a      	cmp	r2, r3
   d5b6c:	db5c      	blt.n	d5c28 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x114>
        filterRssi = filter_.maxRssi();
   d5b6e:	f994 3069 	ldrsb.w	r3, [r4, #105]	; 0x69
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() > filterRssi) {
   d5b72:	2b7f      	cmp	r3, #127	; 0x7f
   d5b74:	d003      	beq.n	d5b7e <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x6a>
   d5b76:	f99d 2050 	ldrsb.w	r2, [sp, #80]	; 0x50
   d5b7a:	429a      	cmp	r2, r3
   d5b7c:	dc54      	bgt.n	d5c28 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x114>
        auto filerAddresses = filter_.addresses();
   d5b7e:	f104 0150 	add.w	r1, r4, #80	; 0x50
   d5b82:	4638      	mov	r0, r7
   d5b84:	f7ff fba5 	bl	d52d2 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>
        if (filerAddresses.size() > 0) {
   d5b88:	9b16      	ldr	r3, [sp, #88]	; 0x58
   d5b8a:	2b00      	cmp	r3, #0
   d5b8c:	dd4f      	ble.n	d5c2e <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x11a>
            for (const auto& address : filerAddresses) {
   d5b8e:	9e15      	ldr	r6, [sp, #84]	; 0x54
    return data_ + size_;
   d5b90:	eb06 09c3 	add.w	r9, r6, r3, lsl #3
   d5b94:	45b1      	cmp	r9, r6
   d5b96:	d04d      	beq.n	d5c34 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x120>
                if (address == result.address()) {
   d5b98:	4630      	mov	r0, r6
   d5b9a:	4629      	mov	r1, r5
   d5b9c:	f7fe ffe5 	bl	d4b6a <_ZNK8particle10BleAddresseqERKS0_>
   d5ba0:	3608      	adds	r6, #8
   d5ba2:	4680      	mov	r8, r0
   d5ba4:	2800      	cmp	r0, #0
   d5ba6:	d0f5      	beq.n	d5b94 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x80>
    ::free(ptr);
   d5ba8:	9815      	ldr	r0, [sp, #84]	; 0x54
   d5baa:	f7fe fd15 	bl	d45d8 <free>
        if (!delegator->filterByRssi(result) ||
   d5bae:	f1b8 0f00 	cmp.w	r8, #0
   d5bb2:	d039      	beq.n	d5c28 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x114>
              !delegator->filterByDeviceName(result) ||
   d5bb4:	4629      	mov	r1, r5
   d5bb6:	4620      	mov	r0, r4
   d5bb8:	f7ff fb4e 	bl	d5258 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>
              !delegator->filterByAddress(result) ||
   d5bbc:	b3a0      	cbz	r0, d5c28 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x114>
              !delegator->filterByServiceUUID(result) ||
   d5bbe:	4629      	mov	r1, r5
   d5bc0:	4620      	mov	r0, r4
   d5bc2:	f7ff fee6 	bl	d5992 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>
              !delegator->filterByDeviceName(result) ||
   d5bc6:	4606      	mov	r6, r0
   d5bc8:	b370      	cbz	r0, d5c28 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x114>
        auto filterAppearances = filter_.appearances();
   d5bca:	f104 015c 	add.w	r1, r4, #92	; 0x5c
   d5bce:	4638      	mov	r0, r7
   d5bd0:	f7ff fbc5 	bl	d535e <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterAppearances.size() > 0) {
   d5bd4:	9b16      	ldr	r3, [sp, #88]	; 0x58
   d5bd6:	2b00      	cmp	r3, #0
   d5bd8:	dd12      	ble.n	d5c00 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xec>
            ble_sig_appearance_t srAppearance = result.scanResponse().appearance();
   d5bda:	a80b      	add	r0, sp, #44	; 0x2c
   d5bdc:	f7ff f8bc 	bl	d4d58 <_ZNK8particle18BleAdvertisingData10appearanceEv>
   d5be0:	4680      	mov	r8, r0
            ble_sig_appearance_t advAppearance = result.advertisingData().appearance();
   d5be2:	a802      	add	r0, sp, #8
   d5be4:	f7ff f8b8 	bl	d4d58 <_ZNK8particle18BleAdvertisingData10appearanceEv>
    return data_ + size_;
   d5be8:	e9dd 3215 	ldrd	r3, r2, [sp, #84]	; 0x54
   d5bec:	eb03 0242 	add.w	r2, r3, r2, lsl #1
            for (const auto& appearance : filterAppearances) {
   d5bf0:	4293      	cmp	r3, r2
   d5bf2:	d022      	beq.n	d5c3a <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x126>
                if (appearance == srAppearance || appearance == advAppearance) {
   d5bf4:	f833 1b02 	ldrh.w	r1, [r3], #2
   d5bf8:	4588      	cmp	r8, r1
   d5bfa:	d001      	beq.n	d5c00 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xec>
   d5bfc:	4288      	cmp	r0, r1
   d5bfe:	d1f7      	bne.n	d5bf0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xdc>
    ::free(ptr);
   d5c00:	9815      	ldr	r0, [sp, #84]	; 0x54
   d5c02:	f7fe fce9 	bl	d45d8 <free>
              !delegator->filterByServiceUUID(result) ||
   d5c06:	b17e      	cbz	r6, d5c28 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x114>
              !delegator->filterByCustomData(result)) {
   d5c08:	4629      	mov	r1, r5
   d5c0a:	4620      	mov	r0, r4
   d5c0c:	f7ff f99e 	bl	d4f4c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>
              !delegator->filterByAppearance(result) ||
   d5c10:	b150      	cbz	r0, d5c28 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x114>
        if (delegator->scanResultCallback_) {
   d5c12:	6a23      	ldr	r3, [r4, #32]
   d5c14:	b19b      	cbz	r3, d5c3e <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x12a>
            delegator->foundCount_++;
   d5c16:	6963      	ldr	r3, [r4, #20]
   d5c18:	9515      	str	r5, [sp, #84]	; 0x54
   d5c1a:	3301      	adds	r3, #1
   d5c1c:	6163      	str	r3, [r4, #20]
   d5c1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d5c20:	4639      	mov	r1, r7
   d5c22:	f104 0018 	add.w	r0, r4, #24
   d5c26:	4798      	blx	r3
    }
   d5c28:	b02b      	add	sp, #172	; 0xac
   d5c2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return true;
   d5c2e:	f04f 0801 	mov.w	r8, #1
   d5c32:	e7b9      	b.n	d5ba8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x94>
            return false;
   d5c34:	f04f 0800 	mov.w	r8, #0
   d5c38:	e7b6      	b.n	d5ba8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x94>
            return false;
   d5c3a:	2600      	movs	r6, #0
   d5c3c:	e7e0      	b.n	d5c00 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xec>
        } else if (delegator->scanResultCallbackRef_) {
   d5c3e:	f8d4 c030 	ldr.w	ip, [r4, #48]	; 0x30
   d5c42:	f1bc 0f00 	cmp.w	ip, #0
   d5c46:	d007      	beq.n	d5c58 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x144>
            delegator->foundCount_++;
   d5c48:	6963      	ldr	r3, [r4, #20]
   d5c4a:	3301      	adds	r3, #1
   d5c4c:	6163      	str	r3, [r4, #20]
   d5c4e:	4629      	mov	r1, r5
   d5c50:	6b63      	ldr	r3, [r4, #52]	; 0x34
   d5c52:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d5c56:	e7e6      	b.n	d5c26 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x112>
        if (delegator->resultsPtr_) {
   d5c58:	68e6      	ldr	r6, [r4, #12]
   d5c5a:	b356      	cbz	r6, d5cb2 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x19e>
            delegator->foundCount_++;
   d5c5c:	6963      	ldr	r3, [r4, #20]
   d5c5e:	1c5a      	adds	r2, r3, #1
            if (delegator->foundCount_ <= delegator->targetCount_) {
   d5c60:	6923      	ldr	r3, [r4, #16]
            delegator->foundCount_++;
   d5c62:	6162      	str	r2, [r4, #20]
            if (delegator->foundCount_ <= delegator->targetCount_) {
   d5c64:	429a      	cmp	r2, r3
   d5c66:	d8df      	bhi.n	d5c28 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x114>
                delegator->resultsPtr_[delegator->foundCount_ - 1] = result;
   d5c68:	2354      	movs	r3, #84	; 0x54
    address_ = addr.address_;
   d5c6a:	cd03      	ldmia	r5!, {r0, r1}
                delegator->resultsPtr_[delegator->foundCount_ - 1] = result;
   d5c6c:	4353      	muls	r3, r2
   d5c6e:	3b54      	subs	r3, #84	; 0x54
   d5c70:	18f7      	adds	r7, r6, r3
    address_ = addr.address_;
   d5c72:	50f0      	str	r0, [r6, r3]
   d5c74:	6079      	str	r1, [r7, #4]
class BleScanResult {
   d5c76:	ae02      	add	r6, sp, #8
   d5c78:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d5c7a:	f107 0508 	add.w	r5, r7, #8
   d5c7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5c80:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d5c82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5c84:	6833      	ldr	r3, [r6, #0]
   d5c86:	602b      	str	r3, [r5, #0]
   d5c88:	ae0b      	add	r6, sp, #44	; 0x2c
   d5c8a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d5c8c:	f107 052c 	add.w	r5, r7, #44	; 0x2c
   d5c90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5c92:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d5c94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5c96:	6833      	ldr	r3, [r6, #0]
   d5c98:	602b      	str	r3, [r5, #0]
   d5c9a:	f99d 3050 	ldrsb.w	r3, [sp, #80]	; 0x50
   d5c9e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
                if (delegator->foundCount_ >= delegator->targetCount_) {
   d5ca2:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   d5ca6:	429a      	cmp	r2, r3
   d5ca8:	d3be      	bcc.n	d5c28 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x114>
                    hal_ble_gap_stop_scan(nullptr);
   d5caa:	4660      	mov	r0, ip
   d5cac:	f7fe fb1a 	bl	d42e4 <hal_ble_gap_stop_scan>
   d5cb0:	e7ba      	b.n	d5c28 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x114>
    address_ = addr.address_;
   d5cb2:	e895 0003 	ldmia.w	r5, {r0, r1}
   d5cb6:	ad02      	add	r5, sp, #8
   d5cb8:	e887 0003 	stmia.w	r7, {r0, r1}
   d5cbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5cbe:	ae17      	add	r6, sp, #92	; 0x5c
   d5cc0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d5cc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5cc4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d5cc6:	682b      	ldr	r3, [r5, #0]
   d5cc8:	6033      	str	r3, [r6, #0]
   d5cca:	ad0b      	add	r5, sp, #44	; 0x2c
   d5ccc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5cce:	ae20      	add	r6, sp, #128	; 0x80
   d5cd0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d5cd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5cd4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d5cd6:	682b      	ldr	r3, [r5, #0]
   d5cd8:	6033      	str	r3, [r6, #0]
        delegator->resultsVector_.append(result);
   d5cda:	4639      	mov	r1, r7
   d5cdc:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
   d5ce0:	f88d 30a4 	strb.w	r3, [sp, #164]	; 0xa4
   d5ce4:	4620      	mov	r0, r4
   d5ce6:	f7ff feeb 	bl	d5ac0 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE6appendES2_>
   d5cea:	e79d      	b.n	d5c28 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x114>

000d5cec <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d5cec:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d5cee:	4c06      	ldr	r4, [pc, #24]	; (d5d08 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d5cf0:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d5cf2:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d5cf4:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d5cf6:	f7fe fb13 	bl	d4320 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d5cfa:	4620      	mov	r0, r4
   d5cfc:	4a03      	ldr	r2, [pc, #12]	; (d5d0c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d5cfe:	4904      	ldr	r1, [pc, #16]	; (d5d10 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d5d00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d5d04:	f000 be8c 	b.w	d6a20 <__aeabi_atexit>
   d5d08:	2003e77c 	.word	0x2003e77c
   d5d0c:	2003e750 	.word	0x2003e750
   d5d10:	000d4943 	.word	0x000d4943

000d5d14 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5d16:	4606      	mov	r6, r0
   d5d18:	460d      	mov	r5, r1
  size_t n = 0;
   d5d1a:	188f      	adds	r7, r1, r2
   d5d1c:	2400      	movs	r4, #0
  while (size--) {
   d5d1e:	42bd      	cmp	r5, r7
   d5d20:	d00c      	beq.n	d5d3c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5d22:	6833      	ldr	r3, [r6, #0]
   d5d24:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5d28:	689b      	ldr	r3, [r3, #8]
   d5d2a:	4630      	mov	r0, r6
   d5d2c:	4798      	blx	r3
     if (chunk>=0)
   d5d2e:	1e03      	subs	r3, r0, #0
   d5d30:	db01      	blt.n	d5d36 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5d32:	441c      	add	r4, r3
  while (size--) {
   d5d34:	e7f3      	b.n	d5d1e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5d36:	2c00      	cmp	r4, #0
   d5d38:	bf08      	it	eq
   d5d3a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d5d3c:	4620      	mov	r0, r4
   d5d3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5d40 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5d40:	b513      	push	{r0, r1, r4, lr}
   d5d42:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d5d44:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d5d46:	b159      	cbz	r1, d5d60 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d5d48:	9101      	str	r1, [sp, #4]
   d5d4a:	f001 f824 	bl	d6d96 <strlen>
   d5d4e:	6823      	ldr	r3, [r4, #0]
   d5d50:	9901      	ldr	r1, [sp, #4]
   d5d52:	68db      	ldr	r3, [r3, #12]
   d5d54:	4602      	mov	r2, r0
   d5d56:	4620      	mov	r0, r4
    }
   d5d58:	b002      	add	sp, #8
   d5d5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d5d5e:	4718      	bx	r3
    }
   d5d60:	b002      	add	sp, #8
   d5d62:	bd10      	pop	{r4, pc}

000d5d64 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d5d64:	b508      	push	{r3, lr}
  return write(str);
   d5d66:	f7ff ffeb 	bl	d5d40 <_ZN5Print5writeEPKc>
}
   d5d6a:	bd08      	pop	{r3, pc}

000d5d6c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d5d6c:	6803      	ldr	r3, [r0, #0]
   d5d6e:	689b      	ldr	r3, [r3, #8]
   d5d70:	4718      	bx	r3

000d5d72 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5d72:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5d74:	210d      	movs	r1, #13
{
   d5d76:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5d78:	f7ff fff8 	bl	d5d6c <_ZN5Print5printEc>
  n += print('\n');
   d5d7c:	210a      	movs	r1, #10
  size_t n = print('\r');
   d5d7e:	4604      	mov	r4, r0
  n += print('\n');
   d5d80:	4628      	mov	r0, r5
   d5d82:	f7ff fff3 	bl	d5d6c <_ZN5Print5printEc>
  return n;
}
   d5d86:	4420      	add	r0, r4
   d5d88:	bd38      	pop	{r3, r4, r5, pc}

000d5d8a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d5d8a:	b538      	push	{r3, r4, r5, lr}
   d5d8c:	4605      	mov	r5, r0
  return write(str);
   d5d8e:	f7ff ffd7 	bl	d5d40 <_ZN5Print5writeEPKc>
   d5d92:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d5d94:	4628      	mov	r0, r5
   d5d96:	f7ff ffec 	bl	d5d72 <_ZN5Print7printlnEv>
  return n;
}
   d5d9a:	4420      	add	r0, r4
   d5d9c:	bd38      	pop	{r3, r4, r5, pc}

000d5d9e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5d9e:	b530      	push	{r4, r5, lr}
   d5da0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5da2:	2300      	movs	r3, #0
   d5da4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5da8:	2a01      	cmp	r2, #1
   d5daa:	bf98      	it	ls
   d5dac:	220a      	movls	r2, #10
   d5dae:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d5db0:	460d      	mov	r5, r1
   d5db2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d5db6:	fb01 5312 	mls	r3, r1, r2, r5
   d5dba:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5dbe:	2b09      	cmp	r3, #9
   d5dc0:	bf94      	ite	ls
   d5dc2:	3330      	addls	r3, #48	; 0x30
   d5dc4:	3337      	addhi	r3, #55	; 0x37
   d5dc6:	b2db      	uxtb	r3, r3
  } while(n);
   d5dc8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5dca:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d5dce:	d9ef      	bls.n	d5db0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d5dd0:	4621      	mov	r1, r4
   d5dd2:	f7ff ffb5 	bl	d5d40 <_ZN5Print5writeEPKc>
}
   d5dd6:	b00b      	add	sp, #44	; 0x2c
   d5dd8:	bd30      	pop	{r4, r5, pc}

000d5dda <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d5dda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5dde:	b086      	sub	sp, #24
   d5de0:	af00      	add	r7, sp, #0
   d5de2:	4605      	mov	r5, r0
   d5de4:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d5de6:	1d38      	adds	r0, r7, #4
   d5de8:	2114      	movs	r1, #20
{
   d5dea:	4614      	mov	r4, r2
    va_copy(args2, args);
   d5dec:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d5dee:	f7fe fc0b 	bl	d4608 <vsnprintf>

    if (n<bufsize)
   d5df2:	2813      	cmp	r0, #19
   d5df4:	d80e      	bhi.n	d5e14 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d5df6:	1d39      	adds	r1, r7, #4
   d5df8:	4628      	mov	r0, r5
   d5dfa:	f7ff ffa1 	bl	d5d40 <_ZN5Print5writeEPKc>
   d5dfe:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d5e00:	b11e      	cbz	r6, d5e0a <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d5e02:	4628      	mov	r0, r5
   d5e04:	f7ff ffb5 	bl	d5d72 <_ZN5Print7printlnEv>
   d5e08:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d5e0a:	4620      	mov	r0, r4
   d5e0c:	3718      	adds	r7, #24
   d5e0e:	46bd      	mov	sp, r7
   d5e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d5e14:	f100 0308 	add.w	r3, r0, #8
   d5e18:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d5e1c:	46e8      	mov	r8, sp
        char bigger[n+1];
   d5e1e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d5e22:	4622      	mov	r2, r4
   d5e24:	1c41      	adds	r1, r0, #1
   d5e26:	683b      	ldr	r3, [r7, #0]
   d5e28:	4668      	mov	r0, sp
   d5e2a:	f7fe fbed 	bl	d4608 <vsnprintf>
  return write(str);
   d5e2e:	4669      	mov	r1, sp
   d5e30:	4628      	mov	r0, r5
   d5e32:	f7ff ff85 	bl	d5d40 <_ZN5Print5writeEPKc>
   d5e36:	4604      	mov	r4, r0
   d5e38:	46c5      	mov	sp, r8
   d5e3a:	e7e1      	b.n	d5e00 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d5e3c <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d5e3c:	2300      	movs	r3, #0
   d5e3e:	6840      	ldr	r0, [r0, #4]
   d5e40:	461a      	mov	r2, r3
   d5e42:	4619      	mov	r1, r3
   d5e44:	f7fe bb68 	b.w	d4518 <network_on>

000d5e48 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5e48:	4b01      	ldr	r3, [pc, #4]	; (d5e50 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5e4a:	4a02      	ldr	r2, [pc, #8]	; (d5e54 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5e4c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d5e4e:	4770      	bx	lr
   d5e50:	2003e784 	.word	0x2003e784
   d5e54:	000d6f88 	.word	0x000d6f88

000d5e58 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5e58:	4b02      	ldr	r3, [pc, #8]	; (d5e64 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5e5a:	681a      	ldr	r2, [r3, #0]
   d5e5c:	4b02      	ldr	r3, [pc, #8]	; (d5e68 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5e5e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d5e60:	4770      	bx	lr
   d5e62:	bf00      	nop
   d5e64:	2003e6e8 	.word	0x2003e6e8
   d5e68:	2003e788 	.word	0x2003e788

000d5e6c <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5e6c:	b510      	push	{r4, lr}
   d5e6e:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   d5e70:	f7fe fdfb 	bl	d4a6a <_ZNSt14_Function_baseD1Ev>
   d5e74:	4620      	mov	r0, r4
   d5e76:	bd10      	pop	{r4, pc}

000d5e78 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d5e78:	4803      	ldr	r0, [pc, #12]	; (d5e88 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5e7a:	4a04      	ldr	r2, [pc, #16]	; (d5e8c <_GLOBAL__sub_I_RGB+0x14>)
   d5e7c:	4904      	ldr	r1, [pc, #16]	; (d5e90 <_GLOBAL__sub_I_RGB+0x18>)
   d5e7e:	2300      	movs	r3, #0
   d5e80:	6083      	str	r3, [r0, #8]
   d5e82:	f000 bdcd 	b.w	d6a20 <__aeabi_atexit>
   d5e86:	bf00      	nop
   d5e88:	2003e78c 	.word	0x2003e78c
   d5e8c:	2003e750 	.word	0x2003e750
   d5e90:	000d5e6d 	.word	0x000d5e6d

000d5e94 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d5e94:	4b01      	ldr	r3, [pc, #4]	; (d5e9c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d5e96:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d5e98:	4770      	bx	lr
   d5e9a:	bf00      	nop
   d5e9c:	2003e6ec 	.word	0x2003e6ec

000d5ea0 <serialEventRun>:
{
   d5ea0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5ea2:	4b0b      	ldr	r3, [pc, #44]	; (d5ed0 <serialEventRun+0x30>)
   d5ea4:	b143      	cbz	r3, d5eb8 <serialEventRun+0x18>
   d5ea6:	f000 fbf7 	bl	d6698 <_Z16_fetch_usbserialv>
   d5eaa:	6803      	ldr	r3, [r0, #0]
   d5eac:	691b      	ldr	r3, [r3, #16]
   d5eae:	4798      	blx	r3
   d5eb0:	2800      	cmp	r0, #0
   d5eb2:	dd01      	ble.n	d5eb8 <serialEventRun+0x18>
        serialEvent();
   d5eb4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d5eb8:	4b06      	ldr	r3, [pc, #24]	; (d5ed4 <serialEventRun+0x34>)
   d5eba:	b143      	cbz	r3, d5ece <serialEventRun+0x2e>
   d5ebc:	f000 fc6a 	bl	d6794 <_Z22__fetch_global_Serial1v>
   d5ec0:	6803      	ldr	r3, [r0, #0]
   d5ec2:	691b      	ldr	r3, [r3, #16]
   d5ec4:	4798      	blx	r3
   d5ec6:	2800      	cmp	r0, #0
   d5ec8:	dd01      	ble.n	d5ece <serialEventRun+0x2e>
        serialEvent1();
   d5eca:	f3af 8000 	nop.w
}
   d5ece:	bd08      	pop	{r3, pc}
	...

000d5ed8 <_post_loop>:
{
   d5ed8:	b508      	push	{r3, lr}
	serialEventRun();
   d5eda:	f7ff ffe1 	bl	d5ea0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5ede:	f7fe f9e9 	bl	d42b4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5ee2:	4b01      	ldr	r3, [pc, #4]	; (d5ee8 <_post_loop+0x10>)
   d5ee4:	6018      	str	r0, [r3, #0]
}
   d5ee6:	bd08      	pop	{r3, pc}
   d5ee8:	2003e7ec 	.word	0x2003e7ec

000d5eec <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5eec:	4802      	ldr	r0, [pc, #8]	; (d5ef8 <_Z33system_initialize_user_backup_ramv+0xc>)
   d5eee:	4a03      	ldr	r2, [pc, #12]	; (d5efc <_Z33system_initialize_user_backup_ramv+0x10>)
   d5ef0:	4903      	ldr	r1, [pc, #12]	; (d5f00 <_Z33system_initialize_user_backup_ramv+0x14>)
   d5ef2:	1a12      	subs	r2, r2, r0
   d5ef4:	f000 becc 	b.w	d6c90 <memcpy>
   d5ef8:	2003f400 	.word	0x2003f400
   d5efc:	2003f404 	.word	0x2003f404
   d5f00:	000d71d0 	.word	0x000d71d0

000d5f04 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5f04:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5f06:	2300      	movs	r3, #0
   d5f08:	9300      	str	r3, [sp, #0]
   d5f0a:	461a      	mov	r2, r3
   d5f0c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5f10:	f7fe fad8 	bl	d44c4 <system_ctrl_set_result>
}
   d5f14:	b003      	add	sp, #12
   d5f16:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5f1c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d5f1c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5f1e:	8843      	ldrh	r3, [r0, #2]
   d5f20:	2b0a      	cmp	r3, #10
   d5f22:	d008      	beq.n	d5f36 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5f24:	2b50      	cmp	r3, #80	; 0x50
   d5f26:	d10b      	bne.n	d5f40 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d5f28:	4b09      	ldr	r3, [pc, #36]	; (d5f50 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5f2a:	681b      	ldr	r3, [r3, #0]
   d5f2c:	b14b      	cbz	r3, d5f42 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d5f2e:	b003      	add	sp, #12
   d5f30:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d5f34:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d5f36:	f7ff ffe5 	bl	d5f04 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d5f3a:	b003      	add	sp, #12
   d5f3c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5f40:	2300      	movs	r3, #0
   d5f42:	9300      	str	r3, [sp, #0]
   d5f44:	461a      	mov	r2, r3
   d5f46:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5f4a:	f7fe fabb 	bl	d44c4 <system_ctrl_set_result>
}
   d5f4e:	e7f4      	b.n	d5f3a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d5f50:	2003e7a0 	.word	0x2003e7a0

000d5f54 <module_user_init_hook>:
{
   d5f54:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5f56:	4c12      	ldr	r4, [pc, #72]	; (d5fa0 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d5f58:	4812      	ldr	r0, [pc, #72]	; (d5fa4 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5f5a:	4d13      	ldr	r5, [pc, #76]	; (d5fa8 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d5f5c:	2100      	movs	r1, #0
   d5f5e:	f7fe fb6b 	bl	d4638 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5f62:	6823      	ldr	r3, [r4, #0]
   d5f64:	42ab      	cmp	r3, r5
   d5f66:	4b11      	ldr	r3, [pc, #68]	; (d5fac <module_user_init_hook+0x58>)
   d5f68:	bf0c      	ite	eq
   d5f6a:	2201      	moveq	r2, #1
   d5f6c:	2200      	movne	r2, #0
   d5f6e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d5f70:	d002      	beq.n	d5f78 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d5f72:	f7ff ffbb 	bl	d5eec <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d5f76:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5f78:	f7fe f98c 	bl	d4294 <HAL_RNG_GetRandomNumber>
   d5f7c:	4604      	mov	r4, r0
    srand(seed);
   d5f7e:	f000 feb7 	bl	d6cf0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5f82:	4b0b      	ldr	r3, [pc, #44]	; (d5fb0 <module_user_init_hook+0x5c>)
   d5f84:	b113      	cbz	r3, d5f8c <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d5f86:	4620      	mov	r0, r4
   d5f88:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5f8c:	2100      	movs	r1, #0
   d5f8e:	4808      	ldr	r0, [pc, #32]	; (d5fb0 <module_user_init_hook+0x5c>)
   d5f90:	f7fe fb12 	bl	d45b8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d5f94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5f98:	4806      	ldr	r0, [pc, #24]	; (d5fb4 <module_user_init_hook+0x60>)
   d5f9a:	2100      	movs	r1, #0
   d5f9c:	f7fe ba88 	b.w	d44b0 <system_ctrl_set_app_request_handler>
   d5fa0:	2003f400 	.word	0x2003f400
   d5fa4:	000d5e95 	.word	0x000d5e95
   d5fa8:	9a271c1e 	.word	0x9a271c1e
   d5fac:	2003e79c 	.word	0x2003e79c
   d5fb0:	00000000 	.word	0x00000000
   d5fb4:	000d5f1d 	.word	0x000d5f1d

000d5fb8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5fb8:	4770      	bx	lr

000d5fba <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d5fba:	2000      	movs	r0, #0
   d5fbc:	4770      	bx	lr

000d5fbe <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5fbe:	b510      	push	{r4, lr}
   d5fc0:	2110      	movs	r1, #16
   d5fc2:	4604      	mov	r4, r0
   d5fc4:	f000 fd31 	bl	d6a2a <_ZdlPvj>
   d5fc8:	4620      	mov	r0, r4
   d5fca:	bd10      	pop	{r4, pc}

000d5fcc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d5fcc:	b508      	push	{r3, lr}
      { delete this; }
   d5fce:	f7ff fff6 	bl	d5fbe <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d5fd2:	bd08      	pop	{r3, pc}

000d5fd4 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d5fd4:	b530      	push	{r4, r5, lr}
        type_(type) {
   d5fd6:	2200      	movs	r2, #0
   d5fd8:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d5fdc:	6002      	str	r2, [r0, #0]
   d5fde:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d5fe0:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d5fe2:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d5fe4:	680c      	ldr	r4, [r1, #0]
   d5fe6:	8085      	strh	r5, [r0, #4]
   d5fe8:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d5fea:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d5fec:	bd30      	pop	{r4, r5, pc}

000d5fee <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d5fee:	b510      	push	{r4, lr}
   d5ff0:	4604      	mov	r4, r0
    free((void*)msg_);
   d5ff2:	6800      	ldr	r0, [r0, #0]
   d5ff4:	f7fe faf0 	bl	d45d8 <free>
}
   d5ff8:	4620      	mov	r0, r4
   d5ffa:	bd10      	pop	{r4, pc}

000d5ffc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d5ffc:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d5ffe:	68c4      	ldr	r4, [r0, #12]
   d6000:	b1f4      	cbz	r4, d6040 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d6002:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d6004:	2b02      	cmp	r3, #2
   d6006:	d103      	bne.n	d6010 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d6008:	f104 000c 	add.w	r0, r4, #12
   d600c:	f7ff ffef 	bl	d5fee <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d6010:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d6012:	b135      	cbz	r5, d6022 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d6014:	4628      	mov	r0, r5
   d6016:	f7fe fd28 	bl	d4a6a <_ZNSt14_Function_baseD1Ev>
   d601a:	2110      	movs	r1, #16
   d601c:	4628      	mov	r0, r5
   d601e:	f000 fd04 	bl	d6a2a <_ZdlPvj>
   d6022:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d6024:	b135      	cbz	r5, d6034 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d6026:	4628      	mov	r0, r5
   d6028:	f7fe fd1f 	bl	d4a6a <_ZNSt14_Function_baseD1Ev>
   d602c:	2110      	movs	r1, #16
   d602e:	4628      	mov	r0, r5
   d6030:	f000 fcfb 	bl	d6a2a <_ZdlPvj>
   d6034:	4620      	mov	r0, r4
   d6036:	2114      	movs	r1, #20
   d6038:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d603c:	f000 bcf5 	b.w	d6a2a <_ZdlPvj>
   d6040:	bd38      	pop	{r3, r4, r5, pc}

000d6042 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d6042:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6044:	460e      	mov	r6, r1
   d6046:	4604      	mov	r4, r0
   d6048:	f856 3b04 	ldr.w	r3, [r6], #4
   d604c:	9300      	str	r3, [sp, #0]
   d604e:	460d      	mov	r5, r1
   d6050:	a801      	add	r0, sp, #4
   d6052:	4631      	mov	r1, r6
   d6054:	f7ff f82a 	bl	d50ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6058:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d605a:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d605c:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d605e:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d6060:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d6062:	2300      	movs	r3, #0
   d6064:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
   d6066:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d6068:	f7ff f831 	bl	d50ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d606c:	4630      	mov	r0, r6
   d606e:	f7ff f82e 	bl	d50ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d6072:	4628      	mov	r0, r5
   d6074:	2108      	movs	r1, #8
   d6076:	f000 fcd8 	bl	d6a2a <_ZdlPvj>
        return p;
    }
   d607a:	4620      	mov	r0, r4
   d607c:	b002      	add	sp, #8
   d607e:	bd70      	pop	{r4, r5, r6, pc}

000d6080 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d6080:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d6082:	b510      	push	{r4, lr}
      if (_M_empty())
   d6084:	b90a      	cbnz	r2, d608a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d6086:	f000 fcd2 	bl	d6a2e <_ZSt25__throw_bad_function_callv>
    }
   d608a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d608e:	68c3      	ldr	r3, [r0, #12]
   d6090:	4718      	bx	r3

000d6092 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6092:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d6094:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d6096:	f100 0110 	add.w	r1, r0, #16
   d609a:	f7ff fff1 	bl	d6080 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d609e:	bd08      	pop	{r3, pc}

000d60a0 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d60a0:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d60a2:	b510      	push	{r4, lr}
      if (_M_empty())
   d60a4:	b90a      	cbnz	r2, d60aa <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d60a6:	f000 fcc2 	bl	d6a2e <_ZSt25__throw_bad_function_callv>
    }
   d60aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d60ae:	68c3      	ldr	r3, [r0, #12]
   d60b0:	4718      	bx	r3

000d60b2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d60b2:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d60b4:	6800      	ldr	r0, [r0, #0]
   d60b6:	f100 0110 	add.w	r1, r0, #16
   d60ba:	f7ff fff1 	bl	d60a0 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d60be:	bd08      	pop	{r3, pc}

000d60c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d60c0:	b538      	push	{r3, r4, r5, lr}
   d60c2:	2300      	movs	r3, #0
   d60c4:	4604      	mov	r4, r0
   d60c6:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d60c8:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d60ca:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d60cc:	f7fd ffe1 	bl	d4092 <_Znwj>
   d60d0:	b128      	cbz	r0, d60de <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d60d2:	2301      	movs	r3, #1
   d60d4:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d60d8:	4b02      	ldr	r3, [pc, #8]	; (d60e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d60da:	6003      	str	r3, [r0, #0]
   d60dc:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d60de:	6020      	str	r0, [r4, #0]
	}
   d60e0:	4620      	mov	r0, r4
   d60e2:	bd38      	pop	{r3, r4, r5, pc}
   d60e4:	000d6fb0 	.word	0x000d6fb0

000d60e8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d60e8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d60ea:	2300      	movs	r3, #0
   d60ec:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d60ee:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d60f0:	4604      	mov	r4, r0
   d60f2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d60f4:	b12b      	cbz	r3, d6102 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d60f6:	2202      	movs	r2, #2
   d60f8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d60fa:	68eb      	ldr	r3, [r5, #12]
   d60fc:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d60fe:	68ab      	ldr	r3, [r5, #8]
   d6100:	60a3      	str	r3, [r4, #8]
    }
   d6102:	4620      	mov	r0, r4
   d6104:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6108 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d6108:	b5f0      	push	{r4, r5, r6, r7, lr}
   d610a:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d610c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d610e:	4668      	mov	r0, sp
   d6110:	f7ff ff60 	bl	d5fd4 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d6114:	f04f 0302 	mov.w	r3, #2
   d6118:	e8d4 2f4f 	ldrexb	r2, [r4]
   d611c:	2a00      	cmp	r2, #0
   d611e:	d103      	bne.n	d6128 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d6120:	e8c4 3f41 	strexb	r1, r3, [r4]
   d6124:	2900      	cmp	r1, #0
   d6126:	d1f7      	bne.n	d6118 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d6128:	d125      	bne.n	d6176 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d612a:	f104 050c 	add.w	r5, r4, #12
   d612e:	4669      	mov	r1, sp
   d6130:	4628      	mov	r0, r5
   d6132:	f7ff ff4f 	bl	d5fd4 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d6136:	f3bf 8f5b 	dmb	ish
   d613a:	2301      	movs	r3, #1
   d613c:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d613e:	2000      	movs	r0, #0
   d6140:	f104 0308 	add.w	r3, r4, #8
   d6144:	f3bf 8f5b 	dmb	ish
   d6148:	e853 6f00 	ldrex	r6, [r3]
   d614c:	e843 0200 	strex	r2, r0, [r3]
   d6150:	2a00      	cmp	r2, #0
   d6152:	d1f9      	bne.n	d6148 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d6154:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d6158:	b16e      	cbz	r6, d6176 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d615a:	f7fe f999 	bl	d4490 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d615e:	b178      	cbz	r0, d6180 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d6160:	4629      	mov	r1, r5
   d6162:	4630      	mov	r0, r6
   d6164:	f7ff ff8c 	bl	d6080 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d6168:	4630      	mov	r0, r6
   d616a:	f7fe fc7e 	bl	d4a6a <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d616e:	2110      	movs	r1, #16
   d6170:	4630      	mov	r0, r6
   d6172:	f000 fc5a 	bl	d6a2a <_ZdlPvj>
        p_->setError(std::move(error));
   d6176:	4668      	mov	r0, sp
   d6178:	f7ff ff39 	bl	d5fee <_ZN8particle5ErrorD1Ev>
    }
   d617c:	b009      	add	sp, #36	; 0x24
   d617e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d6180:	4631      	mov	r1, r6
   d6182:	a802      	add	r0, sp, #8
   d6184:	f7ff ffb0 	bl	d60e8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d6188:	68e0      	ldr	r0, [r4, #12]
   d618a:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d618e:	b108      	cbz	r0, d6194 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d6190:	f000 fde4 	bl	d6d5c <strdup>
        type_(type) {
   d6194:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d6196:	2010      	movs	r0, #16
   d6198:	f8ad 501c 	strh.w	r5, [sp, #28]
   d619c:	f7fd ff79 	bl	d4092 <_Znwj>
   d61a0:	4605      	mov	r5, r0
   d61a2:	b1e8      	cbz	r0, d61e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d61a4:	2700      	movs	r7, #0
   d61a6:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d61a8:	2018      	movs	r0, #24
   d61aa:	f7fd ff72 	bl	d4092 <_Znwj>
   d61ae:	4604      	mov	r4, r0
   d61b0:	b188      	cbz	r0, d61d6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d61b2:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d61b4:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d61b6:	a802      	add	r0, sp, #8
   d61b8:	f7ff fa74 	bl	d56a4 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d61bc:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d61be:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d61c0:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d61c2:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d61c4:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d61c6:	a906      	add	r1, sp, #24
   d61c8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d61ca:	60e3      	str	r3, [r4, #12]
   d61cc:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d61d0:	9205      	str	r2, [sp, #20]
   d61d2:	f7ff feff 	bl	d5fd4 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d61d6:	4b08      	ldr	r3, [pc, #32]	; (d61f8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d61d8:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d61da:	4b08      	ldr	r3, [pc, #32]	; (d61fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d61dc:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d61de:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d61e0:	a806      	add	r0, sp, #24
   d61e2:	f7ff ff04 	bl	d5fee <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d61e6:	a802      	add	r0, sp, #8
   d61e8:	f7fe fc3f 	bl	d4a6a <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d61ec:	2200      	movs	r2, #0
   d61ee:	4629      	mov	r1, r5
   d61f0:	4803      	ldr	r0, [pc, #12]	; (d6200 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d61f2:	f7fe f955 	bl	d44a0 <application_thread_invoke>
   d61f6:	e7b7      	b.n	d6168 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d61f8:	000d6093 	.word	0x000d6093
   d61fc:	000d6329 	.word	0x000d6329
   d6200:	000d681d 	.word	0x000d681d

000d6204 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d6204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6208:	b08a      	sub	sp, #40	; 0x28
   d620a:	4605      	mov	r5, r0
   d620c:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d6210:	460c      	mov	r4, r1
   d6212:	4617      	mov	r7, r2
   d6214:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6216:	f7fe f9bf 	bl	d4598 <spark_cloud_flag_connected>
   d621a:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d621c:	4682      	mov	sl, r0
   d621e:	bb38      	cbnz	r0, d6270 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d6220:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d6224:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d6226:	a905      	add	r1, sp, #20
   d6228:	4630      	mov	r0, r6
   d622a:	f8ad 3018 	strh.w	r3, [sp, #24]
   d622e:	f7ff fed1 	bl	d5fd4 <_ZN8particle5ErrorC1EOS0_>
   d6232:	2014      	movs	r0, #20
   d6234:	f7fd ff2d 	bl	d4092 <_Znwj>
   d6238:	4604      	mov	r4, r0
   d623a:	b148      	cbz	r0, d6250 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d623c:	2302      	movs	r3, #2
   d623e:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6240:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d6242:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6246:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d6248:	4631      	mov	r1, r6
   d624a:	300c      	adds	r0, #12
   d624c:	f7ff fec2 	bl	d5fd4 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d6250:	4628      	mov	r0, r5
	: __shared_count(__p)
   d6252:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d6254:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d6258:	f7ff ff32 	bl	d60c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d625c:	4630      	mov	r0, r6
   d625e:	f7ff fec6 	bl	d5fee <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d6262:	a805      	add	r0, sp, #20
   d6264:	f7ff fec3 	bl	d5fee <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d6268:	4628      	mov	r0, r5
   d626a:	b00a      	add	sp, #40	; 0x28
   d626c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d6270:	230c      	movs	r3, #12
   d6272:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d6276:	2014      	movs	r0, #20
   d6278:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d627c:	9307      	str	r3, [sp, #28]
   d627e:	f7fd ff08 	bl	d4092 <_Znwj>
   d6282:	4601      	mov	r1, r0
   d6284:	b128      	cbz	r0, d6292 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d6286:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d628a:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d628e:	f880 a001 	strb.w	sl, [r0, #1]
   d6292:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d6294:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d6296:	f7ff ff13 	bl	d60c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d629a:	4b22      	ldr	r3, [pc, #136]	; (d6324 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d629c:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d629e:	2008      	movs	r0, #8
   d62a0:	f7fd fef7 	bl	d4092 <_Znwj>
   d62a4:	4682      	mov	sl, r0
   d62a6:	b128      	cbz	r0, d62b4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d62a8:	9b03      	ldr	r3, [sp, #12]
   d62aa:	f840 3b04 	str.w	r3, [r0], #4
   d62ae:	a904      	add	r1, sp, #16
   d62b0:	f7fe fefc 	bl	d50ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d62b4:	9600      	str	r6, [sp, #0]
   d62b6:	fa5f f389 	uxtb.w	r3, r9
   d62ba:	4642      	mov	r2, r8
   d62bc:	4639      	mov	r1, r7
   d62be:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d62c0:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d62c4:	f7fe f970 	bl	d45a8 <spark_send_event>
   d62c8:	b9b8      	cbnz	r0, d62fa <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d62ca:	9b03      	ldr	r3, [sp, #12]
   d62cc:	785b      	ldrb	r3, [r3, #1]
   d62ce:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d62d2:	b993      	cbnz	r3, d62fa <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d62d4:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d62d8:	a905      	add	r1, sp, #20
   d62da:	a803      	add	r0, sp, #12
   d62dc:	9205      	str	r2, [sp, #20]
   d62de:	f8ad 3018 	strh.w	r3, [sp, #24]
   d62e2:	f7ff ff11 	bl	d6108 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d62e6:	a805      	add	r0, sp, #20
   d62e8:	f7ff fe81 	bl	d5fee <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d62ec:	a805      	add	r0, sp, #20
   d62ee:	9909      	ldr	r1, [sp, #36]	; 0x24
   d62f0:	f7ff fea7 	bl	d6042 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d62f4:	a806      	add	r0, sp, #24
   d62f6:	f7fe feea 	bl	d50ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d62fa:	9b03      	ldr	r3, [sp, #12]
   d62fc:	9305      	str	r3, [sp, #20]
   d62fe:	a904      	add	r1, sp, #16
   d6300:	a806      	add	r0, sp, #24
   d6302:	f7fe fed3 	bl	d50ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6306:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6308:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d630a:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d630c:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d630e:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d6310:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d6312:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d6314:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d6316:	f7fe feda 	bl	d50ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d631a:	a804      	add	r0, sp, #16
   d631c:	f7fe fed7 	bl	d50ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d6320:	e7a2      	b.n	d6268 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d6322:	bf00      	nop
   d6324:	000d63ed 	.word	0x000d63ed

000d6328 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d6328:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d632a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d632c:	4605      	mov	r5, r0
	  switch (__op)
   d632e:	d007      	beq.n	d6340 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d6330:	2a03      	cmp	r2, #3
   d6332:	d018      	beq.n	d6366 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d6334:	2a01      	cmp	r2, #1
   d6336:	d101      	bne.n	d633c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d6338:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d633a:	6003      	str	r3, [r0, #0]
	}
   d633c:	2000      	movs	r0, #0
   d633e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d6340:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d6342:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d6344:	f7fd fea5 	bl	d4092 <_Znwj>
   d6348:	4604      	mov	r4, r0
   d634a:	b150      	cbz	r0, d6362 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d634c:	4631      	mov	r1, r6
   d634e:	f7ff fecb 	bl	d60e8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d6352:	6930      	ldr	r0, [r6, #16]
   d6354:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d6358:	b108      	cbz	r0, d635e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d635a:	f000 fcff 	bl	d6d5c <strdup>
        type_(type) {
   d635e:	6120      	str	r0, [r4, #16]
   d6360:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d6362:	602c      	str	r4, [r5, #0]
	}
   d6364:	e7ea      	b.n	d633c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d6366:	6804      	ldr	r4, [r0, #0]
   d6368:	2c00      	cmp	r4, #0
   d636a:	d0e7      	beq.n	d633c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d636c:	f104 0010 	add.w	r0, r4, #16
   d6370:	f7ff fe3d 	bl	d5fee <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d6374:	4620      	mov	r0, r4
   d6376:	f7fe fb78 	bl	d4a6a <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d637a:	2118      	movs	r1, #24
   d637c:	4620      	mov	r0, r4
   d637e:	f000 fb54 	bl	d6a2a <_ZdlPvj>
   d6382:	e7db      	b.n	d633c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d6384 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d6384:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d6386:	2300      	movs	r3, #0
   d6388:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d638a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d638c:	4604      	mov	r4, r0
   d638e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d6390:	b12b      	cbz	r3, d639e <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6392:	2202      	movs	r2, #2
   d6394:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d6396:	68eb      	ldr	r3, [r5, #12]
   d6398:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d639a:	68ab      	ldr	r3, [r5, #8]
   d639c:	60a3      	str	r3, [r4, #8]
    }
   d639e:	4620      	mov	r0, r4
   d63a0:	bd38      	pop	{r3, r4, r5, pc}

000d63a2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d63a2:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d63a4:	b570      	push	{r4, r5, r6, lr}
   d63a6:	4604      	mov	r4, r0
	  switch (__op)
   d63a8:	d007      	beq.n	d63ba <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d63aa:	2a03      	cmp	r2, #3
   d63ac:	d012      	beq.n	d63d4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d63ae:	2a01      	cmp	r2, #1
   d63b0:	d101      	bne.n	d63b6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d63b2:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d63b4:	6003      	str	r3, [r0, #0]
	}
   d63b6:	2000      	movs	r0, #0
   d63b8:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d63ba:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d63bc:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d63be:	f7fd fe68 	bl	d4092 <_Znwj>
   d63c2:	4605      	mov	r5, r0
   d63c4:	b120      	cbz	r0, d63d0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d63c6:	4631      	mov	r1, r6
   d63c8:	f7ff ffdc 	bl	d6384 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d63cc:	7c33      	ldrb	r3, [r6, #16]
   d63ce:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d63d0:	6025      	str	r5, [r4, #0]
	}
   d63d2:	e7f0      	b.n	d63b6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d63d4:	6804      	ldr	r4, [r0, #0]
   d63d6:	2c00      	cmp	r4, #0
   d63d8:	d0ed      	beq.n	d63b6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d63da:	4620      	mov	r0, r4
   d63dc:	f7fe fb45 	bl	d4a6a <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d63e0:	2114      	movs	r1, #20
   d63e2:	4620      	mov	r0, r4
   d63e4:	f000 fb21 	bl	d6a2a <_ZdlPvj>
   d63e8:	e7e5      	b.n	d63b6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d63ec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d63ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   d63ee:	b089      	sub	sp, #36	; 0x24
   d63f0:	4604      	mov	r4, r0
   d63f2:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d63f4:	a801      	add	r0, sp, #4
   d63f6:	4611      	mov	r1, r2
   d63f8:	f7ff fe23 	bl	d6042 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d63fc:	b1a4      	cbz	r4, d6428 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d63fe:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d6400:	b11d      	cbz	r5, d640a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d6402:	4628      	mov	r0, r5
   d6404:	f000 fcaa 	bl	d6d5c <strdup>
   d6408:	4605      	mov	r5, r0
   d640a:	a801      	add	r0, sp, #4
   d640c:	a903      	add	r1, sp, #12
        type_(type) {
   d640e:	9503      	str	r5, [sp, #12]
   d6410:	f8ad 4010 	strh.w	r4, [sp, #16]
   d6414:	f7ff fe78 	bl	d6108 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d6418:	a803      	add	r0, sp, #12
   d641a:	f7ff fde8 	bl	d5fee <_ZN8particle5ErrorD1Ev>
   d641e:	a802      	add	r0, sp, #8
   d6420:	f7fe fe55 	bl	d50ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6424:	b009      	add	sp, #36	; 0x24
   d6426:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d6428:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d642a:	2301      	movs	r3, #1
   d642c:	e8d5 2f4f 	ldrexb	r2, [r5]
   d6430:	2a00      	cmp	r2, #0
   d6432:	d103      	bne.n	d643c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d6434:	e8c5 3f41 	strexb	r1, r3, [r5]
   d6438:	2900      	cmp	r1, #0
   d643a:	d1f7      	bne.n	d642c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d643c:	d1ef      	bne.n	d641e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d643e:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d6440:	f3bf 8f5b 	dmb	ish
   d6444:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d6446:	1d2b      	adds	r3, r5, #4
   d6448:	f3bf 8f5b 	dmb	ish
   d644c:	e853 6f00 	ldrex	r6, [r3]
   d6450:	e843 4200 	strex	r2, r4, [r3]
   d6454:	2a00      	cmp	r2, #0
   d6456:	d1f9      	bne.n	d644c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d6458:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d645c:	2e00      	cmp	r6, #0
   d645e:	d0de      	beq.n	d641e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d6460:	4620      	mov	r0, r4
   d6462:	f7fe f815 	bl	d4490 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d6466:	4607      	mov	r7, r0
   d6468:	b160      	cbz	r0, d6484 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d646a:	f105 010c 	add.w	r1, r5, #12
   d646e:	4630      	mov	r0, r6
   d6470:	f7ff fe16 	bl	d60a0 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d6474:	4630      	mov	r0, r6
   d6476:	f7fe faf8 	bl	d4a6a <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d647a:	2110      	movs	r1, #16
   d647c:	4630      	mov	r0, r6
   d647e:	f000 fad4 	bl	d6a2a <_ZdlPvj>
   d6482:	e7cc      	b.n	d641e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d6484:	4631      	mov	r1, r6
   d6486:	a803      	add	r0, sp, #12
   d6488:	f7ff ff7c 	bl	d6384 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d648c:	7b2b      	ldrb	r3, [r5, #12]
   d648e:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d6492:	2010      	movs	r0, #16
   d6494:	f7fd fdfd 	bl	d4092 <_Znwj>
   d6498:	4605      	mov	r5, r0
   d649a:	b1d0      	cbz	r0, d64d2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d649c:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d649e:	2014      	movs	r0, #20
   d64a0:	f7fd fdf7 	bl	d4092 <_Znwj>
   d64a4:	4604      	mov	r4, r0
   d64a6:	b178      	cbz	r0, d64c8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d64a8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d64aa:	4601      	mov	r1, r0
   d64ac:	a803      	add	r0, sp, #12
   d64ae:	f7ff f8f9 	bl	d56a4 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d64b2:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d64b4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d64b6:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d64b8:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d64ba:	9205      	str	r2, [sp, #20]
   d64bc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d64be:	60e3      	str	r3, [r4, #12]
   d64c0:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d64c4:	9206      	str	r2, [sp, #24]
   d64c6:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d64c8:	4b06      	ldr	r3, [pc, #24]	; (d64e4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d64ca:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d64cc:	4b06      	ldr	r3, [pc, #24]	; (d64e8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d64ce:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d64d0:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d64d2:	a803      	add	r0, sp, #12
   d64d4:	f7fe fac9 	bl	d4a6a <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d64d8:	2200      	movs	r2, #0
   d64da:	4629      	mov	r1, r5
   d64dc:	4803      	ldr	r0, [pc, #12]	; (d64ec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d64de:	f7fd ffdf 	bl	d44a0 <application_thread_invoke>
   d64e2:	e7c7      	b.n	d6474 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d64e4:	000d60b3 	.word	0x000d60b3
   d64e8:	000d63a3 	.word	0x000d63a3
   d64ec:	000d681d 	.word	0x000d681d

000d64f0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d64f0:	4770      	bx	lr

000d64f2 <_ZN9IPAddressD0Ev>:
   d64f2:	b510      	push	{r4, lr}
   d64f4:	2118      	movs	r1, #24
   d64f6:	4604      	mov	r4, r0
   d64f8:	f000 fa97 	bl	d6a2a <_ZdlPvj>
   d64fc:	4620      	mov	r0, r4
   d64fe:	bd10      	pop	{r4, pc}

000d6500 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6500:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6502:	7d03      	ldrb	r3, [r0, #20]
   d6504:	2b06      	cmp	r3, #6
{
   d6506:	b08d      	sub	sp, #52	; 0x34
   d6508:	460e      	mov	r6, r1
   d650a:	f100 0704 	add.w	r7, r0, #4
   d650e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d6512:	d012      	beq.n	d653a <_ZNK9IPAddress7printToER5Print+0x3a>
   d6514:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d6518:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d651c:	220a      	movs	r2, #10
   d651e:	4630      	mov	r0, r6
   d6520:	f7ff fc3d 	bl	d5d9e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6524:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6526:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d6528:	d019      	beq.n	d655e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d652a:	2c00      	cmp	r4, #0
   d652c:	d0f4      	beq.n	d6518 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d652e:	212e      	movs	r1, #46	; 0x2e
   d6530:	4630      	mov	r0, r6
   d6532:	f7ff fc1b 	bl	d5d6c <_ZN5Print5printEc>
   d6536:	4404      	add	r4, r0
   d6538:	e7ee      	b.n	d6518 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d653a:	232f      	movs	r3, #47	; 0x2f
   d653c:	466a      	mov	r2, sp
   d653e:	4639      	mov	r1, r7
   d6540:	200a      	movs	r0, #10
		buf[0] = 0;
   d6542:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6546:	f7fd ff0b 	bl	d4360 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d654a:	4668      	mov	r0, sp
   d654c:	f000 fc23 	bl	d6d96 <strlen>
   d6550:	6833      	ldr	r3, [r6, #0]
   d6552:	4602      	mov	r2, r0
   d6554:	68db      	ldr	r3, [r3, #12]
   d6556:	4669      	mov	r1, sp
   d6558:	4630      	mov	r0, r6
   d655a:	4798      	blx	r3
   d655c:	4604      	mov	r4, r0
    }
    return n;
}
   d655e:	4620      	mov	r0, r4
   d6560:	b00d      	add	sp, #52	; 0x34
   d6562:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6564 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d6564:	b510      	push	{r4, lr}
   d6566:	4b05      	ldr	r3, [pc, #20]	; (d657c <_ZN9IPAddressC1Ev+0x18>)
   d6568:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d656a:	2211      	movs	r2, #17
   d656c:	f840 3b04 	str.w	r3, [r0], #4
   d6570:	2100      	movs	r1, #0
   d6572:	f000 fbb5 	bl	d6ce0 <memset>
}
   d6576:	4620      	mov	r0, r4
   d6578:	bd10      	pop	{r4, pc}
   d657a:	bf00      	nop
   d657c:	000d6fcc 	.word	0x000d6fcc

000d6580 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d6580:	4603      	mov	r3, r0
   d6582:	4a07      	ldr	r2, [pc, #28]	; (d65a0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d6584:	b510      	push	{r4, lr}
   d6586:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d658a:	f101 0210 	add.w	r2, r1, #16
   d658e:	f851 4b04 	ldr.w	r4, [r1], #4
   d6592:	f843 4b04 	str.w	r4, [r3], #4
   d6596:	4291      	cmp	r1, r2
   d6598:	d1f9      	bne.n	d658e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d659a:	780a      	ldrb	r2, [r1, #0]
   d659c:	701a      	strb	r2, [r3, #0]
}
   d659e:	bd10      	pop	{r4, pc}
   d65a0:	000d6fcc 	.word	0x000d6fcc

000d65a4 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d65a4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d65a6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d65aa:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d65ae:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d65b2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d65b6:	2304      	movs	r3, #4
   d65b8:	6041      	str	r1, [r0, #4]
   d65ba:	7503      	strb	r3, [r0, #20]
}
   d65bc:	bd10      	pop	{r4, pc}
	...

000d65c0 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d65c0:	b513      	push	{r0, r1, r4, lr}
   d65c2:	4b05      	ldr	r3, [pc, #20]	; (d65d8 <_ZN9IPAddressC1EPKh+0x18>)
   d65c4:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d65c6:	78cb      	ldrb	r3, [r1, #3]
   d65c8:	9300      	str	r3, [sp, #0]
   d65ca:	788b      	ldrb	r3, [r1, #2]
   d65cc:	784a      	ldrb	r2, [r1, #1]
   d65ce:	7809      	ldrb	r1, [r1, #0]
   d65d0:	f7ff ffe8 	bl	d65a4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d65d4:	b002      	add	sp, #8
   d65d6:	bd10      	pop	{r4, pc}
   d65d8:	000d6fcc 	.word	0x000d6fcc

000d65dc <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d65dc:	7441      	strb	r1, [r0, #17]
}
   d65de:	4770      	bx	lr

000d65e0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d65e0:	4770      	bx	lr

000d65e2 <_ZN9USBSerial4readEv>:
{
   d65e2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d65e4:	2100      	movs	r1, #0
   d65e6:	7c00      	ldrb	r0, [r0, #16]
   d65e8:	f7fd ff1a 	bl	d4420 <HAL_USB_USART_Receive_Data>
}
   d65ec:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d65f0:	bd08      	pop	{r3, pc}

000d65f2 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d65f2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d65f4:	2101      	movs	r1, #1
   d65f6:	7c00      	ldrb	r0, [r0, #16]
   d65f8:	f7fd ff12 	bl	d4420 <HAL_USB_USART_Receive_Data>
}
   d65fc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6600:	bd08      	pop	{r3, pc}

000d6602 <_ZN9USBSerial17availableForWriteEv>:
{
   d6602:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d6604:	7c00      	ldrb	r0, [r0, #16]
   d6606:	f7fd ff03 	bl	d4410 <HAL_USB_USART_Available_Data_For_Write>
}
   d660a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d660e:	bd08      	pop	{r3, pc}

000d6610 <_ZN9USBSerial9availableEv>:
{
   d6610:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d6612:	7c00      	ldrb	r0, [r0, #16]
   d6614:	f7fd fef4 	bl	d4400 <HAL_USB_USART_Available_Data>
}
   d6618:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d661c:	bd08      	pop	{r3, pc}

000d661e <_ZN9USBSerial5writeEh>:
{
   d661e:	b513      	push	{r0, r1, r4, lr}
   d6620:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6622:	7c00      	ldrb	r0, [r0, #16]
{
   d6624:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6626:	f7fd fef3 	bl	d4410 <HAL_USB_USART_Available_Data_For_Write>
   d662a:	2800      	cmp	r0, #0
   d662c:	9901      	ldr	r1, [sp, #4]
   d662e:	dc01      	bgt.n	d6634 <_ZN9USBSerial5writeEh+0x16>
   d6630:	7c60      	ldrb	r0, [r4, #17]
   d6632:	b120      	cbz	r0, d663e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d6634:	7c20      	ldrb	r0, [r4, #16]
   d6636:	f7fd fefb 	bl	d4430 <HAL_USB_USART_Send_Data>
   d663a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d663e:	b002      	add	sp, #8
   d6640:	bd10      	pop	{r4, pc}

000d6642 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d6642:	7c00      	ldrb	r0, [r0, #16]
   d6644:	f7fd befc 	b.w	d4440 <HAL_USB_USART_Flush_Data>

000d6648 <_ZN9USBSerialD0Ev>:
   d6648:	b510      	push	{r4, lr}
   d664a:	2114      	movs	r1, #20
   d664c:	4604      	mov	r4, r0
   d664e:	f000 f9ec 	bl	d6a2a <_ZdlPvj>
   d6652:	4620      	mov	r0, r4
   d6654:	bd10      	pop	{r4, pc}
	...

000d6658 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6658:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d665a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d665e:	4604      	mov	r4, r0
   d6660:	4608      	mov	r0, r1
   d6662:	2100      	movs	r1, #0
   d6664:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d6668:	4b04      	ldr	r3, [pc, #16]	; (d667c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d666a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d666c:	2301      	movs	r3, #1
  _serial = serial;
   d666e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d6670:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d6672:	4611      	mov	r1, r2
   d6674:	f7fd feb4 	bl	d43e0 <HAL_USB_USART_Init>
}
   d6678:	4620      	mov	r0, r4
   d667a:	bd10      	pop	{r4, pc}
   d667c:	000d6fe0 	.word	0x000d6fe0

000d6680 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d6680:	7c00      	ldrb	r0, [r0, #16]
   d6682:	2200      	movs	r2, #0
   d6684:	f7fd beb4 	b.w	d43f0 <HAL_USB_USART_Begin>

000d6688 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6688:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d668a:	2214      	movs	r2, #20
{
   d668c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d668e:	2100      	movs	r1, #0
   d6690:	f000 fb26 	bl	d6ce0 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6694:	4620      	mov	r0, r4
   d6696:	bd10      	pop	{r4, pc}

000d6698 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d6698:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d669a:	4c10      	ldr	r4, [pc, #64]	; (d66dc <_Z16_fetch_usbserialv+0x44>)
{
   d669c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d669e:	a803      	add	r0, sp, #12
   d66a0:	f7ff fff2 	bl	d6688 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d66a4:	7821      	ldrb	r1, [r4, #0]
   d66a6:	f3bf 8f5b 	dmb	ish
   d66aa:	f011 0101 	ands.w	r1, r1, #1
   d66ae:	d111      	bne.n	d66d4 <_Z16_fetch_usbserialv+0x3c>
   d66b0:	4620      	mov	r0, r4
   d66b2:	9101      	str	r1, [sp, #4]
   d66b4:	f7fd fcf1 	bl	d409a <__cxa_guard_acquire>
   d66b8:	9901      	ldr	r1, [sp, #4]
   d66ba:	b158      	cbz	r0, d66d4 <_Z16_fetch_usbserialv+0x3c>
   d66bc:	aa03      	add	r2, sp, #12
   d66be:	4808      	ldr	r0, [pc, #32]	; (d66e0 <_Z16_fetch_usbserialv+0x48>)
   d66c0:	f7ff ffca 	bl	d6658 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d66c4:	4620      	mov	r0, r4
   d66c6:	f7fd fced 	bl	d40a4 <__cxa_guard_release>
   d66ca:	4a06      	ldr	r2, [pc, #24]	; (d66e4 <_Z16_fetch_usbserialv+0x4c>)
   d66cc:	4906      	ldr	r1, [pc, #24]	; (d66e8 <_Z16_fetch_usbserialv+0x50>)
   d66ce:	4804      	ldr	r0, [pc, #16]	; (d66e0 <_Z16_fetch_usbserialv+0x48>)
   d66d0:	f000 f9a6 	bl	d6a20 <__aeabi_atexit>
	return _usbserial;
}
   d66d4:	4802      	ldr	r0, [pc, #8]	; (d66e0 <_Z16_fetch_usbserialv+0x48>)
   d66d6:	b008      	add	sp, #32
   d66d8:	bd10      	pop	{r4, pc}
   d66da:	bf00      	nop
   d66dc:	2003e7a4 	.word	0x2003e7a4
   d66e0:	2003e7a8 	.word	0x2003e7a8
   d66e4:	2003e750 	.word	0x2003e750
   d66e8:	000d65e1 	.word	0x000d65e1

000d66ec <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d66ec:	4770      	bx	lr

000d66ee <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d66ee:	7441      	strb	r1, [r0, #17]
}
   d66f0:	4770      	bx	lr

000d66f2 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d66f2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d66f4:	7c00      	ldrb	r0, [r0, #16]
   d66f6:	f7fd fe6b 	bl	d43d0 <hal_usart_available_data_for_write>
}
   d66fa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d66fe:	bd08      	pop	{r3, pc}

000d6700 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d6700:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d6702:	7c00      	ldrb	r0, [r0, #16]
   d6704:	f7fd fe44 	bl	d4390 <hal_usart_available>
}
   d6708:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d670c:	bd08      	pop	{r3, pc}

000d670e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d670e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d6710:	7c00      	ldrb	r0, [r0, #16]
   d6712:	f7fd fe4d 	bl	d43b0 <hal_usart_peek>
}
   d6716:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d671a:	bd08      	pop	{r3, pc}

000d671c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d671c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d671e:	7c00      	ldrb	r0, [r0, #16]
   d6720:	f7fd fe3e 	bl	d43a0 <hal_usart_read>
}
   d6724:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6728:	bd08      	pop	{r3, pc}

000d672a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d672a:	7c00      	ldrb	r0, [r0, #16]
   d672c:	f7fd be48 	b.w	d43c0 <hal_usart_flush>

000d6730 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d6730:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6732:	7c45      	ldrb	r5, [r0, #17]
{
   d6734:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6736:	b12d      	cbz	r5, d6744 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d6738:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d673a:	b003      	add	sp, #12
   d673c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d6740:	f7fd be1e 	b.w	d4380 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6744:	7c00      	ldrb	r0, [r0, #16]
   d6746:	9101      	str	r1, [sp, #4]
   d6748:	f7fd fe42 	bl	d43d0 <hal_usart_available_data_for_write>
   d674c:	2800      	cmp	r0, #0
   d674e:	9901      	ldr	r1, [sp, #4]
   d6750:	dcf2      	bgt.n	d6738 <_ZN11USARTSerial5writeEh+0x8>
}
   d6752:	4628      	mov	r0, r5
   d6754:	b003      	add	sp, #12
   d6756:	bd30      	pop	{r4, r5, pc}

000d6758 <_ZN11USARTSerialD0Ev>:
   d6758:	b510      	push	{r4, lr}
   d675a:	2114      	movs	r1, #20
   d675c:	4604      	mov	r4, r0
   d675e:	f000 f964 	bl	d6a2a <_ZdlPvj>
   d6762:	4620      	mov	r0, r4
   d6764:	bd10      	pop	{r4, pc}
	...

000d6768 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d6768:	b510      	push	{r4, lr}
   d676a:	f04f 0c00 	mov.w	ip, #0
   d676e:	4604      	mov	r4, r0
   d6770:	4608      	mov	r0, r1
   d6772:	4611      	mov	r1, r2
   d6774:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6778:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d677c:	4a04      	ldr	r2, [pc, #16]	; (d6790 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d677e:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d6780:	2201      	movs	r2, #1
  _serial = serial;
   d6782:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d6784:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d6786:	461a      	mov	r2, r3
   d6788:	f7fd fdf2 	bl	d4370 <hal_usart_init>
}
   d678c:	4620      	mov	r0, r4
   d678e:	bd10      	pop	{r4, pc}
   d6790:	000d7010 	.word	0x000d7010

000d6794 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6794:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
   d6796:	4c1b      	ldr	r4, [pc, #108]	; (d6804 <_Z22__fetch_global_Serial1v+0x70>)
   d6798:	6826      	ldr	r6, [r4, #0]
   d679a:	b94e      	cbnz	r6, d67b0 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new hal_usart_ring_buffer_t();
   d679c:	2084      	movs	r0, #132	; 0x84
   d679e:	f7fd fc78 	bl	d4092 <_Znwj>
   d67a2:	4605      	mov	r5, r0
   d67a4:	b118      	cbz	r0, d67ae <_Z22__fetch_global_Serial1v+0x1a>
   d67a6:	2284      	movs	r2, #132	; 0x84
   d67a8:	4631      	mov	r1, r6
   d67aa:	f000 fa99 	bl	d6ce0 <memset>
   d67ae:	6025      	str	r5, [r4, #0]
  }
  if (!serial1_tx_buffer) {
   d67b0:	4d15      	ldr	r5, [pc, #84]	; (d6808 <_Z22__fetch_global_Serial1v+0x74>)
   d67b2:	682f      	ldr	r7, [r5, #0]
   d67b4:	b94f      	cbnz	r7, d67ca <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
   d67b6:	2084      	movs	r0, #132	; 0x84
   d67b8:	f7fd fc6b 	bl	d4092 <_Znwj>
   d67bc:	4606      	mov	r6, r0
   d67be:	b118      	cbz	r0, d67c8 <_Z22__fetch_global_Serial1v+0x34>
   d67c0:	2284      	movs	r2, #132	; 0x84
   d67c2:	4639      	mov	r1, r7
   d67c4:	f000 fa8c 	bl	d6ce0 <memset>
   d67c8:	602e      	str	r6, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   d67ca:	4e10      	ldr	r6, [pc, #64]	; (d680c <_Z22__fetch_global_Serial1v+0x78>)
   d67cc:	7831      	ldrb	r1, [r6, #0]
   d67ce:	f3bf 8f5b 	dmb	ish
   d67d2:	f011 0101 	ands.w	r1, r1, #1
   d67d6:	d112      	bne.n	d67fe <_Z22__fetch_global_Serial1v+0x6a>
   d67d8:	4630      	mov	r0, r6
   d67da:	9101      	str	r1, [sp, #4]
   d67dc:	f7fd fc5d 	bl	d409a <__cxa_guard_acquire>
   d67e0:	9901      	ldr	r1, [sp, #4]
   d67e2:	b160      	cbz	r0, d67fe <_Z22__fetch_global_Serial1v+0x6a>
   d67e4:	6822      	ldr	r2, [r4, #0]
   d67e6:	682b      	ldr	r3, [r5, #0]
   d67e8:	4809      	ldr	r0, [pc, #36]	; (d6810 <_Z22__fetch_global_Serial1v+0x7c>)
   d67ea:	f7ff ffbd 	bl	d6768 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d67ee:	4630      	mov	r0, r6
   d67f0:	f7fd fc58 	bl	d40a4 <__cxa_guard_release>
   d67f4:	4a07      	ldr	r2, [pc, #28]	; (d6814 <_Z22__fetch_global_Serial1v+0x80>)
   d67f6:	4908      	ldr	r1, [pc, #32]	; (d6818 <_Z22__fetch_global_Serial1v+0x84>)
   d67f8:	4805      	ldr	r0, [pc, #20]	; (d6810 <_Z22__fetch_global_Serial1v+0x7c>)
   d67fa:	f000 f911 	bl	d6a20 <__aeabi_atexit>
#endif
	return serial1;
}
   d67fe:	4804      	ldr	r0, [pc, #16]	; (d6810 <_Z22__fetch_global_Serial1v+0x7c>)
   d6800:	b003      	add	sp, #12
   d6802:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6804:	2003e7c0 	.word	0x2003e7c0
   d6808:	2003e7c4 	.word	0x2003e7c4
   d680c:	2003e7bc 	.word	0x2003e7bc
   d6810:	2003e7c8 	.word	0x2003e7c8
   d6814:	2003e750 	.word	0x2003e750
   d6818:	000d66ed 	.word	0x000d66ed

000d681c <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d681c:	b510      	push	{r4, lr}
      if (_M_empty())
   d681e:	6883      	ldr	r3, [r0, #8]
   d6820:	4604      	mov	r4, r0
   d6822:	b90b      	cbnz	r3, d6828 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d6824:	f000 f903 	bl	d6a2e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6828:	68c3      	ldr	r3, [r0, #12]
   d682a:	4798      	blx	r3
      if (_M_manager)
   d682c:	68a3      	ldr	r3, [r4, #8]
   d682e:	b11b      	cbz	r3, d6838 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6830:	2203      	movs	r2, #3
   d6832:	4621      	mov	r1, r4
   d6834:	4620      	mov	r0, r4
   d6836:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d6838:	4620      	mov	r0, r4
   d683a:	2110      	movs	r1, #16
}
   d683c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d6840:	f000 b8f3 	b.w	d6a2a <_ZdlPvj>

000d6844 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d6844:	2200      	movs	r2, #0
   d6846:	6840      	ldr	r0, [r0, #4]
   d6848:	4611      	mov	r1, r2
   d684a:	f7fd be5d 	b.w	d4508 <network_ready>

000d684e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d684e:	2200      	movs	r2, #0
   d6850:	6840      	ldr	r0, [r0, #4]
   d6852:	4611      	mov	r1, r2
   d6854:	f7fd be78 	b.w	d4548 <network_listening>

000d6858 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d6858:	2200      	movs	r2, #0
   d685a:	6840      	ldr	r0, [r0, #4]
   d685c:	4611      	mov	r1, r2
   d685e:	f7fd be83 	b.w	d4568 <network_get_listen_timeout>

000d6862 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d6862:	6840      	ldr	r0, [r0, #4]
   d6864:	2200      	movs	r2, #0
   d6866:	f7fd be77 	b.w	d4558 <network_set_listen_timeout>

000d686a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d686a:	6840      	ldr	r0, [r0, #4]
   d686c:	2200      	movs	r2, #0
   d686e:	f081 0101 	eor.w	r1, r1, #1
   d6872:	f7fd be61 	b.w	d4538 <network_listen>

000d6876 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d6876:	2300      	movs	r3, #0
   d6878:	6840      	ldr	r0, [r0, #4]
   d687a:	461a      	mov	r2, r3
   d687c:	4619      	mov	r1, r3
   d687e:	f7fd be53 	b.w	d4528 <network_off>

000d6882 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d6882:	2200      	movs	r2, #0
   d6884:	6840      	ldr	r0, [r0, #4]
   d6886:	4611      	mov	r1, r2
   d6888:	f7fd be2e 	b.w	d44e8 <network_connecting>

000d688c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d688c:	6840      	ldr	r0, [r0, #4]
   d688e:	2200      	movs	r2, #0
   d6890:	2102      	movs	r1, #2
   d6892:	f7fd be31 	b.w	d44f8 <network_disconnect>

000d6896 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d6896:	2300      	movs	r3, #0
   d6898:	6840      	ldr	r0, [r0, #4]
   d689a:	461a      	mov	r2, r3
   d689c:	f7fd be1c 	b.w	d44d8 <network_connect>

000d68a0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d68a0:	4b02      	ldr	r3, [pc, #8]	; (d68ac <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d68a2:	2204      	movs	r2, #4
   d68a4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d68a6:	4a02      	ldr	r2, [pc, #8]	; (d68b0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d68a8:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d68aa:	4770      	bx	lr
   d68ac:	2003e7dc 	.word	0x2003e7dc
   d68b0:	000d7040 	.word	0x000d7040

000d68b4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d68b4:	2300      	movs	r3, #0
   d68b6:	6840      	ldr	r0, [r0, #4]
   d68b8:	461a      	mov	r2, r3
   d68ba:	f7fd be0d 	b.w	d44d8 <network_connect>

000d68be <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d68be:	6840      	ldr	r0, [r0, #4]
   d68c0:	2200      	movs	r2, #0
   d68c2:	2102      	movs	r1, #2
   d68c4:	f7fd be18 	b.w	d44f8 <network_disconnect>

000d68c8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d68c8:	2200      	movs	r2, #0
   d68ca:	6840      	ldr	r0, [r0, #4]
   d68cc:	4611      	mov	r1, r2
   d68ce:	f7fd be0b 	b.w	d44e8 <network_connecting>

000d68d2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d68d2:	2200      	movs	r2, #0
   d68d4:	6840      	ldr	r0, [r0, #4]
   d68d6:	4611      	mov	r1, r2
   d68d8:	f7fd be16 	b.w	d4508 <network_ready>

000d68dc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d68dc:	2300      	movs	r3, #0
   d68de:	6840      	ldr	r0, [r0, #4]
   d68e0:	461a      	mov	r2, r3
   d68e2:	4619      	mov	r1, r3
   d68e4:	f7fd be18 	b.w	d4518 <network_on>

000d68e8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d68e8:	2300      	movs	r3, #0
   d68ea:	6840      	ldr	r0, [r0, #4]
   d68ec:	461a      	mov	r2, r3
   d68ee:	4619      	mov	r1, r3
   d68f0:	f7fd be1a 	b.w	d4528 <network_off>

000d68f4 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d68f4:	6840      	ldr	r0, [r0, #4]
   d68f6:	2100      	movs	r1, #0
   d68f8:	f7fd be3e 	b.w	d4578 <network_is_on>

000d68fc <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d68fc:	6840      	ldr	r0, [r0, #4]
   d68fe:	2100      	movs	r1, #0
   d6900:	f7fd be42 	b.w	d4588 <network_is_off>

000d6904 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6904:	6840      	ldr	r0, [r0, #4]
   d6906:	2200      	movs	r2, #0
   d6908:	f081 0101 	eor.w	r1, r1, #1
   d690c:	f7fd be14 	b.w	d4538 <network_listen>

000d6910 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6910:	6840      	ldr	r0, [r0, #4]
   d6912:	2200      	movs	r2, #0
   d6914:	f7fd be20 	b.w	d4558 <network_set_listen_timeout>

000d6918 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6918:	2200      	movs	r2, #0
   d691a:	6840      	ldr	r0, [r0, #4]
   d691c:	4611      	mov	r1, r2
   d691e:	f7fd be23 	b.w	d4568 <network_get_listen_timeout>

000d6922 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d6922:	2200      	movs	r2, #0
   d6924:	6840      	ldr	r0, [r0, #4]
   d6926:	4611      	mov	r1, r2
   d6928:	f7fd be0e 	b.w	d4548 <network_listening>

000d692c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d692c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6930:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d6932:	b095      	sub	sp, #84	; 0x54
   d6934:	4616      	mov	r6, r2
   d6936:	460d      	mov	r5, r1
   d6938:	4607      	mov	r7, r0
    IPAddress addr;
   d693a:	f7ff fe13 	bl	d6564 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d693e:	4621      	mov	r1, r4
   d6940:	2218      	movs	r2, #24
   d6942:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d6944:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d6946:	f000 f9cb 	bl	d6ce0 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d694a:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d694c:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d6950:	4621      	mov	r1, r4
   d6952:	466b      	mov	r3, sp
   d6954:	aa0c      	add	r2, sp, #48	; 0x30
   d6956:	4630      	mov	r0, r6
   d6958:	f7fd fc94 	bl	d4284 <netdb_getaddrinfo>
    if (!r) {
   d695c:	4604      	mov	r4, r0
   d695e:	2800      	cmp	r0, #0
   d6960:	d14c      	bne.n	d69fc <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6962:	4602      	mov	r2, r0
   d6964:	2101      	movs	r1, #1
   d6966:	6868      	ldr	r0, [r5, #4]
   d6968:	f7fd fdce 	bl	d4508 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d696c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d696e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6970:	4622      	mov	r2, r4
   d6972:	6868      	ldr	r0, [r5, #4]
   d6974:	f7fd fdc8 	bl	d4508 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6978:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d697a:	4681      	mov	r9, r0
        bool ok = false;
   d697c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d697e:	2e00      	cmp	r6, #0
   d6980:	d03c      	beq.n	d69fc <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d6982:	2900      	cmp	r1, #0
   d6984:	d13a      	bne.n	d69fc <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d6986:	6873      	ldr	r3, [r6, #4]
   d6988:	2b02      	cmp	r3, #2
   d698a:	d003      	beq.n	d6994 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d698c:	2b0a      	cmp	r3, #10
   d698e:	d011      	beq.n	d69b4 <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6990:	69f6      	ldr	r6, [r6, #28]
   d6992:	e7f4      	b.n	d697e <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d6994:	f1b8 0f00 	cmp.w	r8, #0
   d6998:	d00a      	beq.n	d69b0 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d699a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d699c:	a806      	add	r0, sp, #24
   d699e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d69a0:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d69a2:	f7ff fe0d 	bl	d65c0 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d69a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d69a8:	1d3c      	adds	r4, r7, #4
   d69aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d69ac:	682b      	ldr	r3, [r5, #0]
   d69ae:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d69b0:	4641      	mov	r1, r8
   d69b2:	e7ed      	b.n	d6990 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d69b4:	f1b9 0f00 	cmp.w	r9, #0
   d69b8:	d101      	bne.n	d69be <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d69ba:	4649      	mov	r1, r9
   d69bc:	e7e8      	b.n	d6990 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d69be:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d69c0:	2210      	movs	r2, #16
   d69c2:	a801      	add	r0, sp, #4
   d69c4:	f000 f98c 	bl	d6ce0 <memset>
                    a.v = 6;
   d69c8:	2306      	movs	r3, #6
   d69ca:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d69ce:	ad01      	add	r5, sp, #4
   d69d0:	f104 0308 	add.w	r3, r4, #8
   d69d4:	3418      	adds	r4, #24
   d69d6:	6818      	ldr	r0, [r3, #0]
   d69d8:	6859      	ldr	r1, [r3, #4]
   d69da:	462a      	mov	r2, r5
   d69dc:	c203      	stmia	r2!, {r0, r1}
   d69de:	3308      	adds	r3, #8
   d69e0:	42a3      	cmp	r3, r4
   d69e2:	4615      	mov	r5, r2
   d69e4:	d1f7      	bne.n	d69d6 <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d69e6:	a901      	add	r1, sp, #4
   d69e8:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d69ea:	ad07      	add	r5, sp, #28
   d69ec:	f7ff fdc8 	bl	d6580 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d69f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d69f2:	1d3c      	adds	r4, r7, #4
   d69f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d69f6:	682b      	ldr	r3, [r5, #0]
   d69f8:	7023      	strb	r3, [r4, #0]
   d69fa:	e7de      	b.n	d69ba <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d69fc:	9800      	ldr	r0, [sp, #0]
   d69fe:	f7fd fc39 	bl	d4274 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6a02:	4638      	mov	r0, r7
   d6a04:	b015      	add	sp, #84	; 0x54
   d6a06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d6a0c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6a0c:	4b02      	ldr	r3, [pc, #8]	; (d6a18 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d6a0e:	4a03      	ldr	r2, [pc, #12]	; (d6a1c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6a10:	601a      	str	r2, [r3, #0]
   d6a12:	2200      	movs	r2, #0
   d6a14:	605a      	str	r2, [r3, #4]

} // spark
   d6a16:	4770      	bx	lr
   d6a18:	2003e7e4 	.word	0x2003e7e4
   d6a1c:	000d707c 	.word	0x000d707c

000d6a20 <__aeabi_atexit>:
   d6a20:	460b      	mov	r3, r1
   d6a22:	4601      	mov	r1, r0
   d6a24:	4618      	mov	r0, r3
   d6a26:	f000 b917 	b.w	d6c58 <__cxa_atexit>

000d6a2a <_ZdlPvj>:
   d6a2a:	f7fd bb34 	b.w	d4096 <_ZdlPv>

000d6a2e <_ZSt25__throw_bad_function_callv>:
   d6a2e:	b508      	push	{r3, lr}
   d6a30:	f7fd fdf2 	bl	d4618 <abort>

000d6a34 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   d6a34:	4901      	ldr	r1, [pc, #4]	; (d6a3c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   d6a36:	f000 b8f9 	b.w	d6c2c <_ZNKSt9type_infoeqERKS_>
   d6a3a:	bf00      	nop
   d6a3c:	000d70c8 	.word	0x000d70c8

000d6a40 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   d6a40:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d6a42:	2400      	movs	r4, #0
   d6a44:	2310      	movs	r3, #16
   d6a46:	e9cd 3402 	strd	r3, r4, [sp, #8]
   d6a4a:	6803      	ldr	r3, [r0, #0]
   d6a4c:	9400      	str	r4, [sp, #0]
   d6a4e:	699e      	ldr	r6, [r3, #24]
   d6a50:	f88d 4004 	strb.w	r4, [sp, #4]
   d6a54:	4615      	mov	r5, r2
   d6a56:	466b      	mov	r3, sp
   d6a58:	6812      	ldr	r2, [r2, #0]
   d6a5a:	47b0      	blx	r6
   d6a5c:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d6a60:	f003 0306 	and.w	r3, r3, #6
   d6a64:	2b06      	cmp	r3, #6
   d6a66:	bf03      	ittte	eq
   d6a68:	9b00      	ldreq	r3, [sp, #0]
   d6a6a:	602b      	streq	r3, [r5, #0]
   d6a6c:	2001      	moveq	r0, #1
   d6a6e:	4620      	movne	r0, r4
   d6a70:	b004      	add	sp, #16
   d6a72:	bd70      	pop	{r4, r5, r6, pc}

000d6a74 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   d6a74:	9800      	ldr	r0, [sp, #0]
   d6a76:	4290      	cmp	r0, r2
   d6a78:	bf14      	ite	ne
   d6a7a:	2001      	movne	r0, #1
   d6a7c:	2006      	moveq	r0, #6
   d6a7e:	4770      	bx	lr

000d6a80 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   d6a80:	b510      	push	{r4, lr}
   d6a82:	4b03      	ldr	r3, [pc, #12]	; (d6a90 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   d6a84:	6003      	str	r3, [r0, #0]
   d6a86:	4604      	mov	r4, r0
   d6a88:	f000 f8cd 	bl	d6c26 <_ZNSt9type_infoD1Ev>
   d6a8c:	4620      	mov	r0, r4
   d6a8e:	bd10      	pop	{r4, pc}
   d6a90:	000d7108 	.word	0x000d7108

000d6a94 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   d6a94:	b510      	push	{r4, lr}
   d6a96:	4604      	mov	r4, r0
   d6a98:	f7ff fff2 	bl	d6a80 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d6a9c:	4620      	mov	r0, r4
   d6a9e:	2108      	movs	r1, #8
   d6aa0:	f7ff ffc3 	bl	d6a2a <_ZdlPvj>
   d6aa4:	4620      	mov	r0, r4
   d6aa6:	bd10      	pop	{r4, pc}

000d6aa8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   d6aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6aac:	461f      	mov	r7, r3
   d6aae:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   d6ab2:	f8dd 8018 	ldr.w	r8, [sp, #24]
   d6ab6:	4598      	cmp	r8, r3
   d6ab8:	4606      	mov	r6, r0
   d6aba:	4615      	mov	r5, r2
   d6abc:	d107      	bne.n	d6ace <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d6abe:	9907      	ldr	r1, [sp, #28]
   d6ac0:	f000 f8b4 	bl	d6c2c <_ZNKSt9type_infoeqERKS_>
   d6ac4:	b118      	cbz	r0, d6ace <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d6ac6:	7165      	strb	r5, [r4, #5]
   d6ac8:	2000      	movs	r0, #0
   d6aca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6ace:	4639      	mov	r1, r7
   d6ad0:	4630      	mov	r0, r6
   d6ad2:	f000 f8ab 	bl	d6c2c <_ZNKSt9type_infoeqERKS_>
   d6ad6:	2800      	cmp	r0, #0
   d6ad8:	d0f6      	beq.n	d6ac8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   d6ada:	2301      	movs	r3, #1
   d6adc:	f8c4 8000 	str.w	r8, [r4]
   d6ae0:	7125      	strb	r5, [r4, #4]
   d6ae2:	71a3      	strb	r3, [r4, #6]
   d6ae4:	e7f0      	b.n	d6ac8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000d6ae6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   d6ae6:	b538      	push	{r3, r4, r5, lr}
   d6ae8:	4615      	mov	r5, r2
   d6aea:	461c      	mov	r4, r3
   d6aec:	f000 f89e 	bl	d6c2c <_ZNKSt9type_infoeqERKS_>
   d6af0:	b120      	cbz	r0, d6afc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   d6af2:	2308      	movs	r3, #8
   d6af4:	60e3      	str	r3, [r4, #12]
   d6af6:	2306      	movs	r3, #6
   d6af8:	6025      	str	r5, [r4, #0]
   d6afa:	7123      	strb	r3, [r4, #4]
   d6afc:	bd38      	pop	{r3, r4, r5, pc}

000d6afe <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   d6afe:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6b00:	4605      	mov	r5, r0
   d6b02:	460c      	mov	r4, r1
   d6b04:	9201      	str	r2, [sp, #4]
   d6b06:	461e      	mov	r6, r3
   d6b08:	f000 f890 	bl	d6c2c <_ZNKSt9type_infoeqERKS_>
   d6b0c:	b950      	cbnz	r0, d6b24 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d6b0e:	2e03      	cmp	r6, #3
   d6b10:	d808      	bhi.n	d6b24 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d6b12:	6823      	ldr	r3, [r4, #0]
   d6b14:	9a01      	ldr	r2, [sp, #4]
   d6b16:	695b      	ldr	r3, [r3, #20]
   d6b18:	4629      	mov	r1, r5
   d6b1a:	4620      	mov	r0, r4
   d6b1c:	b002      	add	sp, #8
   d6b1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d6b22:	4718      	bx	r3
   d6b24:	b002      	add	sp, #8
   d6b26:	bd70      	pop	{r4, r5, r6, pc}

000d6b28 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   d6b28:	b510      	push	{r4, lr}
   d6b2a:	4b03      	ldr	r3, [pc, #12]	; (d6b38 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   d6b2c:	6003      	str	r3, [r0, #0]
   d6b2e:	4604      	mov	r4, r0
   d6b30:	f7ff ffa6 	bl	d6a80 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d6b34:	4620      	mov	r0, r4
   d6b36:	bd10      	pop	{r4, pc}
   d6b38:	000d7168 	.word	0x000d7168

000d6b3c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   d6b3c:	b510      	push	{r4, lr}
   d6b3e:	4604      	mov	r4, r0
   d6b40:	f7ff fff2 	bl	d6b28 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   d6b44:	4620      	mov	r0, r4
   d6b46:	210c      	movs	r1, #12
   d6b48:	f7ff ff6f 	bl	d6a2a <_ZdlPvj>
   d6b4c:	4620      	mov	r0, r4
   d6b4e:	bd10      	pop	{r4, pc}

000d6b50 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   d6b50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d6b52:	9f08      	ldr	r7, [sp, #32]
   d6b54:	4297      	cmp	r7, r2
   d6b56:	4605      	mov	r5, r0
   d6b58:	460e      	mov	r6, r1
   d6b5a:	4614      	mov	r4, r2
   d6b5c:	d00a      	beq.n	d6b74 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   d6b5e:	68a8      	ldr	r0, [r5, #8]
   d6b60:	6802      	ldr	r2, [r0, #0]
   d6b62:	9708      	str	r7, [sp, #32]
   d6b64:	6a15      	ldr	r5, [r2, #32]
   d6b66:	4631      	mov	r1, r6
   d6b68:	4622      	mov	r2, r4
   d6b6a:	46ac      	mov	ip, r5
   d6b6c:	b003      	add	sp, #12
   d6b6e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d6b72:	4760      	bx	ip
   d6b74:	4619      	mov	r1, r3
   d6b76:	9301      	str	r3, [sp, #4]
   d6b78:	f000 f858 	bl	d6c2c <_ZNKSt9type_infoeqERKS_>
   d6b7c:	9b01      	ldr	r3, [sp, #4]
   d6b7e:	2800      	cmp	r0, #0
   d6b80:	d0ed      	beq.n	d6b5e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   d6b82:	2006      	movs	r0, #6
   d6b84:	b003      	add	sp, #12
   d6b86:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6b88 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   d6b88:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6b8c:	460d      	mov	r5, r1
   d6b8e:	4619      	mov	r1, r3
   d6b90:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   d6b94:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   d6b98:	4681      	mov	r9, r0
   d6b9a:	4617      	mov	r7, r2
   d6b9c:	4698      	mov	r8, r3
   d6b9e:	f000 f845 	bl	d6c2c <_ZNKSt9type_infoeqERKS_>
   d6ba2:	b190      	cbz	r0, d6bca <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   d6ba4:	2d00      	cmp	r5, #0
   d6ba6:	6034      	str	r4, [r6, #0]
   d6ba8:	7137      	strb	r7, [r6, #4]
   d6baa:	db09      	blt.n	d6bc0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   d6bac:	1961      	adds	r1, r4, r5
   d6bae:	458a      	cmp	sl, r1
   d6bb0:	bf0c      	ite	eq
   d6bb2:	2106      	moveq	r1, #6
   d6bb4:	2101      	movne	r1, #1
   d6bb6:	71b1      	strb	r1, [r6, #6]
   d6bb8:	2000      	movs	r0, #0
   d6bba:	b001      	add	sp, #4
   d6bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6bc0:	3502      	adds	r5, #2
   d6bc2:	d1f9      	bne.n	d6bb8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d6bc4:	2301      	movs	r3, #1
   d6bc6:	71b3      	strb	r3, [r6, #6]
   d6bc8:	e7f6      	b.n	d6bb8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d6bca:	4554      	cmp	r4, sl
   d6bcc:	d106      	bne.n	d6bdc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d6bce:	4659      	mov	r1, fp
   d6bd0:	4648      	mov	r0, r9
   d6bd2:	f000 f82b 	bl	d6c2c <_ZNKSt9type_infoeqERKS_>
   d6bd6:	b108      	cbz	r0, d6bdc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d6bd8:	7177      	strb	r7, [r6, #5]
   d6bda:	e7ed      	b.n	d6bb8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d6bdc:	f8d9 0008 	ldr.w	r0, [r9, #8]
   d6be0:	6803      	ldr	r3, [r0, #0]
   d6be2:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   d6be6:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   d6bea:	69dc      	ldr	r4, [r3, #28]
   d6bec:	463a      	mov	r2, r7
   d6bee:	4643      	mov	r3, r8
   d6bf0:	4629      	mov	r1, r5
   d6bf2:	46a4      	mov	ip, r4
   d6bf4:	b001      	add	sp, #4
   d6bf6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6bfa:	4760      	bx	ip

000d6bfc <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   d6bfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6c00:	4607      	mov	r7, r0
   d6c02:	460c      	mov	r4, r1
   d6c04:	4615      	mov	r5, r2
   d6c06:	461e      	mov	r6, r3
   d6c08:	f7ff ff6d 	bl	d6ae6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   d6c0c:	b948      	cbnz	r0, d6c22 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   d6c0e:	68b8      	ldr	r0, [r7, #8]
   d6c10:	6803      	ldr	r3, [r0, #0]
   d6c12:	699f      	ldr	r7, [r3, #24]
   d6c14:	462a      	mov	r2, r5
   d6c16:	4633      	mov	r3, r6
   d6c18:	4621      	mov	r1, r4
   d6c1a:	46bc      	mov	ip, r7
   d6c1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d6c20:	4760      	bx	ip
   d6c22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6c26 <_ZNSt9type_infoD1Ev>:
   d6c26:	4770      	bx	lr

000d6c28 <_ZNKSt9type_info14__is_pointer_pEv>:
   d6c28:	2000      	movs	r0, #0
   d6c2a:	4770      	bx	lr

000d6c2c <_ZNKSt9type_infoeqERKS_>:
   d6c2c:	4281      	cmp	r1, r0
   d6c2e:	b508      	push	{r3, lr}
   d6c30:	d00e      	beq.n	d6c50 <_ZNKSt9type_infoeqERKS_+0x24>
   d6c32:	6840      	ldr	r0, [r0, #4]
   d6c34:	7803      	ldrb	r3, [r0, #0]
   d6c36:	2b2a      	cmp	r3, #42	; 0x2a
   d6c38:	d00c      	beq.n	d6c54 <_ZNKSt9type_infoeqERKS_+0x28>
   d6c3a:	6849      	ldr	r1, [r1, #4]
   d6c3c:	780b      	ldrb	r3, [r1, #0]
   d6c3e:	2b2a      	cmp	r3, #42	; 0x2a
   d6c40:	bf08      	it	eq
   d6c42:	3101      	addeq	r1, #1
   d6c44:	f000 f878 	bl	d6d38 <strcmp>
   d6c48:	fab0 f080 	clz	r0, r0
   d6c4c:	0940      	lsrs	r0, r0, #5
   d6c4e:	bd08      	pop	{r3, pc}
   d6c50:	2001      	movs	r0, #1
   d6c52:	e7fc      	b.n	d6c4e <_ZNKSt9type_infoeqERKS_+0x22>
   d6c54:	2000      	movs	r0, #0
   d6c56:	e7fa      	b.n	d6c4e <_ZNKSt9type_infoeqERKS_+0x22>

000d6c58 <__cxa_atexit>:
   d6c58:	b510      	push	{r4, lr}
   d6c5a:	4c05      	ldr	r4, [pc, #20]	; (d6c70 <__cxa_atexit+0x18>)
   d6c5c:	4613      	mov	r3, r2
   d6c5e:	b12c      	cbz	r4, d6c6c <__cxa_atexit+0x14>
   d6c60:	460a      	mov	r2, r1
   d6c62:	4601      	mov	r1, r0
   d6c64:	2002      	movs	r0, #2
   d6c66:	f3af 8000 	nop.w
   d6c6a:	bd10      	pop	{r4, pc}
   d6c6c:	4620      	mov	r0, r4
   d6c6e:	e7fc      	b.n	d6c6a <__cxa_atexit+0x12>
   d6c70:	00000000 	.word	0x00000000

000d6c74 <memcmp>:
   d6c74:	b530      	push	{r4, r5, lr}
   d6c76:	3901      	subs	r1, #1
   d6c78:	2400      	movs	r4, #0
   d6c7a:	42a2      	cmp	r2, r4
   d6c7c:	d101      	bne.n	d6c82 <memcmp+0xe>
   d6c7e:	2000      	movs	r0, #0
   d6c80:	e005      	b.n	d6c8e <memcmp+0x1a>
   d6c82:	5d03      	ldrb	r3, [r0, r4]
   d6c84:	3401      	adds	r4, #1
   d6c86:	5d0d      	ldrb	r5, [r1, r4]
   d6c88:	42ab      	cmp	r3, r5
   d6c8a:	d0f6      	beq.n	d6c7a <memcmp+0x6>
   d6c8c:	1b58      	subs	r0, r3, r5
   d6c8e:	bd30      	pop	{r4, r5, pc}

000d6c90 <memcpy>:
   d6c90:	440a      	add	r2, r1
   d6c92:	4291      	cmp	r1, r2
   d6c94:	f100 33ff 	add.w	r3, r0, #4294967295
   d6c98:	d100      	bne.n	d6c9c <memcpy+0xc>
   d6c9a:	4770      	bx	lr
   d6c9c:	b510      	push	{r4, lr}
   d6c9e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6ca2:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6ca6:	4291      	cmp	r1, r2
   d6ca8:	d1f9      	bne.n	d6c9e <memcpy+0xe>
   d6caa:	bd10      	pop	{r4, pc}

000d6cac <memmove>:
   d6cac:	4288      	cmp	r0, r1
   d6cae:	b510      	push	{r4, lr}
   d6cb0:	eb01 0402 	add.w	r4, r1, r2
   d6cb4:	d902      	bls.n	d6cbc <memmove+0x10>
   d6cb6:	4284      	cmp	r4, r0
   d6cb8:	4623      	mov	r3, r4
   d6cba:	d807      	bhi.n	d6ccc <memmove+0x20>
   d6cbc:	1e43      	subs	r3, r0, #1
   d6cbe:	42a1      	cmp	r1, r4
   d6cc0:	d008      	beq.n	d6cd4 <memmove+0x28>
   d6cc2:	f811 2b01 	ldrb.w	r2, [r1], #1
   d6cc6:	f803 2f01 	strb.w	r2, [r3, #1]!
   d6cca:	e7f8      	b.n	d6cbe <memmove+0x12>
   d6ccc:	4402      	add	r2, r0
   d6cce:	4601      	mov	r1, r0
   d6cd0:	428a      	cmp	r2, r1
   d6cd2:	d100      	bne.n	d6cd6 <memmove+0x2a>
   d6cd4:	bd10      	pop	{r4, pc}
   d6cd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d6cda:	f802 4d01 	strb.w	r4, [r2, #-1]!
   d6cde:	e7f7      	b.n	d6cd0 <memmove+0x24>

000d6ce0 <memset>:
   d6ce0:	4402      	add	r2, r0
   d6ce2:	4603      	mov	r3, r0
   d6ce4:	4293      	cmp	r3, r2
   d6ce6:	d100      	bne.n	d6cea <memset+0xa>
   d6ce8:	4770      	bx	lr
   d6cea:	f803 1b01 	strb.w	r1, [r3], #1
   d6cee:	e7f9      	b.n	d6ce4 <memset+0x4>

000d6cf0 <srand>:
   d6cf0:	b538      	push	{r3, r4, r5, lr}
   d6cf2:	4b0d      	ldr	r3, [pc, #52]	; (d6d28 <srand+0x38>)
   d6cf4:	681d      	ldr	r5, [r3, #0]
   d6cf6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d6cf8:	4604      	mov	r4, r0
   d6cfa:	b97b      	cbnz	r3, d6d1c <srand+0x2c>
   d6cfc:	2018      	movs	r0, #24
   d6cfe:	f7fd fc63 	bl	d45c8 <malloc>
   d6d02:	4a0a      	ldr	r2, [pc, #40]	; (d6d2c <srand+0x3c>)
   d6d04:	4b0a      	ldr	r3, [pc, #40]	; (d6d30 <srand+0x40>)
   d6d06:	63a8      	str	r0, [r5, #56]	; 0x38
   d6d08:	e9c0 2300 	strd	r2, r3, [r0]
   d6d0c:	4b09      	ldr	r3, [pc, #36]	; (d6d34 <srand+0x44>)
   d6d0e:	6083      	str	r3, [r0, #8]
   d6d10:	230b      	movs	r3, #11
   d6d12:	8183      	strh	r3, [r0, #12]
   d6d14:	2201      	movs	r2, #1
   d6d16:	2300      	movs	r3, #0
   d6d18:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6d1c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d6d1e:	2200      	movs	r2, #0
   d6d20:	611c      	str	r4, [r3, #16]
   d6d22:	615a      	str	r2, [r3, #20]
   d6d24:	bd38      	pop	{r3, r4, r5, pc}
   d6d26:	bf00      	nop
   d6d28:	2003e6ec 	.word	0x2003e6ec
   d6d2c:	abcd330e 	.word	0xabcd330e
   d6d30:	e66d1234 	.word	0xe66d1234
   d6d34:	0005deec 	.word	0x0005deec

000d6d38 <strcmp>:
   d6d38:	f810 2b01 	ldrb.w	r2, [r0], #1
   d6d3c:	f811 3b01 	ldrb.w	r3, [r1], #1
   d6d40:	2a01      	cmp	r2, #1
   d6d42:	bf28      	it	cs
   d6d44:	429a      	cmpcs	r2, r3
   d6d46:	d0f7      	beq.n	d6d38 <strcmp>
   d6d48:	1ad0      	subs	r0, r2, r3
   d6d4a:	4770      	bx	lr

000d6d4c <strcpy>:
   d6d4c:	4603      	mov	r3, r0
   d6d4e:	f811 2b01 	ldrb.w	r2, [r1], #1
   d6d52:	f803 2b01 	strb.w	r2, [r3], #1
   d6d56:	2a00      	cmp	r2, #0
   d6d58:	d1f9      	bne.n	d6d4e <strcpy+0x2>
   d6d5a:	4770      	bx	lr

000d6d5c <strdup>:
   d6d5c:	4b02      	ldr	r3, [pc, #8]	; (d6d68 <strdup+0xc>)
   d6d5e:	4601      	mov	r1, r0
   d6d60:	6818      	ldr	r0, [r3, #0]
   d6d62:	f000 b803 	b.w	d6d6c <_strdup_r>
   d6d66:	bf00      	nop
   d6d68:	2003e6ec 	.word	0x2003e6ec

000d6d6c <_strdup_r>:
   d6d6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6d6e:	4604      	mov	r4, r0
   d6d70:	4608      	mov	r0, r1
   d6d72:	460d      	mov	r5, r1
   d6d74:	f000 f80f 	bl	d6d96 <strlen>
   d6d78:	1c42      	adds	r2, r0, #1
   d6d7a:	4611      	mov	r1, r2
   d6d7c:	4620      	mov	r0, r4
   d6d7e:	9201      	str	r2, [sp, #4]
   d6d80:	f7fd fc52 	bl	d4628 <_malloc_r>
   d6d84:	4604      	mov	r4, r0
   d6d86:	b118      	cbz	r0, d6d90 <_strdup_r+0x24>
   d6d88:	9a01      	ldr	r2, [sp, #4]
   d6d8a:	4629      	mov	r1, r5
   d6d8c:	f7ff ff80 	bl	d6c90 <memcpy>
   d6d90:	4620      	mov	r0, r4
   d6d92:	b003      	add	sp, #12
   d6d94:	bd30      	pop	{r4, r5, pc}

000d6d96 <strlen>:
   d6d96:	4603      	mov	r3, r0
   d6d98:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6d9c:	2a00      	cmp	r2, #0
   d6d9e:	d1fb      	bne.n	d6d98 <strlen+0x2>
   d6da0:	1a18      	subs	r0, r3, r0
   d6da2:	3801      	subs	r0, #1
   d6da4:	4770      	bx	lr

000d6da6 <strnlen>:
   d6da6:	b510      	push	{r4, lr}
   d6da8:	4602      	mov	r2, r0
   d6daa:	4401      	add	r1, r0
   d6dac:	428a      	cmp	r2, r1
   d6dae:	4613      	mov	r3, r2
   d6db0:	d101      	bne.n	d6db6 <strnlen+0x10>
   d6db2:	1a18      	subs	r0, r3, r0
   d6db4:	bd10      	pop	{r4, pc}
   d6db6:	781c      	ldrb	r4, [r3, #0]
   d6db8:	3201      	adds	r2, #1
   d6dba:	2c00      	cmp	r4, #0
   d6dbc:	d1f6      	bne.n	d6dac <strnlen+0x6>
   d6dbe:	e7f8      	b.n	d6db2 <strnlen+0xc>

000d6dc0 <dynalib_user>:
   d6dc0:	401d 000d 4059 000d 4081 000d 4085 000d     .@..Y@...@...@..
   d6dd0:	0000 0000 207b 6422 7665 6369 6965 2264     ....{ "deviceid"
   d6de0:	203a 2522 3230 2058 3025 5832 2520 3230     : "%02X %02X %02
   d6df0:	2258 202c 5422 7079 2065 4449 3a22 2220     X", "Type ID": "
   d6e00:	3025 5832 2c22 2220 7645 6e65 2074 6144     %02X", "Event Da
   d6e10:	6174 3a22 2220 3025 5832 2c22 2220 6f43     ta": "%02X", "Co
   d6e20:	746e 6f72 206c 6144 6174 3a22 2220 3025     ntrol Data": "%0
   d6e30:	5832 7d22 5200 3542 2030 6144 6174 7000     2X"}.RB50 Data.p
   d6e40:	6275 696c 6873 6465 202c 3025 5832 2500     ublished, %02X.%
   d6e50:	322e 0078 0020 7254 6575 4600 6c61 6573     .2x. .True.False
   d6e60:	4200 3a38 4337 363a 3a46 4131 453a 3a33     .B8:7C:6F:1A:E3:
   d6e70:	3133 0000                                   31..

000d6e74 <_ZTVN5spark13EthernetClassE>:
	...
   d6e7c:	46a7 000d 469d 000d 4693 000d 4689 000d     .F...F...F...F..
   d6e8c:	467d 000d 4671 000d 68f5 000d 68fd 000d     }F..qF...h...h..
   d6e9c:	4665 000d 465d 000d 4653 000d 4649 000d     eF..]F..SF..IF..
   d6eac:	692d 000d 6977 6972 676e 622e 656c 5300     -i..wiring.ble.S
   d6ebc:	6174 7472 6420 7369 6f63 6576 6972 676e     tart discovering
   d6ecc:	7320 7265 6976 6563 2e73 4600 6961 656c      services..Faile
   d6edc:	2064 6f74 6120 6c6c 636f 7461 2065 656d     d to allocate me
   d6eec:	6f6d 7972 0021 6146 6c69 6465 7420 206f     mory!.Failed to 
   d6efc:	7061 6570 646e 7020 6565 2072 6543 746e     append peer Cent
   d6f0c:	6172 206c 6564 6976 6563 002e 6f43 6e6e     ral device..Conn
   d6f1c:	6365 6574 2064 7962 4320 6e65 7274 6c61     ected by Central
   d6f2c:	6420 7665 6369 2e65 4400 7369 6f63 6e6e      device..Disconn
   d6f3c:	6365 6574 2064 7962 7220 6d65 746f 2065     ected by remote 
   d6f4c:	6564 6976 6563 002e                         device..

000d6f54 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d6f5c:	48ef 000d 4911 000d 512f 000d 491f 000d     .H...I../Q...I..
   d6f6c:	48f1 000d                                   .H..

000d6f70 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   d6f78:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
   d6f88:	7061 0070 5925 252d 2d6d 6425 2554 3a48     app.%Y-%m-%dT%H:
   d6f98:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000d6fa8 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d6fb0:	5fb9 000d 5fbf 000d 5ffd 000d 5fcd 000d     ._..._..._..._..
   d6fc0:	5fbb 000d                                   ._..

000d6fc4 <_ZTV9IPAddress>:
	...
   d6fcc:	6501 000d 64f1 000d 64f3 000d               .e...d...d..

000d6fd8 <_ZTV9USBSerial>:
	...
   d6fe0:	65e1 000d 6649 000d 661f 000d 5d15 000d     .e..If...f...]..
   d6ff0:	6611 000d 65e3 000d 65f3 000d 6643 000d     .f...e...e..Cf..
   d7000:	6603 000d 65dd 000d                         .f...e..

000d7008 <_ZTV11USARTSerial>:
	...
   d7010:	66ed 000d 6759 000d 6731 000d 5d15 000d     .f..Yg..1g...]..
   d7020:	6701 000d 671d 000d 670f 000d 672b 000d     .g...g...g..+g..
   d7030:	66ef 000d 66f3 000d                         .f...f..

000d7038 <_ZTVN5spark9WiFiClassE>:
	...
   d7040:	6897 000d 688d 000d 6883 000d 6845 000d     .h...h...h..Eh..
   d7050:	5e3d 000d 6877 000d 68f5 000d 68fd 000d     =^..wh...h...h..
   d7060:	686b 000d 6863 000d 6859 000d 684f 000d     kh..ch..Yh..Oh..
   d7070:	692d 000d                                   -i..

000d7074 <_ZTVN5spark12NetworkClassE>:
	...
   d707c:	68b5 000d 68bf 000d 68c9 000d 68d3 000d     .h...h...h...h..
   d708c:	68dd 000d 68e9 000d 68f5 000d 68fd 000d     .h...h...h...h..
   d709c:	6905 000d 6911 000d 6919 000d 6923 000d     .i...i...i..#i..
   d70ac:	692d 000d                                   -i..

000d70b0 <_ZTSSt19_Sp_make_shared_tag>:
   d70b0:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   d70c0:	6572 5f64 6174 0067                         red_tag.

000d70c8 <_ZTISt19_Sp_make_shared_tag>:
   d70c8:	7108 000d 70b0 000d                         .q...p..

000d70d0 <_ZTIN10__cxxabiv117__class_type_infoE>:
   d70d0:	7168 000d 70dc 000d 718c 000d               hq...p...q..

000d70dc <_ZTSN10__cxxabiv117__class_type_infoE>:
   d70dc:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   d70ec:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   d70fc:	0045 0000                                   E...

000d7100 <_ZTVN10__cxxabiv117__class_type_infoE>:
   d7100:	0000 0000 70d0 000d 6a81 000d 6a95 000d     .....p...j...j..
   d7110:	6c29 000d 6c29 000d 6aff 000d 6a41 000d     )l..)l...j..Aj..
   d7120:	6ae7 000d 6aa9 000d 6a75 000d               .j...j..uj..

000d712c <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   d712c:	7168 000d 7138 000d 70d0 000d               hq..8q...p..

000d7138 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   d7138:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   d7148:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   d7158:	666e 456f 0000 0000                         nfoE....

000d7160 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   d7160:	0000 0000 712c 000d 6b29 000d 6b3d 000d     ....,q..)k..=k..
   d7170:	6c29 000d 6c29 000d 6aff 000d 6a41 000d     )l..)l...j..Aj..
   d7180:	6bfd 000d 6b89 000d 6b51 000d               .k...k..Qk..

000d718c <_ZTISt9type_info>:
   d718c:	7108 000d 7194 000d                         .q...q..

000d7194 <_ZTSSt9type_info>:
   d7194:	7453 7439 7079 5f65 6e69 6f66                St9type_info.

000d71a1 <link_const_variable_data_end>:
   d71a1:	00          	.byte	0x00
	...

000d71a4 <link_constructors_location>:
   d71a4:	000d4259 	.word	0x000d4259
   d71a8:	000d46b1 	.word	0x000d46b1
   d71ac:	000d46e5 	.word	0x000d46e5
   d71b0:	000d5ced 	.word	0x000d5ced
   d71b4:	000d5e49 	.word	0x000d5e49
   d71b8:	000d5e59 	.word	0x000d5e59
   d71bc:	000d5e79 	.word	0x000d5e79
   d71c0:	000d68a1 	.word	0x000d68a1
   d71c4:	000d6a0d 	.word	0x000d6a0d

000d71c8 <link_constructors_end>:
	...
